
stm32f769-cpp-kws.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fe84  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001b26c  08010088  08010088  00020088  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802b2f4  0802b2f4  00040080  2**0
                  CONTENTS
  4 .ARM          00000008  0802b2f4  0802b2f4  0003b2f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802b2fc  0802b2fc  00040080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802b2fc  0802b2fc  0003b2fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802b300  0802b300  0003b300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0802b304  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000420  20000080  0802b384  00040080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a0  0802b384  000404a0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00040080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005f983  00000000  00000000  000400ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007bcb  00000000  00000000  0009fa31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019d8  00000000  00000000  000a7600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001700  00000000  00000000  000a8fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00037d81  00000000  00000000  000aa6d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000289db  00000000  00000000  000e2459  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018bb77  00000000  00000000  0010ae34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  002969ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007300  00000000  00000000  00296a00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000080 	.word	0x20000080
 800021c:	00000000 	.word	0x00000000
 8000220:	0801006c 	.word	0x0801006c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000084 	.word	0x20000084
 800023c:	0801006c 	.word	0x0801006c

08000240 <arm_bitreversal_32>:
	ENDP

#else

arm_bitreversal_32 PROC
	ADDS     r3,r1,#1
 8000240:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 8000242:	2b01      	cmp	r3, #1
	IT       LS
 8000244:	bf98      	it	ls
	BXLS     lr
 8000246:	4770      	bxls	lr
	PUSH     {r4-r9}
 8000248:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 800024c:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 800024e:	089b      	lsrs	r3, r3, #2

08000250 <arm_bitreversal_32_0>:
arm_bitreversal_32_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 8000250:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 8000254:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 8000258:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 800025a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8
 800025e:	4480      	add	r8, r0
	ADD      r9,r0,r9
 8000260:	4481      	add	r9, r0
	ADD      r2,r0,r2
 8000262:	4402      	add	r2, r0
	ADD      r12,r0,r12
 8000264:	4484      	add	ip, r0
	LDR      r7,[r9,#0]
 8000266:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 800026a:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 800026e:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 8000270:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 8000274:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 8000278:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 800027c:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 8000280:	6014      	str	r4, [r2, #0]
	LDR      r7,[r9,#4]
 8000282:	f8d9 7004 	ldr.w	r7, [r9, #4]
	LDR      r6,[r8,#4]
 8000286:	f8d8 6004 	ldr.w	r6, [r8, #4]
	LDR      r5,[r2,#4]
 800028a:	6855      	ldr	r5, [r2, #4]
	LDR      r4,[r12,#4]
 800028c:	f8dc 4004 	ldr.w	r4, [ip, #4]
	STR      r6,[r9,#4]
 8000290:	f8c9 6004 	str.w	r6, [r9, #4]
	STR      r7,[r8,#4]
 8000294:	f8c8 7004 	str.w	r7, [r8, #4]
	STR      r5,[r12,#4]
 8000298:	f8cc 5004 	str.w	r5, [ip, #4]
	STR      r4,[r2,#4]
 800029c:	6054      	str	r4, [r2, #4]
	ADDS     r1,r1,#8
 800029e:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 80002a0:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_32_0
 80002a2:	d1d5      	bne.n	8000250 <arm_bitreversal_32_0>
	POP      {r4-r9}
 80002a4:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 80002a8:	4770      	bx	lr

080002aa <arm_bitreversal_16>:
	ENDP

arm_bitreversal_16 PROC
	ADDS     r3,r1,#1
 80002aa:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 80002ac:	2b01      	cmp	r3, #1
	IT       LS
 80002ae:	bf98      	it	ls
	BXLS     lr
 80002b0:	4770      	bxls	lr
	PUSH     {r4-r9}
 80002b2:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 80002b6:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 80002b8:	089b      	lsrs	r3, r3, #2

080002ba <arm_bitreversal_16_0>:
arm_bitreversal_16_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 80002ba:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 80002be:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 80002c2:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 80002c4:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8,LSR #1
 80002c8:	eb00 0858 	add.w	r8, r0, r8, lsr #1
	ADD      r9,r0,r9,LSR #1
 80002cc:	eb00 0959 	add.w	r9, r0, r9, lsr #1
	ADD      r2,r0,r2,LSR #1
 80002d0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
	ADD      r12,r0,r12,LSR #1
 80002d4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
	LDR      r7,[r9,#0]
 80002d8:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 80002dc:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 80002e0:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 80002e2:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 80002e6:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 80002ea:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 80002ee:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 80002f2:	6014      	str	r4, [r2, #0]
	ADDS     r1,r1,#8
 80002f4:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 80002f6:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_16_0
 80002f8:	d1df      	bne.n	80002ba <arm_bitreversal_16_0>
	POP      {r4-r9}
 80002fa:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 80002fe:	4770      	bx	lr

08000300 <strlen>:
 8000300:	4603      	mov	r3, r0
 8000302:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000306:	2a00      	cmp	r2, #0
 8000308:	d1fb      	bne.n	8000302 <strlen+0x2>
 800030a:	1a18      	subs	r0, r3, r0
 800030c:	3801      	subs	r0, #1
 800030e:	4770      	bx	lr

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96e 	b.w	80006a4 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	4604      	mov	r4, r0
 80003e8:	468c      	mov	ip, r1
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	f040 8083 	bne.w	80004f6 <__udivmoddi4+0x116>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4617      	mov	r7, r2
 80003f4:	d947      	bls.n	8000486 <__udivmoddi4+0xa6>
 80003f6:	fab2 f282 	clz	r2, r2
 80003fa:	b142      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fc:	f1c2 0020 	rsb	r0, r2, #32
 8000400:	fa24 f000 	lsr.w	r0, r4, r0
 8000404:	4091      	lsls	r1, r2
 8000406:	4097      	lsls	r7, r2
 8000408:	ea40 0c01 	orr.w	ip, r0, r1
 800040c:	4094      	lsls	r4, r2
 800040e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fbbc f6f8 	udiv	r6, ip, r8
 8000418:	fa1f fe87 	uxth.w	lr, r7
 800041c:	fb08 c116 	mls	r1, r8, r6, ip
 8000420:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000424:	fb06 f10e 	mul.w	r1, r6, lr
 8000428:	4299      	cmp	r1, r3
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x60>
 800042c:	18fb      	adds	r3, r7, r3
 800042e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000432:	f080 8119 	bcs.w	8000668 <__udivmoddi4+0x288>
 8000436:	4299      	cmp	r1, r3
 8000438:	f240 8116 	bls.w	8000668 <__udivmoddi4+0x288>
 800043c:	3e02      	subs	r6, #2
 800043e:	443b      	add	r3, r7
 8000440:	1a5b      	subs	r3, r3, r1
 8000442:	b2a4      	uxth	r4, r4
 8000444:	fbb3 f0f8 	udiv	r0, r3, r8
 8000448:	fb08 3310 	mls	r3, r8, r0, r3
 800044c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000450:	fb00 fe0e 	mul.w	lr, r0, lr
 8000454:	45a6      	cmp	lr, r4
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x8c>
 8000458:	193c      	adds	r4, r7, r4
 800045a:	f100 33ff 	add.w	r3, r0, #4294967295
 800045e:	f080 8105 	bcs.w	800066c <__udivmoddi4+0x28c>
 8000462:	45a6      	cmp	lr, r4
 8000464:	f240 8102 	bls.w	800066c <__udivmoddi4+0x28c>
 8000468:	3802      	subs	r0, #2
 800046a:	443c      	add	r4, r7
 800046c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	2600      	movs	r6, #0
 8000476:	b11d      	cbz	r5, 8000480 <__udivmoddi4+0xa0>
 8000478:	40d4      	lsrs	r4, r2
 800047a:	2300      	movs	r3, #0
 800047c:	e9c5 4300 	strd	r4, r3, [r5]
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	b902      	cbnz	r2, 800048a <__udivmoddi4+0xaa>
 8000488:	deff      	udf	#255	; 0xff
 800048a:	fab2 f282 	clz	r2, r2
 800048e:	2a00      	cmp	r2, #0
 8000490:	d150      	bne.n	8000534 <__udivmoddi4+0x154>
 8000492:	1bcb      	subs	r3, r1, r7
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	fa1f f887 	uxth.w	r8, r7
 800049c:	2601      	movs	r6, #1
 800049e:	fbb3 fcfe 	udiv	ip, r3, lr
 80004a2:	0c21      	lsrs	r1, r4, #16
 80004a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80004a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ac:	fb08 f30c 	mul.w	r3, r8, ip
 80004b0:	428b      	cmp	r3, r1
 80004b2:	d907      	bls.n	80004c4 <__udivmoddi4+0xe4>
 80004b4:	1879      	adds	r1, r7, r1
 80004b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ba:	d202      	bcs.n	80004c2 <__udivmoddi4+0xe2>
 80004bc:	428b      	cmp	r3, r1
 80004be:	f200 80e9 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004c2:	4684      	mov	ip, r0
 80004c4:	1ac9      	subs	r1, r1, r3
 80004c6:	b2a3      	uxth	r3, r4
 80004c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80004d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004d4:	fb08 f800 	mul.w	r8, r8, r0
 80004d8:	45a0      	cmp	r8, r4
 80004da:	d907      	bls.n	80004ec <__udivmoddi4+0x10c>
 80004dc:	193c      	adds	r4, r7, r4
 80004de:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x10a>
 80004e4:	45a0      	cmp	r8, r4
 80004e6:	f200 80d9 	bhi.w	800069c <__udivmoddi4+0x2bc>
 80004ea:	4618      	mov	r0, r3
 80004ec:	eba4 0408 	sub.w	r4, r4, r8
 80004f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004f4:	e7bf      	b.n	8000476 <__udivmoddi4+0x96>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d909      	bls.n	800050e <__udivmoddi4+0x12e>
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	f000 80b1 	beq.w	8000662 <__udivmoddi4+0x282>
 8000500:	2600      	movs	r6, #0
 8000502:	e9c5 0100 	strd	r0, r1, [r5]
 8000506:	4630      	mov	r0, r6
 8000508:	4631      	mov	r1, r6
 800050a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050e:	fab3 f683 	clz	r6, r3
 8000512:	2e00      	cmp	r6, #0
 8000514:	d14a      	bne.n	80005ac <__udivmoddi4+0x1cc>
 8000516:	428b      	cmp	r3, r1
 8000518:	d302      	bcc.n	8000520 <__udivmoddi4+0x140>
 800051a:	4282      	cmp	r2, r0
 800051c:	f200 80b8 	bhi.w	8000690 <__udivmoddi4+0x2b0>
 8000520:	1a84      	subs	r4, r0, r2
 8000522:	eb61 0103 	sbc.w	r1, r1, r3
 8000526:	2001      	movs	r0, #1
 8000528:	468c      	mov	ip, r1
 800052a:	2d00      	cmp	r5, #0
 800052c:	d0a8      	beq.n	8000480 <__udivmoddi4+0xa0>
 800052e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000532:	e7a5      	b.n	8000480 <__udivmoddi4+0xa0>
 8000534:	f1c2 0320 	rsb	r3, r2, #32
 8000538:	fa20 f603 	lsr.w	r6, r0, r3
 800053c:	4097      	lsls	r7, r2
 800053e:	fa01 f002 	lsl.w	r0, r1, r2
 8000542:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000546:	40d9      	lsrs	r1, r3
 8000548:	4330      	orrs	r0, r6
 800054a:	0c03      	lsrs	r3, r0, #16
 800054c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000550:	fa1f f887 	uxth.w	r8, r7
 8000554:	fb0e 1116 	mls	r1, lr, r6, r1
 8000558:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800055c:	fb06 f108 	mul.w	r1, r6, r8
 8000560:	4299      	cmp	r1, r3
 8000562:	fa04 f402 	lsl.w	r4, r4, r2
 8000566:	d909      	bls.n	800057c <__udivmoddi4+0x19c>
 8000568:	18fb      	adds	r3, r7, r3
 800056a:	f106 3cff 	add.w	ip, r6, #4294967295
 800056e:	f080 808d 	bcs.w	800068c <__udivmoddi4+0x2ac>
 8000572:	4299      	cmp	r1, r3
 8000574:	f240 808a 	bls.w	800068c <__udivmoddi4+0x2ac>
 8000578:	3e02      	subs	r6, #2
 800057a:	443b      	add	r3, r7
 800057c:	1a5b      	subs	r3, r3, r1
 800057e:	b281      	uxth	r1, r0
 8000580:	fbb3 f0fe 	udiv	r0, r3, lr
 8000584:	fb0e 3310 	mls	r3, lr, r0, r3
 8000588:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800058c:	fb00 f308 	mul.w	r3, r0, r8
 8000590:	428b      	cmp	r3, r1
 8000592:	d907      	bls.n	80005a4 <__udivmoddi4+0x1c4>
 8000594:	1879      	adds	r1, r7, r1
 8000596:	f100 3cff 	add.w	ip, r0, #4294967295
 800059a:	d273      	bcs.n	8000684 <__udivmoddi4+0x2a4>
 800059c:	428b      	cmp	r3, r1
 800059e:	d971      	bls.n	8000684 <__udivmoddi4+0x2a4>
 80005a0:	3802      	subs	r0, #2
 80005a2:	4439      	add	r1, r7
 80005a4:	1acb      	subs	r3, r1, r3
 80005a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80005aa:	e778      	b.n	800049e <__udivmoddi4+0xbe>
 80005ac:	f1c6 0c20 	rsb	ip, r6, #32
 80005b0:	fa03 f406 	lsl.w	r4, r3, r6
 80005b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80005b8:	431c      	orrs	r4, r3
 80005ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80005be:	fa01 f306 	lsl.w	r3, r1, r6
 80005c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005ca:	431f      	orrs	r7, r3
 80005cc:	0c3b      	lsrs	r3, r7, #16
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fa1f f884 	uxth.w	r8, r4
 80005d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005de:	fb09 fa08 	mul.w	sl, r9, r8
 80005e2:	458a      	cmp	sl, r1
 80005e4:	fa02 f206 	lsl.w	r2, r2, r6
 80005e8:	fa00 f306 	lsl.w	r3, r0, r6
 80005ec:	d908      	bls.n	8000600 <__udivmoddi4+0x220>
 80005ee:	1861      	adds	r1, r4, r1
 80005f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005f4:	d248      	bcs.n	8000688 <__udivmoddi4+0x2a8>
 80005f6:	458a      	cmp	sl, r1
 80005f8:	d946      	bls.n	8000688 <__udivmoddi4+0x2a8>
 80005fa:	f1a9 0902 	sub.w	r9, r9, #2
 80005fe:	4421      	add	r1, r4
 8000600:	eba1 010a 	sub.w	r1, r1, sl
 8000604:	b2bf      	uxth	r7, r7
 8000606:	fbb1 f0fe 	udiv	r0, r1, lr
 800060a:	fb0e 1110 	mls	r1, lr, r0, r1
 800060e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000612:	fb00 f808 	mul.w	r8, r0, r8
 8000616:	45b8      	cmp	r8, r7
 8000618:	d907      	bls.n	800062a <__udivmoddi4+0x24a>
 800061a:	19e7      	adds	r7, r4, r7
 800061c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000620:	d22e      	bcs.n	8000680 <__udivmoddi4+0x2a0>
 8000622:	45b8      	cmp	r8, r7
 8000624:	d92c      	bls.n	8000680 <__udivmoddi4+0x2a0>
 8000626:	3802      	subs	r0, #2
 8000628:	4427      	add	r7, r4
 800062a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800062e:	eba7 0708 	sub.w	r7, r7, r8
 8000632:	fba0 8902 	umull	r8, r9, r0, r2
 8000636:	454f      	cmp	r7, r9
 8000638:	46c6      	mov	lr, r8
 800063a:	4649      	mov	r1, r9
 800063c:	d31a      	bcc.n	8000674 <__udivmoddi4+0x294>
 800063e:	d017      	beq.n	8000670 <__udivmoddi4+0x290>
 8000640:	b15d      	cbz	r5, 800065a <__udivmoddi4+0x27a>
 8000642:	ebb3 020e 	subs.w	r2, r3, lr
 8000646:	eb67 0701 	sbc.w	r7, r7, r1
 800064a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800064e:	40f2      	lsrs	r2, r6
 8000650:	ea4c 0202 	orr.w	r2, ip, r2
 8000654:	40f7      	lsrs	r7, r6
 8000656:	e9c5 2700 	strd	r2, r7, [r5]
 800065a:	2600      	movs	r6, #0
 800065c:	4631      	mov	r1, r6
 800065e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000662:	462e      	mov	r6, r5
 8000664:	4628      	mov	r0, r5
 8000666:	e70b      	b.n	8000480 <__udivmoddi4+0xa0>
 8000668:	4606      	mov	r6, r0
 800066a:	e6e9      	b.n	8000440 <__udivmoddi4+0x60>
 800066c:	4618      	mov	r0, r3
 800066e:	e6fd      	b.n	800046c <__udivmoddi4+0x8c>
 8000670:	4543      	cmp	r3, r8
 8000672:	d2e5      	bcs.n	8000640 <__udivmoddi4+0x260>
 8000674:	ebb8 0e02 	subs.w	lr, r8, r2
 8000678:	eb69 0104 	sbc.w	r1, r9, r4
 800067c:	3801      	subs	r0, #1
 800067e:	e7df      	b.n	8000640 <__udivmoddi4+0x260>
 8000680:	4608      	mov	r0, r1
 8000682:	e7d2      	b.n	800062a <__udivmoddi4+0x24a>
 8000684:	4660      	mov	r0, ip
 8000686:	e78d      	b.n	80005a4 <__udivmoddi4+0x1c4>
 8000688:	4681      	mov	r9, r0
 800068a:	e7b9      	b.n	8000600 <__udivmoddi4+0x220>
 800068c:	4666      	mov	r6, ip
 800068e:	e775      	b.n	800057c <__udivmoddi4+0x19c>
 8000690:	4630      	mov	r0, r6
 8000692:	e74a      	b.n	800052a <__udivmoddi4+0x14a>
 8000694:	f1ac 0c02 	sub.w	ip, ip, #2
 8000698:	4439      	add	r1, r7
 800069a:	e713      	b.n	80004c4 <__udivmoddi4+0xe4>
 800069c:	3802      	subs	r0, #2
 800069e:	443c      	add	r4, r7
 80006a0:	e724      	b.n	80004ec <__udivmoddi4+0x10c>
 80006a2:	bf00      	nop

080006a4 <__aeabi_idiv0>:
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop

080006a8 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	ed87 0a01 	vstr	s0, [r7, #4]
 80006b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80006b6:	fef8 7a67 	vrinta.f32	s15, s15
 80006ba:	eeb0 0a67 	vmov.f32	s0, s15
 80006be:	370c      	adds	r7, #12
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr

080006c8 <_ZN4MFCC8MelScaleEf>:

    static inline float InverseMelScale(float mel_freq) {
      return 700.0f * (expf (mel_freq / 1127.0f) - 1.0f);
    }

    static inline float MelScale(float freq) {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	ed87 0a01 	vstr	s0, [r7, #4]
      return 1127.0f * logf (1.0f + freq / 700.0f);
 80006d2:	ed97 7a01 	vldr	s14, [r7, #4]
 80006d6:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8000704 <_ZN4MFCC8MelScaleEf+0x3c>
 80006da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80006e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80006e6:	eeb0 0a67 	vmov.f32	s0, s15
 80006ea:	f00e f995 	bl	800ea18 <logf>
 80006ee:	eef0 7a40 	vmov.f32	s15, s0
 80006f2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000708 <_ZN4MFCC8MelScaleEf+0x40>
 80006f6:	ee67 7a87 	vmul.f32	s15, s15, s14
    }
 80006fa:	eeb0 0a67 	vmov.f32	s0, s15
 80006fe:	3708      	adds	r7, #8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	442f0000 	.word	0x442f0000
 8000708:	448ce000 	.word	0x448ce000

0800070c <_ZSt3logIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    log(_Tp __x)
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
    { return __builtin_log(__x); }
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	ee07 3a90 	vmov	s15, r3
 800071a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800071e:	eeb0 0b47 	vmov.f64	d0, d7
 8000722:	f00d fc31 	bl	800df88 <log>
 8000726:	eeb0 7b40 	vmov.f64	d7, d0
 800072a:	eeb0 0b47 	vmov.f64	d0, d7
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <_ZSt3powIidEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
 800073a:	60f8      	str	r0, [r7, #12]
 800073c:	ed87 0b00 	vstr	d0, [r7]
      return pow(__type(__x), __type(__y));
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	ee07 3a90 	vmov	s15, r3
 8000746:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800074a:	ed97 1b00 	vldr	d1, [r7]
 800074e:	eeb0 0b47 	vmov.f64	d0, d7
 8000752:	f00d fddd 	bl	800e310 <pow>
 8000756:	eeb0 7b40 	vmov.f64	d7, d0
    }
 800075a:	eeb0 0b47 	vmov.f64	d0, d7
 800075e:	3710      	adds	r7, #16
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	0000      	movs	r0, r0
	...

08000768 <_ZN4MFCCC1Eiii>:

#include "ML-KWS-for-MCU/MFCC/mfcc.h"
#include "float.h"
#include "arm_math.h"

MFCC::MFCC(int num_mfcc_features, int frame_len, int mfcc_dec_bits) 
 8000768:	b580      	push	{r7, lr}
 800076a:	ed2d 8b02 	vpush	{d8}
 800076e:	b086      	sub	sp, #24
 8000770:	af00      	add	r7, sp, #0
 8000772:	60f8      	str	r0, [r7, #12]
 8000774:	60b9      	str	r1, [r7, #8]
 8000776:	607a      	str	r2, [r7, #4]
 8000778:	603b      	str	r3, [r7, #0]
:num_mfcc_features(num_mfcc_features), 
 frame_len(frame_len), 
 mfcc_dec_bits(mfcc_dec_bits)
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	68ba      	ldr	r2, [r7, #8]
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	687a      	ldr	r2, [r7, #4]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	683a      	ldr	r2, [r7, #0]
 800078a:	60da      	str	r2, [r3, #12]
{

  // Round-up to nearest power of 2.
  frame_len_padded = pow(2,ceil((log(frame_len)/log(2))));
 800078c:	6878      	ldr	r0, [r7, #4]
 800078e:	f7ff ffbd 	bl	800070c <_ZSt3logIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000792:	eeb0 8b40 	vmov.f64	d8, d0
 8000796:	2002      	movs	r0, #2
 8000798:	f7ff ffb8 	bl	800070c <_ZSt3logIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 800079c:	eeb0 6b40 	vmov.f64	d6, d0
 80007a0:	ee88 7b06 	vdiv.f64	d7, d8, d6
 80007a4:	eeb0 0b47 	vmov.f64	d0, d7
 80007a8:	f00e f876 	bl	800e898 <ceil>
 80007ac:	eeb0 7b40 	vmov.f64	d7, d0
 80007b0:	eeb0 0b47 	vmov.f64	d0, d7
 80007b4:	2002      	movs	r0, #2
 80007b6:	f7ff ffbd 	bl	8000734 <_ZSt3powIidEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80007ba:	eeb0 7b40 	vmov.f64	d7, d0
 80007be:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80007c2:	ee17 2a90 	vmov	r2, s15
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	609a      	str	r2, [r3, #8]

  frame = new float[frame_len_padded];
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	689b      	ldr	r3, [r3, #8]
 80007ce:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d201      	bcs.n	80007da <_ZN4MFCCC1Eiii+0x72>
 80007d6:	009b      	lsls	r3, r3, #2
 80007d8:	e001      	b.n	80007de <_ZN4MFCCC1Eiii+0x76>
 80007da:	f04f 33ff 	mov.w	r3, #4294967295
 80007de:	4618      	mov	r0, r3
 80007e0:	f00d fbae 	bl	800df40 <_Znaj>
 80007e4:	4603      	mov	r3, r0
 80007e6:	461a      	mov	r2, r3
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	611a      	str	r2, [r3, #16]
  buffer = new float[frame_len_padded];
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	689b      	ldr	r3, [r3, #8]
 80007f0:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 80007f4:	4293      	cmp	r3, r2
 80007f6:	d201      	bcs.n	80007fc <_ZN4MFCCC1Eiii+0x94>
 80007f8:	009b      	lsls	r3, r3, #2
 80007fa:	e001      	b.n	8000800 <_ZN4MFCCC1Eiii+0x98>
 80007fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000800:	4618      	mov	r0, r3
 8000802:	f00d fb9d 	bl	800df40 <_Znaj>
 8000806:	4603      	mov	r3, r0
 8000808:	461a      	mov	r2, r3
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	615a      	str	r2, [r3, #20]
  mel_energies = new float[NUM_FBANK_BINS];
 800080e:	20a0      	movs	r0, #160	; 0xa0
 8000810:	f00d fb96 	bl	800df40 <_Znaj>
 8000814:	4603      	mov	r3, r0
 8000816:	461a      	mov	r2, r3
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	619a      	str	r2, [r3, #24]

  //create window function
  window_func = new float[frame_len];
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8000822:	4293      	cmp	r3, r2
 8000824:	d201      	bcs.n	800082a <_ZN4MFCCC1Eiii+0xc2>
 8000826:	009b      	lsls	r3, r3, #2
 8000828:	e001      	b.n	800082e <_ZN4MFCCC1Eiii+0xc6>
 800082a:	f04f 33ff 	mov.w	r3, #4294967295
 800082e:	4618      	mov	r0, r3
 8000830:	f00d fb86 	bl	800df40 <_Znaj>
 8000834:	4603      	mov	r3, r0
 8000836:	461a      	mov	r2, r3
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	61da      	str	r2, [r3, #28]
  for (int i = 0; i < frame_len; i++)
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]
 8000840:	697a      	ldr	r2, [r7, #20]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	429a      	cmp	r2, r3
 8000846:	da26      	bge.n	8000896 <_ZN4MFCCC1Eiii+0x12e>
    window_func[i] = 0.5 - 0.5*(M_2PI * ((float)i) / (frame_len));
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	ee07 3a90 	vmov	s15, r3
 800084e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000852:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000856:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 8000900 <_ZN4MFCCC1Eiii+0x198>
 800085a:	ee27 5b06 	vmul.f64	d5, d7, d6
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	ee07 3a90 	vmov	s15, r3
 8000864:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000868:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800086c:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8000870:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000874:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8000878:	ee36 7b47 	vsub.f64	d7, d6, d7
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	69da      	ldr	r2, [r3, #28]
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	009b      	lsls	r3, r3, #2
 8000884:	4413      	add	r3, r2
 8000886:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800088a:	edc3 7a00 	vstr	s15, [r3]
  for (int i = 0; i < frame_len; i++)
 800088e:	697b      	ldr	r3, [r7, #20]
 8000890:	3301      	adds	r3, #1
 8000892:	617b      	str	r3, [r7, #20]
 8000894:	e7d4      	b.n	8000840 <_ZN4MFCCC1Eiii+0xd8>

  //create mel filterbank
  fbank_filter_first = new int32_t[NUM_FBANK_BINS];
 8000896:	20a0      	movs	r0, #160	; 0xa0
 8000898:	f00d fb52 	bl	800df40 <_Znaj>
 800089c:	4603      	mov	r3, r0
 800089e:	461a      	mov	r2, r3
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	621a      	str	r2, [r3, #32]
  fbank_filter_last = new int32_t[NUM_FBANK_BINS];;
 80008a4:	20a0      	movs	r0, #160	; 0xa0
 80008a6:	f00d fb4b 	bl	800df40 <_Znaj>
 80008aa:	4603      	mov	r3, r0
 80008ac:	461a      	mov	r2, r3
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	625a      	str	r2, [r3, #36]	; 0x24
  mel_fbank = create_mel_fbank();
 80008b2:	68f8      	ldr	r0, [r7, #12]
 80008b4:	f000 f928 	bl	8000b08 <_ZN4MFCC16create_mel_fbankEv>
 80008b8:	4602      	mov	r2, r0
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	629a      	str	r2, [r3, #40]	; 0x28
  
  //create DCT matrix
  dct_matrix = create_dct_matrix(NUM_FBANK_BINS, num_mfcc_features);
 80008be:	68ba      	ldr	r2, [r7, #8]
 80008c0:	2128      	movs	r1, #40	; 0x28
 80008c2:	68f8      	ldr	r0, [r7, #12]
 80008c4:	f000 f890 	bl	80009e8 <_ZN4MFCC17create_dct_matrixEll>
 80008c8:	4602      	mov	r2, r0
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	62da      	str	r2, [r3, #44]	; 0x2c

  //initialize FFT
  rfft = new arm_rfft_fast_instance_f32;
 80008ce:	2018      	movs	r0, #24
 80008d0:	f00d fb25 	bl	800df1e <_Znwj>
 80008d4:	4603      	mov	r3, r0
 80008d6:	461a      	mov	r2, r3
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	631a      	str	r2, [r3, #48]	; 0x30
  arm_rfft_fast_init_f32(rfft, frame_len_padded);
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	689b      	ldr	r3, [r3, #8]
 80008e4:	b29b      	uxth	r3, r3
 80008e6:	4619      	mov	r1, r3
 80008e8:	4610      	mov	r0, r2
 80008ea:	f005 fd95 	bl	8006418 <arm_rfft_fast_init_f32>

}
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	4618      	mov	r0, r3
 80008f2:	3718      	adds	r7, #24
 80008f4:	46bd      	mov	sp, r7
 80008f6:	ecbd 8b02 	vpop	{d8}
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	f3af 8000 	nop.w
 8000900:	54442d18 	.word	0x54442d18
 8000904:	401921fb 	.word	0x401921fb

08000908 <_ZN4MFCCD1Ev>:

MFCC::~MFCC() {
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  delete []frame;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	691b      	ldr	r3, [r3, #16]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d004      	beq.n	8000922 <_ZN4MFCCD1Ev+0x1a>
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	691b      	ldr	r3, [r3, #16]
 800091c:	4618      	mov	r0, r3
 800091e:	f00d fafc 	bl	800df1a <_ZdaPv>
  delete [] buffer;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	695b      	ldr	r3, [r3, #20]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d004      	beq.n	8000934 <_ZN4MFCCD1Ev+0x2c>
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	695b      	ldr	r3, [r3, #20]
 800092e:	4618      	mov	r0, r3
 8000930:	f00d faf3 	bl	800df1a <_ZdaPv>
  delete []mel_energies;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	699b      	ldr	r3, [r3, #24]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d004      	beq.n	8000946 <_ZN4MFCCD1Ev+0x3e>
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	4618      	mov	r0, r3
 8000942:	f00d faea 	bl	800df1a <_ZdaPv>
  delete []window_func;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	69db      	ldr	r3, [r3, #28]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d004      	beq.n	8000958 <_ZN4MFCCD1Ev+0x50>
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	69db      	ldr	r3, [r3, #28]
 8000952:	4618      	mov	r0, r3
 8000954:	f00d fae1 	bl	800df1a <_ZdaPv>
  delete []fbank_filter_first;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	6a1b      	ldr	r3, [r3, #32]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d004      	beq.n	800096a <_ZN4MFCCD1Ev+0x62>
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	6a1b      	ldr	r3, [r3, #32]
 8000964:	4618      	mov	r0, r3
 8000966:	f00d fad8 	bl	800df1a <_ZdaPv>
  delete []fbank_filter_last;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800096e:	2b00      	cmp	r3, #0
 8000970:	d004      	beq.n	800097c <_ZN4MFCCD1Ev+0x74>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000976:	4618      	mov	r0, r3
 8000978:	f00d facf 	bl	800df1a <_ZdaPv>
  delete []dct_matrix;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000980:	2b00      	cmp	r3, #0
 8000982:	d004      	beq.n	800098e <_ZN4MFCCD1Ev+0x86>
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000988:	4618      	mov	r0, r3
 800098a:	f00d fac6 	bl	800df1a <_ZdaPv>
  delete rfft;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	2b00      	cmp	r3, #0
 8000994:	d003      	beq.n	800099e <_ZN4MFCCD1Ev+0x96>
 8000996:	2118      	movs	r1, #24
 8000998:	4618      	mov	r0, r3
 800099a:	f00d fabc 	bl	800df16 <_ZdlPvj>
  for(int i=0;i<NUM_FBANK_BINS;i++)
 800099e:	2300      	movs	r3, #0
 80009a0:	60fb      	str	r3, [r7, #12]
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	2b27      	cmp	r3, #39	; 0x27
 80009a6:	dc0f      	bgt.n	80009c8 <_ZN4MFCCD1Ev+0xc0>
    delete mel_fbank[i];
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	009b      	lsls	r3, r3, #2
 80009b0:	4413      	add	r3, r2
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d003      	beq.n	80009c0 <_ZN4MFCCD1Ev+0xb8>
 80009b8:	2104      	movs	r1, #4
 80009ba:	4618      	mov	r0, r3
 80009bc:	f00d faab 	bl	800df16 <_ZdlPvj>
  for(int i=0;i<NUM_FBANK_BINS;i++)
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	3301      	adds	r3, #1
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	e7ec      	b.n	80009a2 <_ZN4MFCCD1Ev+0x9a>
  delete mel_fbank;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d003      	beq.n	80009d8 <_ZN4MFCCD1Ev+0xd0>
 80009d0:	2104      	movs	r1, #4
 80009d2:	4618      	mov	r0, r3
 80009d4:	f00d fa9f 	bl	800df16 <_ZdlPvj>
}
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	4618      	mov	r0, r3
 80009dc:	3710      	adds	r7, #16
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	0000      	movs	r0, r0
 80009e4:	0000      	movs	r0, r0
	...

080009e8 <_ZN4MFCC17create_dct_matrixEll>:

float * MFCC::create_dct_matrix(int32_t input_length, int32_t coefficient_count) {
 80009e8:	b580      	push	{r7, lr}
 80009ea:	ed2d 8b02 	vpush	{d8}
 80009ee:	b08a      	sub	sp, #40	; 0x28
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	60f8      	str	r0, [r7, #12]
 80009f4:	60b9      	str	r1, [r7, #8]
 80009f6:	607a      	str	r2, [r7, #4]
  int32_t k, n;
  float * M = new float[input_length*coefficient_count];
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	687a      	ldr	r2, [r7, #4]
 80009fc:	fb02 f303 	mul.w	r3, r2, r3
 8000a00:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d201      	bcs.n	8000a0c <_ZN4MFCC17create_dct_matrixEll+0x24>
 8000a08:	009b      	lsls	r3, r3, #2
 8000a0a:	e001      	b.n	8000a10 <_ZN4MFCC17create_dct_matrixEll+0x28>
 8000a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a10:	4618      	mov	r0, r3
 8000a12:	f00d fa95 	bl	800df40 <_Znaj>
 8000a16:	4603      	mov	r3, r0
 8000a18:	61fb      	str	r3, [r7, #28]
  float normalizer;
  arm_sqrt_f32(2.0/(float)input_length,&normalizer);
 8000a1a:	68bb      	ldr	r3, [r7, #8]
 8000a1c:	ee07 3a90 	vmov	s15, r3
 8000a20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a24:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000a28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a2c:	edc7 7a06 	vstr	s15, [r7, #24]
 8000a30:	f107 0310 	add.w	r3, r7, #16
 8000a34:	617b      	str	r3, [r7, #20]
   */
  CMSIS_INLINE __STATIC_INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8000a36:	edd7 7a06 	vldr	s15, [r7, #24]
 8000a3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a42:	db09      	blt.n	8000a58 <_ZN4MFCC17create_dct_matrixEll+0x70>
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined ( __ICCARM__ ) && (__VER__ >= 6040000)
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
#else
      *pOut = sqrtf(in);
 8000a44:	ed97 0a06 	vldr	s0, [r7, #24]
 8000a48:	f00e f84c 	bl	800eae4 <sqrtf>
 8000a4c:	eef0 7a40 	vmov.f32	s15, s0
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	edc3 7a00 	vstr	s15, [r3]
#endif

      return (ARM_MATH_SUCCESS);
 8000a56:	e004      	b.n	8000a62 <_ZN4MFCC17create_dct_matrixEll+0x7a>
    }
    else
    {
      *pOut = 0.0f;
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	f04f 0200 	mov.w	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8000a60:	bf00      	nop
  for (k = 0; k < coefficient_count; k++) {
 8000a62:	2300      	movs	r3, #0
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
 8000a66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	da41      	bge.n	8000af2 <_ZN4MFCC17create_dct_matrixEll+0x10a>
    for (n = 0; n < input_length; n++) {
 8000a6e:	2300      	movs	r3, #0
 8000a70:	623b      	str	r3, [r7, #32]
 8000a72:	6a3a      	ldr	r2, [r7, #32]
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	429a      	cmp	r2, r3
 8000a78:	da37      	bge.n	8000aea <_ZN4MFCC17create_dct_matrixEll+0x102>
      M[k*input_length+n] = normalizer * cos( ((double)M_PI)/input_length * (n + 0.5) * k );
 8000a7a:	edd7 7a04 	vldr	s15, [r7, #16]
 8000a7e:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8000a82:	68bb      	ldr	r3, [r7, #8]
 8000a84:	ee07 3a90 	vmov	s15, r3
 8000a88:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000a8c:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 8000b00 <_ZN4MFCC17create_dct_matrixEll+0x118>
 8000a90:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000a94:	6a3b      	ldr	r3, [r7, #32]
 8000a96:	ee07 3a90 	vmov	s15, r3
 8000a9a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000a9e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8000aa2:	ee37 7b05 	vadd.f64	d7, d7, d5
 8000aa6:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aac:	ee07 3a90 	vmov	s15, r3
 8000ab0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000ab4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000ab8:	eeb0 0b47 	vmov.f64	d0, d7
 8000abc:	f00d ff64 	bl	800e988 <cos>
 8000ac0:	eeb0 7b40 	vmov.f64	d7, d0
 8000ac4:	ee28 7b07 	vmul.f64	d7, d8, d7
 8000ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aca:	68ba      	ldr	r2, [r7, #8]
 8000acc:	fb02 f203 	mul.w	r2, r2, r3
 8000ad0:	6a3b      	ldr	r3, [r7, #32]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	009b      	lsls	r3, r3, #2
 8000ad6:	69fa      	ldr	r2, [r7, #28]
 8000ad8:	4413      	add	r3, r2
 8000ada:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ade:	edc3 7a00 	vstr	s15, [r3]
    for (n = 0; n < input_length; n++) {
 8000ae2:	6a3b      	ldr	r3, [r7, #32]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	623b      	str	r3, [r7, #32]
 8000ae8:	e7c3      	b.n	8000a72 <_ZN4MFCC17create_dct_matrixEll+0x8a>
  for (k = 0; k < coefficient_count; k++) {
 8000aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aec:	3301      	adds	r3, #1
 8000aee:	627b      	str	r3, [r7, #36]	; 0x24
 8000af0:	e7b9      	b.n	8000a66 <_ZN4MFCC17create_dct_matrixEll+0x7e>
    }
  }
  return M;
 8000af2:	69fb      	ldr	r3, [r7, #28]
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3728      	adds	r7, #40	; 0x28
 8000af8:	46bd      	mov	sp, r7
 8000afa:	ecbd 8b02 	vpop	{d8}
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	54442d18 	.word	0x54442d18
 8000b04:	400921fb 	.word	0x400921fb

08000b08 <_ZN4MFCC16create_mel_fbankEv>:

float ** MFCC::create_mel_fbank() {
 8000b08:	b590      	push	{r4, r7, lr}
 8000b0a:	b095      	sub	sp, #84	; 0x54
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]

  int32_t bin, i;

  int32_t num_fft_bins = frame_len_padded/2;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	689b      	ldr	r3, [r3, #8]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	da00      	bge.n	8000b1a <_ZN4MFCC16create_mel_fbankEv+0x12>
 8000b18:	3301      	adds	r3, #1
 8000b1a:	105b      	asrs	r3, r3, #1
 8000b1c:	637b      	str	r3, [r7, #52]	; 0x34
  float fft_bin_width = ((float)SAMP_FREQ) / frame_len_padded;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	689b      	ldr	r3, [r3, #8]
 8000b22:	ee07 3a90 	vmov	s15, r3
 8000b26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b2a:	eddf 6a93 	vldr	s13, [pc, #588]	; 8000d78 <_ZN4MFCC16create_mel_fbankEv+0x270>
 8000b2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b32:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
  float mel_low_freq = MelScale(MEL_LOW_FREQ);
 8000b36:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8000b3a:	f7ff fdc5 	bl	80006c8 <_ZN4MFCC8MelScaleEf>
 8000b3e:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
  float mel_high_freq = MelScale(MEL_HIGH_FREQ); 
 8000b42:	ed9f 0a8e 	vldr	s0, [pc, #568]	; 8000d7c <_ZN4MFCC16create_mel_fbankEv+0x274>
 8000b46:	f7ff fdbf 	bl	80006c8 <_ZN4MFCC8MelScaleEf>
 8000b4a:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
  float mel_freq_delta = (mel_high_freq - mel_low_freq) / (NUM_FBANK_BINS+1);
 8000b4e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8000b52:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000b56:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000b5a:	eddf 6a89 	vldr	s13, [pc, #548]	; 8000d80 <_ZN4MFCC16create_mel_fbankEv+0x278>
 8000b5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b62:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

  float *this_bin = new float[num_fft_bins];
 8000b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b68:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d201      	bcs.n	8000b74 <_ZN4MFCC16create_mel_fbankEv+0x6c>
 8000b70:	009b      	lsls	r3, r3, #2
 8000b72:	e001      	b.n	8000b78 <_ZN4MFCC16create_mel_fbankEv+0x70>
 8000b74:	f04f 33ff 	mov.w	r3, #4294967295
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f00d f9e1 	bl	800df40 <_Znaj>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	623b      	str	r3, [r7, #32]

  float ** mel_fbank =  new float*[NUM_FBANK_BINS];
 8000b82:	20a0      	movs	r0, #160	; 0xa0
 8000b84:	f00d f9dc 	bl	800df40 <_Znaj>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	61fb      	str	r3, [r7, #28]

  for (bin = 0; bin < NUM_FBANK_BINS; bin++) {
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000b90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b92:	2b27      	cmp	r3, #39	; 0x27
 8000b94:	f300 80e4 	bgt.w	8000d60 <_ZN4MFCC16create_mel_fbankEv+0x258>

    float left_mel = mel_low_freq + bin * mel_freq_delta;
 8000b98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b9a:	ee07 3a90 	vmov	s15, r3
 8000b9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ba2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000baa:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000bae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bb2:	edc7 7a06 	vstr	s15, [r7, #24]
    float center_mel = mel_low_freq + (bin + 1) * mel_freq_delta;
 8000bb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000bb8:	3301      	adds	r3, #1
 8000bba:	ee07 3a90 	vmov	s15, r3
 8000bbe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bc2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000bc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bca:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000bce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bd2:	edc7 7a05 	vstr	s15, [r7, #20]
    float right_mel = mel_low_freq + (bin + 2) * mel_freq_delta;
 8000bd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000bd8:	3302      	adds	r3, #2
 8000bda:	ee07 3a90 	vmov	s15, r3
 8000bde:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000be2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bea:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000bee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bf2:	edc7 7a04 	vstr	s15, [r7, #16]

    int32_t first_index = -1, last_index = -1;
 8000bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bfa:	647b      	str	r3, [r7, #68]	; 0x44
 8000bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8000c00:	643b      	str	r3, [r7, #64]	; 0x40

    for (i = 0; i < num_fft_bins; i++) {
 8000c02:	2300      	movs	r3, #0
 8000c04:	64bb      	str	r3, [r7, #72]	; 0x48
 8000c06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c0a:	429a      	cmp	r2, r3
 8000c0c:	da65      	bge.n	8000cda <_ZN4MFCC16create_mel_fbankEv+0x1d2>

      float freq = (fft_bin_width * i);  // center freq of this fft bin.
 8000c0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c10:	ee07 3a90 	vmov	s15, r3
 8000c14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c18:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000c1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c20:	edc7 7a03 	vstr	s15, [r7, #12]
      float mel = MelScale(freq);
 8000c24:	ed97 0a03 	vldr	s0, [r7, #12]
 8000c28:	f7ff fd4e 	bl	80006c8 <_ZN4MFCC8MelScaleEf>
 8000c2c:	ed87 0a02 	vstr	s0, [r7, #8]
      this_bin[i] = 0.0;
 8000c30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	6a3a      	ldr	r2, [r7, #32]
 8000c36:	4413      	add	r3, r2
 8000c38:	f04f 0200 	mov.w	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]

      if (mel > left_mel && mel < right_mel) {
 8000c3e:	ed97 7a02 	vldr	s14, [r7, #8]
 8000c42:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c4e:	dd40      	ble.n	8000cd2 <_ZN4MFCC16create_mel_fbankEv+0x1ca>
 8000c50:	ed97 7a02 	vldr	s14, [r7, #8]
 8000c54:	edd7 7a04 	vldr	s15, [r7, #16]
 8000c58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c60:	d537      	bpl.n	8000cd2 <_ZN4MFCC16create_mel_fbankEv+0x1ca>
        float weight;
        if (mel <= center_mel) {
 8000c62:	ed97 7a02 	vldr	s14, [r7, #8]
 8000c66:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c72:	d810      	bhi.n	8000c96 <_ZN4MFCC16create_mel_fbankEv+0x18e>
          weight = (mel - left_mel) / (center_mel - left_mel);
 8000c74:	ed97 7a02 	vldr	s14, [r7, #8]
 8000c78:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c7c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000c80:	ed97 7a05 	vldr	s14, [r7, #20]
 8000c84:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c88:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000c8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c90:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 8000c94:	e00f      	b.n	8000cb6 <_ZN4MFCC16create_mel_fbankEv+0x1ae>
        } else {
          weight = (right_mel-mel) / (right_mel-center_mel);
 8000c96:	ed97 7a04 	vldr	s14, [r7, #16]
 8000c9a:	edd7 7a02 	vldr	s15, [r7, #8]
 8000c9e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000ca2:	ed97 7a04 	vldr	s14, [r7, #16]
 8000ca6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000caa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000cae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cb2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        }
        this_bin[i] = weight;
 8000cb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	6a3a      	ldr	r2, [r7, #32]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000cc0:	601a      	str	r2, [r3, #0]
        if (first_index == -1)
 8000cc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cc8:	d101      	bne.n	8000cce <_ZN4MFCC16create_mel_fbankEv+0x1c6>
          first_index = i;
 8000cca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ccc:	647b      	str	r3, [r7, #68]	; 0x44
        last_index = i;
 8000cce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cd0:	643b      	str	r3, [r7, #64]	; 0x40
    for (i = 0; i < num_fft_bins; i++) {
 8000cd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	64bb      	str	r3, [r7, #72]	; 0x48
 8000cd8:	e795      	b.n	8000c06 <_ZN4MFCC16create_mel_fbankEv+0xfe>
      }
    }

    fbank_filter_first[bin] = first_index;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6a1a      	ldr	r2, [r3, #32]
 8000cde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	4413      	add	r3, r2
 8000ce4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000ce6:	601a      	str	r2, [r3, #0]
    fbank_filter_last[bin] = last_index;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000cec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cee:	009b      	lsls	r3, r3, #2
 8000cf0:	4413      	add	r3, r2
 8000cf2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000cf4:	601a      	str	r2, [r3, #0]
    mel_fbank[bin] = new float[last_index-first_index+1]; 
 8000cf6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000cf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000cfa:	1ad3      	subs	r3, r2, r3
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d201      	bcs.n	8000d0a <_ZN4MFCC16create_mel_fbankEv+0x202>
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	e001      	b.n	8000d0e <_ZN4MFCC16create_mel_fbankEv+0x206>
 8000d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000d10:	0092      	lsls	r2, r2, #2
 8000d12:	69f9      	ldr	r1, [r7, #28]
 8000d14:	188c      	adds	r4, r1, r2
 8000d16:	4618      	mov	r0, r3
 8000d18:	f00d f912 	bl	800df40 <_Znaj>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	6023      	str	r3, [r4, #0]

    int32_t j = 0;
 8000d20:	2300      	movs	r3, #0
 8000d22:	63bb      	str	r3, [r7, #56]	; 0x38
    //copy the part we care about
    for (i = first_index; i <= last_index; i++) {
 8000d24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d26:	64bb      	str	r3, [r7, #72]	; 0x48
 8000d28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000d2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	dc13      	bgt.n	8000d58 <_ZN4MFCC16create_mel_fbankEv+0x250>
      mel_fbank[bin][j++] = this_bin[i];
 8000d30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	6a3a      	ldr	r2, [r7, #32]
 8000d36:	441a      	add	r2, r3
 8000d38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	69f9      	ldr	r1, [r7, #28]
 8000d3e:	440b      	add	r3, r1
 8000d40:	6819      	ldr	r1, [r3, #0]
 8000d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d44:	1c58      	adds	r0, r3, #1
 8000d46:	63b8      	str	r0, [r7, #56]	; 0x38
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	440b      	add	r3, r1
 8000d4c:	6812      	ldr	r2, [r2, #0]
 8000d4e:	601a      	str	r2, [r3, #0]
    for (i = first_index; i <= last_index; i++) {
 8000d50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d52:	3301      	adds	r3, #1
 8000d54:	64bb      	str	r3, [r7, #72]	; 0x48
 8000d56:	e7e7      	b.n	8000d28 <_ZN4MFCC16create_mel_fbankEv+0x220>
  for (bin = 0; bin < NUM_FBANK_BINS; bin++) {
 8000d58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000d5e:	e717      	b.n	8000b90 <_ZN4MFCC16create_mel_fbankEv+0x88>
    }
  }
  delete []this_bin;
 8000d60:	6a3b      	ldr	r3, [r7, #32]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d002      	beq.n	8000d6c <_ZN4MFCC16create_mel_fbankEv+0x264>
 8000d66:	6a38      	ldr	r0, [r7, #32]
 8000d68:	f00d f8d7 	bl	800df1a <_ZdaPv>
  return mel_fbank;
 8000d6c:	69fb      	ldr	r3, [r7, #28]
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3754      	adds	r7, #84	; 0x54
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd90      	pop	{r4, r7, pc}
 8000d76:	bf00      	nop
 8000d78:	467a0000 	.word	0x467a0000
 8000d7c:	457a0000 	.word	0x457a0000
 8000d80:	42240000 	.word	0x42240000

08000d84 <_ZN4MFCC12mfcc_computeEPKsPa>:

void MFCC::mfcc_compute(const int16_t * audio_data, q7_t* mfcc_out) {
 8000d84:	b590      	push	{r4, r7, lr}
 8000d86:	b095      	sub	sp, #84	; 0x54
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	607a      	str	r2, [r7, #4]

  int32_t i, j, bin;

  //TensorFlow way of normalizing .wav data to (-1,1)
  for (i = 0; i < frame_len; i++) {
 8000d90:	2300      	movs	r3, #0
 8000d92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	da18      	bge.n	8000dd0 <_ZN4MFCC12mfcc_computeEPKsPa+0x4c>
    frame[i] = (float)audio_data[i]/(1<<15);
 8000d9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	68ba      	ldr	r2, [r7, #8]
 8000da4:	4413      	add	r3, r2
 8000da6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000daa:	ee07 3a90 	vmov	s15, r3
 8000dae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	691a      	ldr	r2, [r3, #16]
 8000db6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	4413      	add	r3, r2
 8000dbc:	eddf 6aad 	vldr	s13, [pc, #692]	; 8001074 <_ZN4MFCC12mfcc_computeEPKsPa+0x2f0>
 8000dc0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000dc4:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < frame_len; i++) {
 8000dc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000dca:	3301      	adds	r3, #1
 8000dcc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000dce:	e7e1      	b.n	8000d94 <_ZN4MFCC12mfcc_computeEPKsPa+0x10>
  }
  //Fill up remaining with zeros
  memset(&frame[frame_len], 0, sizeof(float) * (frame_len_padded-frame_len));
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	691a      	ldr	r2, [r3, #16]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	18d0      	adds	r0, r2, r3
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	689a      	ldr	r2, [r3, #8]
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	461a      	mov	r2, r3
 8000dea:	2100      	movs	r1, #0
 8000dec:	f00e fcd4 	bl	800f798 <memset>

  for (i = 0; i < frame_len; i++) {
 8000df0:	2300      	movs	r3, #0
 8000df2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	da1a      	bge.n	8000e34 <_ZN4MFCC12mfcc_computeEPKsPa+0xb0>
    frame[i] *= window_func[i];
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	691a      	ldr	r2, [r3, #16]
 8000e02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	4413      	add	r3, r2
 8000e08:	ed93 7a00 	vldr	s14, [r3]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	69da      	ldr	r2, [r3, #28]
 8000e10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	4413      	add	r3, r2
 8000e16:	edd3 7a00 	vldr	s15, [r3]
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	691a      	ldr	r2, [r3, #16]
 8000e1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	4413      	add	r3, r2
 8000e24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e28:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < frame_len; i++) {
 8000e2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e2e:	3301      	adds	r3, #1
 8000e30:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000e32:	e7df      	b.n	8000df4 <_ZN4MFCC12mfcc_computeEPKsPa+0x70>
  }

  //Compute FFT
  arm_rfft_fast_f32(rfft, frame, buffer, 0);
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	6919      	ldr	r1, [r3, #16]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	695a      	ldr	r2, [r3, #20]
 8000e40:	2300      	movs	r3, #0
 8000e42:	f005 fabb 	bl	80063bc <arm_rfft_fast_f32>

  //Convert to power spectrum
  //frame is stored as [real0, realN/2-1, real1, im1, real2, im2, ...]
  int32_t half_dim = frame_len_padded/2;
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	da00      	bge.n	8000e50 <_ZN4MFCC12mfcc_computeEPKsPa+0xcc>
 8000e4e:	3301      	adds	r3, #1
 8000e50:	105b      	asrs	r3, r3, #1
 8000e52:	63bb      	str	r3, [r7, #56]	; 0x38
  float first_energy = buffer[0] * buffer[0],
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	695b      	ldr	r3, [r3, #20]
 8000e58:	ed93 7a00 	vldr	s14, [r3]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	695b      	ldr	r3, [r3, #20]
 8000e60:	edd3 7a00 	vldr	s15, [r3]
 8000e64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e68:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        last_energy =  buffer[1] * buffer[1];  // handle this special case
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	695b      	ldr	r3, [r3, #20]
 8000e70:	3304      	adds	r3, #4
 8000e72:	ed93 7a00 	vldr	s14, [r3]
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	695b      	ldr	r3, [r3, #20]
 8000e7a:	3304      	adds	r3, #4
 8000e7c:	edd3 7a00 	vldr	s15, [r3]
 8000e80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e84:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
  for (i = 1; i < half_dim; i++) {
 8000e88:	2301      	movs	r3, #1
 8000e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000e8c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e90:	429a      	cmp	r2, r3
 8000e92:	da23      	bge.n	8000edc <_ZN4MFCC12mfcc_computeEPKsPa+0x158>
    float real = buffer[i*2], im = buffer[i*2 + 1];
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	695a      	ldr	r2, [r3, #20]
 8000e98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e9a:	00db      	lsls	r3, r3, #3
 8000e9c:	4413      	add	r3, r2
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	695a      	ldr	r2, [r3, #20]
 8000ea6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ea8:	00db      	lsls	r3, r3, #3
 8000eaa:	3304      	adds	r3, #4
 8000eac:	4413      	add	r3, r2
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	62bb      	str	r3, [r7, #40]	; 0x28
    buffer[i] = real*real + im*im;
 8000eb2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000eb6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000eba:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000ebe:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	695a      	ldr	r2, [r3, #20]
 8000ec6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	4413      	add	r3, r2
 8000ecc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ed0:	edc3 7a00 	vstr	s15, [r3]
  for (i = 1; i < half_dim; i++) {
 8000ed4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000eda:	e7d7      	b.n	8000e8c <_ZN4MFCC12mfcc_computeEPKsPa+0x108>
  }
  buffer[0] = first_energy;
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	695b      	ldr	r3, [r3, #20]
 8000ee0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ee2:	601a      	str	r2, [r3, #0]
  buffer[half_dim] = last_energy;  
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	695a      	ldr	r2, [r3, #20]
 8000ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	4413      	add	r3, r2
 8000eee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000ef0:	601a      	str	r2, [r3, #0]
 
  float sqrt_data;
  //Apply mel filterbanks
  for (bin = 0; bin < NUM_FBANK_BINS; bin++) {
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	647b      	str	r3, [r7, #68]	; 0x44
 8000ef6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ef8:	2b27      	cmp	r3, #39	; 0x27
 8000efa:	dc6d      	bgt.n	8000fd8 <_ZN4MFCC12mfcc_computeEPKsPa+0x254>
    j = 0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	64bb      	str	r3, [r7, #72]	; 0x48
    float mel_energy = 0;
 8000f00:	f04f 0300 	mov.w	r3, #0
 8000f04:	643b      	str	r3, [r7, #64]	; 0x40
    int32_t first_index = fbank_filter_first[bin];
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	6a1a      	ldr	r2, [r3, #32]
 8000f0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	4413      	add	r3, r2
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t last_index = fbank_filter_last[bin];
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	4413      	add	r3, r2
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	623b      	str	r3, [r7, #32]
    for (i = first_index; i <= last_index; i++) {
 8000f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f24:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000f26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000f28:	6a3b      	ldr	r3, [r7, #32]
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	dc3a      	bgt.n	8000fa4 <_ZN4MFCC12mfcc_computeEPKsPa+0x220>
      arm_sqrt_f32(buffer[i],&sqrt_data);
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	695a      	ldr	r2, [r3, #20]
 8000f32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	4413      	add	r3, r2
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	61fb      	str	r3, [r7, #28]
 8000f3c:	f107 0314 	add.w	r3, r7, #20
 8000f40:	61bb      	str	r3, [r7, #24]
    if (in >= 0.0f)
 8000f42:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f46:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f4e:	db09      	blt.n	8000f64 <_ZN4MFCC12mfcc_computeEPKsPa+0x1e0>
      *pOut = sqrtf(in);
 8000f50:	ed97 0a07 	vldr	s0, [r7, #28]
 8000f54:	f00d fdc6 	bl	800eae4 <sqrtf>
 8000f58:	eef0 7a40 	vmov.f32	s15, s0
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 8000f62:	e004      	b.n	8000f6e <_ZN4MFCC12mfcc_computeEPKsPa+0x1ea>
      *pOut = 0.0f;
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	f04f 0200 	mov.w	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8000f6c:	bf00      	nop
      mel_energy += (sqrt_data) * mel_fbank[bin][j++];
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	4413      	add	r3, r2
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f7c:	1c59      	adds	r1, r3, #1
 8000f7e:	64b9      	str	r1, [r7, #72]	; 0x48
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	4413      	add	r3, r2
 8000f84:	ed93 7a00 	vldr	s14, [r3]
 8000f88:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f90:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000f94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f98:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    for (i = first_index; i <= last_index; i++) {
 8000f9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000fa2:	e7c0      	b.n	8000f26 <_ZN4MFCC12mfcc_computeEPKsPa+0x1a2>
    }
    mel_energies[bin] = mel_energy;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	699a      	ldr	r2, [r3, #24]
 8000fa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	4413      	add	r3, r2
 8000fae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000fb0:	601a      	str	r2, [r3, #0]

    //avoid log of zero
    if (mel_energy == 0.0)
 8000fb2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8000fb6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fbe:	d107      	bne.n	8000fd0 <_ZN4MFCC12mfcc_computeEPKsPa+0x24c>
      mel_energies[bin] = FLT_MIN;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	699a      	ldr	r2, [r3, #24]
 8000fc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	4413      	add	r3, r2
 8000fca:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000fce:	601a      	str	r2, [r3, #0]
  for (bin = 0; bin < NUM_FBANK_BINS; bin++) {
 8000fd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	647b      	str	r3, [r7, #68]	; 0x44
 8000fd6:	e78e      	b.n	8000ef6 <_ZN4MFCC12mfcc_computeEPKsPa+0x172>
  }

  //Take log
  for (bin = 0; bin < NUM_FBANK_BINS; bin++)
 8000fd8:	2300      	movs	r3, #0
 8000fda:	647b      	str	r3, [r7, #68]	; 0x44
 8000fdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000fde:	2b27      	cmp	r3, #39	; 0x27
 8000fe0:	dc17      	bgt.n	8001012 <_ZN4MFCC12mfcc_computeEPKsPa+0x28e>
    mel_energies[bin] = logf(mel_energies[bin]);
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	699a      	ldr	r2, [r3, #24]
 8000fe6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	4413      	add	r3, r2
 8000fec:	edd3 7a00 	vldr	s15, [r3]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	699a      	ldr	r2, [r3, #24]
 8000ff4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	18d4      	adds	r4, r2, r3
 8000ffa:	eeb0 0a67 	vmov.f32	s0, s15
 8000ffe:	f00d fd0b 	bl	800ea18 <logf>
 8001002:	eef0 7a40 	vmov.f32	s15, s0
 8001006:	edc4 7a00 	vstr	s15, [r4]
  for (bin = 0; bin < NUM_FBANK_BINS; bin++)
 800100a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800100c:	3301      	adds	r3, #1
 800100e:	647b      	str	r3, [r7, #68]	; 0x44
 8001010:	e7e4      	b.n	8000fdc <_ZN4MFCC12mfcc_computeEPKsPa+0x258>

  //Take DCT. Uses matrix mul.
  for (i = 0; i < num_mfcc_features; i++) {
 8001012:	2300      	movs	r3, #0
 8001014:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800101c:	429a      	cmp	r2, r3
 800101e:	da72      	bge.n	8001106 <_ZN4MFCC12mfcc_computeEPKsPa+0x382>
    float sum = 0.0;
 8001020:	f04f 0300 	mov.w	r3, #0
 8001024:	63fb      	str	r3, [r7, #60]	; 0x3c
    for (j = 0; j < NUM_FBANK_BINS; j++) {
 8001026:	2300      	movs	r3, #0
 8001028:	64bb      	str	r3, [r7, #72]	; 0x48
 800102a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800102c:	2b27      	cmp	r3, #39	; 0x27
 800102e:	dc27      	bgt.n	8001080 <_ZN4MFCC12mfcc_computeEPKsPa+0x2fc>
      sum += dct_matrix[i*NUM_FBANK_BINS+j] * mel_energies[j];
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001034:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001036:	4613      	mov	r3, r2
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	4413      	add	r3, r2
 800103c:	00db      	lsls	r3, r3, #3
 800103e:	461a      	mov	r2, r3
 8001040:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001042:	4413      	add	r3, r2
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	440b      	add	r3, r1
 8001048:	ed93 7a00 	vldr	s14, [r3]
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	699a      	ldr	r2, [r3, #24]
 8001050:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	4413      	add	r3, r2
 8001056:	edd3 7a00 	vldr	s15, [r3]
 800105a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800105e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001062:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001066:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    for (j = 0; j < NUM_FBANK_BINS; j++) {
 800106a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800106c:	3301      	adds	r3, #1
 800106e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001070:	e7db      	b.n	800102a <_ZN4MFCC12mfcc_computeEPKsPa+0x2a6>
 8001072:	bf00      	nop
 8001074:	47000000 	.word	0x47000000
 8001078:	42fe0000 	.word	0x42fe0000
 800107c:	c3000000 	.word	0xc3000000
    }

    //Input is Qx.mfcc_dec_bits (from quantization step)
    sum *= (0x1<<mfcc_dec_bits);
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	2201      	movs	r2, #1
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	ee07 3a90 	vmov	s15, r3
 800108e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001092:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800109a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    sum = round(sum); 
 800109e:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 80010a2:	f7ff fb01 	bl	80006a8 <_ZSt5roundf>
 80010a6:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
    if(sum >= 127)
 80010aa:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80010ae:	ed1f 7a0e 	vldr	s14, [pc, #-56]	; 8001078 <_ZN4MFCC12mfcc_computeEPKsPa+0x2f4>
 80010b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ba:	db05      	blt.n	80010c8 <_ZN4MFCC12mfcc_computeEPKsPa+0x344>
      mfcc_out[i] = 127;
 80010bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	4413      	add	r3, r2
 80010c2:	227f      	movs	r2, #127	; 0x7f
 80010c4:	701a      	strb	r2, [r3, #0]
 80010c6:	e01a      	b.n	80010fe <_ZN4MFCC12mfcc_computeEPKsPa+0x37a>
    else if(sum <= -128)
 80010c8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80010cc:	ed1f 7a15 	vldr	s14, [pc, #-84]	; 800107c <_ZN4MFCC12mfcc_computeEPKsPa+0x2f8>
 80010d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010d8:	d805      	bhi.n	80010e6 <_ZN4MFCC12mfcc_computeEPKsPa+0x362>
      mfcc_out[i] = -128;
 80010da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	4413      	add	r3, r2
 80010e0:	2280      	movs	r2, #128	; 0x80
 80010e2:	701a      	strb	r2, [r3, #0]
 80010e4:	e00b      	b.n	80010fe <_ZN4MFCC12mfcc_computeEPKsPa+0x37a>
    else
      mfcc_out[i] = sum; 
 80010e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010e8:	687a      	ldr	r2, [r7, #4]
 80010ea:	4413      	add	r3, r2
 80010ec:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80010f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010f4:	edc7 7a00 	vstr	s15, [r7]
 80010f8:	683a      	ldr	r2, [r7, #0]
 80010fa:	b252      	sxtb	r2, r2
 80010fc:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < num_mfcc_features; i++) {
 80010fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001100:	3301      	adds	r3, #1
 8001102:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001104:	e787      	b.n	8001016 <_ZN4MFCC12mfcc_computeEPKsPa+0x292>
  }

}
 8001106:	bf00      	nop
 8001108:	3754      	adds	r7, #84	; 0x54
 800110a:	46bd      	mov	sp, r7
 800110c:	bd90      	pop	{r4, r7, pc}
 800110e:	bf00      	nop

08001110 <_ZN2NNC1Ev>:
#ifndef __NN_H__
#define __NN_H__

#include "arm_nnfunctions.h"

class NN {
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	4a04      	ldr	r2, [pc, #16]	; (800112c <_ZN2NNC1Ev+0x1c>)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4618      	mov	r0, r3
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	080159f8 	.word	0x080159f8

08001130 <_ZN6DS_CNNC1Ev>:
const q7_t DS_CNN::conv5_pw_wt[CONV5_OUT_CH*CONV4_OUT_CH]=CONV5_PW_WT;
const q7_t DS_CNN::conv5_pw_bias[CONV5_OUT_CH]=CONV5_PW_BIAS;
const q7_t DS_CNN::final_fc_wt[CONV5_OUT_CH*OUT_DIM]=FINAL_FC_WT;
const q7_t DS_CNN::final_fc_bias[OUT_DIM]=FINAL_FC_BIAS;

DS_CNN::DS_CNN()
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff ffe8 	bl	8001110 <_ZN2NNC1Ev>
 8001140:	4a19      	ldr	r2, [pc, #100]	; (80011a8 <_ZN6DS_CNNC1Ev+0x78>)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	601a      	str	r2, [r3, #0]
{
  scratch_pad = new q7_t[SCRATCH_BUFFER_SIZE];
 8001146:	f44f 408f 	mov.w	r0, #18304	; 0x4780
 800114a:	f00c fef9 	bl	800df40 <_Znaj>
 800114e:	4603      	mov	r3, r0
 8001150:	461a      	mov	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	61da      	str	r2, [r3, #28]
  buffer1 = scratch_pad;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	69da      	ldr	r2, [r3, #28]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	625a      	str	r2, [r3, #36]	; 0x24
  buffer2 = buffer1 + (CONV1_OUT_CH*CONV1_OUT_X*CONV1_OUT_Y);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001162:	f503 52fa 	add.w	r2, r3, #8000	; 0x1f40
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	629a      	str	r2, [r3, #40]	; 0x28
  col_buffer = buffer2 + (CONV2_OUT_CH*CONV2_OUT_X*CONV2_OUT_Y);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800116e:	f503 52fa 	add.w	r2, r3, #8000	; 0x1f40
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	621a      	str	r2, [r3, #32]
  frame_len = FRAME_LEN;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	f44f 7220 	mov.w	r2, #640	; 0x280
 800117c:	605a      	str	r2, [r3, #4]
  frame_shift = FRAME_SHIFT;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001184:	609a      	str	r2, [r3, #8]
  num_mfcc_features = NUM_MFCC_COEFFS;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	220a      	movs	r2, #10
 800118a:	60da      	str	r2, [r3, #12]
  num_frames = NUM_FRAMES;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2231      	movs	r2, #49	; 0x31
 8001190:	611a      	str	r2, [r3, #16]
  num_out_classes = OUT_DIM;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	220c      	movs	r2, #12
 8001196:	615a      	str	r2, [r3, #20]
  in_dec_bits = MFCC_DEC_BITS;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2201      	movs	r2, #1
 800119c:	619a      	str	r2, [r3, #24]
}
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4618      	mov	r0, r3
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	080159e4 	.word	0x080159e4

080011ac <_ZN6DS_CNND1Ev>:

DS_CNN::~DS_CNN()
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	4a09      	ldr	r2, [pc, #36]	; (80011dc <_ZN6DS_CNND1Ev+0x30>)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	601a      	str	r2, [r3, #0]
{
  delete scratch_pad;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	69db      	ldr	r3, [r3, #28]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d003      	beq.n	80011ca <_ZN6DS_CNND1Ev+0x1e>
 80011c2:	2101      	movs	r1, #1
 80011c4:	4618      	mov	r0, r3
 80011c6:	f00c fea6 	bl	800df16 <_ZdlPvj>
DS_CNN::~DS_CNN()
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f000 fa29 	bl	8001624 <_ZN2NND1Ev>
}
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4618      	mov	r0, r3
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	080159e4 	.word	0x080159e4

080011e0 <_ZN6DS_CNND0Ev>:
DS_CNN::~DS_CNN()
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
}
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f7ff ffdf 	bl	80011ac <_ZN6DS_CNND1Ev>
 80011ee:	212c      	movs	r1, #44	; 0x2c
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f00c fe90 	bl	800df16 <_ZdlPvj>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4618      	mov	r0, r3
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <_ZN6DS_CNN6run_nnEPaS0_>:

void DS_CNN::run_nn(q7_t* in_data, q7_t* out_data)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b094      	sub	sp, #80	; 0x50
 8001204:	af10      	add	r7, sp, #64	; 0x40
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
  //CONV1 : regular convolution
  arm_convolve_HWC_q7_basic_nonsquare(in_data, CONV1_IN_X, CONV1_IN_Y, 1, conv1_wt, CONV1_OUT_CH, CONV1_KX, CONV1_KY, CONV1_PX, CONV1_PY, CONV1_SX, CONV1_SY, conv1_bias, CONV1_BIAS_LSHIFT, CONV1_OUT_RSHIFT, buffer1, CONV1_OUT_X, CONV1_OUT_Y, (q15_t*)col_buffer, NULL);
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001210:	68fa      	ldr	r2, [r7, #12]
 8001212:	6a12      	ldr	r2, [r2, #32]
 8001214:	2100      	movs	r1, #0
 8001216:	910f      	str	r1, [sp, #60]	; 0x3c
 8001218:	920e      	str	r2, [sp, #56]	; 0x38
 800121a:	2219      	movs	r2, #25
 800121c:	920d      	str	r2, [sp, #52]	; 0x34
 800121e:	2205      	movs	r2, #5
 8001220:	920c      	str	r2, [sp, #48]	; 0x30
 8001222:	930b      	str	r3, [sp, #44]	; 0x2c
 8001224:	2306      	movs	r3, #6
 8001226:	930a      	str	r3, [sp, #40]	; 0x28
 8001228:	2302      	movs	r3, #2
 800122a:	9309      	str	r3, [sp, #36]	; 0x24
 800122c:	4ba4      	ldr	r3, [pc, #656]	; (80014c0 <_ZN6DS_CNN6run_nnEPaS0_+0x2c0>)
 800122e:	9308      	str	r3, [sp, #32]
 8001230:	2302      	movs	r3, #2
 8001232:	9307      	str	r3, [sp, #28]
 8001234:	2302      	movs	r3, #2
 8001236:	9306      	str	r3, [sp, #24]
 8001238:	2304      	movs	r3, #4
 800123a:	9305      	str	r3, [sp, #20]
 800123c:	2301      	movs	r3, #1
 800123e:	9304      	str	r3, [sp, #16]
 8001240:	230a      	movs	r3, #10
 8001242:	9303      	str	r3, [sp, #12]
 8001244:	2304      	movs	r3, #4
 8001246:	9302      	str	r3, [sp, #8]
 8001248:	2340      	movs	r3, #64	; 0x40
 800124a:	9301      	str	r3, [sp, #4]
 800124c:	4b9d      	ldr	r3, [pc, #628]	; (80014c4 <_ZN6DS_CNN6run_nnEPaS0_+0x2c4>)
 800124e:	9300      	str	r3, [sp, #0]
 8001250:	2301      	movs	r3, #1
 8001252:	2231      	movs	r2, #49	; 0x31
 8001254:	210a      	movs	r1, #10
 8001256:	68b8      	ldr	r0, [r7, #8]
 8001258:	f005 fbc6 	bl	80069e8 <arm_convolve_HWC_q7_basic_nonsquare>
  arm_relu_q7(buffer1,CONV1_OUT_X*CONV1_OUT_Y*CONV1_OUT_CH);
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001260:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8001264:	4618      	mov	r0, r3
 8001266:	f005 f9b9 	bl	80065dc <arm_relu_q7>

  //CONV2 : DS + PW conv
  //Depthwise separable conv (batch norm params folded into conv wts/bias)
  arm_depthwise_separable_conv_HWC_q7_nonsquare(buffer1,CONV2_IN_X,CONV2_IN_Y,CONV1_OUT_CH,conv2_ds_wt,CONV1_OUT_CH,CONV2_DS_KX,CONV2_DS_KY,CONV2_DS_PX,CONV2_DS_PY,CONV2_DS_SX,CONV2_DS_SY,conv2_ds_bias,CONV2_DS_BIAS_LSHIFT,CONV2_DS_OUT_RSHIFT,buffer2,CONV2_OUT_X,CONV2_OUT_Y,(q15_t*)col_buffer, NULL);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001272:	68fa      	ldr	r2, [r7, #12]
 8001274:	6a12      	ldr	r2, [r2, #32]
 8001276:	2100      	movs	r1, #0
 8001278:	910f      	str	r1, [sp, #60]	; 0x3c
 800127a:	920e      	str	r2, [sp, #56]	; 0x38
 800127c:	2219      	movs	r2, #25
 800127e:	920d      	str	r2, [sp, #52]	; 0x34
 8001280:	2205      	movs	r2, #5
 8001282:	920c      	str	r2, [sp, #48]	; 0x30
 8001284:	930b      	str	r3, [sp, #44]	; 0x2c
 8001286:	2305      	movs	r3, #5
 8001288:	930a      	str	r3, [sp, #40]	; 0x28
 800128a:	2302      	movs	r3, #2
 800128c:	9309      	str	r3, [sp, #36]	; 0x24
 800128e:	4b8e      	ldr	r3, [pc, #568]	; (80014c8 <_ZN6DS_CNN6run_nnEPaS0_+0x2c8>)
 8001290:	9308      	str	r3, [sp, #32]
 8001292:	2301      	movs	r3, #1
 8001294:	9307      	str	r3, [sp, #28]
 8001296:	2301      	movs	r3, #1
 8001298:	9306      	str	r3, [sp, #24]
 800129a:	2301      	movs	r3, #1
 800129c:	9305      	str	r3, [sp, #20]
 800129e:	2301      	movs	r3, #1
 80012a0:	9304      	str	r3, [sp, #16]
 80012a2:	2303      	movs	r3, #3
 80012a4:	9303      	str	r3, [sp, #12]
 80012a6:	2303      	movs	r3, #3
 80012a8:	9302      	str	r3, [sp, #8]
 80012aa:	2340      	movs	r3, #64	; 0x40
 80012ac:	9301      	str	r3, [sp, #4]
 80012ae:	4b87      	ldr	r3, [pc, #540]	; (80014cc <_ZN6DS_CNN6run_nnEPaS0_+0x2cc>)
 80012b0:	9300      	str	r3, [sp, #0]
 80012b2:	2340      	movs	r3, #64	; 0x40
 80012b4:	2219      	movs	r2, #25
 80012b6:	2105      	movs	r1, #5
 80012b8:	f005 fd8e 	bl	8006dd8 <arm_depthwise_separable_conv_HWC_q7_nonsquare>
  arm_relu_q7(buffer2,CONV2_OUT_X*CONV2_OUT_Y*CONV2_OUT_CH);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c0:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 80012c4:	4618      	mov	r0, r3
 80012c6:	f005 f989 	bl	80065dc <arm_relu_q7>

  //Pointwise conv
  arm_convolve_1x1_HWC_q7_fast_nonsquare(buffer2, CONV2_OUT_X, CONV2_OUT_Y, CONV1_OUT_CH, conv2_pw_wt, CONV2_OUT_CH, 1, 1, 0, 0, 1, 1, conv2_pw_bias, CONV2_PW_BIAS_LSHIFT, CONV2_PW_OUT_RSHIFT, buffer1, CONV2_OUT_X, CONV2_OUT_Y, (q15_t*)col_buffer, NULL);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d2:	68fa      	ldr	r2, [r7, #12]
 80012d4:	6a12      	ldr	r2, [r2, #32]
 80012d6:	2100      	movs	r1, #0
 80012d8:	910f      	str	r1, [sp, #60]	; 0x3c
 80012da:	920e      	str	r2, [sp, #56]	; 0x38
 80012dc:	2219      	movs	r2, #25
 80012de:	920d      	str	r2, [sp, #52]	; 0x34
 80012e0:	2205      	movs	r2, #5
 80012e2:	920c      	str	r2, [sp, #48]	; 0x30
 80012e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80012e6:	2308      	movs	r3, #8
 80012e8:	930a      	str	r3, [sp, #40]	; 0x28
 80012ea:	2304      	movs	r3, #4
 80012ec:	9309      	str	r3, [sp, #36]	; 0x24
 80012ee:	4b78      	ldr	r3, [pc, #480]	; (80014d0 <_ZN6DS_CNN6run_nnEPaS0_+0x2d0>)
 80012f0:	9308      	str	r3, [sp, #32]
 80012f2:	2301      	movs	r3, #1
 80012f4:	9307      	str	r3, [sp, #28]
 80012f6:	2301      	movs	r3, #1
 80012f8:	9306      	str	r3, [sp, #24]
 80012fa:	2300      	movs	r3, #0
 80012fc:	9305      	str	r3, [sp, #20]
 80012fe:	2300      	movs	r3, #0
 8001300:	9304      	str	r3, [sp, #16]
 8001302:	2301      	movs	r3, #1
 8001304:	9303      	str	r3, [sp, #12]
 8001306:	2301      	movs	r3, #1
 8001308:	9302      	str	r3, [sp, #8]
 800130a:	2340      	movs	r3, #64	; 0x40
 800130c:	9301      	str	r3, [sp, #4]
 800130e:	4b71      	ldr	r3, [pc, #452]	; (80014d4 <_ZN6DS_CNN6run_nnEPaS0_+0x2d4>)
 8001310:	9300      	str	r3, [sp, #0]
 8001312:	2340      	movs	r3, #64	; 0x40
 8001314:	2219      	movs	r2, #25
 8001316:	2105      	movs	r1, #5
 8001318:	f005 f9c1 	bl	800669e <arm_convolve_1x1_HWC_q7_fast_nonsquare>
  arm_relu_q7(buffer1,CONV2_OUT_X*CONV2_OUT_Y*CONV2_OUT_CH);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001320:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8001324:	4618      	mov	r0, r3
 8001326:	f005 f959 	bl	80065dc <arm_relu_q7>

  //CONV3 : DS + PW conv
  //Depthwise separable conv (batch norm params folded into conv wts/bias)
  arm_depthwise_separable_conv_HWC_q7_nonsquare(buffer1,CONV3_IN_X,CONV3_IN_Y,CONV2_OUT_CH,conv3_ds_wt,CONV2_OUT_CH,CONV3_DS_KX,CONV3_DS_KY,CONV3_DS_PX,CONV3_DS_PY,CONV3_DS_SX,CONV3_DS_SY,conv3_ds_bias,CONV3_DS_BIAS_LSHIFT,CONV3_DS_OUT_RSHIFT,buffer2,CONV3_OUT_X,CONV3_OUT_Y,(q15_t*)col_buffer, NULL);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001332:	68fa      	ldr	r2, [r7, #12]
 8001334:	6a12      	ldr	r2, [r2, #32]
 8001336:	2100      	movs	r1, #0
 8001338:	910f      	str	r1, [sp, #60]	; 0x3c
 800133a:	920e      	str	r2, [sp, #56]	; 0x38
 800133c:	2219      	movs	r2, #25
 800133e:	920d      	str	r2, [sp, #52]	; 0x34
 8001340:	2205      	movs	r2, #5
 8001342:	920c      	str	r2, [sp, #48]	; 0x30
 8001344:	930b      	str	r3, [sp, #44]	; 0x2c
 8001346:	2304      	movs	r3, #4
 8001348:	930a      	str	r3, [sp, #40]	; 0x28
 800134a:	2302      	movs	r3, #2
 800134c:	9309      	str	r3, [sp, #36]	; 0x24
 800134e:	4b62      	ldr	r3, [pc, #392]	; (80014d8 <_ZN6DS_CNN6run_nnEPaS0_+0x2d8>)
 8001350:	9308      	str	r3, [sp, #32]
 8001352:	2301      	movs	r3, #1
 8001354:	9307      	str	r3, [sp, #28]
 8001356:	2301      	movs	r3, #1
 8001358:	9306      	str	r3, [sp, #24]
 800135a:	2301      	movs	r3, #1
 800135c:	9305      	str	r3, [sp, #20]
 800135e:	2301      	movs	r3, #1
 8001360:	9304      	str	r3, [sp, #16]
 8001362:	2303      	movs	r3, #3
 8001364:	9303      	str	r3, [sp, #12]
 8001366:	2303      	movs	r3, #3
 8001368:	9302      	str	r3, [sp, #8]
 800136a:	2340      	movs	r3, #64	; 0x40
 800136c:	9301      	str	r3, [sp, #4]
 800136e:	4b5b      	ldr	r3, [pc, #364]	; (80014dc <_ZN6DS_CNN6run_nnEPaS0_+0x2dc>)
 8001370:	9300      	str	r3, [sp, #0]
 8001372:	2340      	movs	r3, #64	; 0x40
 8001374:	2219      	movs	r2, #25
 8001376:	2105      	movs	r1, #5
 8001378:	f005 fd2e 	bl	8006dd8 <arm_depthwise_separable_conv_HWC_q7_nonsquare>
  arm_relu_q7(buffer2,CONV3_OUT_X*CONV3_OUT_Y*CONV3_OUT_CH);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001380:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8001384:	4618      	mov	r0, r3
 8001386:	f005 f929 	bl	80065dc <arm_relu_q7>
  //Pointwise conv
  arm_convolve_1x1_HWC_q7_fast_nonsquare(buffer2, CONV3_OUT_X, CONV3_OUT_Y, CONV2_OUT_CH, conv3_pw_wt, CONV3_OUT_CH, 1, 1, 0, 0, 1, 1, conv3_pw_bias, CONV3_PW_BIAS_LSHIFT, CONV3_PW_OUT_RSHIFT, buffer1, CONV3_OUT_X, CONV3_OUT_Y, (q15_t*)col_buffer, NULL);
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001392:	68fa      	ldr	r2, [r7, #12]
 8001394:	6a12      	ldr	r2, [r2, #32]
 8001396:	2100      	movs	r1, #0
 8001398:	910f      	str	r1, [sp, #60]	; 0x3c
 800139a:	920e      	str	r2, [sp, #56]	; 0x38
 800139c:	2219      	movs	r2, #25
 800139e:	920d      	str	r2, [sp, #52]	; 0x34
 80013a0:	2205      	movs	r2, #5
 80013a2:	920c      	str	r2, [sp, #48]	; 0x30
 80013a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80013a6:	2308      	movs	r3, #8
 80013a8:	930a      	str	r3, [sp, #40]	; 0x28
 80013aa:	2305      	movs	r3, #5
 80013ac:	9309      	str	r3, [sp, #36]	; 0x24
 80013ae:	4b4c      	ldr	r3, [pc, #304]	; (80014e0 <_ZN6DS_CNN6run_nnEPaS0_+0x2e0>)
 80013b0:	9308      	str	r3, [sp, #32]
 80013b2:	2301      	movs	r3, #1
 80013b4:	9307      	str	r3, [sp, #28]
 80013b6:	2301      	movs	r3, #1
 80013b8:	9306      	str	r3, [sp, #24]
 80013ba:	2300      	movs	r3, #0
 80013bc:	9305      	str	r3, [sp, #20]
 80013be:	2300      	movs	r3, #0
 80013c0:	9304      	str	r3, [sp, #16]
 80013c2:	2301      	movs	r3, #1
 80013c4:	9303      	str	r3, [sp, #12]
 80013c6:	2301      	movs	r3, #1
 80013c8:	9302      	str	r3, [sp, #8]
 80013ca:	2340      	movs	r3, #64	; 0x40
 80013cc:	9301      	str	r3, [sp, #4]
 80013ce:	4b45      	ldr	r3, [pc, #276]	; (80014e4 <_ZN6DS_CNN6run_nnEPaS0_+0x2e4>)
 80013d0:	9300      	str	r3, [sp, #0]
 80013d2:	2340      	movs	r3, #64	; 0x40
 80013d4:	2219      	movs	r2, #25
 80013d6:	2105      	movs	r1, #5
 80013d8:	f005 f961 	bl	800669e <arm_convolve_1x1_HWC_q7_fast_nonsquare>
  arm_relu_q7(buffer1,CONV3_OUT_X*CONV3_OUT_Y*CONV3_OUT_CH);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e0:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 80013e4:	4618      	mov	r0, r3
 80013e6:	f005 f8f9 	bl	80065dc <arm_relu_q7>

  //CONV4 : DS + PW conv
  //Depthwise separable conv (batch norm params folded into conv wts/bias)
  arm_depthwise_separable_conv_HWC_q7_nonsquare(buffer1,CONV4_IN_X,CONV4_IN_Y,CONV3_OUT_CH,conv4_ds_wt,CONV3_OUT_CH,CONV4_DS_KX,CONV4_DS_KY,CONV4_DS_PX,CONV4_DS_PY,CONV4_DS_SX,CONV4_DS_SY,conv4_ds_bias,CONV4_DS_BIAS_LSHIFT,CONV4_DS_OUT_RSHIFT,buffer2,CONV4_OUT_X,CONV4_OUT_Y,(q15_t*)col_buffer, NULL);
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f2:	68fa      	ldr	r2, [r7, #12]
 80013f4:	6a12      	ldr	r2, [r2, #32]
 80013f6:	2100      	movs	r1, #0
 80013f8:	910f      	str	r1, [sp, #60]	; 0x3c
 80013fa:	920e      	str	r2, [sp, #56]	; 0x38
 80013fc:	2219      	movs	r2, #25
 80013fe:	920d      	str	r2, [sp, #52]	; 0x34
 8001400:	2205      	movs	r2, #5
 8001402:	920c      	str	r2, [sp, #48]	; 0x30
 8001404:	930b      	str	r3, [sp, #44]	; 0x2c
 8001406:	2305      	movs	r3, #5
 8001408:	930a      	str	r3, [sp, #40]	; 0x28
 800140a:	2303      	movs	r3, #3
 800140c:	9309      	str	r3, [sp, #36]	; 0x24
 800140e:	4b36      	ldr	r3, [pc, #216]	; (80014e8 <_ZN6DS_CNN6run_nnEPaS0_+0x2e8>)
 8001410:	9308      	str	r3, [sp, #32]
 8001412:	2301      	movs	r3, #1
 8001414:	9307      	str	r3, [sp, #28]
 8001416:	2301      	movs	r3, #1
 8001418:	9306      	str	r3, [sp, #24]
 800141a:	2301      	movs	r3, #1
 800141c:	9305      	str	r3, [sp, #20]
 800141e:	2301      	movs	r3, #1
 8001420:	9304      	str	r3, [sp, #16]
 8001422:	2303      	movs	r3, #3
 8001424:	9303      	str	r3, [sp, #12]
 8001426:	2303      	movs	r3, #3
 8001428:	9302      	str	r3, [sp, #8]
 800142a:	2340      	movs	r3, #64	; 0x40
 800142c:	9301      	str	r3, [sp, #4]
 800142e:	4b2f      	ldr	r3, [pc, #188]	; (80014ec <_ZN6DS_CNN6run_nnEPaS0_+0x2ec>)
 8001430:	9300      	str	r3, [sp, #0]
 8001432:	2340      	movs	r3, #64	; 0x40
 8001434:	2219      	movs	r2, #25
 8001436:	2105      	movs	r1, #5
 8001438:	f005 fcce 	bl	8006dd8 <arm_depthwise_separable_conv_HWC_q7_nonsquare>
  arm_relu_q7(buffer2,CONV4_OUT_X*CONV4_OUT_Y*CONV4_OUT_CH);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001440:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8001444:	4618      	mov	r0, r3
 8001446:	f005 f8c9 	bl	80065dc <arm_relu_q7>
  //Pointwise conv
  arm_convolve_1x1_HWC_q7_fast_nonsquare(buffer2, CONV4_OUT_X, CONV4_OUT_Y, CONV3_OUT_CH, conv4_pw_wt, CONV4_OUT_CH, 1, 1, 0, 0, 1, 1, conv4_pw_bias, CONV4_PW_BIAS_LSHIFT, CONV4_PW_OUT_RSHIFT, buffer1, CONV4_OUT_X, CONV4_OUT_Y, (q15_t*)col_buffer, NULL);
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001452:	68fa      	ldr	r2, [r7, #12]
 8001454:	6a12      	ldr	r2, [r2, #32]
 8001456:	2100      	movs	r1, #0
 8001458:	910f      	str	r1, [sp, #60]	; 0x3c
 800145a:	920e      	str	r2, [sp, #56]	; 0x38
 800145c:	2219      	movs	r2, #25
 800145e:	920d      	str	r2, [sp, #52]	; 0x34
 8001460:	2205      	movs	r2, #5
 8001462:	920c      	str	r2, [sp, #48]	; 0x30
 8001464:	930b      	str	r3, [sp, #44]	; 0x2c
 8001466:	2307      	movs	r3, #7
 8001468:	930a      	str	r3, [sp, #40]	; 0x28
 800146a:	2305      	movs	r3, #5
 800146c:	9309      	str	r3, [sp, #36]	; 0x24
 800146e:	4b20      	ldr	r3, [pc, #128]	; (80014f0 <_ZN6DS_CNN6run_nnEPaS0_+0x2f0>)
 8001470:	9308      	str	r3, [sp, #32]
 8001472:	2301      	movs	r3, #1
 8001474:	9307      	str	r3, [sp, #28]
 8001476:	2301      	movs	r3, #1
 8001478:	9306      	str	r3, [sp, #24]
 800147a:	2300      	movs	r3, #0
 800147c:	9305      	str	r3, [sp, #20]
 800147e:	2300      	movs	r3, #0
 8001480:	9304      	str	r3, [sp, #16]
 8001482:	2301      	movs	r3, #1
 8001484:	9303      	str	r3, [sp, #12]
 8001486:	2301      	movs	r3, #1
 8001488:	9302      	str	r3, [sp, #8]
 800148a:	2340      	movs	r3, #64	; 0x40
 800148c:	9301      	str	r3, [sp, #4]
 800148e:	4b19      	ldr	r3, [pc, #100]	; (80014f4 <_ZN6DS_CNN6run_nnEPaS0_+0x2f4>)
 8001490:	9300      	str	r3, [sp, #0]
 8001492:	2340      	movs	r3, #64	; 0x40
 8001494:	2219      	movs	r2, #25
 8001496:	2105      	movs	r1, #5
 8001498:	f005 f901 	bl	800669e <arm_convolve_1x1_HWC_q7_fast_nonsquare>
  arm_relu_q7(buffer1,CONV4_OUT_X*CONV4_OUT_Y*CONV4_OUT_CH);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a0:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 80014a4:	4618      	mov	r0, r3
 80014a6:	f005 f899 	bl	80065dc <arm_relu_q7>

  //CONV5 : DS + PW conv
  //Depthwise separable conv (batch norm params folded into conv wts/bias)
  arm_depthwise_separable_conv_HWC_q7_nonsquare(buffer1,CONV5_IN_X,CONV5_IN_Y,CONV4_OUT_CH,conv5_ds_wt,CONV4_OUT_CH,CONV5_DS_KX,CONV5_DS_KY,CONV5_DS_PX,CONV5_DS_PY,CONV5_DS_SX,CONV5_DS_SY,conv5_ds_bias,CONV5_DS_BIAS_LSHIFT,CONV5_DS_OUT_RSHIFT,buffer2,CONV5_OUT_X,CONV5_OUT_Y,(q15_t*)col_buffer, NULL);
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b2:	68fa      	ldr	r2, [r7, #12]
 80014b4:	6a12      	ldr	r2, [r2, #32]
 80014b6:	2100      	movs	r1, #0
 80014b8:	910f      	str	r1, [sp, #60]	; 0x3c
 80014ba:	920e      	str	r2, [sp, #56]	; 0x38
 80014bc:	2219      	movs	r2, #25
 80014be:	e01b      	b.n	80014f8 <_ZN6DS_CNN6run_nnEPaS0_+0x2f8>
 80014c0:	08010b90 	.word	0x08010b90
 80014c4:	08010190 	.word	0x08010190
 80014c8:	08010e10 	.word	0x08010e10
 80014cc:	08010bd0 	.word	0x08010bd0
 80014d0:	08011e50 	.word	0x08011e50
 80014d4:	08010e50 	.word	0x08010e50
 80014d8:	080120d0 	.word	0x080120d0
 80014dc:	08011e90 	.word	0x08011e90
 80014e0:	08013110 	.word	0x08013110
 80014e4:	08012110 	.word	0x08012110
 80014e8:	08013390 	.word	0x08013390
 80014ec:	08013150 	.word	0x08013150
 80014f0:	080143d0 	.word	0x080143d0
 80014f4:	080133d0 	.word	0x080133d0
 80014f8:	920d      	str	r2, [sp, #52]	; 0x34
 80014fa:	2205      	movs	r2, #5
 80014fc:	920c      	str	r2, [sp, #48]	; 0x30
 80014fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8001500:	2305      	movs	r3, #5
 8001502:	930a      	str	r3, [sp, #40]	; 0x28
 8001504:	2303      	movs	r3, #3
 8001506:	9309      	str	r3, [sp, #36]	; 0x24
 8001508:	4b40      	ldr	r3, [pc, #256]	; (800160c <_ZN6DS_CNN6run_nnEPaS0_+0x40c>)
 800150a:	9308      	str	r3, [sp, #32]
 800150c:	2301      	movs	r3, #1
 800150e:	9307      	str	r3, [sp, #28]
 8001510:	2301      	movs	r3, #1
 8001512:	9306      	str	r3, [sp, #24]
 8001514:	2301      	movs	r3, #1
 8001516:	9305      	str	r3, [sp, #20]
 8001518:	2301      	movs	r3, #1
 800151a:	9304      	str	r3, [sp, #16]
 800151c:	2303      	movs	r3, #3
 800151e:	9303      	str	r3, [sp, #12]
 8001520:	2303      	movs	r3, #3
 8001522:	9302      	str	r3, [sp, #8]
 8001524:	2340      	movs	r3, #64	; 0x40
 8001526:	9301      	str	r3, [sp, #4]
 8001528:	4b39      	ldr	r3, [pc, #228]	; (8001610 <_ZN6DS_CNN6run_nnEPaS0_+0x410>)
 800152a:	9300      	str	r3, [sp, #0]
 800152c:	2340      	movs	r3, #64	; 0x40
 800152e:	2219      	movs	r2, #25
 8001530:	2105      	movs	r1, #5
 8001532:	f005 fc51 	bl	8006dd8 <arm_depthwise_separable_conv_HWC_q7_nonsquare>
  arm_relu_q7(buffer2,CONV5_OUT_X*CONV5_OUT_Y*CONV5_OUT_CH);
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800153a:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 800153e:	4618      	mov	r0, r3
 8001540:	f005 f84c 	bl	80065dc <arm_relu_q7>
  //Pointwise conv
  arm_convolve_1x1_HWC_q7_fast_nonsquare(buffer2, CONV5_OUT_X, CONV5_OUT_Y, CONV4_OUT_CH, conv5_pw_wt, CONV5_OUT_CH, 1, 1, 0, 0, 1, 1, conv5_pw_bias, CONV5_PW_BIAS_LSHIFT, CONV5_PW_OUT_RSHIFT, buffer1, CONV5_OUT_X, CONV5_OUT_Y, (q15_t*)col_buffer, NULL);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154c:	68fa      	ldr	r2, [r7, #12]
 800154e:	6a12      	ldr	r2, [r2, #32]
 8001550:	2100      	movs	r1, #0
 8001552:	910f      	str	r1, [sp, #60]	; 0x3c
 8001554:	920e      	str	r2, [sp, #56]	; 0x38
 8001556:	2219      	movs	r2, #25
 8001558:	920d      	str	r2, [sp, #52]	; 0x34
 800155a:	2205      	movs	r2, #5
 800155c:	920c      	str	r2, [sp, #48]	; 0x30
 800155e:	930b      	str	r3, [sp, #44]	; 0x2c
 8001560:	2308      	movs	r3, #8
 8001562:	930a      	str	r3, [sp, #40]	; 0x28
 8001564:	2305      	movs	r3, #5
 8001566:	9309      	str	r3, [sp, #36]	; 0x24
 8001568:	4b2a      	ldr	r3, [pc, #168]	; (8001614 <_ZN6DS_CNN6run_nnEPaS0_+0x414>)
 800156a:	9308      	str	r3, [sp, #32]
 800156c:	2301      	movs	r3, #1
 800156e:	9307      	str	r3, [sp, #28]
 8001570:	2301      	movs	r3, #1
 8001572:	9306      	str	r3, [sp, #24]
 8001574:	2300      	movs	r3, #0
 8001576:	9305      	str	r3, [sp, #20]
 8001578:	2300      	movs	r3, #0
 800157a:	9304      	str	r3, [sp, #16]
 800157c:	2301      	movs	r3, #1
 800157e:	9303      	str	r3, [sp, #12]
 8001580:	2301      	movs	r3, #1
 8001582:	9302      	str	r3, [sp, #8]
 8001584:	2340      	movs	r3, #64	; 0x40
 8001586:	9301      	str	r3, [sp, #4]
 8001588:	4b23      	ldr	r3, [pc, #140]	; (8001618 <_ZN6DS_CNN6run_nnEPaS0_+0x418>)
 800158a:	9300      	str	r3, [sp, #0]
 800158c:	2340      	movs	r3, #64	; 0x40
 800158e:	2219      	movs	r2, #25
 8001590:	2105      	movs	r1, #5
 8001592:	f005 f884 	bl	800669e <arm_convolve_1x1_HWC_q7_fast_nonsquare>
  arm_relu_q7(buffer1,CONV5_OUT_X*CONV5_OUT_Y*CONV5_OUT_CH);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159a:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 800159e:	4618      	mov	r0, r3
 80015a0:	f005 f81c 	bl	80065dc <arm_relu_q7>

  //Average pool
  arm_avepool_q7_HWC_nonsquare (buffer1,CONV5_OUT_X,CONV5_OUT_Y,CONV5_OUT_CH,CONV5_OUT_X,CONV5_OUT_Y,0,0,1,1,1,1,NULL,buffer2, 2);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ac:	2202      	movs	r2, #2
 80015ae:	920a      	str	r2, [sp, #40]	; 0x28
 80015b0:	9309      	str	r3, [sp, #36]	; 0x24
 80015b2:	2300      	movs	r3, #0
 80015b4:	9308      	str	r3, [sp, #32]
 80015b6:	2301      	movs	r3, #1
 80015b8:	9307      	str	r3, [sp, #28]
 80015ba:	2301      	movs	r3, #1
 80015bc:	9306      	str	r3, [sp, #24]
 80015be:	2301      	movs	r3, #1
 80015c0:	9305      	str	r3, [sp, #20]
 80015c2:	2301      	movs	r3, #1
 80015c4:	9304      	str	r3, [sp, #16]
 80015c6:	2300      	movs	r3, #0
 80015c8:	9303      	str	r3, [sp, #12]
 80015ca:	2300      	movs	r3, #0
 80015cc:	9302      	str	r3, [sp, #8]
 80015ce:	2319      	movs	r3, #25
 80015d0:	9301      	str	r3, [sp, #4]
 80015d2:	2305      	movs	r3, #5
 80015d4:	9300      	str	r3, [sp, #0]
 80015d6:	2340      	movs	r3, #64	; 0x40
 80015d8:	2219      	movs	r2, #25
 80015da:	2105      	movs	r1, #5
 80015dc:	f000 f832 	bl	8001644 <arm_avepool_q7_HWC_nonsquare>

  arm_fully_connected_q7(buffer2, final_fc_wt, CONV5_OUT_CH, OUT_DIM, FINAL_FC_BIAS_LSHIFT, FINAL_FC_OUT_RSHIFT, final_fc_bias, out_data, (q15_t*)col_buffer);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	6a1b      	ldr	r3, [r3, #32]
 80015e8:	9304      	str	r3, [sp, #16]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	9303      	str	r3, [sp, #12]
 80015ee:	4b0b      	ldr	r3, [pc, #44]	; (800161c <_ZN6DS_CNN6run_nnEPaS0_+0x41c>)
 80015f0:	9302      	str	r3, [sp, #8]
 80015f2:	2307      	movs	r3, #7
 80015f4:	9301      	str	r3, [sp, #4]
 80015f6:	2302      	movs	r3, #2
 80015f8:	9300      	str	r3, [sp, #0]
 80015fa:	230c      	movs	r3, #12
 80015fc:	2240      	movs	r2, #64	; 0x40
 80015fe:	4908      	ldr	r1, [pc, #32]	; (8001620 <_ZN6DS_CNN6run_nnEPaS0_+0x420>)
 8001600:	f007 f8ce 	bl	80087a0 <arm_fully_connected_q7>

}
 8001604:	bf00      	nop
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	08014650 	.word	0x08014650
 8001610:	08014410 	.word	0x08014410
 8001614:	08015690 	.word	0x08015690
 8001618:	08014690 	.word	0x08014690
 800161c:	080159d0 	.word	0x080159d0
 8001620:	080156d0 	.word	0x080156d0

08001624 <_ZN2NND1Ev>:
 * limitations under the License.
 */

#include "ML-KWS-for-MCU/NN/nn.h"

NN::~NN() {
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	4a04      	ldr	r2, [pc, #16]	; (8001640 <_ZN2NND1Ev+0x1c>)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	601a      	str	r2, [r3, #0]
}
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4618      	mov	r0, r3
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	080159f8 	.word	0x080159f8

08001644 <arm_avepool_q7_HWC_nonsquare>:
        const uint16_t dim_im_out_x,  // output image dimension
        const uint16_t dim_im_out_y,  // output image dimension
        q7_t * bufferA,               // a buffer for local storage
        q7_t * Im_out,                // output feature
        const uint16_t out_lshift)    // output left shift (scaling)
{
 8001644:	b4b0      	push	{r4, r5, r7}
 8001646:	b08b      	sub	sp, #44	; 0x2c
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	4608      	mov	r0, r1
 800164e:	4611      	mov	r1, r2
 8001650:	461a      	mov	r2, r3
 8001652:	4603      	mov	r3, r0
 8001654:	817b      	strh	r3, [r7, #10]
 8001656:	460b      	mov	r3, r1
 8001658:	813b      	strh	r3, [r7, #8]
 800165a:	4613      	mov	r3, r2
 800165c:	80fb      	strh	r3, [r7, #6]
  int16_t i_ch_in, i_x, i_y;
  int16_t k_x, k_y;
  
  for(i_ch_in=0;i_ch_in<ch_im_in;i_ch_in++) {
 800165e:	2300      	movs	r3, #0
 8001660:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001662:	e0b2      	b.n	80017ca <arm_avepool_q7_HWC_nonsquare+0x186>
    for(i_y=0;i_y<dim_im_out_y;i_y++) {
 8001664:	2300      	movs	r3, #0
 8001666:	847b      	strh	r3, [r7, #34]	; 0x22
 8001668:	e0a2      	b.n	80017b0 <arm_avepool_q7_HWC_nonsquare+0x16c>
      for(i_x=0;i_x<dim_im_out_x;i_x++) {
 800166a:	2300      	movs	r3, #0
 800166c:	84bb      	strh	r3, [r7, #36]	; 0x24
 800166e:	e092      	b.n	8001796 <arm_avepool_q7_HWC_nonsquare+0x152>
        int sum = 0;
 8001670:	2300      	movs	r3, #0
 8001672:	61bb      	str	r3, [r7, #24]
        int count = 0;
 8001674:	2300      	movs	r3, #0
 8001676:	617b      	str	r3, [r7, #20]
        for (k_y = i_y*stride_y-padding_y; k_y < i_y*stride_y-padding_y+dim_kernel_y; k_y++) {
 8001678:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800167a:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800167e:	fb12 f303 	smulbb	r3, r2, r3
 8001682:	b29a      	uxth	r2, r3
 8001684:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	b29b      	uxth	r3, r3
 800168c:	83fb      	strh	r3, [r7, #30]
 800168e:	e052      	b.n	8001736 <arm_avepool_q7_HWC_nonsquare+0xf2>
          for (k_x = i_x*stride_x-padding_x;k_x < i_x*stride_x-padding_x+dim_kernel_x; k_x++) {
 8001690:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001692:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001696:	fb12 f303 	smulbb	r3, r2, r3
 800169a:	b29a      	uxth	r2, r3
 800169c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	843b      	strh	r3, [r7, #32]
 80016a6:	e031      	b.n	800170c <arm_avepool_q7_HWC_nonsquare+0xc8>
            if (k_y >= 0 && k_x >= 0 && k_y<dim_im_in_y && k_x<dim_im_in_x) {
 80016a8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	db27      	blt.n	8001700 <arm_avepool_q7_HWC_nonsquare+0xbc>
 80016b0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	db23      	blt.n	8001700 <arm_avepool_q7_HWC_nonsquare+0xbc>
 80016b8:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80016bc:	893b      	ldrh	r3, [r7, #8]
 80016be:	429a      	cmp	r2, r3
 80016c0:	da1e      	bge.n	8001700 <arm_avepool_q7_HWC_nonsquare+0xbc>
 80016c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80016c6:	897b      	ldrh	r3, [r7, #10]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	da19      	bge.n	8001700 <arm_avepool_q7_HWC_nonsquare+0xbc>
              sum += Im_in[i_ch_in + ch_im_in*(k_x+k_y*dim_im_in_x)];
 80016cc:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80016d0:	88fb      	ldrh	r3, [r7, #6]
 80016d2:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 80016d6:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 80016da:	897c      	ldrh	r4, [r7, #10]
 80016dc:	fb04 f101 	mul.w	r1, r4, r1
 80016e0:	4401      	add	r1, r0
 80016e2:	fb01 f303 	mul.w	r3, r1, r3
 80016e6:	4413      	add	r3, r2
 80016e8:	461a      	mov	r2, r3
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	4413      	add	r3, r2
 80016ee:	f993 3000 	ldrsb.w	r3, [r3]
 80016f2:	461a      	mov	r2, r3
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	4413      	add	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
              count++;
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	3301      	adds	r3, #1
 80016fe:	617b      	str	r3, [r7, #20]
          for (k_x = i_x*stride_x-padding_x;k_x < i_x*stride_x-padding_x+dim_kernel_x; k_x++) {
 8001700:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001704:	b29b      	uxth	r3, r3
 8001706:	3301      	adds	r3, #1
 8001708:	b29b      	uxth	r3, r3
 800170a:	843b      	strh	r3, [r7, #32]
 800170c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001710:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001714:	f8b7 1048 	ldrh.w	r1, [r7, #72]	; 0x48
 8001718:	fb01 f103 	mul.w	r1, r1, r3
 800171c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001720:	1ac9      	subs	r1, r1, r3
 8001722:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001724:	440b      	add	r3, r1
 8001726:	429a      	cmp	r2, r3
 8001728:	dbbe      	blt.n	80016a8 <arm_avepool_q7_HWC_nonsquare+0x64>
        for (k_y = i_y*stride_y-padding_y; k_y < i_y*stride_y-padding_y+dim_kernel_y; k_y++) {
 800172a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800172e:	b29b      	uxth	r3, r3
 8001730:	3301      	adds	r3, #1
 8001732:	b29b      	uxth	r3, r3
 8001734:	83fb      	strh	r3, [r7, #30]
 8001736:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800173a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800173e:	f8b7 104c 	ldrh.w	r1, [r7, #76]	; 0x4c
 8001742:	fb01 f103 	mul.w	r1, r1, r3
 8001746:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800174a:	1ac9      	subs	r1, r1, r3
 800174c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800174e:	440b      	add	r3, r1
 8001750:	429a      	cmp	r2, r3
 8001752:	db9d      	blt.n	8001690 <arm_avepool_q7_HWC_nonsquare+0x4c>
            }
          }
        }
        Im_out[i_ch_in+ch_im_in*(i_x+i_y*dim_im_out_x)] = sum*(0x1<<out_lshift)/count;
 8001754:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	409a      	lsls	r2, r3
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	fb92 f5f3 	sdiv	r5, r2, r3
 8001762:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8001766:	88fb      	ldrh	r3, [r7, #6]
 8001768:	f9b7 0024 	ldrsh.w	r0, [r7, #36]	; 0x24
 800176c:	f9b7 1022 	ldrsh.w	r1, [r7, #34]	; 0x22
 8001770:	f8b7 4050 	ldrh.w	r4, [r7, #80]	; 0x50
 8001774:	fb04 f101 	mul.w	r1, r4, r1
 8001778:	4401      	add	r1, r0
 800177a:	fb01 f303 	mul.w	r3, r1, r3
 800177e:	4413      	add	r3, r2
 8001780:	461a      	mov	r2, r3
 8001782:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001784:	4413      	add	r3, r2
 8001786:	b26a      	sxtb	r2, r5
 8001788:	701a      	strb	r2, [r3, #0]
      for(i_x=0;i_x<dim_im_out_x;i_x++) {
 800178a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800178e:	b29b      	uxth	r3, r3
 8001790:	3301      	adds	r3, #1
 8001792:	b29b      	uxth	r3, r3
 8001794:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001796:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800179a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800179e:	429a      	cmp	r2, r3
 80017a0:	f6ff af66 	blt.w	8001670 <arm_avepool_q7_HWC_nonsquare+0x2c>
    for(i_y=0;i_y<dim_im_out_y;i_y++) {
 80017a4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	3301      	adds	r3, #1
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	847b      	strh	r3, [r7, #34]	; 0x22
 80017b0:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 80017b4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80017b8:	429a      	cmp	r2, r3
 80017ba:	f6ff af56 	blt.w	800166a <arm_avepool_q7_HWC_nonsquare+0x26>
  for(i_ch_in=0;i_ch_in<ch_im_in;i_ch_in++) {
 80017be:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	3301      	adds	r3, #1
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80017ca:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80017ce:	88fb      	ldrh	r3, [r7, #6]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	f6ff af47 	blt.w	8001664 <arm_avepool_q7_HWC_nonsquare+0x20>
      }
    }
  }
}
 80017d6:	bf00      	nop
 80017d8:	bf00      	nop
 80017da:	372c      	adds	r7, #44	; 0x2c
 80017dc:	46bd      	mov	sp, r7
 80017de:	bcb0      	pop	{r4, r5, r7}
 80017e0:	4770      	bx	lr

080017e2 <_ZN11AudioPlayerC1EP19__SAI_HandleTypeDef>:
#include <stdint.h>
#include<stdio.h>
#include <cstring>


AudioPlayer::AudioPlayer(SAI_HandleTypeDef *hsai)
 80017e2:	b480      	push	{r7}
 80017e4:	b083      	sub	sp, #12
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
 80017ea:	6039      	str	r1, [r7, #0]
:hsai(hsai)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	683a      	ldr	r2, [r7, #0]
 80017f0:	60da      	str	r2, [r3, #12]
{
	sai_stop_flag = 1;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2201      	movs	r2, #1
 80017f6:	721a      	strb	r2, [r3, #8]

}
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	4618      	mov	r0, r3
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr

08001806 <_ZN11AudioPlayerD1Ev>:

// destructor
AudioPlayer::~AudioPlayer() {
 8001806:	b480      	push	{r7}
 8001808:	b083      	sub	sp, #12
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
}
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4618      	mov	r0, r3
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <_ZN11AudioPlayer10play_audioEP8WaveData>:

// record audio
void AudioPlayer::play_audio(WaveData * data) {
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
	cur_data = data;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	683a      	ldr	r2, [r7, #0]
 800182a:	605a      	str	r2, [r3, #4]
	played_samples = 0;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	611a      	str	r2, [r3, #16]
	converted_samples = 0;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	615a      	str	r2, [r3, #20]

//	conversion_buffer = new uint16_t[PLAY_BUFFER_LENGTH];
	sai_buffer = new int16_t[PLAY_BUFFER_LENGTH];
 8001838:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 800183c:	f00c fb80 	bl	800df40 <_Znaj>
 8001840:	4603      	mov	r3, r0
 8001842:	461a      	mov	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	601a      	str	r2, [r3, #0]


	// initial full read
	update_sai_buffer(0, PLAY_BUFFER_LENGTH);
 8001848:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800184c:	2100      	movs	r1, #0
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f000 f828 	bl	80018a4 <_ZN11AudioPlayer17update_sai_bufferEmm>

	// Start SAI in circular mode
	sai_stop_flag = 0;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	721a      	strb	r2, [r3, #8]

	if (HAL_SAI_Transmit_DMA(hsai, (uint8_t*)sai_buffer, PLAY_BUFFER_LENGTH*sizeof(uint8_t)) == HAL_ERROR) {
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	68d8      	ldr	r0, [r3, #12]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001866:	4619      	mov	r1, r3
 8001868:	f00b f8bc 	bl	800c9e4 <HAL_SAI_Transmit_DMA>
 800186c:	4603      	mov	r3, r0
 800186e:	2b01      	cmp	r3, #1
 8001870:	bf0c      	ite	eq
 8001872:	2301      	moveq	r3, #1
 8001874:	2300      	movne	r3, #0
 8001876:	b2db      	uxtb	r3, r3
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <_ZN11AudioPlayer10play_audioEP8WaveData+0x64>
		Error_Handler();
 800187c:	f001 f822 	bl	80028c4 <Error_Handler>
	}

	while(!sai_stop_flag);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	7a1b      	ldrb	r3, [r3, #8]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d100      	bne.n	800188a <_ZN11AudioPlayer10play_audioEP8WaveData+0x6e>
 8001888:	e7fa      	b.n	8001880 <_ZN11AudioPlayer10play_audioEP8WaveData+0x64>
	delete [] sai_buffer;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d004      	beq.n	800189c <_ZN11AudioPlayer10play_audioEP8WaveData+0x80>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f00c fb3f 	bl	800df1a <_ZdaPv>
//	delete [] conversion_buffer;
}
 800189c:	bf00      	nop
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <_ZN11AudioPlayer17update_sai_bufferEmm>:

// update buffer. Method called by sai callbacks functions.
void AudioPlayer::update_sai_buffer(uint32_t offset, uint32_t data_length) {
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	607a      	str	r2, [r7, #4]
	uint32_t remaining_samples = MAX_RECORD_LENGTH - converted_samples;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	695b      	ldr	r3, [r3, #20]
 80018b4:	f5c3 537a 	rsb	r3, r3, #16000	; 0x3e80
 80018b8:	613b      	str	r3, [r7, #16]
	uint32_t read_length = data_length;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	617b      	str	r3, [r7, #20]
	if (read_length >= remaining_samples) {
 80018be:	697a      	ldr	r2, [r7, #20]
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d301      	bcc.n	80018ca <_ZN11AudioPlayer17update_sai_bufferEmm+0x26>
		read_length = remaining_samples;
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	617b      	str	r3, [r7, #20]
	}
	if (read_length > 0) {
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d00f      	beq.n	80018f0 <_ZN11AudioPlayer17update_sai_bufferEmm+0x4c>
		qspi_read((uint8_t*)sai_buffer+offset, cur_data->qspi_address + converted_samples*WAVE_DATA_WIDTH, read_length * WAVE_DATA_WIDTH);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	18d0      	adds	r0, r2, r3
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	685a      	ldr	r2, [r3, #4]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	695b      	ldr	r3, [r3, #20]
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	18d1      	adds	r1, r2, r3
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	461a      	mov	r2, r3
 80018ec:	f000 ffef 	bl	80028ce <_Z9qspi_readPhmm>
//		for (uint32_t i = 0; i < read_length; i++){
//			conversion_buffer[i] = (uint16_t)(conversion_buffer[i] * WAVE_TO_SAI_SCALE_FACTOR + WAVE_TO_SAI_BIAS);
	}
		converted_samples += read_length;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	695a      	ldr	r2, [r3, #20]
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	441a      	add	r2, r3
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	615a      	str	r2, [r3, #20]
//		memcpy(sai_buffer + offset, conversion_buffer, read_length * SAI_DATA_WIDTH);
}
 80018fc:	bf00      	nop
 80018fe:	3718      	adds	r7, #24
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <_ZN8WaveDataC1Em>:
#include "qspi_handler.h"
#include <stdlib.h>
#include <stdint.h>
#include<stdio.h>

WaveData::WaveData(uint32_t qspi_address)
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
: qspi_address(qspi_address)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	683a      	ldr	r2, [r7, #0]
 8001912:	605a      	str	r2, [r3, #4]
{
	num_of_samples = 0;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
}
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4618      	mov	r0, r3
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <_ZN13AudioRecorderC1EP26DFSDM_Filter_HandleTypeDef>:

// constructor
AudioRecorder::AudioRecorder(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
: hdfsdm_filter(hdfsdm_filter)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	683a      	ldr	r2, [r7, #0]
 8001936:	611a      	str	r2, [r3, #16]
{
	dfsdm_stop_flag = 1;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2201      	movs	r2, #1
 800193c:	731a      	strb	r2, [r3, #12]
}
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4618      	mov	r0, r3
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <_ZN13AudioRecorderD1Ev>:

// destructor
AudioRecorder::~AudioRecorder() {
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
}
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	4618      	mov	r0, r3
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
	...

08001964 <_ZN13AudioRecorder12record_audioEm>:

// record audio
WaveData * AudioRecorder::record_audio(uint32_t qspi_address) {
 8001964:	b590      	push	{r4, r7, lr}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
	// create audio record instance
	cur_data = new WaveData(qspi_address);
 800196e:	2008      	movs	r0, #8
 8001970:	f00c fad5 	bl	800df1e <_Znwj>
 8001974:	4603      	mov	r3, r0
 8001976:	461c      	mov	r4, r3
 8001978:	6839      	ldr	r1, [r7, #0]
 800197a:	4620      	mov	r0, r4
 800197c:	f7ff ffc2 	bl	8001904 <_ZN8WaveDataC1Em>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	609c      	str	r4, [r3, #8]

	// start DFSDM
	wave_buffer = new int16_t[RECORD_BUFFER_LENGTH];
 8001984:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 8001988:	f00c fada 	bl	800df40 <_Znaj>
 800198c:	4603      	mov	r3, r0
 800198e:	461a      	mov	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	605a      	str	r2, [r3, #4]
	dfsdm_buffer = new int32_t[RECORD_BUFFER_LENGTH];
 8001994:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 8001998:	f00c fad2 	bl	800df40 <_Znaj>
 800199c:	4603      	mov	r3, r0
 800199e:	461a      	mov	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	601a      	str	r2, [r3, #0]

	dfsdm_stop_flag = 0;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	731a      	strb	r2, [r3, #12]
	if (HAL_DFSDM_FilterRegularStart_DMA(hdfsdm_filter, dfsdm_buffer,RECORD_BUFFER_LENGTH) == HAL_ERROR) {
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6918      	ldr	r0, [r3, #16]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80019b6:	4619      	mov	r1, r3
 80019b8:	f007 fe14 	bl	80095e4 <HAL_DFSDM_FilterRegularStart_DMA>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b01      	cmp	r3, #1
 80019c0:	bf0c      	ite	eq
 80019c2:	2301      	moveq	r3, #1
 80019c4:	2300      	movne	r3, #0
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <_ZN13AudioRecorder12record_audioEm+0x6c>
		Error_Handler();
 80019cc:	f000 ff7a 	bl	80028c4 <Error_Handler>
	}
	// Sleep while waiting for DFSDM conversion
	if(LOW_POWER_MODE){
 80019d0:	4b12      	ldr	r3, [pc, #72]	; (8001a1c <_ZN13AudioRecorder12record_audioEm+0xb8>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d003      	beq.n	80019e0 <_ZN13AudioRecorder12record_audioEm+0x7c>
		enter_sleep_mode();
 80019d8:	f000 f9ac 	bl	8001d34 <_Z16enter_sleep_modev>
		HAL_ResumeTick();
 80019dc:	f002 f934 	bl	8003c48 <HAL_ResumeTick>
	}
	while(!dfsdm_stop_flag);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	7b1b      	ldrb	r3, [r3, #12]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d100      	bne.n	80019ea <_ZN13AudioRecorder12record_audioEm+0x86>
 80019e8:	e7fa      	b.n	80019e0 <_ZN13AudioRecorder12record_audioEm+0x7c>
	delete [] dfsdm_buffer;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d004      	beq.n	80019fc <_ZN13AudioRecorder12record_audioEm+0x98>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f00c fa8f 	bl	800df1a <_ZdaPv>
	delete [] wave_buffer;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d004      	beq.n	8001a0e <_ZN13AudioRecorder12record_audioEm+0xaa>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f00c fa86 	bl	800df1a <_ZdaPv>
	return cur_data;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	689b      	ldr	r3, [r3, #8]
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd90      	pop	{r4, r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	200003b0 	.word	0x200003b0

08001a20 <_ZN13AudioRecorder18update_wave_bufferEmm>:

// update buffer. Method called by dfsdm callbacks functions.
void AudioRecorder::update_wave_buffer(uint32_t offset, uint32_t data_length) {
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b088      	sub	sp, #32
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
	uint32_t remaining_samples = MAX_RECORD_LENGTH - cur_data->num_of_samples;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f5c3 537a 	rsb	r3, r3, #16000	; 0x3e80
 8001a36:	617b      	str	r3, [r7, #20]
	uint32_t write_length = data_length;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	61fb      	str	r3, [r7, #28]
	if (write_length >= remaining_samples) {
 8001a3c:	69fa      	ldr	r2, [r7, #28]
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d301      	bcc.n	8001a48 <_ZN13AudioRecorder18update_wave_bufferEmm+0x28>
		write_length = remaining_samples;
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	61fb      	str	r3, [r7, #28]
	}
	// keep 24 MSB and cast to int16_t
	for (uint32_t i = 0;i < write_length; i++) {
 8001a48:	2300      	movs	r3, #0
 8001a4a:	61bb      	str	r3, [r7, #24]
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d213      	bcs.n	8001a7c <_ZN13AudioRecorder18update_wave_bufferEmm+0x5c>
		wave_buffer[i] = (int16_t)((dfsdm_buffer + offset)[i] >> 16);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	68b9      	ldr	r1, [r7, #8]
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	440b      	add	r3, r1
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	4413      	add	r3, r2
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	1419      	asrs	r1, r3, #16
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	685a      	ldr	r2, [r3, #4]
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	4413      	add	r3, r2
 8001a70:	b20a      	sxth	r2, r1
 8001a72:	801a      	strh	r2, [r3, #0]
	for (uint32_t i = 0;i < write_length; i++) {
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	3301      	adds	r3, #1
 8001a78:	61bb      	str	r3, [r7, #24]
 8001a7a:	e7e7      	b.n	8001a4c <_ZN13AudioRecorder18update_wave_bufferEmm+0x2c>
	}
	// write half of buffer
	qspi_write((uint8_t*)(wave_buffer), cur_data->qspi_address + (cur_data->num_of_samples * WAVE_DATA_WIDTH), write_length * WAVE_DATA_WIDTH);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	6858      	ldr	r0, [r3, #4]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	685a      	ldr	r2, [r3, #4]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	18d1      	adds	r1, r2, r3
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	461a      	mov	r2, r3
 8001a96:	f000 ff33 	bl	8002900 <_Z10qspi_writePhmm>
	cur_data->num_of_samples += write_length;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	6819      	ldr	r1, [r3, #0]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	69fa      	ldr	r2, [r7, #28]
 8001aa6:	440a      	add	r2, r1
 8001aa8:	601a      	str	r2, [r3, #0]
}
 8001aaa:	bf00      	nop
 8001aac:	3720      	adds	r7, #32
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
	...

08001ab4 <_ZN13AudioRecorder10print_dataEP8WaveData>:

// print recorded data in 16-bit signed format
void AudioRecorder::print_data(WaveData * data) {
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b08a      	sub	sp, #40	; 0x28
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
	// flash address pointers
	uint32_t printed_samples = 0;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	627b      	str	r3, [r7, #36]	; 0x24

	// buffer
	int16_t *buffer = new int16_t[PRINT_BUFFER_LENGTH];
 8001ac2:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 8001ac6:	f00c fa3b 	bl	800df40 <_Znaj>
 8001aca:	4603      	mov	r3, r0
 8001acc:	61fb      	str	r3, [r7, #28]

	// navigate through all DFSDM audio memory on flash
	while (printed_samples < data->num_of_samples) {
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d23a      	bcs.n	8001b4e <_ZN13AudioRecorder10print_dataEP8WaveData+0x9a>
		uint32_t remaining_samples = data->num_of_samples - printed_samples;
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	61bb      	str	r3, [r7, #24]
		uint32_t read_samples = remaining_samples < PRINT_BUFFER_LENGTH ? remaining_samples : PRINT_BUFFER_LENGTH;
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8001ae8:	bf28      	it	cs
 8001aea:	f44f 53fa 	movcs.w	r3, #8000	; 0x1f40
 8001aee:	617b      	str	r3, [r7, #20]

		// read from flash
		qspi_read((uint8_t*)buffer, data->qspi_address + printed_samples*WAVE_DATA_WIDTH, read_samples*WAVE_DATA_WIDTH);
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685a      	ldr	r2, [r3, #4]
 8001af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	18d1      	adds	r1, r2, r3
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	461a      	mov	r2, r3
 8001b00:	69f8      	ldr	r0, [r7, #28]
 8001b02:	f000 fee4 	bl	80028ce <_Z9qspi_readPhmm>

		// print to terminal
		for (uint32_t i = 0; i < PRINT_BUFFER_LENGTH; i++) {
 8001b06:	2300      	movs	r3, #0
 8001b08:	623b      	str	r3, [r7, #32]
 8001b0a:	6a3b      	ldr	r3, [r7, #32]
 8001b0c:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8001b10:	d218      	bcs.n	8001b44 <_ZN13AudioRecorder10print_dataEP8WaveData+0x90>
			char wav_str[10];
			sprintf(wav_str, "%d", (int)(buffer[i]));
 8001b12:	6a3b      	ldr	r3, [r7, #32]
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	69fa      	ldr	r2, [r7, #28]
 8001b18:	4413      	add	r3, r2
 8001b1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b1e:	461a      	mov	r2, r3
 8001b20:	f107 0308 	add.w	r3, r7, #8
 8001b24:	4910      	ldr	r1, [pc, #64]	; (8001b68 <_ZN13AudioRecorder10print_dataEP8WaveData+0xb4>)
 8001b26:	4618      	mov	r0, r3
 8001b28:	f00d ff4c 	bl	800f9c4 <siprintf>
			print(wav_str);
 8001b2c:	f107 0308 	add.w	r3, r7, #8
 8001b30:	4618      	mov	r0, r3
 8001b32:	f000 fe9b 	bl	800286c <print>
			print(",");
 8001b36:	480d      	ldr	r0, [pc, #52]	; (8001b6c <_ZN13AudioRecorder10print_dataEP8WaveData+0xb8>)
 8001b38:	f000 fe98 	bl	800286c <print>
		for (uint32_t i = 0; i < PRINT_BUFFER_LENGTH; i++) {
 8001b3c:	6a3b      	ldr	r3, [r7, #32]
 8001b3e:	3301      	adds	r3, #1
 8001b40:	623b      	str	r3, [r7, #32]
 8001b42:	e7e2      	b.n	8001b0a <_ZN13AudioRecorder10print_dataEP8WaveData+0x56>
		}

		printed_samples += read_samples;
 8001b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	4413      	add	r3, r2
 8001b4a:	627b      	str	r3, [r7, #36]	; 0x24
	while (printed_samples < data->num_of_samples) {
 8001b4c:	e7bf      	b.n	8001ace <_ZN13AudioRecorder10print_dataEP8WaveData+0x1a>
	}
	print("\r\n");
 8001b4e:	4808      	ldr	r0, [pc, #32]	; (8001b70 <_ZN13AudioRecorder10print_dataEP8WaveData+0xbc>)
 8001b50:	f000 fe8c 	bl	800286c <print>
	// free up memory
	delete [] buffer;
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d002      	beq.n	8001b60 <_ZN13AudioRecorder10print_dataEP8WaveData+0xac>
 8001b5a:	69f8      	ldr	r0, [r7, #28]
 8001b5c:	f00c f9dd 	bl	800df1a <_ZdaPv>
}
 8001b60:	bf00      	nop
 8001b62:	3728      	adds	r7, #40	; 0x28
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	08010088 	.word	0x08010088
 8001b6c:	0801008c 	.word	0x0801008c
 8001b70:	08010090 	.word	0x08010090

08001b74 <_Z13get_top_classPa>:


uint32_t num_output_classes = 12;


uint32_t get_top_class(q7_t* nn_output) {
 8001b74:	b480      	push	{r7}
 8001b76:	b087      	sub	sp, #28
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
	uint32_t max_index = 0;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	617b      	str	r3, [r7, #20]
	int32_t max_value = -128;
 8001b80:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8001b84:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < num_output_classes; i++) {
 8001b86:	2300      	movs	r3, #0
 8001b88:	60fb      	str	r3, [r7, #12]
 8001b8a:	4b10      	ldr	r3, [pc, #64]	; (8001bcc <_Z13get_top_classPa+0x58>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	68fa      	ldr	r2, [r7, #12]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d214      	bcs.n	8001bbe <_Z13get_top_classPa+0x4a>
		if (nn_output[i] > max_value) {
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	4413      	add	r3, r2
 8001b9a:	f993 3000 	ldrsb.w	r3, [r3]
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	da07      	bge.n	8001bb6 <_Z13get_top_classPa+0x42>
			max_index = i;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	617b      	str	r3, [r7, #20]
			max_value = nn_output[i];
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	4413      	add	r3, r2
 8001bb0:	f993 3000 	ldrsb.w	r3, [r3]
 8001bb4:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < num_output_classes; i++) {
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	e7e5      	b.n	8001b8a <_Z13get_top_classPa+0x16>
		}
	}
	return max_index;
 8001bbe:	697b      	ldr	r3, [r7, #20]
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	371c      	adds	r7, #28
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	20000000 	.word	0x20000000

08001bd0 <_Z19average_predictionsPaS_mm>:

void average_predictions(q7_t *average_out, q7_t* average_window_head, uint32_t num_predictions, uint32_t num_output_classes) {
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08a      	sub	sp, #40	; 0x28
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6178      	str	r0, [r7, #20]
 8001bd8:	6139      	str	r1, [r7, #16]
 8001bda:	60fa      	str	r2, [r7, #12]
 8001bdc:	60bb      	str	r3, [r7, #8]
	q15_t *sum = new q15_t[num_output_classes];
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	4a32      	ldr	r2, [pc, #200]	; (8001cac <_Z19average_predictionsPaS_mm+0xdc>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d801      	bhi.n	8001bea <_Z19average_predictionsPaS_mm+0x1a>
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	e001      	b.n	8001bee <_Z19average_predictionsPaS_mm+0x1e>
 8001bea:	f04f 33ff 	mov.w	r3, #4294967295
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f00c f9a6 	bl	800df40 <_Znaj>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	61fb      	str	r3, [r7, #28]
	for (uint32_t i = 0; i < num_output_classes; i++) {
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	627b      	str	r3, [r7, #36]	; 0x24
 8001bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d248      	bcs.n	8001c96 <_Z19average_predictionsPaS_mm+0xc6>
		sum[i] = 0;
 8001c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	69fa      	ldr	r2, [r7, #28]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	801a      	strh	r2, [r3, #0]
		for (uint32_t j = 0; j < num_predictions; j++) {
 8001c10:	2300      	movs	r3, #0
 8001c12:	623b      	str	r3, [r7, #32]
 8001c14:	6a3a      	ldr	r2, [r7, #32]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d21d      	bcs.n	8001c58 <_Z19average_predictionsPaS_mm+0x88>
			sum[i] += average_window_head[j * num_output_classes + i];
 8001c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	69fa      	ldr	r2, [r7, #28]
 8001c22:	4413      	add	r3, r2
 8001c24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c28:	b29a      	uxth	r2, r3
 8001c2a:	6a3b      	ldr	r3, [r7, #32]
 8001c2c:	68b9      	ldr	r1, [r7, #8]
 8001c2e:	fb01 f103 	mul.w	r1, r1, r3
 8001c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c34:	440b      	add	r3, r1
 8001c36:	6939      	ldr	r1, [r7, #16]
 8001c38:	440b      	add	r3, r1
 8001c3a:	f993 3000 	ldrsb.w	r3, [r3]
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	4413      	add	r3, r2
 8001c42:	b299      	uxth	r1, r3
 8001c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	69fa      	ldr	r2, [r7, #28]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	b20a      	sxth	r2, r1
 8001c4e:	801a      	strh	r2, [r3, #0]
		for (uint32_t j = 0; j < num_predictions; j++) {
 8001c50:	6a3b      	ldr	r3, [r7, #32]
 8001c52:	3301      	adds	r3, #1
 8001c54:	623b      	str	r3, [r7, #32]
 8001c56:	e7dd      	b.n	8001c14 <_Z19average_predictionsPaS_mm+0x44>
		}
		average_out[i] = sum[i] / (float) num_predictions;
 8001c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	69fa      	ldr	r2, [r7, #28]
 8001c5e:	4413      	add	r3, r2
 8001c60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c64:	ee07 3a90 	vmov	s15, r3
 8001c68:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	ee07 3a90 	vmov	s15, r3
 8001c72:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c7a:	697a      	ldr	r2, [r7, #20]
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7e:	4413      	add	r3, r2
 8001c80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c84:	edc7 7a01 	vstr	s15, [r7, #4]
 8001c88:	793a      	ldrb	r2, [r7, #4]
 8001c8a:	b252      	sxtb	r2, r2
 8001c8c:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < num_output_classes; i++) {
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c90:	3301      	adds	r3, #1
 8001c92:	627b      	str	r3, [r7, #36]	; 0x24
 8001c94:	e7b2      	b.n	8001bfc <_Z19average_predictionsPaS_mm+0x2c>
	}
	delete [] sum;
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d002      	beq.n	8001ca2 <_Z19average_predictionsPaS_mm+0xd2>
 8001c9c:	69f8      	ldr	r0, [r7, #28]
 8001c9e:	f00c f93c 	bl	800df1a <_ZdaPv>
}
 8001ca2:	bf00      	nop
 8001ca4:	3728      	adds	r7, #40	; 0x28
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	3ffffffc 	.word	0x3ffffffc

08001cb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	db0b      	blt.n	8001cda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cc2:	79fb      	ldrb	r3, [r7, #7]
 8001cc4:	f003 021f 	and.w	r2, r3, #31
 8001cc8:	4907      	ldr	r1, [pc, #28]	; (8001ce8 <__NVIC_EnableIRQ+0x38>)
 8001cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cce:	095b      	lsrs	r3, r3, #5
 8001cd0:	2001      	movs	r0, #1
 8001cd2:	fa00 f202 	lsl.w	r2, r0, r2
 8001cd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cda:	bf00      	nop
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	e000e100 	.word	0xe000e100

08001cec <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	db12      	blt.n	8001d24 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cfe:	79fb      	ldrb	r3, [r7, #7]
 8001d00:	f003 021f 	and.w	r2, r3, #31
 8001d04:	490a      	ldr	r1, [pc, #40]	; (8001d30 <__NVIC_DisableIRQ+0x44>)
 8001d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0a:	095b      	lsrs	r3, r3, #5
 8001d0c:	2001      	movs	r0, #1
 8001d0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d12:	3320      	adds	r3, #32
 8001d14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001d18:	f3bf 8f4f 	dsb	sy
}
 8001d1c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d1e:	f3bf 8f6f 	isb	sy
}
 8001d22:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001d24:	bf00      	nop
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	e000e100 	.word	0xe000e100

08001d34 <_Z16enter_sleep_modev>:
 *      Author: chrismartel
 */
#include "main.h"
#include "low_power.h"

void enter_sleep_mode(){
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0

	// disable the systick interrupt or else this interrupt will wake the mcu every time it is triggered
	HAL_SuspendTick();
 8001d38:	f001 ff74 	bl	8003c24 <HAL_SuspendTick>
	NVIC_DisableIRQ(TIM2_IRQn);
 8001d3c:	201c      	movs	r0, #28
 8001d3e:	f7ff ffd5 	bl	8001cec <__NVIC_DisableIRQ>
//	NVIC_DisableIRQ(TIM1_TRG_COM_TIM13_IRQn);
	// enter sleep mode with wait for interrupt (wfi)
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001d42:	2101      	movs	r1, #1
 8001d44:	2000      	movs	r0, #0
 8001d46:	f008 fcf5 	bl	800a734 <HAL_PWR_EnterSLEEPMode>

	NVIC_EnableIRQ(TIM2_IRQn);
 8001d4a:	201c      	movs	r0, #28
 8001d4c:	f7ff ffb0 	bl	8001cb0 <__NVIC_EnableIRQ>
//	NVIC_EnableIRQ(TIM1_TRG_COM_TIM13_IRQn);
	HAL_ResumeTick();
 8001d50:	f001 ff7a 	bl	8003c48 <HAL_ResumeTick>
}
 8001d54:	bf00      	nop
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d58:	b590      	push	{r4, r7, lr}
 8001d5a:	b0a7      	sub	sp, #156	; 0x9c
 8001d5c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d5e:	f007 f92e 	bl	8008fbe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d62:	f000 fa15 	bl	8002190 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d66:	f000 fbf1 	bl	800254c <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8001d6a:	f000 fbc9 	bl	8002500 <_ZL11MX_DMA_Initv>
  MX_DFSDM1_Init();
 8001d6e:	f000 fac9 	bl	8002304 <_ZL14MX_DFSDM1_Initv>
  MX_QUADSPI_Init();
 8001d72:	f000 fb27 	bl	80023c4 <_ZL15MX_QUADSPI_Initv>
  MX_USART1_UART_Init();
 8001d76:	f000 fb8f 	bl	8002498 <_ZL19MX_USART1_UART_Initv>
  MX_SAI1_Init();
 8001d7a:	f000 fb53 	bl	8002424 <_ZL12MX_SAI1_Initv>
  /* USER CODE BEGIN 2 */

  qspi_init();
 8001d7e:	f000 fdd8 	bl	8002932 <_Z9qspi_initv>
  main_state = SETUP;
 8001d82:	4bc1      	ldr	r3, [pc, #772]	; (8002088 <main+0x330>)
 8001d84:	2201      	movs	r2, #1
 8001d86:	701a      	strb	r2, [r3, #0]

  char output_class[12][8] = {"Silence", "Unknown","yes","no","up","down","left","right","on","off","stop","go"};
 8001d88:	4ac0      	ldr	r2, [pc, #768]	; (800208c <main+0x334>)
 8001d8a:	1d3b      	adds	r3, r7, #4
 8001d8c:	4611      	mov	r1, r2
 8001d8e:	2260      	movs	r2, #96	; 0x60
 8001d90:	4618      	mov	r0, r3
 8001d92:	f00d fcd9 	bl	800f748 <memcpy>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	switch(main_state) {
 8001d96:	4bbc      	ldr	r3, [pc, #752]	; (8002088 <main+0x330>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	2b04      	cmp	r3, #4
 8001d9e:	d8fa      	bhi.n	8001d96 <main+0x3e>
 8001da0:	a201      	add	r2, pc, #4	; (adr r2, 8001da8 <main+0x50>)
 8001da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001da6:	bf00      	nop
 8001da8:	08002165 	.word	0x08002165
 8001dac:	08001dbd 	.word	0x08001dbd
 8001db0:	08001e0b 	.word	0x08001e0b
 8001db4:	08001e67 	.word	0x08001e67
 8001db8:	0800211d 	.word	0x0800211d
	case SETUP:
	{
		ITM_Port32(31) = 1;
 8001dbc:	4bb4      	ldr	r3, [pc, #720]	; (8002090 <main+0x338>)
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	2120      	movs	r1, #32
 8001dc6:	48b3      	ldr	r0, [pc, #716]	; (8002094 <main+0x33c>)
 8001dc8:	f008 fc82 	bl	800a6d0 <HAL_GPIO_WritePin>

		// To indicate to user, don't do nothing when red light
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8001dcc:	2201      	movs	r2, #1
 8001dce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dd2:	48b0      	ldr	r0, [pc, #704]	; (8002094 <main+0x33c>)
 8001dd4:	f008 fc7c 	bl	800a6d0 <HAL_GPIO_WritePin>
		qspi_erase_blocks(WAVE_DATA_QSPI_ADDRESS, 6);
 8001dd8:	2106      	movs	r1, #6
 8001dda:	f44f 2020 	mov.w	r0, #655360	; 0xa0000
 8001dde:	f000 fdb9 	bl	8002954 <_Z17qspi_erase_blocksmm>
		HAL_Delay(2000);
 8001de2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001de6:	f007 f917 	bl	8009018 <HAL_Delay>

		ITM_Port32(31) = 2;
 8001dea:	4ba9      	ldr	r3, [pc, #676]	; (8002090 <main+0x338>)
 8001dec:	2202      	movs	r2, #2
 8001dee:	601a      	str	r2, [r3, #0]
		print("Press the blue button and say a keyword\r\n");
 8001df0:	48a9      	ldr	r0, [pc, #676]	; (8002098 <main+0x340>)
 8001df2:	f000 fd3b 	bl	800286c <print>
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8001df6:	2200      	movs	r2, #0
 8001df8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dfc:	48a5      	ldr	r0, [pc, #660]	; (8002094 <main+0x33c>)
 8001dfe:	f008 fc67 	bl	800a6d0 <HAL_GPIO_WritePin>
		main_state = READY;
 8001e02:	4ba1      	ldr	r3, [pc, #644]	; (8002088 <main+0x330>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	701a      	strb	r2, [r3, #0]
		break;
 8001e08:	e1b3      	b.n	8002172 <main+0x41a>
	}
	case RECORDING:
	{
		ITM_Port32(31) = 3;
 8001e0a:	4ba1      	ldr	r3, [pc, #644]	; (8002090 <main+0x338>)
 8001e0c:	2203      	movs	r2, #3
 8001e0e:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 8001e10:	2201      	movs	r2, #1
 8001e12:	2120      	movs	r1, #32
 8001e14:	489f      	ldr	r0, [pc, #636]	; (8002094 <main+0x33c>)
 8001e16:	f008 fc5b 	bl	800a6d0 <HAL_GPIO_WritePin>
		audio_recorder = new AudioRecorder(&hdfsdm1_filter0);
 8001e1a:	2014      	movs	r0, #20
 8001e1c:	f00c f87f 	bl	800df1e <_Znwj>
 8001e20:	4603      	mov	r3, r0
 8001e22:	461c      	mov	r4, r3
 8001e24:	499d      	ldr	r1, [pc, #628]	; (800209c <main+0x344>)
 8001e26:	4620      	mov	r0, r4
 8001e28:	f7ff fd7e 	bl	8001928 <_ZN13AudioRecorderC1EP26DFSDM_Filter_HandleTypeDef>
 8001e2c:	4b9c      	ldr	r3, [pc, #624]	; (80020a0 <main+0x348>)
 8001e2e:	601c      	str	r4, [r3, #0]
		wave_data = audio_recorder->record_audio(WAVE_DATA_QSPI_ADDRESS);
 8001e30:	4b9b      	ldr	r3, [pc, #620]	; (80020a0 <main+0x348>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff fd93 	bl	8001964 <_ZN13AudioRecorder12record_audioEm>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	4a98      	ldr	r2, [pc, #608]	; (80020a4 <main+0x34c>)
 8001e42:	6013      	str	r3, [r2, #0]

		ITM_Port32(31) = 4;
 8001e44:	4b92      	ldr	r3, [pc, #584]	; (8002090 <main+0x338>)
 8001e46:	2204      	movs	r2, #4
 8001e48:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	2120      	movs	r1, #32
 8001e4e:	4891      	ldr	r0, [pc, #580]	; (8002094 <main+0x33c>)
 8001e50:	f008 fc3e 	bl	800a6d0 <HAL_GPIO_WritePin>
//		main_state = NN;
		audio_recorder->~AudioRecorder();
 8001e54:	4b92      	ldr	r3, [pc, #584]	; (80020a0 <main+0x348>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff fd77 	bl	800194c <_ZN13AudioRecorderD1Ev>
		main_state = AUDIO_TEST;
 8001e5e:	4b8a      	ldr	r3, [pc, #552]	; (8002088 <main+0x330>)
 8001e60:	2204      	movs	r2, #4
 8001e62:	701a      	strb	r2, [r3, #0]
		break;
 8001e64:	e185      	b.n	8002172 <main+0x41a>
	}
	case NN:
	{
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8001e66:	2201      	movs	r2, #1
 8001e68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e6c:	4889      	ldr	r0, [pc, #548]	; (8002094 <main+0x33c>)
 8001e6e:	f008 fc2f 	bl	800a6d0 <HAL_GPIO_WritePin>

		// input buffer
		int16_t *audio_buffer = new int16_t[(RECORDING_WINDOW_LENGTH+1)*FRAME_SHIFT];
 8001e72:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001e76:	f00c f863 	bl	800df40 <_Znaj>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

		// mfcc coefficients
		q7_t *mfcc_out = (q7_t*) calloc(NUM_FRAMES * NUM_MFCC_COEFFS, sizeof(q7_t));
 8001e80:	2101      	movs	r1, #1
 8001e82:	f44f 70f5 	mov.w	r0, #490	; 0x1ea
 8001e86:	f00d fc1d 	bl	800f6c4 <calloc>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	67fb      	str	r3, [r7, #124]	; 0x7c

		// output buffer
		q7_t *predictions = (q7_t*) calloc(NUM_PREDICTIONS * NUM_OUTPUT_CLASSES, sizeof(q7_t));
 8001e8e:	2101      	movs	r1, #1
 8001e90:	206c      	movs	r0, #108	; 0x6c
 8001e92:	f00d fc17 	bl	800f6c4 <calloc>
 8001e96:	4603      	mov	r3, r0
 8001e98:	67bb      	str	r3, [r7, #120]	; 0x78

		// average predictions
		q7_t *average = new q7_t[NUM_OUTPUT_CLASSES];
 8001e9a:	200c      	movs	r0, #12
 8001e9c:	f00c f850 	bl	800df40 <_Znaj>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	677b      	str	r3, [r7, #116]	; 0x74

		uint32_t pred_index;

		q7_t *mfcc_head;
		DS_CNN *ds_cnn = new DS_CNN();
 8001ea4:	202c      	movs	r0, #44	; 0x2c
 8001ea6:	f00c f83a 	bl	800df1e <_Znwj>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	461c      	mov	r4, r3
 8001eae:	4620      	mov	r0, r4
 8001eb0:	f7ff f93e 	bl	8001130 <_ZN6DS_CNNC1Ev>
 8001eb4:	673c      	str	r4, [r7, #112]	; 0x70
		MFCC *mfcc = new MFCC(NUM_MFCC_COEFFS, FRAME_LEN, MFCC_DEC_BITS);
 8001eb6:	2034      	movs	r0, #52	; 0x34
 8001eb8:	f00c f831 	bl	800df1e <_Znwj>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	461c      	mov	r4, r3
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8001ec6:	210a      	movs	r1, #10
 8001ec8:	4620      	mov	r0, r4
 8001eca:	f7fe fc4d 	bl	8000768 <_ZN4MFCCC1Eiii>
 8001ece:	66fc      	str	r4, [r7, #108]	; 0x6c

		bool keyword_detected = false;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93

		q7_t *average_window_head = predictions;
 8001ed6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ed8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		for (uint32_t i = 0; i < NUM_PREDICTIONS; i ++) {
 8001edc:	2300      	movs	r3, #0
 8001ede:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001ee2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ee6:	2b08      	cmp	r3, #8
 8001ee8:	f200 80e8 	bhi.w	80020bc <main+0x364>
				qspi_read((uint8_t*)audio_buffer, WAVE_DATA_QSPI_ADDRESS + (i * RECORDING_WINDOW_LENGTH * FRAME_SHIFT * WAVE_DATA_WIDTH), RECORDING_WINDOW_SIZE);
 8001eec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ef0:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8001ef4:	fb02 f303 	mul.w	r3, r2, r3
 8001ef8:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
 8001efc:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8001f00:	4619      	mov	r1, r3
 8001f02:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001f06:	f000 fce2 	bl	80028ce <_Z9qspi_readPhmm>
				// move old data to the left
				arm_copy_q7(mfcc_out + (RECORDING_WINDOW_LENGTH * NUM_MFCC_COEFFS), mfcc_out, (NUM_FRAMES - RECORDING_WINDOW_LENGTH) * NUM_MFCC_COEFFS * sizeof(q7_t));
 8001f0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f0c:	3332      	adds	r3, #50	; 0x32
 8001f0e:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8001f12:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001f14:	4618      	mov	r0, r3
 8001f16:	f001 ff8c 	bl	8003e32 <arm_copy_q7>
				mfcc_head = mfcc_out + ((NUM_FRAMES-RECORDING_WINDOW_LENGTH) * NUM_MFCC_COEFFS);
 8001f1a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f1c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001f20:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
				for (uint32_t j = 0; j < RECORDING_WINDOW_LENGTH; j ++) {
 8001f24:	2300      	movs	r3, #0
 8001f26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001f2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f2e:	2b04      	cmp	r3, #4
 8001f30:	d81a      	bhi.n	8001f68 <main+0x210>
					mfcc->mfcc_compute(audio_buffer + (j * FRAME_SHIFT), mfcc_head);
 8001f32:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001f36:	4613      	mov	r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	4413      	add	r3, r2
 8001f3c:	01db      	lsls	r3, r3, #7
 8001f3e:	461a      	mov	r2, r3
 8001f40:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f44:	4413      	add	r3, r2
 8001f46:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001f4e:	f7fe ff19 	bl	8000d84 <_ZN4MFCC12mfcc_computeEPKsPa>
					mfcc_head += NUM_MFCC_COEFFS;
 8001f52:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001f56:	330a      	adds	r3, #10
 8001f58:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
				for (uint32_t j = 0; j < RECORDING_WINDOW_LENGTH; j ++) {
 8001f5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f60:	3301      	adds	r3, #1
 8001f62:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001f66:	e7e0      	b.n	8001f2a <main+0x1d2>
				}
				q7_t* nn_out = predictions + (i * NUM_OUTPUT_CLASSES);
 8001f68:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	4413      	add	r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	461a      	mov	r2, r3
 8001f76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f78:	4413      	add	r3, r2
 8001f7a:	66bb      	str	r3, [r7, #104]	; 0x68
				ds_cnn->run_nn(mfcc_out, nn_out);
 8001f7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	3308      	adds	r3, #8
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001f86:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001f88:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001f8a:	4798      	blx	r3
//				arm_softmax_q7(nn_out,NUM_OUTPUT_CLASSES,nn_out);

				// get prediction for each recording window
				if (DEBUG_MODE) {
 8001f8c:	4b46      	ldr	r3, [pc, #280]	; (80020a8 <main+0x350>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d014      	beq.n	8001fbe <main+0x266>
					pred_index = get_top_class(nn_out);
 8001f94:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8001f96:	f7ff fded 	bl	8001b74 <_Z13get_top_classPa>
 8001f9a:	6678      	str	r0, [r7, #100]	; 0x64
					sprintf(uart_buffer, "Prediction: \"%s\" score: %d\r\n", output_class[pred_index], nn_out[pred_index]);
 8001f9c:	1d3a      	adds	r2, r7, #4
 8001f9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001fa0:	00db      	lsls	r3, r3, #3
 8001fa2:	18d1      	adds	r1, r2, r3
 8001fa4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001fa6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001fa8:	4413      	add	r3, r2
 8001faa:	f993 3000 	ldrsb.w	r3, [r3]
 8001fae:	460a      	mov	r2, r1
 8001fb0:	493e      	ldr	r1, [pc, #248]	; (80020ac <main+0x354>)
 8001fb2:	483f      	ldr	r0, [pc, #252]	; (80020b0 <main+0x358>)
 8001fb4:	f00d fd06 	bl	800f9c4 <siprintf>
					print(uart_buffer);
 8001fb8:	483d      	ldr	r0, [pc, #244]	; (80020b0 <main+0x358>)
 8001fba:	f000 fc57 	bl	800286c <print>
				}

				// increment average window pointer
				if (i >= AVERAGE_WINDOW_LENGTH) {
 8001fbe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d904      	bls.n	8001fd0 <main+0x278>
					average_window_head += NUM_OUTPUT_CLASSES;
 8001fc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001fca:	330c      	adds	r3, #12
 8001fcc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
				}
				average_predictions(average, average_window_head, AVERAGE_WINDOW_LENGTH, NUM_OUTPUT_CLASSES);
 8001fd0:	230c      	movs	r3, #12
 8001fd2:	2203      	movs	r2, #3
 8001fd4:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8001fd8:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001fda:	f7ff fdf9 	bl	8001bd0 <_Z19average_predictionsPaS_mm>
				pred_index = get_top_class(average);
 8001fde:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001fe0:	f7ff fdc8 	bl	8001b74 <_Z13get_top_classPa>
 8001fe4:	6678      	str	r0, [r7, #100]	; 0x64

				if (DEBUG_MODE) {
 8001fe6:	4b30      	ldr	r3, [pc, #192]	; (80020a8 <main+0x350>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d010      	beq.n	8002010 <main+0x2b8>
					sprintf(uart_buffer, "Average: \"%s\" score: %d\r\n", output_class[pred_index], average[pred_index]);
 8001fee:	1d3a      	adds	r2, r7, #4
 8001ff0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	18d1      	adds	r1, r2, r3
 8001ff6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001ff8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ffa:	4413      	add	r3, r2
 8001ffc:	f993 3000 	ldrsb.w	r3, [r3]
 8002000:	460a      	mov	r2, r1
 8002002:	492c      	ldr	r1, [pc, #176]	; (80020b4 <main+0x35c>)
 8002004:	482a      	ldr	r0, [pc, #168]	; (80020b0 <main+0x358>)
 8002006:	f00d fcdd 	bl	800f9c4 <siprintf>
					print(uart_buffer);
 800200a:	4829      	ldr	r0, [pc, #164]	; (80020b0 <main+0x358>)
 800200c:	f000 fc2e 	bl	800286c <print>
				}

				if (average[pred_index] / 128.0 * 100 > DETECTION_THRESHOLD) {
 8002010:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002012:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002014:	4413      	add	r3, r2
 8002016:	f993 3000 	ldrsb.w	r3, [r3]
 800201a:	ee07 3a90 	vmov	s15, r3
 800201e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002022:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8002070 <main+0x318>
 8002026:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800202a:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8002078 <main+0x320>
 800202e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002032:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8002080 <main+0x328>
 8002036:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800203a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800203e:	dd0f      	ble.n	8002060 <main+0x308>
					sprintf(uart_buffer, "Keyword Detected: \"%s\"\r\n", output_class[pred_index]);
 8002040:	1d3a      	adds	r2, r7, #4
 8002042:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	4413      	add	r3, r2
 8002048:	461a      	mov	r2, r3
 800204a:	491b      	ldr	r1, [pc, #108]	; (80020b8 <main+0x360>)
 800204c:	4818      	ldr	r0, [pc, #96]	; (80020b0 <main+0x358>)
 800204e:	f00d fcb9 	bl	800f9c4 <siprintf>
					print(uart_buffer);
 8002052:	4817      	ldr	r0, [pc, #92]	; (80020b0 <main+0x358>)
 8002054:	f000 fc0a 	bl	800286c <print>
					keyword_detected = true;
 8002058:	2301      	movs	r3, #1
 800205a:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
					break;
 800205e:	e02d      	b.n	80020bc <main+0x364>
		for (uint32_t i = 0; i < NUM_PREDICTIONS; i ++) {
 8002060:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002064:	3301      	adds	r3, #1
 8002066:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800206a:	e73a      	b.n	8001ee2 <main+0x18a>
 800206c:	f3af 8000 	nop.w
 8002070:	00000000 	.word	0x00000000
 8002074:	40600000 	.word	0x40600000
 8002078:	00000000 	.word	0x00000000
 800207c:	40590000 	.word	0x40590000
 8002080:	00000000 	.word	0x00000000
 8002084:	40418000 	.word	0x40418000
 8002088:	2000033c 	.word	0x2000033c
 800208c:	08010130 	.word	0x08010130
 8002090:	e000007c 	.word	0xe000007c
 8002094:	40022400 	.word	0x40022400
 8002098:	08010094 	.word	0x08010094
 800209c:	2000009c 	.word	0x2000009c
 80020a0:	200003a4 	.word	0x200003a4
 80020a4:	200003a8 	.word	0x200003a8
 80020a8:	20000004 	.word	0x20000004
 80020ac:	080100c0 	.word	0x080100c0
 80020b0:	20000340 	.word	0x20000340
 80020b4:	080100e0 	.word	0x080100e0
 80020b8:	080100fc 	.word	0x080100fc
				}
		}

		if (!keyword_detected) {
 80020bc:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80020c0:	f083 0301 	eor.w	r3, r3, #1
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d002      	beq.n	80020d0 <main+0x378>
			print("No keyword detected.");
 80020ca:	482a      	ldr	r0, [pc, #168]	; (8002174 <main+0x41c>)
 80020cc:	f000 fbce 	bl	800286c <print>
		}

		mfcc->~MFCC();
 80020d0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80020d2:	f7fe fc19 	bl	8000908 <_ZN4MFCCD1Ev>
		ds_cnn->~DS_CNN();
 80020d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80020de:	4798      	blx	r3
		delete [] mfcc_out;
 80020e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d002      	beq.n	80020ec <main+0x394>
 80020e6:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80020e8:	f00b ff17 	bl	800df1a <_ZdaPv>
		delete [] predictions;
 80020ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d002      	beq.n	80020f8 <main+0x3a0>
 80020f2:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80020f4:	f00b ff11 	bl	800df1a <_ZdaPv>
		delete [] average;
 80020f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d002      	beq.n	8002104 <main+0x3ac>
 80020fe:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8002100:	f00b ff0b 	bl	800df1a <_ZdaPv>
		delete [] audio_buffer;
 8002104:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002108:	2b00      	cmp	r3, #0
 800210a:	d003      	beq.n	8002114 <main+0x3bc>
 800210c:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8002110:	f00b ff03 	bl	800df1a <_ZdaPv>
		main_state = SETUP;
 8002114:	4b18      	ldr	r3, [pc, #96]	; (8002178 <main+0x420>)
 8002116:	2201      	movs	r2, #1
 8002118:	701a      	strb	r2, [r3, #0]
		break;
 800211a:	e02a      	b.n	8002172 <main+0x41a>
	}
	case AUDIO_TEST:
	{
		audio_player = new AudioPlayer(&hsai_BlockA1);
 800211c:	2018      	movs	r0, #24
 800211e:	f00b fefe 	bl	800df1e <_Znwj>
 8002122:	4603      	mov	r3, r0
 8002124:	461c      	mov	r4, r3
 8002126:	4915      	ldr	r1, [pc, #84]	; (800217c <main+0x424>)
 8002128:	4620      	mov	r0, r4
 800212a:	f7ff fb5a 	bl	80017e2 <_ZN11AudioPlayerC1EP19__SAI_HandleTypeDef>
 800212e:	4b14      	ldr	r3, [pc, #80]	; (8002180 <main+0x428>)
 8002130:	601c      	str	r4, [r3, #0]
		audio_player->play_audio(wave_data);
 8002132:	4b13      	ldr	r3, [pc, #76]	; (8002180 <main+0x428>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a13      	ldr	r2, [pc, #76]	; (8002184 <main+0x42c>)
 8002138:	6812      	ldr	r2, [r2, #0]
 800213a:	4611      	mov	r1, r2
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff fb6d 	bl	800181c <_ZN11AudioPlayer10play_audioEP8WaveData>

		audio_recorder->print_data(wave_data);
 8002142:	4b11      	ldr	r3, [pc, #68]	; (8002188 <main+0x430>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a0f      	ldr	r2, [pc, #60]	; (8002184 <main+0x42c>)
 8002148:	6812      	ldr	r2, [r2, #0]
 800214a:	4611      	mov	r1, r2
 800214c:	4618      	mov	r0, r3
 800214e:	f7ff fcb1 	bl	8001ab4 <_ZN13AudioRecorder10print_dataEP8WaveData>
		main_state = NN;
 8002152:	4b09      	ldr	r3, [pc, #36]	; (8002178 <main+0x420>)
 8002154:	2203      	movs	r2, #3
 8002156:	701a      	strb	r2, [r3, #0]
//		main_state = SETUP;
		audio_player->~AudioPlayer();
 8002158:	4b09      	ldr	r3, [pc, #36]	; (8002180 <main+0x428>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff fb52 	bl	8001806 <_ZN11AudioPlayerD1Ev>

		break;
 8002162:	e006      	b.n	8002172 <main+0x41a>
	}
	case READY:
	{
		if (LOW_POWER_MODE)
 8002164:	4b09      	ldr	r3, [pc, #36]	; (800218c <main+0x434>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <main+0x418>
			enter_sleep_mode();
 800216c:	f7ff fde2 	bl	8001d34 <_Z16enter_sleep_modev>
		break;
 8002170:	bf00      	nop
	}
	}
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8002172:	e610      	b.n	8001d96 <main+0x3e>
 8002174:	08010118 	.word	0x08010118
 8002178:	2000033c 	.word	0x2000033c
 800217c:	200001d4 	.word	0x200001d4
 8002180:	200003ac 	.word	0x200003ac
 8002184:	200003a8 	.word	0x200003a8
 8002188:	200003a4 	.word	0x200003a4
 800218c:	200003b0 	.word	0x200003b0

08002190 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b0b8      	sub	sp, #224	; 0xe0
 8002194:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002196:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800219a:	2234      	movs	r2, #52	; 0x34
 800219c:	2100      	movs	r1, #0
 800219e:	4618      	mov	r0, r3
 80021a0:	f00d fafa 	bl	800f798 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021a4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	605a      	str	r2, [r3, #4]
 80021ae:	609a      	str	r2, [r3, #8]
 80021b0:	60da      	str	r2, [r3, #12]
 80021b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021b4:	f107 0308 	add.w	r3, r7, #8
 80021b8:	2290      	movs	r2, #144	; 0x90
 80021ba:	2100      	movs	r1, #0
 80021bc:	4618      	mov	r0, r3
 80021be:	f00d faeb 	bl	800f798 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021c2:	4b4d      	ldr	r3, [pc, #308]	; (80022f8 <_Z18SystemClock_Configv+0x168>)
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	4a4c      	ldr	r2, [pc, #304]	; (80022f8 <_Z18SystemClock_Configv+0x168>)
 80021c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021cc:	6413      	str	r3, [r2, #64]	; 0x40
 80021ce:	4b4a      	ldr	r3, [pc, #296]	; (80022f8 <_Z18SystemClock_Configv+0x168>)
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d6:	607b      	str	r3, [r7, #4]
 80021d8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021da:	4b48      	ldr	r3, [pc, #288]	; (80022fc <_Z18SystemClock_Configv+0x16c>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a47      	ldr	r2, [pc, #284]	; (80022fc <_Z18SystemClock_Configv+0x16c>)
 80021e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021e4:	6013      	str	r3, [r2, #0]
 80021e6:	4b45      	ldr	r3, [pc, #276]	; (80022fc <_Z18SystemClock_Configv+0x16c>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80021ee:	603b      	str	r3, [r7, #0]
 80021f0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80021f2:	2302      	movs	r3, #2
 80021f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021f8:	2301      	movs	r3, #1
 80021fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80021fe:	2310      	movs	r3, #16
 8002200:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002204:	2302      	movs	r3, #2
 8002206:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800220a:	2300      	movs	r3, #0
 800220c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002210:	2308      	movs	r3, #8
 8002212:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002216:	23d8      	movs	r3, #216	; 0xd8
 8002218:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800221c:	2302      	movs	r3, #2
 800221e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002222:	2304      	movs	r3, #4
 8002224:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002228:	2302      	movs	r3, #2
 800222a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800222e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002232:	4618      	mov	r0, r3
 8002234:	f008 ff60 	bl	800b0f8 <HAL_RCC_OscConfig>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	bf14      	ite	ne
 800223e:	2301      	movne	r3, #1
 8002240:	2300      	moveq	r3, #0
 8002242:	b2db      	uxtb	r3, r3
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <_Z18SystemClock_Configv+0xbc>
  {
    Error_Handler();
 8002248:	f000 fb3c 	bl	80028c4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800224c:	f008 fa94 	bl	800a778 <HAL_PWREx_EnableOverDrive>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	bf14      	ite	ne
 8002256:	2301      	movne	r3, #1
 8002258:	2300      	moveq	r3, #0
 800225a:	b2db      	uxtb	r3, r3
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8002260:	f000 fb30 	bl	80028c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002264:	230f      	movs	r3, #15
 8002266:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800226a:	2302      	movs	r3, #2
 800226c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002270:	2300      	movs	r3, #0
 8002272:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002276:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800227a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800227e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002282:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002286:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800228a:	2107      	movs	r1, #7
 800228c:	4618      	mov	r0, r3
 800228e:	f009 f9e1 	bl	800b654 <HAL_RCC_ClockConfig>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	bf14      	ite	ne
 8002298:	2301      	movne	r3, #1
 800229a:	2300      	moveq	r3, #0
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <_Z18SystemClock_Configv+0x116>
  {
    Error_Handler();
 80022a2:	f000 fb0f 	bl	80028c4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_USART1
 80022a6:	4b16      	ldr	r3, [pc, #88]	; (8002300 <_Z18SystemClock_Configv+0x170>)
 80022a8:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_SAI1;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80022aa:	23c0      	movs	r3, #192	; 0xc0
 80022ac:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80022ae:	2302      	movs	r3, #2
 80022b0:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 6;
 80022b2:	2306      	movs	r3, #6
 80022b4:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 80022b6:	2301      	movs	r3, #1
 80022b8:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80022ba:	2301      	movs	r3, #1
 80022bc:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80022be:	2300      	movs	r3, #0
 80022c0:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 80022c2:	2300      	movs	r3, #0
 80022c4:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80022c6:	2300      	movs	r3, #0
 80022c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80022ca:	2300      	movs	r3, #0
 80022cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022d0:	f107 0308 	add.w	r3, r7, #8
 80022d4:	4618      	mov	r0, r3
 80022d6:	f009 fbc5 	bl	800ba64 <HAL_RCCEx_PeriphCLKConfig>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	bf14      	ite	ne
 80022e0:	2301      	movne	r3, #1
 80022e2:	2300      	moveq	r3, #0
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <_Z18SystemClock_Configv+0x15e>
  {
    Error_Handler();
 80022ea:	f000 faeb 	bl	80028c4 <Error_Handler>
  }
}
 80022ee:	bf00      	nop
 80022f0:	37e0      	adds	r7, #224	; 0xe0
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	40023800 	.word	0x40023800
 80022fc:	40007000 	.word	0x40007000
 8002300:	08080040 	.word	0x08080040

08002304 <_ZL14MX_DFSDM1_Initv>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8002308:	4b29      	ldr	r3, [pc, #164]	; (80023b0 <_ZL14MX_DFSDM1_Initv+0xac>)
 800230a:	4a2a      	ldr	r2, [pc, #168]	; (80023b4 <_ZL14MX_DFSDM1_Initv+0xb0>)
 800230c:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800230e:	4b28      	ldr	r3, [pc, #160]	; (80023b0 <_ZL14MX_DFSDM1_Initv+0xac>)
 8002310:	2200      	movs	r2, #0
 8002312:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8002314:	4b26      	ldr	r3, [pc, #152]	; (80023b0 <_ZL14MX_DFSDM1_Initv+0xac>)
 8002316:	2201      	movs	r2, #1
 8002318:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 800231a:	4b25      	ldr	r3, [pc, #148]	; (80023b0 <_ZL14MX_DFSDM1_Initv+0xac>)
 800231c:	2201      	movs	r2, #1
 800231e:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8002320:	4b23      	ldr	r3, [pc, #140]	; (80023b0 <_ZL14MX_DFSDM1_Initv+0xac>)
 8002322:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8002326:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 100;
 8002328:	4b21      	ldr	r3, [pc, #132]	; (80023b0 <_ZL14MX_DFSDM1_Initv+0xac>)
 800232a:	2264      	movs	r2, #100	; 0x64
 800232c:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 800232e:	4b20      	ldr	r3, [pc, #128]	; (80023b0 <_ZL14MX_DFSDM1_Initv+0xac>)
 8002330:	2201      	movs	r2, #1
 8002332:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_DFSDM_FilterInit(&hdfsdm1_filter0);
 8002334:	481e      	ldr	r0, [pc, #120]	; (80023b0 <_ZL14MX_DFSDM1_Initv+0xac>)
 8002336:	f007 f835 	bl	80093a4 <HAL_DFSDM_FilterInit>
  hdfsdm1_channel5.Instance = DFSDM1_Channel5;
 800233a:	4b1f      	ldr	r3, [pc, #124]	; (80023b8 <_ZL14MX_DFSDM1_Initv+0xb4>)
 800233c:	4a1f      	ldr	r2, [pc, #124]	; (80023bc <_ZL14MX_DFSDM1_Initv+0xb8>)
 800233e:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel5.Init.OutputClock.Activation = ENABLE;
 8002340:	4b1d      	ldr	r3, [pc, #116]	; (80023b8 <_ZL14MX_DFSDM1_Initv+0xb4>)
 8002342:	2201      	movs	r2, #1
 8002344:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel5.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8002346:	4b1c      	ldr	r3, [pc, #112]	; (80023b8 <_ZL14MX_DFSDM1_Initv+0xb4>)
 8002348:	2200      	movs	r2, #0
 800234a:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel5.Init.OutputClock.Divider = 67;
 800234c:	4b1a      	ldr	r3, [pc, #104]	; (80023b8 <_ZL14MX_DFSDM1_Initv+0xb4>)
 800234e:	2243      	movs	r2, #67	; 0x43
 8002350:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel5.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8002352:	4b19      	ldr	r3, [pc, #100]	; (80023b8 <_ZL14MX_DFSDM1_Initv+0xb4>)
 8002354:	2200      	movs	r2, #0
 8002356:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel5.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8002358:	4b17      	ldr	r3, [pc, #92]	; (80023b8 <_ZL14MX_DFSDM1_Initv+0xb4>)
 800235a:	2200      	movs	r2, #0
 800235c:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel5.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 800235e:	4b16      	ldr	r3, [pc, #88]	; (80023b8 <_ZL14MX_DFSDM1_Initv+0xb4>)
 8002360:	2200      	movs	r2, #0
 8002362:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel5.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8002364:	4b14      	ldr	r3, [pc, #80]	; (80023b8 <_ZL14MX_DFSDM1_Initv+0xb4>)
 8002366:	2200      	movs	r2, #0
 8002368:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel5.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800236a:	4b13      	ldr	r3, [pc, #76]	; (80023b8 <_ZL14MX_DFSDM1_Initv+0xb4>)
 800236c:	2204      	movs	r2, #4
 800236e:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel5.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8002370:	4b11      	ldr	r3, [pc, #68]	; (80023b8 <_ZL14MX_DFSDM1_Initv+0xb4>)
 8002372:	2200      	movs	r2, #0
 8002374:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel5.Init.Awd.Oversampling = 1;
 8002376:	4b10      	ldr	r3, [pc, #64]	; (80023b8 <_ZL14MX_DFSDM1_Initv+0xb4>)
 8002378:	2201      	movs	r2, #1
 800237a:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel5.Init.Offset = 0;
 800237c:	4b0e      	ldr	r3, [pc, #56]	; (80023b8 <_ZL14MX_DFSDM1_Initv+0xb4>)
 800237e:	2200      	movs	r2, #0
 8002380:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel5.Init.RightBitShift = 0x00;
 8002382:	4b0d      	ldr	r3, [pc, #52]	; (80023b8 <_ZL14MX_DFSDM1_Initv+0xb4>)
 8002384:	2200      	movs	r2, #0
 8002386:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel5) != HAL_OK)
 8002388:	480b      	ldr	r0, [pc, #44]	; (80023b8 <_ZL14MX_DFSDM1_Initv+0xb4>)
 800238a:	f006 ff4b 	bl	8009224 <HAL_DFSDM_ChannelInit>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	bf14      	ite	ne
 8002394:	2301      	movne	r3, #1
 8002396:	2300      	moveq	r3, #0
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <_ZL14MX_DFSDM1_Initv+0x9e>
  {
    Error_Handler();
 800239e:	f000 fa91 	bl	80028c4 <Error_Handler>
  }
  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_5, DFSDM_CONTINUOUS_CONV_ON);
 80023a2:	2201      	movs	r2, #1
 80023a4:	4906      	ldr	r1, [pc, #24]	; (80023c0 <_ZL14MX_DFSDM1_Initv+0xbc>)
 80023a6:	4802      	ldr	r0, [pc, #8]	; (80023b0 <_ZL14MX_DFSDM1_Initv+0xac>)
 80023a8:	f007 f8d6 	bl	8009558 <HAL_DFSDM_FilterConfigRegChannel>
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80023ac:	bf00      	nop
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	2000009c 	.word	0x2000009c
 80023b4:	40017500 	.word	0x40017500
 80023b8:	200000f0 	.word	0x200000f0
 80023bc:	400174a0 	.word	0x400174a0
 80023c0:	00050020 	.word	0x00050020

080023c4 <_ZL15MX_QUADSPI_Initv>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80023c8:	4b14      	ldr	r3, [pc, #80]	; (800241c <_ZL15MX_QUADSPI_Initv+0x58>)
 80023ca:	4a15      	ldr	r2, [pc, #84]	; (8002420 <_ZL15MX_QUADSPI_Initv+0x5c>)
 80023cc:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80023ce:	4b13      	ldr	r3, [pc, #76]	; (800241c <_ZL15MX_QUADSPI_Initv+0x58>)
 80023d0:	22ff      	movs	r2, #255	; 0xff
 80023d2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80023d4:	4b11      	ldr	r3, [pc, #68]	; (800241c <_ZL15MX_QUADSPI_Initv+0x58>)
 80023d6:	2201      	movs	r2, #1
 80023d8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80023da:	4b10      	ldr	r3, [pc, #64]	; (800241c <_ZL15MX_QUADSPI_Initv+0x58>)
 80023dc:	2200      	movs	r2, #0
 80023de:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 80023e0:	4b0e      	ldr	r3, [pc, #56]	; (800241c <_ZL15MX_QUADSPI_Initv+0x58>)
 80023e2:	2201      	movs	r2, #1
 80023e4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80023e6:	4b0d      	ldr	r3, [pc, #52]	; (800241c <_ZL15MX_QUADSPI_Initv+0x58>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80023ec:	4b0b      	ldr	r3, [pc, #44]	; (800241c <_ZL15MX_QUADSPI_Initv+0x58>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80023f2:	4b0a      	ldr	r3, [pc, #40]	; (800241c <_ZL15MX_QUADSPI_Initv+0x58>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80023f8:	4b08      	ldr	r3, [pc, #32]	; (800241c <_ZL15MX_QUADSPI_Initv+0x58>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80023fe:	4807      	ldr	r0, [pc, #28]	; (800241c <_ZL15MX_QUADSPI_Initv+0x58>)
 8002400:	f008 fa0a 	bl	800a818 <HAL_QSPI_Init>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	bf14      	ite	ne
 800240a:	2301      	movne	r3, #1
 800240c:	2300      	moveq	r3, #0
 800240e:	b2db      	uxtb	r3, r3
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <_ZL15MX_QUADSPI_Initv+0x54>
  {
    Error_Handler();
 8002414:	f000 fa56 	bl	80028c4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8002418:	bf00      	nop
 800241a:	bd80      	pop	{r7, pc}
 800241c:	20000188 	.word	0x20000188
 8002420:	a0001000 	.word	0xa0001000

08002424 <_ZL12MX_SAI1_Initv>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8002428:	4b19      	ldr	r3, [pc, #100]	; (8002490 <_ZL12MX_SAI1_Initv+0x6c>)
 800242a:	4a1a      	ldr	r2, [pc, #104]	; (8002494 <_ZL12MX_SAI1_Initv+0x70>)
 800242c:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 800242e:	4b18      	ldr	r3, [pc, #96]	; (8002490 <_ZL12MX_SAI1_Initv+0x6c>)
 8002430:	2200      	movs	r2, #0
 8002432:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8002434:	4b16      	ldr	r3, [pc, #88]	; (8002490 <_ZL12MX_SAI1_Initv+0x6c>)
 8002436:	2200      	movs	r2, #0
 8002438:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800243a:	4b15      	ldr	r3, [pc, #84]	; (8002490 <_ZL12MX_SAI1_Initv+0x6c>)
 800243c:	2200      	movs	r2, #0
 800243e:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8002440:	4b13      	ldr	r3, [pc, #76]	; (8002490 <_ZL12MX_SAI1_Initv+0x6c>)
 8002442:	2200      	movs	r2, #0
 8002444:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8002446:	4b12      	ldr	r3, [pc, #72]	; (8002490 <_ZL12MX_SAI1_Initv+0x6c>)
 8002448:	2200      	movs	r2, #0
 800244a:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_16K;
 800244c:	4b10      	ldr	r3, [pc, #64]	; (8002490 <_ZL12MX_SAI1_Initv+0x6c>)
 800244e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8002452:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002454:	4b0e      	ldr	r3, [pc, #56]	; (8002490 <_ZL12MX_SAI1_Initv+0x6c>)
 8002456:	2200      	movs	r2, #0
 8002458:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 800245a:	4b0d      	ldr	r3, [pc, #52]	; (8002490 <_ZL12MX_SAI1_Initv+0x6c>)
 800245c:	2200      	movs	r2, #0
 800245e:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8002460:	4b0b      	ldr	r3, [pc, #44]	; (8002490 <_ZL12MX_SAI1_Initv+0x6c>)
 8002462:	2200      	movs	r2, #0
 8002464:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002466:	4b0a      	ldr	r3, [pc, #40]	; (8002490 <_ZL12MX_SAI1_Initv+0x6c>)
 8002468:	2200      	movs	r2, #0
 800246a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 800246c:	2302      	movs	r3, #2
 800246e:	2200      	movs	r2, #0
 8002470:	2100      	movs	r1, #0
 8002472:	4807      	ldr	r0, [pc, #28]	; (8002490 <_ZL12MX_SAI1_Initv+0x6c>)
 8002474:	f00a f890 	bl	800c598 <HAL_SAI_InitProtocol>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	bf14      	ite	ne
 800247e:	2301      	movne	r3, #1
 8002480:	2300      	moveq	r3, #0
 8002482:	b2db      	uxtb	r3, r3
 8002484:	2b00      	cmp	r3, #0
 8002486:	d001      	beq.n	800248c <_ZL12MX_SAI1_Initv+0x68>
  {
    Error_Handler();
 8002488:	f000 fa1c 	bl	80028c4 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 800248c:	bf00      	nop
 800248e:	bd80      	pop	{r7, pc}
 8002490:	200001d4 	.word	0x200001d4
 8002494:	40015804 	.word	0x40015804

08002498 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800249c:	4b16      	ldr	r3, [pc, #88]	; (80024f8 <_ZL19MX_USART1_UART_Initv+0x60>)
 800249e:	4a17      	ldr	r2, [pc, #92]	; (80024fc <_ZL19MX_USART1_UART_Initv+0x64>)
 80024a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80024a2:	4b15      	ldr	r3, [pc, #84]	; (80024f8 <_ZL19MX_USART1_UART_Initv+0x60>)
 80024a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80024a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80024aa:	4b13      	ldr	r3, [pc, #76]	; (80024f8 <_ZL19MX_USART1_UART_Initv+0x60>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80024b0:	4b11      	ldr	r3, [pc, #68]	; (80024f8 <_ZL19MX_USART1_UART_Initv+0x60>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80024b6:	4b10      	ldr	r3, [pc, #64]	; (80024f8 <_ZL19MX_USART1_UART_Initv+0x60>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80024bc:	4b0e      	ldr	r3, [pc, #56]	; (80024f8 <_ZL19MX_USART1_UART_Initv+0x60>)
 80024be:	220c      	movs	r2, #12
 80024c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024c2:	4b0d      	ldr	r3, [pc, #52]	; (80024f8 <_ZL19MX_USART1_UART_Initv+0x60>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80024c8:	4b0b      	ldr	r3, [pc, #44]	; (80024f8 <_ZL19MX_USART1_UART_Initv+0x60>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024ce:	4b0a      	ldr	r3, [pc, #40]	; (80024f8 <_ZL19MX_USART1_UART_Initv+0x60>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024d4:	4b08      	ldr	r3, [pc, #32]	; (80024f8 <_ZL19MX_USART1_UART_Initv+0x60>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80024da:	4807      	ldr	r0, [pc, #28]	; (80024f8 <_ZL19MX_USART1_UART_Initv+0x60>)
 80024dc:	f00b f828 	bl	800d530 <HAL_UART_Init>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	bf14      	ite	ne
 80024e6:	2301      	movne	r3, #1
 80024e8:	2300      	moveq	r3, #0
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <_ZL19MX_USART1_UART_Initv+0x5c>
  {
    Error_Handler();
 80024f0:	f000 f9e8 	bl	80028c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80024f4:	bf00      	nop
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	200002b8 	.word	0x200002b8
 80024fc:	40011000 	.word	0x40011000

08002500 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002506:	4b10      	ldr	r3, [pc, #64]	; (8002548 <_ZL11MX_DMA_Initv+0x48>)
 8002508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250a:	4a0f      	ldr	r2, [pc, #60]	; (8002548 <_ZL11MX_DMA_Initv+0x48>)
 800250c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002510:	6313      	str	r3, [r2, #48]	; 0x30
 8002512:	4b0d      	ldr	r3, [pc, #52]	; (8002548 <_ZL11MX_DMA_Initv+0x48>)
 8002514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002516:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800251a:	607b      	str	r3, [r7, #4]
 800251c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800251e:	2200      	movs	r2, #0
 8002520:	2100      	movs	r1, #0
 8002522:	2038      	movs	r0, #56	; 0x38
 8002524:	f006 fe54 	bl	80091d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002528:	2038      	movs	r0, #56	; 0x38
 800252a:	f006 fe6d 	bl	8009208 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800252e:	2200      	movs	r2, #0
 8002530:	2100      	movs	r1, #0
 8002532:	2039      	movs	r0, #57	; 0x39
 8002534:	f006 fe4c 	bl	80091d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002538:	2039      	movs	r0, #57	; 0x39
 800253a:	f006 fe65 	bl	8009208 <HAL_NVIC_EnableIRQ>

}
 800253e:	bf00      	nop
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	40023800 	.word	0x40023800

0800254c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b08c      	sub	sp, #48	; 0x30
 8002550:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002552:	f107 031c 	add.w	r3, r7, #28
 8002556:	2200      	movs	r2, #0
 8002558:	601a      	str	r2, [r3, #0]
 800255a:	605a      	str	r2, [r3, #4]
 800255c:	609a      	str	r2, [r3, #8]
 800255e:	60da      	str	r2, [r3, #12]
 8002560:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002562:	4b3b      	ldr	r3, [pc, #236]	; (8002650 <_ZL12MX_GPIO_Initv+0x104>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	4a3a      	ldr	r2, [pc, #232]	; (8002650 <_ZL12MX_GPIO_Initv+0x104>)
 8002568:	f043 0310 	orr.w	r3, r3, #16
 800256c:	6313      	str	r3, [r2, #48]	; 0x30
 800256e:	4b38      	ldr	r3, [pc, #224]	; (8002650 <_ZL12MX_GPIO_Initv+0x104>)
 8002570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002572:	f003 0310 	and.w	r3, r3, #16
 8002576:	61bb      	str	r3, [r7, #24]
 8002578:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800257a:	4b35      	ldr	r3, [pc, #212]	; (8002650 <_ZL12MX_GPIO_Initv+0x104>)
 800257c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257e:	4a34      	ldr	r2, [pc, #208]	; (8002650 <_ZL12MX_GPIO_Initv+0x104>)
 8002580:	f043 0302 	orr.w	r3, r3, #2
 8002584:	6313      	str	r3, [r2, #48]	; 0x30
 8002586:	4b32      	ldr	r3, [pc, #200]	; (8002650 <_ZL12MX_GPIO_Initv+0x104>)
 8002588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	617b      	str	r3, [r7, #20]
 8002590:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002592:	4b2f      	ldr	r3, [pc, #188]	; (8002650 <_ZL12MX_GPIO_Initv+0x104>)
 8002594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002596:	4a2e      	ldr	r2, [pc, #184]	; (8002650 <_ZL12MX_GPIO_Initv+0x104>)
 8002598:	f043 0301 	orr.w	r3, r3, #1
 800259c:	6313      	str	r3, [r2, #48]	; 0x30
 800259e:	4b2c      	ldr	r3, [pc, #176]	; (8002650 <_ZL12MX_GPIO_Initv+0x104>)
 80025a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	613b      	str	r3, [r7, #16]
 80025a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80025aa:	4b29      	ldr	r3, [pc, #164]	; (8002650 <_ZL12MX_GPIO_Initv+0x104>)
 80025ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ae:	4a28      	ldr	r2, [pc, #160]	; (8002650 <_ZL12MX_GPIO_Initv+0x104>)
 80025b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025b4:	6313      	str	r3, [r2, #48]	; 0x30
 80025b6:	4b26      	ldr	r3, [pc, #152]	; (8002650 <_ZL12MX_GPIO_Initv+0x104>)
 80025b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025be:	60fb      	str	r3, [r7, #12]
 80025c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025c2:	4b23      	ldr	r3, [pc, #140]	; (8002650 <_ZL12MX_GPIO_Initv+0x104>)
 80025c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c6:	4a22      	ldr	r2, [pc, #136]	; (8002650 <_ZL12MX_GPIO_Initv+0x104>)
 80025c8:	f043 0304 	orr.w	r3, r3, #4
 80025cc:	6313      	str	r3, [r2, #48]	; 0x30
 80025ce:	4b20      	ldr	r3, [pc, #128]	; (8002650 <_ZL12MX_GPIO_Initv+0x104>)
 80025d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d2:	f003 0304 	and.w	r3, r3, #4
 80025d6:	60bb      	str	r3, [r7, #8]
 80025d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80025da:	4b1d      	ldr	r3, [pc, #116]	; (8002650 <_ZL12MX_GPIO_Initv+0x104>)
 80025dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025de:	4a1c      	ldr	r2, [pc, #112]	; (8002650 <_ZL12MX_GPIO_Initv+0x104>)
 80025e0:	f043 0308 	orr.w	r3, r3, #8
 80025e4:	6313      	str	r3, [r2, #48]	; 0x30
 80025e6:	4b1a      	ldr	r3, [pc, #104]	; (8002650 <_ZL12MX_GPIO_Initv+0x104>)
 80025e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ea:	f003 0308 	and.w	r3, r3, #8
 80025ee:	607b      	str	r3, [r7, #4]
 80025f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, RED_LED_Pin|GREEN_LED_Pin, GPIO_PIN_RESET);
 80025f2:	2200      	movs	r2, #0
 80025f4:	f242 0120 	movw	r1, #8224	; 0x2020
 80025f8:	4816      	ldr	r0, [pc, #88]	; (8002654 <_ZL12MX_GPIO_Initv+0x108>)
 80025fa:	f008 f869 	bl	800a6d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RED_LED_Pin GREEN_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin|GREEN_LED_Pin;
 80025fe:	f242 0320 	movw	r3, #8224	; 0x2020
 8002602:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002604:	2301      	movs	r3, #1
 8002606:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002608:	2300      	movs	r3, #0
 800260a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800260c:	2300      	movs	r3, #0
 800260e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002610:	f107 031c 	add.w	r3, r7, #28
 8002614:	4619      	mov	r1, r3
 8002616:	480f      	ldr	r0, [pc, #60]	; (8002654 <_ZL12MX_GPIO_Initv+0x108>)
 8002618:	f007 fda2 	bl	800a160 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 800261c:	2301      	movs	r3, #1
 800261e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002620:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002624:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002626:	2300      	movs	r3, #0
 8002628:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800262a:	f107 031c 	add.w	r3, r7, #28
 800262e:	4619      	mov	r1, r3
 8002630:	4809      	ldr	r0, [pc, #36]	; (8002658 <_ZL12MX_GPIO_Initv+0x10c>)
 8002632:	f007 fd95 	bl	800a160 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002636:	2200      	movs	r2, #0
 8002638:	2100      	movs	r1, #0
 800263a:	2006      	movs	r0, #6
 800263c:	f006 fdc8 	bl	80091d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002640:	2006      	movs	r0, #6
 8002642:	f006 fde1 	bl	8009208 <HAL_NVIC_EnableIRQ>

}
 8002646:	bf00      	nop
 8002648:	3730      	adds	r7, #48	; 0x30
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	40023800 	.word	0x40023800
 8002654:	40022400 	.word	0x40022400
 8002658:	40020000 	.word	0x40020000

0800265c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	4603      	mov	r3, r0
 8002664:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin) {
 8002666:	88fb      	ldrh	r3, [r7, #6]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d11e      	bne.n	80026aa <HAL_GPIO_EXTI_Callback+0x4e>
	case BLUE_BUTTON_Pin:
		switch(main_state) {
 800266c:	4b12      	ldr	r3, [pc, #72]	; (80026b8 <HAL_GPIO_EXTI_Callback+0x5c>)
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b05      	cmp	r3, #5
 8002674:	d818      	bhi.n	80026a8 <HAL_GPIO_EXTI_Callback+0x4c>
 8002676:	a201      	add	r2, pc, #4	; (adr r2, 800267c <HAL_GPIO_EXTI_Callback+0x20>)
 8002678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800267c:	08002695 	.word	0x08002695
 8002680:	080026a7 	.word	0x080026a7
 8002684:	0800269d 	.word	0x0800269d
 8002688:	080026a7 	.word	0x080026a7
 800268c:	080026a7 	.word	0x080026a7
 8002690:	080026a7 	.word	0x080026a7
		case READY:
			main_state = RECORDING;
 8002694:	4b08      	ldr	r3, [pc, #32]	; (80026b8 <HAL_GPIO_EXTI_Callback+0x5c>)
 8002696:	2202      	movs	r2, #2
 8002698:	701a      	strb	r2, [r3, #0]
			break;
 800269a:	e005      	b.n	80026a8 <HAL_GPIO_EXTI_Callback+0x4c>
		case RECORDING:
			audio_recorder->dfsdm_stop_flag = 1;
 800269c:	4b07      	ldr	r3, [pc, #28]	; (80026bc <HAL_GPIO_EXTI_Callback+0x60>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2201      	movs	r2, #1
 80026a2:	731a      	strb	r2, [r3, #12]
			break;
 80026a4:	e000      	b.n	80026a8 <HAL_GPIO_EXTI_Callback+0x4c>
		case SETUP:
		case MFCC_TEST:
		case AUDIO_TEST:
		case NN:
			break;
 80026a6:	bf00      	nop
		}
		break;
 80026a8:	bf00      	nop
	}
}
 80026aa:	bf00      	nop
 80026ac:	370c      	adds	r7, #12
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	2000033c 	.word	0x2000033c
 80026bc:	200003a4 	.word	0x200003a4

080026c0 <HAL_SAI_TxHalfCpltCallback>:

// SAI Circular DMA callback functions
void HAL_SAI_TxHalfCpltCallback (SAI_HandleTypeDef *hsai) {
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
	if (hsai->Instance == SAI1_Block_A) {
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a17      	ldr	r2, [pc, #92]	; (800272c <HAL_SAI_TxHalfCpltCallback+0x6c>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d127      	bne.n	8002722 <HAL_SAI_TxHalfCpltCallback+0x62>
		audio_player->played_samples += PLAY_HALF_BUFFER_LENGTH;
 80026d2:	4b17      	ldr	r3, [pc, #92]	; (8002730 <HAL_SAI_TxHalfCpltCallback+0x70>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	691a      	ldr	r2, [r3, #16]
 80026d8:	4b15      	ldr	r3, [pc, #84]	; (8002730 <HAL_SAI_TxHalfCpltCallback+0x70>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f502 627a 	add.w	r2, r2, #4000	; 0xfa0
 80026e0:	611a      	str	r2, [r3, #16]
		if (audio_player->played_samples >= MAX_RECORD_LENGTH) {
 80026e2:	4b13      	ldr	r3, [pc, #76]	; (8002730 <HAL_SAI_TxHalfCpltCallback+0x70>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80026ec:	d311      	bcc.n	8002712 <HAL_SAI_TxHalfCpltCallback+0x52>
			if (HAL_SAI_DMAStop(hsai) == HAL_ERROR) {
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f00a f904 	bl	800c8fc <HAL_SAI_DMAStop>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	bf0c      	ite	eq
 80026fa:	2301      	moveq	r3, #1
 80026fc:	2300      	movne	r3, #0
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <HAL_SAI_TxHalfCpltCallback+0x48>
				Error_Handler();
 8002704:	f000 f8de 	bl	80028c4 <Error_Handler>
			}
			audio_player->sai_stop_flag = 1;
 8002708:	4b09      	ldr	r3, [pc, #36]	; (8002730 <HAL_SAI_TxHalfCpltCallback+0x70>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2201      	movs	r2, #1
 800270e:	721a      	strb	r2, [r3, #8]
		}
		else {
			audio_player->update_sai_buffer(0, PLAY_HALF_BUFFER_LENGTH);
		}
	}
}
 8002710:	e007      	b.n	8002722 <HAL_SAI_TxHalfCpltCallback+0x62>
			audio_player->update_sai_buffer(0, PLAY_HALF_BUFFER_LENGTH);
 8002712:	4b07      	ldr	r3, [pc, #28]	; (8002730 <HAL_SAI_TxHalfCpltCallback+0x70>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800271a:	2100      	movs	r1, #0
 800271c:	4618      	mov	r0, r3
 800271e:	f7ff f8c1 	bl	80018a4 <_ZN11AudioPlayer17update_sai_bufferEmm>
}
 8002722:	bf00      	nop
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	40015804 	.word	0x40015804
 8002730:	200003ac 	.word	0x200003ac

08002734 <HAL_SAI_TxCpltCallback>:

void HAL_SAI_TxCpltCallback (SAI_HandleTypeDef *hsai) {
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
	audio_player->played_samples += PLAY_HALF_BUFFER_LENGTH;
 800273c:	4b18      	ldr	r3, [pc, #96]	; (80027a0 <HAL_SAI_TxCpltCallback+0x6c>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	691a      	ldr	r2, [r3, #16]
 8002742:	4b17      	ldr	r3, [pc, #92]	; (80027a0 <HAL_SAI_TxCpltCallback+0x6c>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f502 627a 	add.w	r2, r2, #4000	; 0xfa0
 800274a:	611a      	str	r2, [r3, #16]
	if (hsai->Instance == SAI1_Block_A) {
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a14      	ldr	r2, [pc, #80]	; (80027a4 <HAL_SAI_TxCpltCallback+0x70>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d120      	bne.n	8002798 <HAL_SAI_TxCpltCallback+0x64>
		if (audio_player->played_samples >= MAX_RECORD_LENGTH) {
 8002756:	4b12      	ldr	r3, [pc, #72]	; (80027a0 <HAL_SAI_TxCpltCallback+0x6c>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	691b      	ldr	r3, [r3, #16]
 800275c:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8002760:	d311      	bcc.n	8002786 <HAL_SAI_TxCpltCallback+0x52>
			if (HAL_SAI_DMAStop(hsai) == HAL_ERROR) {
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f00a f8ca 	bl	800c8fc <HAL_SAI_DMAStop>
 8002768:	4603      	mov	r3, r0
 800276a:	2b01      	cmp	r3, #1
 800276c:	bf0c      	ite	eq
 800276e:	2301      	moveq	r3, #1
 8002770:	2300      	movne	r3, #0
 8002772:	b2db      	uxtb	r3, r3
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <HAL_SAI_TxCpltCallback+0x48>
				Error_Handler();
 8002778:	f000 f8a4 	bl	80028c4 <Error_Handler>
			}
			audio_player->sai_stop_flag = 1;
 800277c:	4b08      	ldr	r3, [pc, #32]	; (80027a0 <HAL_SAI_TxCpltCallback+0x6c>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2201      	movs	r2, #1
 8002782:	721a      	strb	r2, [r3, #8]
		}
		else {
			audio_player->update_sai_buffer(PLAY_HALF_BUFFER_LENGTH, PLAY_HALF_BUFFER_LENGTH);
		}
	}
}
 8002784:	e008      	b.n	8002798 <HAL_SAI_TxCpltCallback+0x64>
			audio_player->update_sai_buffer(PLAY_HALF_BUFFER_LENGTH, PLAY_HALF_BUFFER_LENGTH);
 8002786:	4b06      	ldr	r3, [pc, #24]	; (80027a0 <HAL_SAI_TxCpltCallback+0x6c>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800278e:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8002792:	4618      	mov	r0, r3
 8002794:	f7ff f886 	bl	80018a4 <_ZN11AudioPlayer17update_sai_bufferEmm>
}
 8002798:	bf00      	nop
 800279a:	3708      	adds	r7, #8
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	200003ac 	.word	0x200003ac
 80027a4:	40015804 	.word	0x40015804

080027a8 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:

// DFSDM Circular DMA Callback Functions
void HAL_DFSDM_FilterRegConvHalfCpltCallback (DFSDM_Filter_HandleTypeDef *hdfsdm_filter) {
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
	if (hdfsdm_filter == &hdfsdm1_filter0) {
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4a13      	ldr	r2, [pc, #76]	; (8002800 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x58>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d11f      	bne.n	80027f8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x50>
		audio_recorder->update_wave_buffer(0, RECORD_HALF_BUFFER_LENGTH);
 80027b8:	4b12      	ldr	r3, [pc, #72]	; (8002804 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x5c>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80027c0:	2100      	movs	r1, #0
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7ff f92c 	bl	8001a20 <_ZN13AudioRecorder18update_wave_bufferEmm>
		if (audio_recorder->cur_data->num_of_samples >= MAX_RECORD_LENGTH) {
 80027c8:	4b0e      	ldr	r3, [pc, #56]	; (8002804 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x5c>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80027d4:	d310      	bcc.n	80027f8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x50>
			audio_recorder->dfsdm_stop_flag = 1;
 80027d6:	4b0b      	ldr	r3, [pc, #44]	; (8002804 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x5c>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2201      	movs	r2, #1
 80027dc:	731a      	strb	r2, [r3, #12]
			if (HAL_DFSDM_FilterRegularStop_DMA(hdfsdm_filter) == HAL_ERROR) {
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f006 ff84 	bl	80096ec <HAL_DFSDM_FilterRegularStop_DMA>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	bf0c      	ite	eq
 80027ea:	2301      	moveq	r3, #1
 80027ec:	2300      	movne	r3, #0
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x50>
				Error_Handler();
 80027f4:	f000 f866 	bl	80028c4 <Error_Handler>
			}
		}
	}
}
 80027f8:	bf00      	nop
 80027fa:	3708      	adds	r7, #8
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	2000009c 	.word	0x2000009c
 8002804:	200003a4 	.word	0x200003a4

08002808 <HAL_DFSDM_FilterRegConvCpltCallback>:

void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter) {
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
	if (hdfsdm_filter == &hdfsdm1_filter0) {
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a14      	ldr	r2, [pc, #80]	; (8002864 <HAL_DFSDM_FilterRegConvCpltCallback+0x5c>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d120      	bne.n	800285a <HAL_DFSDM_FilterRegConvCpltCallback+0x52>
		audio_recorder->update_wave_buffer(RECORD_HALF_BUFFER_LENGTH, RECORD_HALF_BUFFER_LENGTH);
 8002818:	4b13      	ldr	r3, [pc, #76]	; (8002868 <HAL_DFSDM_FilterRegConvCpltCallback+0x60>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8002820:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff f8fb 	bl	8001a20 <_ZN13AudioRecorder18update_wave_bufferEmm>
		if (audio_recorder->cur_data->num_of_samples >= MAX_RECORD_LENGTH) {
 800282a:	4b0f      	ldr	r3, [pc, #60]	; (8002868 <HAL_DFSDM_FilterRegConvCpltCallback+0x60>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8002836:	d310      	bcc.n	800285a <HAL_DFSDM_FilterRegConvCpltCallback+0x52>
			audio_recorder->dfsdm_stop_flag = 1;
 8002838:	4b0b      	ldr	r3, [pc, #44]	; (8002868 <HAL_DFSDM_FilterRegConvCpltCallback+0x60>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2201      	movs	r2, #1
 800283e:	731a      	strb	r2, [r3, #12]
			if (HAL_DFSDM_FilterRegularStop_DMA(hdfsdm_filter) == HAL_ERROR) {
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f006 ff53 	bl	80096ec <HAL_DFSDM_FilterRegularStop_DMA>
 8002846:	4603      	mov	r3, r0
 8002848:	2b01      	cmp	r3, #1
 800284a:	bf0c      	ite	eq
 800284c:	2301      	moveq	r3, #1
 800284e:	2300      	movne	r3, #0
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <HAL_DFSDM_FilterRegConvCpltCallback+0x52>
				Error_Handler();
 8002856:	f000 f835 	bl	80028c4 <Error_Handler>
			}
		}

	}
}
 800285a:	bf00      	nop
 800285c:	3708      	adds	r7, #8
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	2000009c 	.word	0x2000009c
 8002868:	200003a4 	.word	0x200003a4

0800286c <print>:

void print(const char* txt) {
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
	strcpy(uart_buffer, txt);
 8002874:	6879      	ldr	r1, [r7, #4]
 8002876:	4808      	ldr	r0, [pc, #32]	; (8002898 <print+0x2c>)
 8002878:	f00d f8c4 	bl	800fa04 <strcpy>
  	HAL_UART_Transmit(&huart1, (uint8_t *)uart_buffer, strlen(txt), 10);
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f7fd fd3f 	bl	8000300 <strlen>
 8002882:	4603      	mov	r3, r0
 8002884:	b29a      	uxth	r2, r3
 8002886:	230a      	movs	r3, #10
 8002888:	4903      	ldr	r1, [pc, #12]	; (8002898 <print+0x2c>)
 800288a:	4804      	ldr	r0, [pc, #16]	; (800289c <print+0x30>)
 800288c:	f00a fe9e 	bl	800d5cc <HAL_UART_Transmit>
}
 8002890:	bf00      	nop
 8002892:	3708      	adds	r7, #8
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	20000340 	.word	0x20000340
 800289c:	200002b8 	.word	0x200002b8

080028a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM13) {
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a04      	ldr	r2, [pc, #16]	; (80028c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d101      	bne.n	80028b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80028b2:	f006 fb91 	bl	8008fd8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80028b6:	bf00      	nop
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	40001c00 	.word	0x40001c00

080028c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80028c8:	b672      	cpsid	i
}
 80028ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028cc:	e7fe      	b.n	80028cc <Error_Handler+0x8>

080028ce <_Z9qspi_readPhmm>:
#include <stdint.h>
#include "stm32f769i_discovery_qspi.h"
#include "main.h"
#include <stdlib.h>

void qspi_read(uint8_t* buffer_ptr, uint32_t address, uint32_t size) {
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b084      	sub	sp, #16
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	60f8      	str	r0, [r7, #12]
 80028d6:	60b9      	str	r1, [r7, #8]
 80028d8:	607a      	str	r2, [r7, #4]
	if (BSP_QSPI_Read(buffer_ptr, address, size) != QSPI_OK)
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	68b9      	ldr	r1, [r7, #8]
 80028de:	68f8      	ldr	r0, [r7, #12]
 80028e0:	f000 f8c4 	bl	8002a6c <BSP_QSPI_Read>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	bf14      	ite	ne
 80028ea:	2301      	movne	r3, #1
 80028ec:	2300      	moveq	r3, #0
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <_Z9qspi_readPhmm+0x2a>
		Error_Handler();
 80028f4:	f7ff ffe6 	bl	80028c4 <Error_Handler>
}
 80028f8:	bf00      	nop
 80028fa:	3710      	adds	r7, #16
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <_Z10qspi_writePhmm>:

void qspi_write(uint8_t* buffer_ptr, uint32_t address, uint32_t size) {
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
	if(BSP_QSPI_Write(buffer_ptr, address, size) != QSPI_OK){
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	68b9      	ldr	r1, [r7, #8]
 8002910:	68f8      	ldr	r0, [r7, #12]
 8002912:	f000 f8ff 	bl	8002b14 <BSP_QSPI_Write>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	bf14      	ite	ne
 800291c:	2301      	movne	r3, #1
 800291e:	2300      	moveq	r3, #0
 8002920:	b2db      	uxtb	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <_Z10qspi_writePhmm+0x2a>
		Error_Handler();
 8002926:	f7ff ffcd 	bl	80028c4 <Error_Handler>
	}
}
 800292a:	bf00      	nop
 800292c:	3710      	adds	r7, #16
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <_Z9qspi_initv>:

void qspi_init() {
 8002932:	b580      	push	{r7, lr}
 8002934:	af00      	add	r7, sp, #0
	BSP_QSPI_Init();
 8002936:	f000 f829 	bl	800298c <BSP_QSPI_Init>
}
 800293a:	bf00      	nop
 800293c:	bd80      	pop	{r7, pc}

0800293e <_Z16qspi_erase_blockm>:

void qspi_erase_block(uint32_t block_address) {
 800293e:	b580      	push	{r7, lr}
 8002940:	b082      	sub	sp, #8
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
	BSP_QSPI_Erase_Block(block_address);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f000 f962 	bl	8002c10 <BSP_QSPI_Erase_Block>
}
 800294c:	bf00      	nop
 800294e:	3708      	adds	r7, #8
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <_Z17qspi_erase_blocksmm>:

void qspi_erase_blocks(uint32_t start_address, uint32_t n){
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < n; i++){
 800295e:	2300      	movs	r3, #0
 8002960:	73fb      	strb	r3, [r7, #15]
 8002962:	7bfb      	ldrb	r3, [r7, #15]
 8002964:	683a      	ldr	r2, [r7, #0]
 8002966:	429a      	cmp	r2, r3
 8002968:	d90b      	bls.n	8002982 <_Z17qspi_erase_blocksmm+0x2e>
		qspi_erase_block(start_address + i * MX25L512_SUBSECTOR_SIZE);
 800296a:	7bfb      	ldrb	r3, [r7, #15]
 800296c:	031b      	lsls	r3, r3, #12
 800296e:	461a      	mov	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4413      	add	r3, r2
 8002974:	4618      	mov	r0, r3
 8002976:	f7ff ffe2 	bl	800293e <_Z16qspi_erase_blockm>
	for(uint8_t i = 0; i < n; i++){
 800297a:	7bfb      	ldrb	r3, [r7, #15]
 800297c:	3301      	adds	r3, #1
 800297e:	73fb      	strb	r3, [r7, #15]
 8002980:	e7ef      	b.n	8002962 <_Z17qspi_erase_blocksmm+0xe>
	}
}
 8002982:	bf00      	nop
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
	...

0800298c <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
  QSPIHandle.Instance = QUADSPI;
 8002992:	4b34      	ldr	r3, [pc, #208]	; (8002a64 <BSP_QSPI_Init+0xd8>)
 8002994:	4a34      	ldr	r2, [pc, #208]	; (8002a68 <BSP_QSPI_Init+0xdc>)
 8002996:	601a      	str	r2, [r3, #0]
  
  /* Call the DeInit function to reset the driver */
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 8002998:	4832      	ldr	r0, [pc, #200]	; (8002a64 <BSP_QSPI_Init+0xd8>)
 800299a:	f007 ffb9 	bl	800a910 <HAL_QSPI_DeInit>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e059      	b.n	8002a5c <BSP_QSPI_Init+0xd0>
  }
  
  /* System level initialization */
  BSP_QSPI_MspInit(&QSPIHandle, NULL);
 80029a8:	2100      	movs	r1, #0
 80029aa:	482e      	ldr	r0, [pc, #184]	; (8002a64 <BSP_QSPI_Init+0xd8>)
 80029ac:	f000 f974 	bl	8002c98 <BSP_QSPI_MspInit>
  
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) = 216 MHz/(1+1) = 108 Mhz */
  QSPIHandle.Init.ClockPrescaler     = 1;   /* QSPI freq = 216 MHz/(1+1) = 108 Mhz */
 80029b0:	4b2c      	ldr	r3, [pc, #176]	; (8002a64 <BSP_QSPI_Init+0xd8>)
 80029b2:	2201      	movs	r2, #1
 80029b4:	605a      	str	r2, [r3, #4]
  QSPIHandle.Init.FifoThreshold      = 16;
 80029b6:	4b2b      	ldr	r3, [pc, #172]	; (8002a64 <BSP_QSPI_Init+0xd8>)
 80029b8:	2210      	movs	r2, #16
 80029ba:	609a      	str	r2, [r3, #8]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE; 
 80029bc:	4b29      	ldr	r3, [pc, #164]	; (8002a64 <BSP_QSPI_Init+0xd8>)
 80029be:	2210      	movs	r2, #16
 80029c0:	60da      	str	r2, [r3, #12]
 80029c2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80029c6:	607b      	str	r3, [r7, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	fa93 f3a3 	rbit	r3, r3
 80029ce:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80029d0:	683b      	ldr	r3, [r7, #0]
  QSPIHandle.Init.FlashSize          = POSITION_VAL(MX25L512_FLASH_SIZE) - 1;
 80029d2:	fab3 f383 	clz	r3, r3
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	3b01      	subs	r3, #1
 80029da:	461a      	mov	r2, r3
 80029dc:	4b21      	ldr	r3, [pc, #132]	; (8002a64 <BSP_QSPI_Init+0xd8>)
 80029de:	611a      	str	r2, [r3, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 30ns for nonRead */
 80029e0:	4b20      	ldr	r3, [pc, #128]	; (8002a64 <BSP_QSPI_Init+0xd8>)
 80029e2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80029e6:	615a      	str	r2, [r3, #20]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 80029e8:	4b1e      	ldr	r3, [pc, #120]	; (8002a64 <BSP_QSPI_Init+0xd8>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	619a      	str	r2, [r3, #24]
  QSPIHandle.Init.FlashID            = QSPI_FLASH_ID_1;
 80029ee:	4b1d      	ldr	r3, [pc, #116]	; (8002a64 <BSP_QSPI_Init+0xd8>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	61da      	str	r2, [r3, #28]
  QSPIHandle.Init.DualFlash          = QSPI_DUALFLASH_DISABLE;
 80029f4:	4b1b      	ldr	r3, [pc, #108]	; (8002a64 <BSP_QSPI_Init+0xd8>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	621a      	str	r2, [r3, #32]
  
  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 80029fa:	481a      	ldr	r0, [pc, #104]	; (8002a64 <BSP_QSPI_Init+0xd8>)
 80029fc:	f007 ff0c 	bl	800a818 <HAL_QSPI_Init>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <BSP_QSPI_Init+0x7e>
  {
    return QSPI_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e028      	b.n	8002a5c <BSP_QSPI_Init+0xd0>
  }
  
  /* QSPI memory reset */
  if (QSPI_ResetMemory(&QSPIHandle) != QSPI_OK)
 8002a0a:	4816      	ldr	r0, [pc, #88]	; (8002a64 <BSP_QSPI_Init+0xd8>)
 8002a0c:	f000 fa06 	bl	8002e1c <QSPI_ResetMemory>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <BSP_QSPI_Init+0x8e>
  {
    return QSPI_NOT_SUPPORTED;
 8002a16:	2304      	movs	r3, #4
 8002a18:	e020      	b.n	8002a5c <BSP_QSPI_Init+0xd0>
  }
  
  /* Put QSPI memory in QPI mode */
  if( QSPI_EnterMemory_QPI( &QSPIHandle )!=QSPI_OK )
 8002a1a:	4812      	ldr	r0, [pc, #72]	; (8002a64 <BSP_QSPI_Init+0xd8>)
 8002a1c:	f000 fc1d 	bl	800325a <QSPI_EnterMemory_QPI>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <BSP_QSPI_Init+0x9e>
  {
    return QSPI_NOT_SUPPORTED;
 8002a26:	2304      	movs	r3, #4
 8002a28:	e018      	b.n	8002a5c <BSP_QSPI_Init+0xd0>
  }
  
  /* Set the QSPI memory in 4-bytes address mode */
  if (QSPI_EnterFourBytesAddress(&QSPIHandle) != QSPI_OK)
 8002a2a:	480e      	ldr	r0, [pc, #56]	; (8002a64 <BSP_QSPI_Init+0xd8>)
 8002a2c:	f000 fb1e 	bl	800306c <QSPI_EnterFourBytesAddress>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <BSP_QSPI_Init+0xae>
  {
    return QSPI_NOT_SUPPORTED;
 8002a36:	2304      	movs	r3, #4
 8002a38:	e010      	b.n	8002a5c <BSP_QSPI_Init+0xd0>
  }
  
  /* Configuration of the dummy cycles on QSPI memory side */
  if (QSPI_DummyCyclesCfg(&QSPIHandle) != QSPI_OK)
 8002a3a:	480a      	ldr	r0, [pc, #40]	; (8002a64 <BSP_QSPI_Init+0xd8>)
 8002a3c:	f000 fb51 	bl	80030e2 <QSPI_DummyCyclesCfg>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <BSP_QSPI_Init+0xbe>
  {
    return QSPI_NOT_SUPPORTED;
 8002a46:	2304      	movs	r3, #4
 8002a48:	e008      	b.n	8002a5c <BSP_QSPI_Init+0xd0>
  }
  
  /* Configuration of the Output driver strength on memory side */
  if( QSPI_OutDrvStrengthCfg( &QSPIHandle ) != QSPI_OK )
 8002a4a:	4806      	ldr	r0, [pc, #24]	; (8002a64 <BSP_QSPI_Init+0xd8>)
 8002a4c:	f000 fc52 	bl	80032f4 <QSPI_OutDrvStrengthCfg>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <BSP_QSPI_Init+0xce>
  {
    return QSPI_NOT_SUPPORTED;
 8002a56:	2304      	movs	r3, #4
 8002a58:	e000      	b.n	8002a5c <BSP_QSPI_Init+0xd0>
  }
  
  return QSPI_OK;
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3708      	adds	r7, #8
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	200003f4 	.word	0x200003f4
 8002a68:	a0001000 	.word	0xa0001000

08002a6c <BSP_QSPI_Read>:
  * @param  ReadAddr: Read start address
  * @param  Size: Size of data to read    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b092      	sub	sp, #72	; 0x48
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the read command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8002a78:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a7c:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = QPI_READ_4_BYTE_ADDR_CMD;
 8002a7e:	23ec      	movs	r3, #236	; 0xec
 8002a80:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8002a82:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002a86:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8002a88:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002a8c:	61fb      	str	r3, [r7, #28]
  s_command.Address           = ReadAddr;
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002a92:	2300      	movs	r3, #0
 8002a94:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8002a96:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8002a9a:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = MX25L512_DUMMY_CYCLES_READ_QUAD_IO;
 8002a9c:	230a      	movs	r3, #10
 8002a9e:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = Size;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002aac:	2300      	movs	r3, #0
 8002aae:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Configure the command */
  if (HAL_QSPI_Command(&QSPIHandle, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002ab0:	f107 0310 	add.w	r3, r7, #16
 8002ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab8:	4619      	mov	r1, r3
 8002aba:	4815      	ldr	r0, [pc, #84]	; (8002b10 <BSP_QSPI_Read+0xa4>)
 8002abc:	f007 ff4c 	bl	800a958 <HAL_QSPI_Command>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <BSP_QSPI_Read+0x5e>
  {
    return QSPI_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e01d      	b.n	8002b06 <BSP_QSPI_Read+0x9a>
  }
  
  /* Set S# timing for Read command */
  MODIFY_REG(QSPIHandle.Instance->DCR, QUADSPI_DCR_CSHT, QSPI_CS_HIGH_TIME_1_CYCLE);
 8002aca:	4b11      	ldr	r3, [pc, #68]	; (8002b10 <BSP_QSPI_Read+0xa4>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	685a      	ldr	r2, [r3, #4]
 8002ad0:	4b0f      	ldr	r3, [pc, #60]	; (8002b10 <BSP_QSPI_Read+0xa4>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002ad8:	605a      	str	r2, [r3, #4]
  
  /* Reception of the data */
  if (HAL_QSPI_Receive(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002ada:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ade:	68f9      	ldr	r1, [r7, #12]
 8002ae0:	480b      	ldr	r0, [pc, #44]	; (8002b10 <BSP_QSPI_Read+0xa4>)
 8002ae2:	f008 f829 	bl	800ab38 <HAL_QSPI_Receive>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <BSP_QSPI_Read+0x84>
  {
    return QSPI_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e00a      	b.n	8002b06 <BSP_QSPI_Read+0x9a>
  }
  
  /* Restore S# timing for nonRead commands */
  MODIFY_REG(QSPIHandle.Instance->DCR, QUADSPI_DCR_CSHT, QSPI_CS_HIGH_TIME_4_CYCLE);
 8002af0:	4b07      	ldr	r3, [pc, #28]	; (8002b10 <BSP_QSPI_Read+0xa4>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002afa:	4b05      	ldr	r3, [pc, #20]	; (8002b10 <BSP_QSPI_Read+0xa4>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002b02:	605a      	str	r2, [r3, #4]

  return QSPI_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3748      	adds	r7, #72	; 0x48
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	200003f4 	.word	0x200003f4

08002b14 <BSP_QSPI_Write>:
  * @param  WriteAddr: Write start address
  * @param  Size: Size of data to write    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b096      	sub	sp, #88	; 0x58
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint32_t end_addr, current_size, current_addr;

  /* Calculation of the size between the write address and the end of the page */
  current_size = MX25L512_PAGE_SIZE - (WriteAddr % MX25L512_PAGE_SIZE);
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002b28:	657b      	str	r3, [r7, #84]	; 0x54

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 8002b2a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d901      	bls.n	8002b36 <BSP_QSPI_Write+0x22>
  {
    current_size = Size;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	657b      	str	r3, [r7, #84]	; 0x54
  }

  /* Initialize the address variables */
  current_addr = WriteAddr;
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	653b      	str	r3, [r7, #80]	; 0x50
  end_addr = WriteAddr + Size;
 8002b3a:	68ba      	ldr	r2, [r7, #8]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	4413      	add	r3, r2
 8002b40:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Initialize the program command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8002b42:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b46:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.Instruction       = QPI_PAGE_PROG_4_BYTE_ADDR_CMD;
 8002b48:	2312      	movs	r3, #18
 8002b4a:	617b      	str	r3, [r7, #20]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8002b4c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002b50:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8002b52:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002b56:	623b      	str	r3, [r7, #32]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8002b5c:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8002b60:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DummyCycles       = 0;
 8002b62:	2300      	movs	r3, #0
 8002b64:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002b66:	2300      	movs	r3, #0
 8002b68:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	64bb      	str	r3, [r7, #72]	; 0x48
  
  /* Perform the write page by page */
  do
  {
    s_command.Address = current_addr;
 8002b72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b74:	61bb      	str	r3, [r7, #24]
    s_command.NbData  = current_size;
 8002b76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b78:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Enable write operations */
    if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8002b7a:	4824      	ldr	r0, [pc, #144]	; (8002c0c <BSP_QSPI_Write+0xf8>)
 8002b7c:	f000 fc76 	bl	800346c <QSPI_WriteEnable>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <BSP_QSPI_Write+0x76>
    {
      return QSPI_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e03b      	b.n	8002c02 <BSP_QSPI_Write+0xee>
    }
    
    /* Configure the command */
    if (HAL_QSPI_Command(&QSPIHandle, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002b8a:	f107 0314 	add.w	r3, r7, #20
 8002b8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b92:	4619      	mov	r1, r3
 8002b94:	481d      	ldr	r0, [pc, #116]	; (8002c0c <BSP_QSPI_Write+0xf8>)
 8002b96:	f007 fedf 	bl	800a958 <HAL_QSPI_Command>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <BSP_QSPI_Write+0x90>
    {
      return QSPI_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e02e      	b.n	8002c02 <BSP_QSPI_Write+0xee>
    }
    
    /* Transmission of the data */
    if (HAL_QSPI_Transmit(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002ba4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ba8:	68f9      	ldr	r1, [r7, #12]
 8002baa:	4818      	ldr	r0, [pc, #96]	; (8002c0c <BSP_QSPI_Write+0xf8>)
 8002bac:	f007 ff32 	bl	800aa14 <HAL_QSPI_Transmit>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <BSP_QSPI_Write+0xa6>
    {
      return QSPI_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e023      	b.n	8002c02 <BSP_QSPI_Write+0xee>
    }
    
    /* Configure automatic polling mode to wait for end of program */  
    if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8002bba:	f241 3188 	movw	r1, #5000	; 0x1388
 8002bbe:	4813      	ldr	r0, [pc, #76]	; (8002c0c <BSP_QSPI_Write+0xf8>)
 8002bc0:	f000 fc9d 	bl	80034fe <QSPI_AutoPollingMemReady>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <BSP_QSPI_Write+0xba>
    {
      return QSPI_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e019      	b.n	8002c02 <BSP_QSPI_Write+0xee>
    }
    
    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 8002bce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002bd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bd2:	4413      	add	r3, r2
 8002bd4:	653b      	str	r3, [r7, #80]	; 0x50
    pData += current_size;
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bda:	4413      	add	r3, r2
 8002bdc:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + MX25L512_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : MX25L512_PAGE_SIZE;
 8002bde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002be0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002be4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d203      	bcs.n	8002bf2 <BSP_QSPI_Write+0xde>
 8002bea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002bec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	e001      	b.n	8002bf6 <BSP_QSPI_Write+0xe2>
 8002bf2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bf6:	657b      	str	r3, [r7, #84]	; 0x54
  } while (current_addr < end_addr);
 8002bf8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002bfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d3b8      	bcc.n	8002b72 <BSP_QSPI_Write+0x5e>
  
  return QSPI_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3758      	adds	r7, #88	; 0x58
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	200003f4 	.word	0x200003f4

08002c10 <BSP_QSPI_Erase_Block>:
  * @brief  Erases the specified block of the QSPI memory. 
  * @param  BlockAddress: Block address to erase  
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Erase_Block(uint32_t BlockAddress)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b090      	sub	sp, #64	; 0x40
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the erase command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8002c18:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c1c:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = SUBSECTOR_ERASE_4_BYTE_ADDR_CMD;
 8002c1e:	2321      	movs	r3, #33	; 0x21
 8002c20:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8002c22:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002c26:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8002c28:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002c2c:	617b      	str	r3, [r7, #20]
  s_command.Address           = BlockAddress;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	60fb      	str	r3, [r7, #12]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002c32:	2300      	movs	r3, #0
 8002c34:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8002c36:	2300      	movs	r3, #0
 8002c38:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002c42:	2300      	movs	r3, #0
 8002c44:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002c46:	2300      	movs	r3, #0
 8002c48:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8002c4a:	4812      	ldr	r0, [pc, #72]	; (8002c94 <BSP_QSPI_Erase_Block+0x84>)
 8002c4c:	f000 fc0e 	bl	800346c <QSPI_WriteEnable>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <BSP_QSPI_Erase_Block+0x4a>
  {
    return QSPI_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e017      	b.n	8002c8a <BSP_QSPI_Erase_Block+0x7a>
  }

  /* Send the command */
  if (HAL_QSPI_Command(&QSPIHandle, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002c5a:	f107 0308 	add.w	r3, r7, #8
 8002c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c62:	4619      	mov	r1, r3
 8002c64:	480b      	ldr	r0, [pc, #44]	; (8002c94 <BSP_QSPI_Erase_Block+0x84>)
 8002c66:	f007 fe77 	bl	800a958 <HAL_QSPI_Command>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d001      	beq.n	8002c74 <BSP_QSPI_Erase_Block+0x64>
  {
    return QSPI_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e00a      	b.n	8002c8a <BSP_QSPI_Erase_Block+0x7a>
  }
  
  /* Configure automatic polling mode to wait for end of erase */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, MX25L512_SUBSECTOR_ERASE_MAX_TIME) != QSPI_OK)
 8002c74:	f44f 7148 	mov.w	r1, #800	; 0x320
 8002c78:	4806      	ldr	r0, [pc, #24]	; (8002c94 <BSP_QSPI_Erase_Block+0x84>)
 8002c7a:	f000 fc40 	bl	80034fe <QSPI_AutoPollingMemReady>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d001      	beq.n	8002c88 <BSP_QSPI_Erase_Block+0x78>
  {
    return QSPI_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e000      	b.n	8002c8a <BSP_QSPI_Erase_Block+0x7a>
  }

  return QSPI_OK;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3740      	adds	r7, #64	; 0x40
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	200003f4 	.word	0x200003f4

08002c98 <BSP_QSPI_MspInit>:
  *           - Peripheral's GPIO Configuration
  *           - NVIC configuration for QSPI interrupt
  * @retval None
  */
__weak void BSP_QSPI_MspInit(QSPI_HandleTypeDef *hqspi, void *Params)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b08e      	sub	sp, #56	; 0x38
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 8002ca2:	4b59      	ldr	r3, [pc, #356]	; (8002e08 <BSP_QSPI_MspInit+0x170>)
 8002ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca6:	4a58      	ldr	r2, [pc, #352]	; (8002e08 <BSP_QSPI_MspInit+0x170>)
 8002ca8:	f043 0302 	orr.w	r3, r3, #2
 8002cac:	6393      	str	r3, [r2, #56]	; 0x38
 8002cae:	4b56      	ldr	r3, [pc, #344]	; (8002e08 <BSP_QSPI_MspInit+0x170>)
 8002cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	623b      	str	r3, [r7, #32]
 8002cb8:	6a3b      	ldr	r3, [r7, #32]
  /* Reset the QuadSPI memory interface */
  QSPI_FORCE_RESET();
 8002cba:	4b53      	ldr	r3, [pc, #332]	; (8002e08 <BSP_QSPI_MspInit+0x170>)
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	4a52      	ldr	r2, [pc, #328]	; (8002e08 <BSP_QSPI_MspInit+0x170>)
 8002cc0:	f043 0302 	orr.w	r3, r3, #2
 8002cc4:	6193      	str	r3, [r2, #24]
  QSPI_RELEASE_RESET();
 8002cc6:	4b50      	ldr	r3, [pc, #320]	; (8002e08 <BSP_QSPI_MspInit+0x170>)
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	4a4f      	ldr	r2, [pc, #316]	; (8002e08 <BSP_QSPI_MspInit+0x170>)
 8002ccc:	f023 0302 	bic.w	r3, r3, #2
 8002cd0:	6193      	str	r3, [r2, #24]
  /* Enable GPIO clocks */
  QSPI_CS_GPIO_CLK_ENABLE();
 8002cd2:	4b4d      	ldr	r3, [pc, #308]	; (8002e08 <BSP_QSPI_MspInit+0x170>)
 8002cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd6:	4a4c      	ldr	r2, [pc, #304]	; (8002e08 <BSP_QSPI_MspInit+0x170>)
 8002cd8:	f043 0302 	orr.w	r3, r3, #2
 8002cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8002cde:	4b4a      	ldr	r3, [pc, #296]	; (8002e08 <BSP_QSPI_MspInit+0x170>)
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	61fb      	str	r3, [r7, #28]
 8002ce8:	69fb      	ldr	r3, [r7, #28]
  QSPI_CLK_GPIO_CLK_ENABLE();
 8002cea:	4b47      	ldr	r3, [pc, #284]	; (8002e08 <BSP_QSPI_MspInit+0x170>)
 8002cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cee:	4a46      	ldr	r2, [pc, #280]	; (8002e08 <BSP_QSPI_MspInit+0x170>)
 8002cf0:	f043 0302 	orr.w	r3, r3, #2
 8002cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8002cf6:	4b44      	ldr	r3, [pc, #272]	; (8002e08 <BSP_QSPI_MspInit+0x170>)
 8002cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	61bb      	str	r3, [r7, #24]
 8002d00:	69bb      	ldr	r3, [r7, #24]
  QSPI_D0_GPIO_CLK_ENABLE();
 8002d02:	4b41      	ldr	r3, [pc, #260]	; (8002e08 <BSP_QSPI_MspInit+0x170>)
 8002d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d06:	4a40      	ldr	r2, [pc, #256]	; (8002e08 <BSP_QSPI_MspInit+0x170>)
 8002d08:	f043 0304 	orr.w	r3, r3, #4
 8002d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d0e:	4b3e      	ldr	r3, [pc, #248]	; (8002e08 <BSP_QSPI_MspInit+0x170>)
 8002d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d12:	f003 0304 	and.w	r3, r3, #4
 8002d16:	617b      	str	r3, [r7, #20]
 8002d18:	697b      	ldr	r3, [r7, #20]
  QSPI_D1_GPIO_CLK_ENABLE();
 8002d1a:	4b3b      	ldr	r3, [pc, #236]	; (8002e08 <BSP_QSPI_MspInit+0x170>)
 8002d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1e:	4a3a      	ldr	r2, [pc, #232]	; (8002e08 <BSP_QSPI_MspInit+0x170>)
 8002d20:	f043 0304 	orr.w	r3, r3, #4
 8002d24:	6313      	str	r3, [r2, #48]	; 0x30
 8002d26:	4b38      	ldr	r3, [pc, #224]	; (8002e08 <BSP_QSPI_MspInit+0x170>)
 8002d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2a:	f003 0304 	and.w	r3, r3, #4
 8002d2e:	613b      	str	r3, [r7, #16]
 8002d30:	693b      	ldr	r3, [r7, #16]
  QSPI_D2_GPIO_CLK_ENABLE();
 8002d32:	4b35      	ldr	r3, [pc, #212]	; (8002e08 <BSP_QSPI_MspInit+0x170>)
 8002d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d36:	4a34      	ldr	r2, [pc, #208]	; (8002e08 <BSP_QSPI_MspInit+0x170>)
 8002d38:	f043 0310 	orr.w	r3, r3, #16
 8002d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d3e:	4b32      	ldr	r3, [pc, #200]	; (8002e08 <BSP_QSPI_MspInit+0x170>)
 8002d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d42:	f003 0310 	and.w	r3, r3, #16
 8002d46:	60fb      	str	r3, [r7, #12]
 8002d48:	68fb      	ldr	r3, [r7, #12]
  QSPI_D3_GPIO_CLK_ENABLE();
 8002d4a:	4b2f      	ldr	r3, [pc, #188]	; (8002e08 <BSP_QSPI_MspInit+0x170>)
 8002d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4e:	4a2e      	ldr	r2, [pc, #184]	; (8002e08 <BSP_QSPI_MspInit+0x170>)
 8002d50:	f043 0308 	orr.w	r3, r3, #8
 8002d54:	6313      	str	r3, [r2, #48]	; 0x30
 8002d56:	4b2c      	ldr	r3, [pc, #176]	; (8002e08 <BSP_QSPI_MspInit+0x170>)
 8002d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5a:	f003 0308 	and.w	r3, r3, #8
 8002d5e:	60bb      	str	r3, [r7, #8]
 8002d60:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CS_PIN;
 8002d62:	2340      	movs	r3, #64	; 0x40
 8002d64:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = QSPI_CS_PIN_AF;
 8002d66:	230a      	movs	r3, #10
 8002d68:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002d72:	2302      	movs	r3, #2
 8002d74:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 8002d76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	4823      	ldr	r0, [pc, #140]	; (8002e0c <BSP_QSPI_MspInit+0x174>)
 8002d7e:	f007 f9ef 	bl	800a160 <HAL_GPIO_Init>
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 8002d82:	2304      	movs	r3, #4
 8002d84:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = QSPI_CLK_PIN_AF;
 8002d86:	2309      	movs	r3, #9
 8002d88:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8002d8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d92:	4619      	mov	r1, r3
 8002d94:	481d      	ldr	r0, [pc, #116]	; (8002e0c <BSP_QSPI_MspInit+0x174>)
 8002d96:	f007 f9e3 	bl	800a160 <HAL_GPIO_Init>
  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D0_PIN;
 8002d9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d9e:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = QSPI_D0_PIN_AF;
 8002da0:	2309      	movs	r3, #9
 8002da2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 8002da4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002da8:	4619      	mov	r1, r3
 8002daa:	4819      	ldr	r0, [pc, #100]	; (8002e10 <BSP_QSPI_MspInit+0x178>)
 8002dac:	f007 f9d8 	bl	800a160 <HAL_GPIO_Init>
  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D1_PIN;
 8002db0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002db4:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = QSPI_D1_PIN_AF;
 8002db6:	2309      	movs	r3, #9
 8002db8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D1_GPIO_PORT, &gpio_init_structure);
 8002dba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	4813      	ldr	r0, [pc, #76]	; (8002e10 <BSP_QSPI_MspInit+0x178>)
 8002dc2:	f007 f9cd 	bl	800a160 <HAL_GPIO_Init>
  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D2_PIN;
 8002dc6:	2304      	movs	r3, #4
 8002dc8:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = QSPI_D2_PIN_AF;
 8002dca:	2309      	movs	r3, #9
 8002dcc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D2_GPIO_PORT, &gpio_init_structure);
 8002dce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	480f      	ldr	r0, [pc, #60]	; (8002e14 <BSP_QSPI_MspInit+0x17c>)
 8002dd6:	f007 f9c3 	bl	800a160 <HAL_GPIO_Init>
  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D3_PIN;
 8002dda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002dde:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = QSPI_D3_PIN_AF;
 8002de0:	2309      	movs	r3, #9
 8002de2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D3_GPIO_PORT, &gpio_init_structure);
 8002de4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002de8:	4619      	mov	r1, r3
 8002dea:	480b      	ldr	r0, [pc, #44]	; (8002e18 <BSP_QSPI_MspInit+0x180>)
 8002dec:	f007 f9b8 	bl	800a160 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 8002df0:	2200      	movs	r2, #0
 8002df2:	210f      	movs	r1, #15
 8002df4:	205c      	movs	r0, #92	; 0x5c
 8002df6:	f006 f9eb 	bl	80091d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8002dfa:	205c      	movs	r0, #92	; 0x5c
 8002dfc:	f006 fa04 	bl	8009208 <HAL_NVIC_EnableIRQ>
}
 8002e00:	bf00      	nop
 8002e02:	3738      	adds	r7, #56	; 0x38
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	40023800 	.word	0x40023800
 8002e0c:	40020400 	.word	0x40020400
 8002e10:	40020800 	.word	0x40020800
 8002e14:	40021000 	.word	0x40021000
 8002e18:	40020c00 	.word	0x40020c00

08002e1c <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b098      	sub	sp, #96	; 0x60
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  QSPI_AutoPollingTypeDef  s_config;
  uint8_t                  reg;

  /* Send command RESET command in QPI mode (QUAD I/Os) */
  /* Initialize the reset enable command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8002e24:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002e28:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction       = RESET_ENABLE_CMD;
 8002e2a:	2366      	movs	r3, #102	; 0x66
 8002e2c:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002e32:	2300      	movs	r3, #0
 8002e34:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataMode          = QSPI_DATA_NONE;
 8002e36:	2300      	movs	r3, #0
 8002e38:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DummyCycles       = 0;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002e42:	2300      	movs	r3, #0
 8002e44:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002e46:	2300      	movs	r3, #0
 8002e48:	65fb      	str	r3, [r7, #92]	; 0x5c
  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002e4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e52:	4619      	mov	r1, r3
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f007 fd7f 	bl	800a958 <HAL_QSPI_Command>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d001      	beq.n	8002e64 <QSPI_ResetMemory+0x48>
  {
    return QSPI_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e0ff      	b.n	8003064 <QSPI_ResetMemory+0x248>
  }
  /* Send the reset memory command */
  s_command.Instruction = RESET_MEMORY_CMD;
 8002e64:	2399      	movs	r3, #153	; 0x99
 8002e66:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002e68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e70:	4619      	mov	r1, r3
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f007 fd70 	bl	800a958 <HAL_QSPI_Command>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <QSPI_ResetMemory+0x66>
  {
    return QSPI_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e0f0      	b.n	8003064 <QSPI_ResetMemory+0x248>
  }  

  /* Send command RESET command in SPI mode */
  /* Initialize the reset enable command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002e82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e86:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction       = RESET_ENABLE_CMD;
 8002e88:	2366      	movs	r3, #102	; 0x66
 8002e8a:	62bb      	str	r3, [r7, #40]	; 0x28
  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002e8c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e94:	4619      	mov	r1, r3
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f007 fd5e 	bl	800a958 <HAL_QSPI_Command>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <QSPI_ResetMemory+0x8a>
  {
    return QSPI_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e0de      	b.n	8003064 <QSPI_ResetMemory+0x248>
  }
  /* Send the reset memory command */
  s_command.Instruction = RESET_MEMORY_CMD;
 8002ea6:	2399      	movs	r3, #153	; 0x99
 8002ea8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002eaa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002eae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f007 fd4f 	bl	800a958 <HAL_QSPI_Command>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d001      	beq.n	8002ec4 <QSPI_ResetMemory+0xa8>
  {
    return QSPI_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e0cf      	b.n	8003064 <QSPI_ResetMemory+0x248>
  }

  /* After reset CMD, 1000ms requested if QSPI memory SWReset occured during full chip erase operation */
  HAL_Delay( 1000 );
 8002ec4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ec8:	f006 f8a6 	bl	8009018 <HAL_Delay>

  /* Configure automatic polling mode to wait the WIP bit=0 */
  s_config.Match           = 0;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	613b      	str	r3, [r7, #16]
  s_config.Mask            = MX25L512_SR_WIP;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	617b      	str	r3, [r7, #20]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	623b      	str	r3, [r7, #32]
  s_config.StatusBytesSize = 1;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	61fb      	str	r3, [r7, #28]
  s_config.Interval        = 0x10;
 8002edc:	2310      	movs	r3, #16
 8002ede:	61bb      	str	r3, [r7, #24]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8002ee0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002ee4:	627b      	str	r3, [r7, #36]	; 0x24

  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8002ee6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002eea:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction     = READ_STATUS_REG_CMD;
 8002eec:	2305      	movs	r3, #5
 8002eee:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode        = QSPI_DATA_1_LINE;
 8002ef0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ef4:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002ef6:	f107 0210 	add.w	r2, r7, #16
 8002efa:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002efe:	f241 3388 	movw	r3, #5000	; 0x1388
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f007 feb5 	bl	800ac72 <HAL_QSPI_AutoPolling>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <QSPI_ResetMemory+0xf6>
  {
    return QSPI_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e0a8      	b.n	8003064 <QSPI_ResetMemory+0x248>
  }

  /* Initialize the reading of status register */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002f12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f16:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8002f18:	2305      	movs	r3, #5
 8002f1a:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002f20:	2300      	movs	r3, #0
 8002f22:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8002f24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f28:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DummyCycles       = 0;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.NbData            = 1;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002f32:	2300      	movs	r3, #0
 8002f34:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002f36:	2300      	movs	r3, #0
 8002f38:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002f3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f46:	4619      	mov	r1, r3
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f007 fd05 	bl	800a958 <HAL_QSPI_Command>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d001      	beq.n	8002f58 <QSPI_ResetMemory+0x13c>
  {
    return QSPI_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e085      	b.n	8003064 <QSPI_ResetMemory+0x248>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002f58:	f107 030f 	add.w	r3, r7, #15
 8002f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f60:	4619      	mov	r1, r3
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f007 fde8 	bl	800ab38 <HAL_QSPI_Receive>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <QSPI_ResetMemory+0x156>
  {
    return QSPI_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e078      	b.n	8003064 <QSPI_ResetMemory+0x248>
  }

  /* Enable write operations, command in 1 bit */
  /* Enable write operations */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002f72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f76:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8002f78:	2306      	movs	r3, #6
 8002f7a:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002f80:	2300      	movs	r3, #0
 8002f82:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataMode          = QSPI_DATA_NONE;
 8002f84:	2300      	movs	r3, #0
 8002f86:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DummyCycles       = 0;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002f90:	2300      	movs	r3, #0
 8002f92:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002f94:	2300      	movs	r3, #0
 8002f96:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002f98:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f007 fcd8 	bl	800a958 <HAL_QSPI_Command>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <QSPI_ResetMemory+0x196>
  {
    return QSPI_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e058      	b.n	8003064 <QSPI_ResetMemory+0x248>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  s_config.Match           = MX25L512_SR_WREN;
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	613b      	str	r3, [r7, #16]
  s_config.Mask            = MX25L512_SR_WREN;
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	617b      	str	r3, [r7, #20]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	623b      	str	r3, [r7, #32]
  s_config.StatusBytesSize = 1;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	61fb      	str	r3, [r7, #28]
  s_config.Interval        = 0x10;
 8002fc2:	2310      	movs	r3, #16
 8002fc4:	61bb      	str	r3, [r7, #24]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8002fc6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002fca:	627b      	str	r3, [r7, #36]	; 0x24

  s_command.Instruction    = READ_STATUS_REG_CMD;
 8002fcc:	2305      	movs	r3, #5
 8002fce:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode       = QSPI_DATA_1_LINE;
 8002fd0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fd4:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002fd6:	f107 0210 	add.w	r2, r7, #16
 8002fda:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002fde:	f241 3388 	movw	r3, #5000	; 0x1388
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f007 fe45 	bl	800ac72 <HAL_QSPI_AutoPolling>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <QSPI_ResetMemory+0x1d6>
  {
    return QSPI_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e038      	b.n	8003064 <QSPI_ResetMemory+0x248>
  }

  /* Update the configuration register with new dummy cycles */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002ff2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ff6:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction       = WRITE_STATUS_CFG_REG_CMD;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003000:	2300      	movs	r3, #0
 8003002:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8003004:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003008:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DummyCycles       = 0;
 800300a:	2300      	movs	r3, #0
 800300c:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.NbData            = 1;
 800300e:	2301      	movs	r3, #1
 8003010:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003012:	2300      	movs	r3, #0
 8003014:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003016:	2300      	movs	r3, #0
 8003018:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800301a:	2300      	movs	r3, #0
 800301c:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Enable the Quad IO on the QSPI memory (Non-volatile bit) */
  reg |= MX25L512_SR_QUADEN;
 800301e:	7bfb      	ldrb	r3, [r7, #15]
 8003020:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003024:	b2db      	uxtb	r3, r3
 8003026:	73fb      	strb	r3, [r7, #15]

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003028:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800302c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003030:	4619      	mov	r1, r3
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f007 fc90 	bl	800a958 <HAL_QSPI_Command>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <QSPI_ResetMemory+0x226>
  {
    return QSPI_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e010      	b.n	8003064 <QSPI_ResetMemory+0x248>
  }
  
  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003042:	f107 030f 	add.w	r3, r7, #15
 8003046:	f241 3288 	movw	r2, #5000	; 0x1388
 800304a:	4619      	mov	r1, r3
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f007 fce1 	bl	800aa14 <HAL_QSPI_Transmit>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d001      	beq.n	800305c <QSPI_ResetMemory+0x240>
  {
    return QSPI_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e003      	b.n	8003064 <QSPI_ResetMemory+0x248>
  }
  
  /* 40ms  Write Status/Configuration Register Cycle Time */
  HAL_Delay( 40 );  
 800305c:	2028      	movs	r0, #40	; 0x28
 800305e:	f005 ffdb 	bl	8009018 <HAL_Delay>

  return QSPI_OK;
 8003062:	2300      	movs	r3, #0
}
 8003064:	4618      	mov	r0, r3
 8003066:	3760      	adds	r7, #96	; 0x60
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <QSPI_EnterFourBytesAddress>:
  * @brief  This function set the QSPI memory in 4-byte address mode
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_EnterFourBytesAddress(QSPI_HandleTypeDef *hqspi)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b090      	sub	sp, #64	; 0x40
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003074:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003078:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = ENTER_4_BYTE_ADDR_MODE_CMD;
 800307a:	23b7      	movs	r3, #183	; 0xb7
 800307c:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800307e:	2300      	movs	r3, #0
 8003080:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003082:	2300      	movs	r3, #0
 8003084:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8003086:	2300      	movs	r3, #0
 8003088:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 800308a:	2300      	movs	r3, #0
 800308c:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800308e:	2300      	movs	r3, #0
 8003090:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003092:	2300      	movs	r3, #0
 8003094:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003096:	2300      	movs	r3, #0
 8003098:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Enable write operations */
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 f9e6 	bl	800346c <QSPI_WriteEnable>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <QSPI_EnterFourBytesAddress+0x3e>
  {
    return QSPI_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e017      	b.n	80030da <QSPI_EnterFourBytesAddress+0x6e>
  }

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80030aa:	f107 0308 	add.w	r3, r7, #8
 80030ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80030b2:	4619      	mov	r1, r3
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f007 fc4f 	bl	800a958 <HAL_QSPI_Command>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d001      	beq.n	80030c4 <QSPI_EnterFourBytesAddress+0x58>
  {
    return QSPI_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e00a      	b.n	80030da <QSPI_EnterFourBytesAddress+0x6e>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 80030c4:	f241 3188 	movw	r1, #5000	; 0x1388
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f000 fa18 	bl	80034fe <QSPI_AutoPollingMemReady>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d001      	beq.n	80030d8 <QSPI_EnterFourBytesAddress+0x6c>
  {
    return QSPI_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e000      	b.n	80030da <QSPI_EnterFourBytesAddress+0x6e>
  }

  return QSPI_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3740      	adds	r7, #64	; 0x40
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <QSPI_DummyCyclesCfg>:
  * @brief  This function configure the dummy cycles on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b094      	sub	sp, #80	; 0x50
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint8_t reg[2];
  
  /* Initialize the reading of status register */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80030ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80030ee:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = READ_STATUS_REG_CMD;
 80030f0:	2305      	movs	r3, #5
 80030f2:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80030f4:	2300      	movs	r3, #0
 80030f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80030f8:	2300      	movs	r3, #0
 80030fa:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80030fc:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8003100:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 8003102:	2300      	movs	r3, #0
 8003104:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 1;
 8003106:	2301      	movs	r3, #1
 8003108:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800310a:	2300      	movs	r3, #0
 800310c:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800310e:	2300      	movs	r3, #0
 8003110:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003112:	2300      	movs	r3, #0
 8003114:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003116:	f107 0310 	add.w	r3, r7, #16
 800311a:	f241 3288 	movw	r2, #5000	; 0x1388
 800311e:	4619      	mov	r1, r3
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f007 fc19 	bl	800a958 <HAL_QSPI_Command>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <QSPI_DummyCyclesCfg+0x4e>
  {
    return QSPI_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e090      	b.n	8003252 <QSPI_DummyCyclesCfg+0x170>
  }
  
  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003130:	f107 030c 	add.w	r3, r7, #12
 8003134:	f241 3288 	movw	r2, #5000	; 0x1388
 8003138:	4619      	mov	r1, r3
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f007 fcfc 	bl	800ab38 <HAL_QSPI_Receive>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <QSPI_DummyCyclesCfg+0x68>
  {
    return QSPI_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e083      	b.n	8003252 <QSPI_DummyCyclesCfg+0x170>
  }
  
  /* Initialize the reading of configuration register */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800314a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800314e:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = READ_CFG_REG_CMD;
 8003150:	2315      	movs	r3, #21
 8003152:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003154:	2300      	movs	r3, #0
 8003156:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003158:	2300      	movs	r3, #0
 800315a:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800315c:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8003160:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 8003162:	2300      	movs	r3, #0
 8003164:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 1;
 8003166:	2301      	movs	r3, #1
 8003168:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800316a:	2300      	movs	r3, #0
 800316c:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800316e:	2300      	movs	r3, #0
 8003170:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003172:	2300      	movs	r3, #0
 8003174:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003176:	f107 0310 	add.w	r3, r7, #16
 800317a:	f241 3288 	movw	r2, #5000	; 0x1388
 800317e:	4619      	mov	r1, r3
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f007 fbe9 	bl	800a958 <HAL_QSPI_Command>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d001      	beq.n	8003190 <QSPI_DummyCyclesCfg+0xae>
  {
    return QSPI_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e060      	b.n	8003252 <QSPI_DummyCyclesCfg+0x170>
  }
  
  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003190:	f107 030c 	add.w	r3, r7, #12
 8003194:	3301      	adds	r3, #1
 8003196:	f241 3288 	movw	r2, #5000	; 0x1388
 800319a:	4619      	mov	r1, r3
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f007 fccb 	bl	800ab38 <HAL_QSPI_Receive>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d001      	beq.n	80031ac <QSPI_DummyCyclesCfg+0xca>
  {
    return QSPI_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e052      	b.n	8003252 <QSPI_DummyCyclesCfg+0x170>
  }
  
  /* Enable write operations */
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f000 f95d 	bl	800346c <QSPI_WriteEnable>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d001      	beq.n	80031bc <QSPI_DummyCyclesCfg+0xda>
  {
    return QSPI_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e04a      	b.n	8003252 <QSPI_DummyCyclesCfg+0x170>
  }
  
  /* Update the configuration register with new dummy cycles */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80031bc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80031c0:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = WRITE_STATUS_CFG_REG_CMD;
 80031c2:	2301      	movs	r3, #1
 80031c4:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80031c6:	2300      	movs	r3, #0
 80031c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80031ca:	2300      	movs	r3, #0
 80031cc:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80031ce:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80031d2:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 80031d4:	2300      	movs	r3, #0
 80031d6:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 2;
 80031d8:	2302      	movs	r3, #2
 80031da:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80031dc:	2300      	movs	r3, #0
 80031de:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80031e0:	2300      	movs	r3, #0
 80031e2:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80031e4:	2300      	movs	r3, #0
 80031e6:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* MX25L512_DUMMY_CYCLES_READ_QUAD = 3 for 10 cycles in QPI mode */
  MODIFY_REG( reg[1], MX25L512_CR_NB_DUMMY, (MX25L512_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(MX25L512_CR_NB_DUMMY)));
 80031e8:	7b7b      	ldrb	r3, [r7, #13]
 80031ea:	b25b      	sxtb	r3, r3
 80031ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031f0:	b25a      	sxtb	r2, r3
 80031f2:	23c0      	movs	r3, #192	; 0xc0
 80031f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031f8:	fa93 f3a3 	rbit	r3, r3
 80031fc:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80031fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003200:	fab3 f383 	clz	r3, r3
 8003204:	b2db      	uxtb	r3, r3
 8003206:	4619      	mov	r1, r3
 8003208:	2303      	movs	r3, #3
 800320a:	408b      	lsls	r3, r1
 800320c:	b25b      	sxtb	r3, r3
 800320e:	4313      	orrs	r3, r2
 8003210:	b25b      	sxtb	r3, r3
 8003212:	b2db      	uxtb	r3, r3
 8003214:	737b      	strb	r3, [r7, #13]
  
  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003216:	f107 0310 	add.w	r3, r7, #16
 800321a:	f241 3288 	movw	r2, #5000	; 0x1388
 800321e:	4619      	mov	r1, r3
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f007 fb99 	bl	800a958 <HAL_QSPI_Command>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d001      	beq.n	8003230 <QSPI_DummyCyclesCfg+0x14e>
  {
    return QSPI_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e010      	b.n	8003252 <QSPI_DummyCyclesCfg+0x170>
  }
  
  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003230:	f107 030c 	add.w	r3, r7, #12
 8003234:	f241 3288 	movw	r2, #5000	; 0x1388
 8003238:	4619      	mov	r1, r3
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f007 fbea 	bl	800aa14 <HAL_QSPI_Transmit>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d001      	beq.n	800324a <QSPI_DummyCyclesCfg+0x168>
  {
    return QSPI_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e003      	b.n	8003252 <QSPI_DummyCyclesCfg+0x170>
  }
  
  /* 40ms  Write Status/Configuration Register Cycle Time */
  HAL_Delay( 40 );  
 800324a:	2028      	movs	r0, #40	; 0x28
 800324c:	f005 fee4 	bl	8009018 <HAL_Delay>
  
  return QSPI_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3750      	adds	r7, #80	; 0x50
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <QSPI_EnterMemory_QPI>:
  * @brief  This function put QSPI memory in QPI mode (quad I/O).
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_EnterMemory_QPI( QSPI_HandleTypeDef *hqspi )
{
 800325a:	b580      	push	{r7, lr}
 800325c:	b096      	sub	sp, #88	; 0x58
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef      s_command;
  QSPI_AutoPollingTypeDef  s_config;

  /* Initialize the QPI enable command */
  /* QSPI memory is supported to be in SPI mode, so CMD on 1 LINE */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;  
 8003262:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003266:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = ENTER_QUAD_CMD;
 8003268:	2335      	movs	r3, #53	; 0x35
 800326a:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800326c:	2300      	movs	r3, #0
 800326e:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003270:	2300      	movs	r3, #0
 8003272:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 8003274:	2300      	movs	r3, #0
 8003276:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 8003278:	2300      	movs	r3, #0
 800327a:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800327c:	2300      	movs	r3, #0
 800327e:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003280:	2300      	movs	r3, #0
 8003282:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003284:	2300      	movs	r3, #0
 8003286:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003288:	f107 0320 	add.w	r3, r7, #32
 800328c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003290:	4619      	mov	r1, r3
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f007 fb60 	bl	800a958 <HAL_QSPI_Command>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d001      	beq.n	80032a2 <QSPI_EnterMemory_QPI+0x48>
  {
    return QSPI_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e023      	b.n	80032ea <QSPI_EnterMemory_QPI+0x90>
  }

  /* Configure automatic polling mode to wait the QUADEN bit=1 and WIP bit=0 */
  s_config.Match           = MX25L512_SR_QUADEN;
 80032a2:	2340      	movs	r3, #64	; 0x40
 80032a4:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = MX25L512_SR_QUADEN|MX25L512_SR_WIP;
 80032a6:	2341      	movs	r3, #65	; 0x41
 80032a8:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80032aa:	2300      	movs	r3, #0
 80032ac:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 80032ae:	2301      	movs	r3, #1
 80032b0:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 80032b2:	2310      	movs	r3, #16
 80032b4:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80032b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80032ba:	61fb      	str	r3, [r7, #28]

  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80032bc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80032c0:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = READ_STATUS_REG_CMD;
 80032c2:	2305      	movs	r3, #5
 80032c4:	623b      	str	r3, [r7, #32]
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80032c6:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80032ca:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80032cc:	f107 0208 	add.w	r2, r7, #8
 80032d0:	f107 0120 	add.w	r1, r7, #32
 80032d4:	f241 3388 	movw	r3, #5000	; 0x1388
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f007 fcca 	bl	800ac72 <HAL_QSPI_AutoPolling>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d001      	beq.n	80032e8 <QSPI_EnterMemory_QPI+0x8e>
  {
    return QSPI_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e000      	b.n	80032ea <QSPI_EnterMemory_QPI+0x90>
  }

  return QSPI_OK;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3758      	adds	r7, #88	; 0x58
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
	...

080032f4 <QSPI_OutDrvStrengthCfg>:
  * @brief  This function configure the Output driver strength on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_OutDrvStrengthCfg( QSPI_HandleTypeDef *hqspi )
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b094      	sub	sp, #80	; 0x50
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint8_t reg[2];

  /* Initialize the reading of status register */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80032fc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003300:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8003302:	2305      	movs	r3, #5
 8003304:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003306:	2300      	movs	r3, #0
 8003308:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800330a:	2300      	movs	r3, #0
 800330c:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800330e:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8003312:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 8003314:	2300      	movs	r3, #0
 8003316:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 1;
 8003318:	2301      	movs	r3, #1
 800331a:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800331c:	2300      	movs	r3, #0
 800331e:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003320:	2300      	movs	r3, #0
 8003322:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003324:	2300      	movs	r3, #0
 8003326:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003328:	f107 0310 	add.w	r3, r7, #16
 800332c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003330:	4619      	mov	r1, r3
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f007 fb10 	bl	800a958 <HAL_QSPI_Command>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d001      	beq.n	8003342 <QSPI_OutDrvStrengthCfg+0x4e>
  {
    return QSPI_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e08d      	b.n	800345e <QSPI_OutDrvStrengthCfg+0x16a>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003342:	f107 030c 	add.w	r3, r7, #12
 8003346:	f241 3288 	movw	r2, #5000	; 0x1388
 800334a:	4619      	mov	r1, r3
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f007 fbf3 	bl	800ab38 <HAL_QSPI_Receive>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d001      	beq.n	800335c <QSPI_OutDrvStrengthCfg+0x68>
  {
    return QSPI_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e080      	b.n	800345e <QSPI_OutDrvStrengthCfg+0x16a>
  }

  /* Initialize the reading of configuration register */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800335c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003360:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = READ_CFG_REG_CMD;
 8003362:	2315      	movs	r3, #21
 8003364:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003366:	2300      	movs	r3, #0
 8003368:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800336a:	2300      	movs	r3, #0
 800336c:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800336e:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8003372:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 8003374:	2300      	movs	r3, #0
 8003376:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 1;
 8003378:	2301      	movs	r3, #1
 800337a:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800337c:	2300      	movs	r3, #0
 800337e:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003380:	2300      	movs	r3, #0
 8003382:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003384:	2300      	movs	r3, #0
 8003386:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003388:	f107 0310 	add.w	r3, r7, #16
 800338c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003390:	4619      	mov	r1, r3
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f007 fae0 	bl	800a958 <HAL_QSPI_Command>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <QSPI_OutDrvStrengthCfg+0xae>
  {
    return QSPI_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e05d      	b.n	800345e <QSPI_OutDrvStrengthCfg+0x16a>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80033a2:	f107 030c 	add.w	r3, r7, #12
 80033a6:	3301      	adds	r3, #1
 80033a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ac:	4619      	mov	r1, r3
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f007 fbc2 	bl	800ab38 <HAL_QSPI_Receive>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d001      	beq.n	80033be <QSPI_OutDrvStrengthCfg+0xca>
  {
    return QSPI_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e04f      	b.n	800345e <QSPI_OutDrvStrengthCfg+0x16a>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 80033be:	482a      	ldr	r0, [pc, #168]	; (8003468 <QSPI_OutDrvStrengthCfg+0x174>)
 80033c0:	f000 f854 	bl	800346c <QSPI_WriteEnable>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d001      	beq.n	80033ce <QSPI_OutDrvStrengthCfg+0xda>
  {
    return QSPI_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e047      	b.n	800345e <QSPI_OutDrvStrengthCfg+0x16a>
  }

  /* Update the configuration register with new output driver strength */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80033ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80033d2:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = WRITE_STATUS_CFG_REG_CMD;
 80033d4:	2301      	movs	r3, #1
 80033d6:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80033d8:	2300      	movs	r3, #0
 80033da:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80033dc:	2300      	movs	r3, #0
 80033de:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80033e0:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80033e4:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 80033e6:	2300      	movs	r3, #0
 80033e8:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 2;
 80033ea:	2302      	movs	r3, #2
 80033ec:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80033ee:	2300      	movs	r3, #0
 80033f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80033f2:	2300      	movs	r3, #0
 80033f4:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80033f6:	2300      	movs	r3, #0
 80033f8:	647b      	str	r3, [r7, #68]	; 0x44

  /* Set Output Strength of the QSPI memory 15 ohms */
  MODIFY_REG( reg[1], MX25L512_CR_ODS, (MX25L512_CR_ODS_15 << POSITION_VAL(MX25L512_CR_ODS)));
 80033fa:	7b7b      	ldrb	r3, [r7, #13]
 80033fc:	b25b      	sxtb	r3, r3
 80033fe:	f023 0307 	bic.w	r3, r3, #7
 8003402:	b25a      	sxtb	r2, r3
 8003404:	2307      	movs	r3, #7
 8003406:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003408:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800340a:	fa93 f3a3 	rbit	r3, r3
 800340e:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003410:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003412:	fab3 f383 	clz	r3, r3
 8003416:	b2db      	uxtb	r3, r3
 8003418:	4619      	mov	r1, r3
 800341a:	2306      	movs	r3, #6
 800341c:	408b      	lsls	r3, r1
 800341e:	b25b      	sxtb	r3, r3
 8003420:	4313      	orrs	r3, r2
 8003422:	b25b      	sxtb	r3, r3
 8003424:	b2db      	uxtb	r3, r3
 8003426:	737b      	strb	r3, [r7, #13]

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003428:	f107 0310 	add.w	r3, r7, #16
 800342c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003430:	4619      	mov	r1, r3
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f007 fa90 	bl	800a958 <HAL_QSPI_Command>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d001      	beq.n	8003442 <QSPI_OutDrvStrengthCfg+0x14e>
  {
    return QSPI_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e00d      	b.n	800345e <QSPI_OutDrvStrengthCfg+0x16a>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003442:	f107 030c 	add.w	r3, r7, #12
 8003446:	f241 3288 	movw	r2, #5000	; 0x1388
 800344a:	4619      	mov	r1, r3
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f007 fae1 	bl	800aa14 <HAL_QSPI_Transmit>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d001      	beq.n	800345c <QSPI_OutDrvStrengthCfg+0x168>
  {
    return QSPI_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e000      	b.n	800345e <QSPI_OutDrvStrengthCfg+0x16a>
  }

  return QSPI_OK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3750      	adds	r7, #80	; 0x50
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	200003f4 	.word	0x200003f4

0800346c <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b096      	sub	sp, #88	; 0x58
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;
  
  /* Enable write operations */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003474:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003478:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = WRITE_ENABLE_CMD;
 800347a:	2306      	movs	r3, #6
 800347c:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800347e:	2300      	movs	r3, #0
 8003480:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003482:	2300      	movs	r3, #0
 8003484:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 8003486:	2300      	movs	r3, #0
 8003488:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 800348a:	2300      	movs	r3, #0
 800348c:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800348e:	2300      	movs	r3, #0
 8003490:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003492:	2300      	movs	r3, #0
 8003494:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003496:	2300      	movs	r3, #0
 8003498:	657b      	str	r3, [r7, #84]	; 0x54
  
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800349a:	f107 0320 	add.w	r3, r7, #32
 800349e:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a2:	4619      	mov	r1, r3
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f007 fa57 	bl	800a958 <HAL_QSPI_Command>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d001      	beq.n	80034b4 <QSPI_WriteEnable+0x48>
  {
    return QSPI_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e020      	b.n	80034f6 <QSPI_WriteEnable+0x8a>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  s_config.Match           = MX25L512_SR_WREN;
 80034b4:	2302      	movs	r3, #2
 80034b6:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = MX25L512_SR_WREN;
 80034b8:	2302      	movs	r3, #2
 80034ba:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80034bc:	2300      	movs	r3, #0
 80034be:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 80034c0:	2301      	movs	r3, #1
 80034c2:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 80034c4:	2310      	movs	r3, #16
 80034c6:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80034c8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80034cc:	61fb      	str	r3, [r7, #28]
  
  s_command.Instruction    = READ_STATUS_REG_CMD;
 80034ce:	2305      	movs	r3, #5
 80034d0:	623b      	str	r3, [r7, #32]
  s_command.DataMode       = QSPI_DATA_4_LINES;
 80034d2:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80034d6:	647b      	str	r3, [r7, #68]	; 0x44
  
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80034d8:	f107 0208 	add.w	r2, r7, #8
 80034dc:	f107 0120 	add.w	r1, r7, #32
 80034e0:	f241 3388 	movw	r3, #5000	; 0x1388
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f007 fbc4 	bl	800ac72 <HAL_QSPI_AutoPolling>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d001      	beq.n	80034f4 <QSPI_WriteEnable+0x88>
  {
    return QSPI_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e000      	b.n	80034f6 <QSPI_WriteEnable+0x8a>
  }
  
  return QSPI_OK;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3758      	adds	r7, #88	; 0x58
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}

080034fe <QSPI_AutoPollingMemReady>:
  * @param  hqspi: QSPI handle
  * @param  Timeout
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80034fe:	b580      	push	{r7, lr}
 8003500:	b096      	sub	sp, #88	; 0x58
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
 8003506:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */  
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003508:	f44f 7340 	mov.w	r3, #768	; 0x300
 800350c:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = READ_STATUS_REG_CMD;
 800350e:	2305      	movs	r3, #5
 8003510:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003512:	2300      	movs	r3, #0
 8003514:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003516:	2300      	movs	r3, #0
 8003518:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800351a:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800351e:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 8003520:	2300      	movs	r3, #0
 8003522:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003524:	2300      	movs	r3, #0
 8003526:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003528:	2300      	movs	r3, #0
 800352a:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800352c:	2300      	movs	r3, #0
 800352e:	657b      	str	r3, [r7, #84]	; 0x54

  s_config.Match           = 0;
 8003530:	2300      	movs	r3, #0
 8003532:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = MX25L512_SR_WIP;
 8003534:	2301      	movs	r3, #1
 8003536:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8003538:	2300      	movs	r3, #0
 800353a:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 800353c:	2301      	movs	r3, #1
 800353e:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8003540:	2310      	movs	r3, #16
 8003542:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8003544:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003548:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 800354a:	f107 0208 	add.w	r2, r7, #8
 800354e:	f107 0120 	add.w	r1, r7, #32
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f007 fb8c 	bl	800ac72 <HAL_QSPI_AutoPolling>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d001      	beq.n	8003564 <QSPI_AutoPollingMemReady+0x66>
  {
    return QSPI_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e000      	b.n	8003566 <QSPI_AutoPollingMemReady+0x68>
  }

  return QSPI_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3758      	adds	r7, #88	; 0x58
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
	...

08003570 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003576:	4b0f      	ldr	r3, [pc, #60]	; (80035b4 <HAL_MspInit+0x44>)
 8003578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357a:	4a0e      	ldr	r2, [pc, #56]	; (80035b4 <HAL_MspInit+0x44>)
 800357c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003580:	6413      	str	r3, [r2, #64]	; 0x40
 8003582:	4b0c      	ldr	r3, [pc, #48]	; (80035b4 <HAL_MspInit+0x44>)
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800358a:	607b      	str	r3, [r7, #4]
 800358c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800358e:	4b09      	ldr	r3, [pc, #36]	; (80035b4 <HAL_MspInit+0x44>)
 8003590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003592:	4a08      	ldr	r2, [pc, #32]	; (80035b4 <HAL_MspInit+0x44>)
 8003594:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003598:	6453      	str	r3, [r2, #68]	; 0x44
 800359a:	4b06      	ldr	r3, [pc, #24]	; (80035b4 <HAL_MspInit+0x44>)
 800359c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800359e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035a2:	603b      	str	r3, [r7, #0]
 80035a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035a6:	bf00      	nop
 80035a8:	370c      	adds	r7, #12
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	40023800 	.word	0x40023800

080035b8 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b08a      	sub	sp, #40	; 0x28
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035c0:	f107 0314 	add.w	r3, r7, #20
 80035c4:	2200      	movs	r2, #0
 80035c6:	601a      	str	r2, [r3, #0]
 80035c8:	605a      	str	r2, [r3, #4]
 80035ca:	609a      	str	r2, [r3, #8]
 80035cc:	60da      	str	r2, [r3, #12]
 80035ce:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 80035d0:	4b4b      	ldr	r3, [pc, #300]	; (8003700 <HAL_DFSDM_FilterMspInit+0x148>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d152      	bne.n	800367e <HAL_DFSDM_FilterMspInit+0xc6>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80035d8:	4b4a      	ldr	r3, [pc, #296]	; (8003704 <HAL_DFSDM_FilterMspInit+0x14c>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	3301      	adds	r3, #1
 80035de:	4a49      	ldr	r2, [pc, #292]	; (8003704 <HAL_DFSDM_FilterMspInit+0x14c>)
 80035e0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80035e2:	4b48      	ldr	r3, [pc, #288]	; (8003704 <HAL_DFSDM_FilterMspInit+0x14c>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d10b      	bne.n	8003602 <HAL_DFSDM_FilterMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80035ea:	4b47      	ldr	r3, [pc, #284]	; (8003708 <HAL_DFSDM_FilterMspInit+0x150>)
 80035ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ee:	4a46      	ldr	r2, [pc, #280]	; (8003708 <HAL_DFSDM_FilterMspInit+0x150>)
 80035f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80035f4:	6453      	str	r3, [r2, #68]	; 0x44
 80035f6:	4b44      	ldr	r3, [pc, #272]	; (8003708 <HAL_DFSDM_FilterMspInit+0x150>)
 80035f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035fe:	613b      	str	r3, [r7, #16]
 8003600:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003602:	4b41      	ldr	r3, [pc, #260]	; (8003708 <HAL_DFSDM_FilterMspInit+0x150>)
 8003604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003606:	4a40      	ldr	r2, [pc, #256]	; (8003708 <HAL_DFSDM_FilterMspInit+0x150>)
 8003608:	f043 0304 	orr.w	r3, r3, #4
 800360c:	6313      	str	r3, [r2, #48]	; 0x30
 800360e:	4b3e      	ldr	r3, [pc, #248]	; (8003708 <HAL_DFSDM_FilterMspInit+0x150>)
 8003610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003612:	f003 0304 	and.w	r3, r3, #4
 8003616:	60fb      	str	r3, [r7, #12]
 8003618:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800361a:	4b3b      	ldr	r3, [pc, #236]	; (8003708 <HAL_DFSDM_FilterMspInit+0x150>)
 800361c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361e:	4a3a      	ldr	r2, [pc, #232]	; (8003708 <HAL_DFSDM_FilterMspInit+0x150>)
 8003620:	f043 0308 	orr.w	r3, r3, #8
 8003624:	6313      	str	r3, [r2, #48]	; 0x30
 8003626:	4b38      	ldr	r3, [pc, #224]	; (8003708 <HAL_DFSDM_FilterMspInit+0x150>)
 8003628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362a:	f003 0308 	and.w	r3, r3, #8
 800362e:	60bb      	str	r3, [r7, #8]
 8003630:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PC11     ------> DFSDM1_DATIN5
    PD3     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003632:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003636:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003638:	2302      	movs	r3, #2
 800363a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800363c:	2300      	movs	r3, #0
 800363e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003640:	2300      	movs	r3, #0
 8003642:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8003644:	2303      	movs	r3, #3
 8003646:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003648:	f107 0314 	add.w	r3, r7, #20
 800364c:	4619      	mov	r1, r3
 800364e:	482f      	ldr	r0, [pc, #188]	; (800370c <HAL_DFSDM_FilterMspInit+0x154>)
 8003650:	f006 fd86 	bl	800a160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003654:	2308      	movs	r3, #8
 8003656:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003658:	2302      	movs	r3, #2
 800365a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800365c:	2300      	movs	r3, #0
 800365e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003660:	2300      	movs	r3, #0
 8003662:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8003664:	2303      	movs	r3, #3
 8003666:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003668:	f107 0314 	add.w	r3, r7, #20
 800366c:	4619      	mov	r1, r3
 800366e:	4828      	ldr	r0, [pc, #160]	; (8003710 <HAL_DFSDM_FilterMspInit+0x158>)
 8003670:	f006 fd76 	bl	800a160 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8003674:	4b22      	ldr	r3, [pc, #136]	; (8003700 <HAL_DFSDM_FilterMspInit+0x148>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	3301      	adds	r3, #1
 800367a:	4a21      	ldr	r2, [pc, #132]	; (8003700 <HAL_DFSDM_FilterMspInit+0x148>)
 800367c:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a24      	ldr	r2, [pc, #144]	; (8003714 <HAL_DFSDM_FilterMspInit+0x15c>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d136      	bne.n	80036f6 <HAL_DFSDM_FilterMspInit+0x13e>
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 8003688:	4b23      	ldr	r3, [pc, #140]	; (8003718 <HAL_DFSDM_FilterMspInit+0x160>)
 800368a:	4a24      	ldr	r2, [pc, #144]	; (800371c <HAL_DFSDM_FilterMspInit+0x164>)
 800368c:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Channel = DMA_CHANNEL_8;
 800368e:	4b22      	ldr	r3, [pc, #136]	; (8003718 <HAL_DFSDM_FilterMspInit+0x160>)
 8003690:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003694:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003696:	4b20      	ldr	r3, [pc, #128]	; (8003718 <HAL_DFSDM_FilterMspInit+0x160>)
 8003698:	2200      	movs	r2, #0
 800369a:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 800369c:	4b1e      	ldr	r3, [pc, #120]	; (8003718 <HAL_DFSDM_FilterMspInit+0x160>)
 800369e:	2200      	movs	r2, #0
 80036a0:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 80036a2:	4b1d      	ldr	r3, [pc, #116]	; (8003718 <HAL_DFSDM_FilterMspInit+0x160>)
 80036a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036a8:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80036aa:	4b1b      	ldr	r3, [pc, #108]	; (8003718 <HAL_DFSDM_FilterMspInit+0x160>)
 80036ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80036b0:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80036b2:	4b19      	ldr	r3, [pc, #100]	; (8003718 <HAL_DFSDM_FilterMspInit+0x160>)
 80036b4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80036b8:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 80036ba:	4b17      	ldr	r3, [pc, #92]	; (8003718 <HAL_DFSDM_FilterMspInit+0x160>)
 80036bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036c0:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 80036c2:	4b15      	ldr	r3, [pc, #84]	; (8003718 <HAL_DFSDM_FilterMspInit+0x160>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	621a      	str	r2, [r3, #32]
    hdma_dfsdm1_flt0.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036c8:	4b13      	ldr	r3, [pc, #76]	; (8003718 <HAL_DFSDM_FilterMspInit+0x160>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 80036ce:	4812      	ldr	r0, [pc, #72]	; (8003718 <HAL_DFSDM_FilterMspInit+0x160>)
 80036d0:	f006 f95e 	bl	8009990 <HAL_DMA_Init>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d001      	beq.n	80036de <HAL_DFSDM_FilterMspInit+0x126>
    {
      Error_Handler();
 80036da:	f7ff f8f3 	bl	80028c4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a0d      	ldr	r2, [pc, #52]	; (8003718 <HAL_DFSDM_FilterMspInit+0x160>)
 80036e2:	62da      	str	r2, [r3, #44]	; 0x2c
 80036e4:	4a0c      	ldr	r2, [pc, #48]	; (8003718 <HAL_DFSDM_FilterMspInit+0x160>)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a0a      	ldr	r2, [pc, #40]	; (8003718 <HAL_DFSDM_FilterMspInit+0x160>)
 80036ee:	629a      	str	r2, [r3, #40]	; 0x28
 80036f0:	4a09      	ldr	r2, [pc, #36]	; (8003718 <HAL_DFSDM_FilterMspInit+0x160>)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6393      	str	r3, [r2, #56]	; 0x38
  }

}
 80036f6:	bf00      	nop
 80036f8:	3728      	adds	r7, #40	; 0x28
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	200003b8 	.word	0x200003b8
 8003704:	200003b4 	.word	0x200003b4
 8003708:	40023800 	.word	0x40023800
 800370c:	40020800 	.word	0x40020800
 8003710:	40020c00 	.word	0x40020c00
 8003714:	40017500 	.word	0x40017500
 8003718:	20000128 	.word	0x20000128
 800371c:	40026410 	.word	0x40026410

08003720 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b08a      	sub	sp, #40	; 0x28
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003728:	f107 0314 	add.w	r3, r7, #20
 800372c:	2200      	movs	r2, #0
 800372e:	601a      	str	r2, [r3, #0]
 8003730:	605a      	str	r2, [r3, #4]
 8003732:	609a      	str	r2, [r3, #8]
 8003734:	60da      	str	r2, [r3, #12]
 8003736:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8003738:	4b2d      	ldr	r3, [pc, #180]	; (80037f0 <HAL_DFSDM_ChannelMspInit+0xd0>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d152      	bne.n	80037e6 <HAL_DFSDM_ChannelMspInit+0xc6>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8003740:	4b2c      	ldr	r3, [pc, #176]	; (80037f4 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	3301      	adds	r3, #1
 8003746:	4a2b      	ldr	r2, [pc, #172]	; (80037f4 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8003748:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800374a:	4b2a      	ldr	r3, [pc, #168]	; (80037f4 <HAL_DFSDM_ChannelMspInit+0xd4>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2b01      	cmp	r3, #1
 8003750:	d10b      	bne.n	800376a <HAL_DFSDM_ChannelMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8003752:	4b29      	ldr	r3, [pc, #164]	; (80037f8 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8003754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003756:	4a28      	ldr	r2, [pc, #160]	; (80037f8 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8003758:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800375c:	6453      	str	r3, [r2, #68]	; 0x44
 800375e:	4b26      	ldr	r3, [pc, #152]	; (80037f8 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8003760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003762:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003766:	613b      	str	r3, [r7, #16]
 8003768:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800376a:	4b23      	ldr	r3, [pc, #140]	; (80037f8 <HAL_DFSDM_ChannelMspInit+0xd8>)
 800376c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376e:	4a22      	ldr	r2, [pc, #136]	; (80037f8 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8003770:	f043 0304 	orr.w	r3, r3, #4
 8003774:	6313      	str	r3, [r2, #48]	; 0x30
 8003776:	4b20      	ldr	r3, [pc, #128]	; (80037f8 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8003778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377a:	f003 0304 	and.w	r3, r3, #4
 800377e:	60fb      	str	r3, [r7, #12]
 8003780:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003782:	4b1d      	ldr	r3, [pc, #116]	; (80037f8 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8003784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003786:	4a1c      	ldr	r2, [pc, #112]	; (80037f8 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8003788:	f043 0308 	orr.w	r3, r3, #8
 800378c:	6313      	str	r3, [r2, #48]	; 0x30
 800378e:	4b1a      	ldr	r3, [pc, #104]	; (80037f8 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8003790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003792:	f003 0308 	and.w	r3, r3, #8
 8003796:	60bb      	str	r3, [r7, #8]
 8003798:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PC11     ------> DFSDM1_DATIN5
    PD3     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800379a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800379e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037a0:	2302      	movs	r3, #2
 80037a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037a4:	2300      	movs	r3, #0
 80037a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037a8:	2300      	movs	r3, #0
 80037aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 80037ac:	2303      	movs	r3, #3
 80037ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037b0:	f107 0314 	add.w	r3, r7, #20
 80037b4:	4619      	mov	r1, r3
 80037b6:	4811      	ldr	r0, [pc, #68]	; (80037fc <HAL_DFSDM_ChannelMspInit+0xdc>)
 80037b8:	f006 fcd2 	bl	800a160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80037bc:	2308      	movs	r3, #8
 80037be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037c0:	2302      	movs	r3, #2
 80037c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037c4:	2300      	movs	r3, #0
 80037c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037c8:	2300      	movs	r3, #0
 80037ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 80037cc:	2303      	movs	r3, #3
 80037ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80037d0:	f107 0314 	add.w	r3, r7, #20
 80037d4:	4619      	mov	r1, r3
 80037d6:	480a      	ldr	r0, [pc, #40]	; (8003800 <HAL_DFSDM_ChannelMspInit+0xe0>)
 80037d8:	f006 fcc2 	bl	800a160 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80037dc:	4b04      	ldr	r3, [pc, #16]	; (80037f0 <HAL_DFSDM_ChannelMspInit+0xd0>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	3301      	adds	r3, #1
 80037e2:	4a03      	ldr	r2, [pc, #12]	; (80037f0 <HAL_DFSDM_ChannelMspInit+0xd0>)
 80037e4:	6013      	str	r3, [r2, #0]
  }

}
 80037e6:	bf00      	nop
 80037e8:	3728      	adds	r7, #40	; 0x28
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	200003b8 	.word	0x200003b8
 80037f4:	200003b4 	.word	0x200003b4
 80037f8:	40023800 	.word	0x40023800
 80037fc:	40020800 	.word	0x40020800
 8003800:	40020c00 	.word	0x40020c00

08003804 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b08c      	sub	sp, #48	; 0x30
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800380c:	f107 031c 	add.w	r3, r7, #28
 8003810:	2200      	movs	r2, #0
 8003812:	601a      	str	r2, [r3, #0]
 8003814:	605a      	str	r2, [r3, #4]
 8003816:	609a      	str	r2, [r3, #8]
 8003818:	60da      	str	r2, [r3, #12]
 800381a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a4a      	ldr	r2, [pc, #296]	; (800394c <HAL_QSPI_MspInit+0x148>)
 8003822:	4293      	cmp	r3, r2
 8003824:	f040 808e 	bne.w	8003944 <HAL_QSPI_MspInit+0x140>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8003828:	4b49      	ldr	r3, [pc, #292]	; (8003950 <HAL_QSPI_MspInit+0x14c>)
 800382a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382c:	4a48      	ldr	r2, [pc, #288]	; (8003950 <HAL_QSPI_MspInit+0x14c>)
 800382e:	f043 0302 	orr.w	r3, r3, #2
 8003832:	6393      	str	r3, [r2, #56]	; 0x38
 8003834:	4b46      	ldr	r3, [pc, #280]	; (8003950 <HAL_QSPI_MspInit+0x14c>)
 8003836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003838:	f003 0302 	and.w	r3, r3, #2
 800383c:	61bb      	str	r3, [r7, #24]
 800383e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003840:	4b43      	ldr	r3, [pc, #268]	; (8003950 <HAL_QSPI_MspInit+0x14c>)
 8003842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003844:	4a42      	ldr	r2, [pc, #264]	; (8003950 <HAL_QSPI_MspInit+0x14c>)
 8003846:	f043 0310 	orr.w	r3, r3, #16
 800384a:	6313      	str	r3, [r2, #48]	; 0x30
 800384c:	4b40      	ldr	r3, [pc, #256]	; (8003950 <HAL_QSPI_MspInit+0x14c>)
 800384e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003850:	f003 0310 	and.w	r3, r3, #16
 8003854:	617b      	str	r3, [r7, #20]
 8003856:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003858:	4b3d      	ldr	r3, [pc, #244]	; (8003950 <HAL_QSPI_MspInit+0x14c>)
 800385a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385c:	4a3c      	ldr	r2, [pc, #240]	; (8003950 <HAL_QSPI_MspInit+0x14c>)
 800385e:	f043 0302 	orr.w	r3, r3, #2
 8003862:	6313      	str	r3, [r2, #48]	; 0x30
 8003864:	4b3a      	ldr	r3, [pc, #232]	; (8003950 <HAL_QSPI_MspInit+0x14c>)
 8003866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003868:	f003 0302 	and.w	r3, r3, #2
 800386c:	613b      	str	r3, [r7, #16]
 800386e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003870:	4b37      	ldr	r3, [pc, #220]	; (8003950 <HAL_QSPI_MspInit+0x14c>)
 8003872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003874:	4a36      	ldr	r2, [pc, #216]	; (8003950 <HAL_QSPI_MspInit+0x14c>)
 8003876:	f043 0304 	orr.w	r3, r3, #4
 800387a:	6313      	str	r3, [r2, #48]	; 0x30
 800387c:	4b34      	ldr	r3, [pc, #208]	; (8003950 <HAL_QSPI_MspInit+0x14c>)
 800387e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003880:	f003 0304 	and.w	r3, r3, #4
 8003884:	60fb      	str	r3, [r7, #12]
 8003886:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003888:	4b31      	ldr	r3, [pc, #196]	; (8003950 <HAL_QSPI_MspInit+0x14c>)
 800388a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388c:	4a30      	ldr	r2, [pc, #192]	; (8003950 <HAL_QSPI_MspInit+0x14c>)
 800388e:	f043 0308 	orr.w	r3, r3, #8
 8003892:	6313      	str	r3, [r2, #48]	; 0x30
 8003894:	4b2e      	ldr	r3, [pc, #184]	; (8003950 <HAL_QSPI_MspInit+0x14c>)
 8003896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003898:	f003 0308 	and.w	r3, r3, #8
 800389c:	60bb      	str	r3, [r7, #8]
 800389e:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> QUADSPI_BK1_IO1
    PC9     ------> QUADSPI_BK1_IO0
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80038a0:	2304      	movs	r3, #4
 80038a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038a4:	2302      	movs	r3, #2
 80038a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a8:	2300      	movs	r3, #0
 80038aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038ac:	2303      	movs	r3, #3
 80038ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80038b0:	2309      	movs	r3, #9
 80038b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80038b4:	f107 031c 	add.w	r3, r7, #28
 80038b8:	4619      	mov	r1, r3
 80038ba:	4826      	ldr	r0, [pc, #152]	; (8003954 <HAL_QSPI_MspInit+0x150>)
 80038bc:	f006 fc50 	bl	800a160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80038c0:	2340      	movs	r3, #64	; 0x40
 80038c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038c4:	2302      	movs	r3, #2
 80038c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c8:	2300      	movs	r3, #0
 80038ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038cc:	2303      	movs	r3, #3
 80038ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80038d0:	230a      	movs	r3, #10
 80038d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038d4:	f107 031c 	add.w	r3, r7, #28
 80038d8:	4619      	mov	r1, r3
 80038da:	481f      	ldr	r0, [pc, #124]	; (8003958 <HAL_QSPI_MspInit+0x154>)
 80038dc:	f006 fc40 	bl	800a160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 80038e0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80038e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038e6:	2302      	movs	r3, #2
 80038e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ea:	2300      	movs	r3, #0
 80038ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038ee:	2303      	movs	r3, #3
 80038f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80038f2:	2309      	movs	r3, #9
 80038f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038f6:	f107 031c 	add.w	r3, r7, #28
 80038fa:	4619      	mov	r1, r3
 80038fc:	4817      	ldr	r0, [pc, #92]	; (800395c <HAL_QSPI_MspInit+0x158>)
 80038fe:	f006 fc2f 	bl	800a160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003902:	2304      	movs	r3, #4
 8003904:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003906:	2302      	movs	r3, #2
 8003908:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800390a:	2300      	movs	r3, #0
 800390c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800390e:	2303      	movs	r3, #3
 8003910:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003912:	2309      	movs	r3, #9
 8003914:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003916:	f107 031c 	add.w	r3, r7, #28
 800391a:	4619      	mov	r1, r3
 800391c:	480e      	ldr	r0, [pc, #56]	; (8003958 <HAL_QSPI_MspInit+0x154>)
 800391e:	f006 fc1f 	bl	800a160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003922:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003926:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003928:	2302      	movs	r3, #2
 800392a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800392c:	2300      	movs	r3, #0
 800392e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003930:	2303      	movs	r3, #3
 8003932:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003934:	2309      	movs	r3, #9
 8003936:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003938:	f107 031c 	add.w	r3, r7, #28
 800393c:	4619      	mov	r1, r3
 800393e:	4808      	ldr	r0, [pc, #32]	; (8003960 <HAL_QSPI_MspInit+0x15c>)
 8003940:	f006 fc0e 	bl	800a160 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8003944:	bf00      	nop
 8003946:	3730      	adds	r7, #48	; 0x30
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	a0001000 	.word	0xa0001000
 8003950:	40023800 	.word	0x40023800
 8003954:	40021000 	.word	0x40021000
 8003958:	40020400 	.word	0x40020400
 800395c:	40020800 	.word	0x40020800
 8003960:	40020c00 	.word	0x40020c00

08003964 <HAL_QSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  if(hqspi->Instance==QUADSPI)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a0f      	ldr	r2, [pc, #60]	; (80039b0 <HAL_QSPI_MspDeInit+0x4c>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d117      	bne.n	80039a6 <HAL_QSPI_MspDeInit+0x42>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8003976:	4b0f      	ldr	r3, [pc, #60]	; (80039b4 <HAL_QSPI_MspDeInit+0x50>)
 8003978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800397a:	4a0e      	ldr	r2, [pc, #56]	; (80039b4 <HAL_QSPI_MspDeInit+0x50>)
 800397c:	f023 0302 	bic.w	r3, r3, #2
 8003980:	6393      	str	r3, [r2, #56]	; 0x38
    PC10     ------> QUADSPI_BK1_IO1
    PC9     ------> QUADSPI_BK1_IO0
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2);
 8003982:	2104      	movs	r1, #4
 8003984:	480c      	ldr	r0, [pc, #48]	; (80039b8 <HAL_QSPI_MspDeInit+0x54>)
 8003986:	f006 fd97 	bl	800a4b8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_2);
 800398a:	2144      	movs	r1, #68	; 0x44
 800398c:	480b      	ldr	r0, [pc, #44]	; (80039bc <HAL_QSPI_MspDeInit+0x58>)
 800398e:	f006 fd93 	bl	800a4b8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_10|GPIO_PIN_9);
 8003992:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003996:	480a      	ldr	r0, [pc, #40]	; (80039c0 <HAL_QSPI_MspDeInit+0x5c>)
 8003998:	f006 fd8e 	bl	800a4b8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_13);
 800399c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80039a0:	4808      	ldr	r0, [pc, #32]	; (80039c4 <HAL_QSPI_MspDeInit+0x60>)
 80039a2:	f006 fd89 	bl	800a4b8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }

}
 80039a6:	bf00      	nop
 80039a8:	3708      	adds	r7, #8
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	a0001000 	.word	0xa0001000
 80039b4:	40023800 	.word	0x40023800
 80039b8:	40021000 	.word	0x40021000
 80039bc:	40020400 	.word	0x40020400
 80039c0:	40020800 	.word	0x40020800
 80039c4:	40020c00 	.word	0x40020c00

080039c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b08a      	sub	sp, #40	; 0x28
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039d0:	f107 0314 	add.w	r3, r7, #20
 80039d4:	2200      	movs	r2, #0
 80039d6:	601a      	str	r2, [r3, #0]
 80039d8:	605a      	str	r2, [r3, #4]
 80039da:	609a      	str	r2, [r3, #8]
 80039dc:	60da      	str	r2, [r3, #12]
 80039de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a25      	ldr	r2, [pc, #148]	; (8003a7c <HAL_UART_MspInit+0xb4>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d144      	bne.n	8003a74 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80039ea:	4b25      	ldr	r3, [pc, #148]	; (8003a80 <HAL_UART_MspInit+0xb8>)
 80039ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ee:	4a24      	ldr	r2, [pc, #144]	; (8003a80 <HAL_UART_MspInit+0xb8>)
 80039f0:	f043 0310 	orr.w	r3, r3, #16
 80039f4:	6453      	str	r3, [r2, #68]	; 0x44
 80039f6:	4b22      	ldr	r3, [pc, #136]	; (8003a80 <HAL_UART_MspInit+0xb8>)
 80039f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039fa:	f003 0310 	and.w	r3, r3, #16
 80039fe:	613b      	str	r3, [r7, #16]
 8003a00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a02:	4b1f      	ldr	r3, [pc, #124]	; (8003a80 <HAL_UART_MspInit+0xb8>)
 8003a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a06:	4a1e      	ldr	r2, [pc, #120]	; (8003a80 <HAL_UART_MspInit+0xb8>)
 8003a08:	f043 0302 	orr.w	r3, r3, #2
 8003a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a0e:	4b1c      	ldr	r3, [pc, #112]	; (8003a80 <HAL_UART_MspInit+0xb8>)
 8003a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a12:	f003 0302 	and.w	r3, r3, #2
 8003a16:	60fb      	str	r3, [r7, #12]
 8003a18:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a1a:	4b19      	ldr	r3, [pc, #100]	; (8003a80 <HAL_UART_MspInit+0xb8>)
 8003a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1e:	4a18      	ldr	r2, [pc, #96]	; (8003a80 <HAL_UART_MspInit+0xb8>)
 8003a20:	f043 0301 	orr.w	r3, r3, #1
 8003a24:	6313      	str	r3, [r2, #48]	; 0x30
 8003a26:	4b16      	ldr	r3, [pc, #88]	; (8003a80 <HAL_UART_MspInit+0xb8>)
 8003a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	60bb      	str	r3, [r7, #8]
 8003a30:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003a32:	2380      	movs	r3, #128	; 0x80
 8003a34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a36:	2302      	movs	r3, #2
 8003a38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003a42:	2307      	movs	r3, #7
 8003a44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a46:	f107 0314 	add.w	r3, r7, #20
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	480d      	ldr	r0, [pc, #52]	; (8003a84 <HAL_UART_MspInit+0xbc>)
 8003a4e:	f006 fb87 	bl	800a160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003a52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a58:	2302      	movs	r3, #2
 8003a5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a60:	2303      	movs	r3, #3
 8003a62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003a64:	2307      	movs	r3, #7
 8003a66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a68:	f107 0314 	add.w	r3, r7, #20
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	4806      	ldr	r0, [pc, #24]	; (8003a88 <HAL_UART_MspInit+0xc0>)
 8003a70:	f006 fb76 	bl	800a160 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003a74:	bf00      	nop
 8003a76:	3728      	adds	r7, #40	; 0x28
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	40011000 	.word	0x40011000
 8003a80:	40023800 	.word	0x40023800
 8003a84:	40020400 	.word	0x40020400
 8003a88:	40020000 	.word	0x40020000

08003a8c <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_a;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b088      	sub	sp, #32
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a30      	ldr	r2, [pc, #192]	; (8003b5c <HAL_SAI_MspInit+0xd0>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d15a      	bne.n	8003b54 <HAL_SAI_MspInit+0xc8>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8003a9e:	4b30      	ldr	r3, [pc, #192]	; (8003b60 <HAL_SAI_MspInit+0xd4>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10b      	bne.n	8003abe <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8003aa6:	4b2f      	ldr	r3, [pc, #188]	; (8003b64 <HAL_SAI_MspInit+0xd8>)
 8003aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aaa:	4a2e      	ldr	r2, [pc, #184]	; (8003b64 <HAL_SAI_MspInit+0xd8>)
 8003aac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003ab0:	6453      	str	r3, [r2, #68]	; 0x44
 8003ab2:	4b2c      	ldr	r3, [pc, #176]	; (8003b64 <HAL_SAI_MspInit+0xd8>)
 8003ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aba:	60bb      	str	r3, [r7, #8]
 8003abc:	68bb      	ldr	r3, [r7, #8]
    }
    SAI1_client ++;
 8003abe:	4b28      	ldr	r3, [pc, #160]	; (8003b60 <HAL_SAI_MspInit+0xd4>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	4a26      	ldr	r2, [pc, #152]	; (8003b60 <HAL_SAI_MspInit+0xd4>)
 8003ac6:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8003ac8:	2370      	movs	r3, #112	; 0x70
 8003aca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003acc:	2302      	movs	r3, #2
 8003ace:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8003ad8:	2306      	movs	r3, #6
 8003ada:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003adc:	f107 030c 	add.w	r3, r7, #12
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	4821      	ldr	r0, [pc, #132]	; (8003b68 <HAL_SAI_MspInit+0xdc>)
 8003ae4:	f006 fb3c 	bl	800a160 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA2_Stream1;
 8003ae8:	4b20      	ldr	r3, [pc, #128]	; (8003b6c <HAL_SAI_MspInit+0xe0>)
 8003aea:	4a21      	ldr	r2, [pc, #132]	; (8003b70 <HAL_SAI_MspInit+0xe4>)
 8003aec:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Channel = DMA_CHANNEL_0;
 8003aee:	4b1f      	ldr	r3, [pc, #124]	; (8003b6c <HAL_SAI_MspInit+0xe0>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003af4:	4b1d      	ldr	r3, [pc, #116]	; (8003b6c <HAL_SAI_MspInit+0xe0>)
 8003af6:	2240      	movs	r2, #64	; 0x40
 8003af8:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8003afa:	4b1c      	ldr	r3, [pc, #112]	; (8003b6c <HAL_SAI_MspInit+0xe0>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8003b00:	4b1a      	ldr	r3, [pc, #104]	; (8003b6c <HAL_SAI_MspInit+0xe0>)
 8003b02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b06:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003b08:	4b18      	ldr	r3, [pc, #96]	; (8003b6c <HAL_SAI_MspInit+0xe0>)
 8003b0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b0e:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003b10:	4b16      	ldr	r3, [pc, #88]	; (8003b6c <HAL_SAI_MspInit+0xe0>)
 8003b12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b16:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8003b18:	4b14      	ldr	r3, [pc, #80]	; (8003b6c <HAL_SAI_MspInit+0xe0>)
 8003b1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b1e:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_LOW;
 8003b20:	4b12      	ldr	r3, [pc, #72]	; (8003b6c <HAL_SAI_MspInit+0xe0>)
 8003b22:	2200      	movs	r2, #0
 8003b24:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b26:	4b11      	ldr	r3, [pc, #68]	; (8003b6c <HAL_SAI_MspInit+0xe0>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8003b2c:	480f      	ldr	r0, [pc, #60]	; (8003b6c <HAL_SAI_MspInit+0xe0>)
 8003b2e:	f005 ff2f 	bl	8009990 <HAL_DMA_Init>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d001      	beq.n	8003b3c <HAL_SAI_MspInit+0xb0>
    {
      Error_Handler();
 8003b38:	f7fe fec4 	bl	80028c4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4a0b      	ldr	r2, [pc, #44]	; (8003b6c <HAL_SAI_MspInit+0xe0>)
 8003b40:	671a      	str	r2, [r3, #112]	; 0x70
 8003b42:	4a0a      	ldr	r2, [pc, #40]	; (8003b6c <HAL_SAI_MspInit+0xe0>)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a08      	ldr	r2, [pc, #32]	; (8003b6c <HAL_SAI_MspInit+0xe0>)
 8003b4c:	66da      	str	r2, [r3, #108]	; 0x6c
 8003b4e:	4a07      	ldr	r2, [pc, #28]	; (8003b6c <HAL_SAI_MspInit+0xe0>)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6393      	str	r3, [r2, #56]	; 0x38

    }
}
 8003b54:	bf00      	nop
 8003b56:	3720      	adds	r7, #32
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	40015804 	.word	0x40015804
 8003b60:	200003bc 	.word	0x200003bc
 8003b64:	40023800 	.word	0x40023800
 8003b68:	40021000 	.word	0x40021000
 8003b6c:	20000258 	.word	0x20000258
 8003b70:	40026428 	.word	0x40026428

08003b74 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b08c      	sub	sp, #48	; 0x30
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003b80:	2300      	movs	r3, #0
 8003b82:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM13 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority ,0);
 8003b84:	2200      	movs	r2, #0
 8003b86:	6879      	ldr	r1, [r7, #4]
 8003b88:	202c      	movs	r0, #44	; 0x2c
 8003b8a:	f005 fb21 	bl	80091d0 <HAL_NVIC_SetPriority>

  /* Enable the TIM13 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8003b8e:	202c      	movs	r0, #44	; 0x2c
 8003b90:	f005 fb3a 	bl	8009208 <HAL_NVIC_EnableIRQ>

  /* Enable TIM13 clock */
  __HAL_RCC_TIM13_CLK_ENABLE();
 8003b94:	4b1f      	ldr	r3, [pc, #124]	; (8003c14 <HAL_InitTick+0xa0>)
 8003b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b98:	4a1e      	ldr	r2, [pc, #120]	; (8003c14 <HAL_InitTick+0xa0>)
 8003b9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b9e:	6413      	str	r3, [r2, #64]	; 0x40
 8003ba0:	4b1c      	ldr	r3, [pc, #112]	; (8003c14 <HAL_InitTick+0xa0>)
 8003ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ba8:	60fb      	str	r3, [r7, #12]
 8003baa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003bac:	f107 0210 	add.w	r2, r7, #16
 8003bb0:	f107 0314 	add.w	r3, r7, #20
 8003bb4:	4611      	mov	r1, r2
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f007 ff22 	bl	800ba00 <HAL_RCC_GetClockConfig>

  /* Compute TIM13 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003bbc:	f007 fef8 	bl	800b9b0 <HAL_RCC_GetPCLK1Freq>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	005b      	lsls	r3, r3, #1
 8003bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM13 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bc8:	4a13      	ldr	r2, [pc, #76]	; (8003c18 <HAL_InitTick+0xa4>)
 8003bca:	fba2 2303 	umull	r2, r3, r2, r3
 8003bce:	0c9b      	lsrs	r3, r3, #18
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM13 */
  htim13.Instance = TIM13;
 8003bd4:	4b11      	ldr	r3, [pc, #68]	; (8003c1c <HAL_InitTick+0xa8>)
 8003bd6:	4a12      	ldr	r2, [pc, #72]	; (8003c20 <HAL_InitTick+0xac>)
 8003bd8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM13CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim13.Init.Period = (1000000U / 1000U) - 1U;
 8003bda:	4b10      	ldr	r3, [pc, #64]	; (8003c1c <HAL_InitTick+0xa8>)
 8003bdc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003be0:	60da      	str	r2, [r3, #12]
  htim13.Init.Prescaler = uwPrescalerValue;
 8003be2:	4a0e      	ldr	r2, [pc, #56]	; (8003c1c <HAL_InitTick+0xa8>)
 8003be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be6:	6053      	str	r3, [r2, #4]
  htim13.Init.ClockDivision = 0;
 8003be8:	4b0c      	ldr	r3, [pc, #48]	; (8003c1c <HAL_InitTick+0xa8>)
 8003bea:	2200      	movs	r2, #0
 8003bec:	611a      	str	r2, [r3, #16]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bee:	4b0b      	ldr	r3, [pc, #44]	; (8003c1c <HAL_InitTick+0xa8>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim13) == HAL_OK)
 8003bf4:	4809      	ldr	r0, [pc, #36]	; (8003c1c <HAL_InitTick+0xa8>)
 8003bf6:	f009 f9bc 	bl	800cf72 <HAL_TIM_Base_Init>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d104      	bne.n	8003c0a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim13);
 8003c00:	4806      	ldr	r0, [pc, #24]	; (8003c1c <HAL_InitTick+0xa8>)
 8003c02:	f009 fa17 	bl	800d034 <HAL_TIM_Base_Start_IT>
 8003c06:	4603      	mov	r3, r0
 8003c08:	e000      	b.n	8003c0c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3730      	adds	r7, #48	; 0x30
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	40023800 	.word	0x40023800
 8003c18:	431bde83 	.word	0x431bde83
 8003c1c:	20000440 	.word	0x20000440
 8003c20:	40001c00 	.word	0x40001c00

08003c24 <HAL_SuspendTick>:
  * @note   Disable the tick increment by disabling TIM13 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_SuspendTick(void)
{
 8003c24:	b480      	push	{r7}
 8003c26:	af00      	add	r7, sp, #0
  /* Disable TIM13 update Interrupt */
  __HAL_TIM_DISABLE_IT(&htim13, TIM_IT_UPDATE);
 8003c28:	4b06      	ldr	r3, [pc, #24]	; (8003c44 <HAL_SuspendTick+0x20>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68da      	ldr	r2, [r3, #12]
 8003c2e:	4b05      	ldr	r3, [pc, #20]	; (8003c44 <HAL_SuspendTick+0x20>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f022 0201 	bic.w	r2, r2, #1
 8003c36:	60da      	str	r2, [r3, #12]
}
 8003c38:	bf00      	nop
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	20000440 	.word	0x20000440

08003c48 <HAL_ResumeTick>:
  * @note   Enable the tick increment by Enabling TIM13 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_ResumeTick(void)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	af00      	add	r7, sp, #0
  /* Enable TIM13 Update interrupt */
  __HAL_TIM_ENABLE_IT(&htim13, TIM_IT_UPDATE);
 8003c4c:	4b06      	ldr	r3, [pc, #24]	; (8003c68 <HAL_ResumeTick+0x20>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68da      	ldr	r2, [r3, #12]
 8003c52:	4b05      	ldr	r3, [pc, #20]	; (8003c68 <HAL_ResumeTick+0x20>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f042 0201 	orr.w	r2, r2, #1
 8003c5a:	60da      	str	r2, [r3, #12]
}
 8003c5c:	bf00      	nop
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	20000440 	.word	0x20000440

08003c6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003c70:	e7fe      	b.n	8003c70 <NMI_Handler+0x4>

08003c72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c72:	b480      	push	{r7}
 8003c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c76:	e7fe      	b.n	8003c76 <HardFault_Handler+0x4>

08003c78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c7c:	e7fe      	b.n	8003c7c <MemManage_Handler+0x4>

08003c7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c7e:	b480      	push	{r7}
 8003c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c82:	e7fe      	b.n	8003c82 <BusFault_Handler+0x4>

08003c84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c84:	b480      	push	{r7}
 8003c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c88:	e7fe      	b.n	8003c88 <UsageFault_Handler+0x4>

08003c8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003c8a:	b480      	push	{r7}
 8003c8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003c8e:	bf00      	nop
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c9c:	bf00      	nop
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr

08003ca6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ca6:	b480      	push	{r7}
 8003ca8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003caa:	bf00      	nop
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003cb8:	bf00      	nop
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr

08003cc2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003cc2:	b580      	push	{r7, lr}
 8003cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003cc6:	2001      	movs	r0, #1
 8003cc8:	f006 fd1c 	bl	800a704 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003ccc:	bf00      	nop
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8003cd4:	4802      	ldr	r0, [pc, #8]	; (8003ce0 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8003cd6:	f009 fa25 	bl	800d124 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8003cda:	bf00      	nop
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	20000440 	.word	0x20000440

08003ce4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8003ce8:	4802      	ldr	r0, [pc, #8]	; (8003cf4 <DMA2_Stream0_IRQHandler+0x10>)
 8003cea:	f005 ffcf 	bl	8009c8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003cee:	bf00      	nop
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	20000128 	.word	0x20000128

08003cf8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8003cfc:	4802      	ldr	r0, [pc, #8]	; (8003d08 <DMA2_Stream1_IRQHandler+0x10>)
 8003cfe:	f005 ffc5 	bl	8009c8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003d02:	bf00      	nop
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	20000258 	.word	0x20000258

08003d0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	af00      	add	r7, sp, #0
	return 1;
 8003d10:	2301      	movs	r3, #1
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <_kill>:

int _kill(int pid, int sig)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003d26:	f00b fcd5 	bl	800f6d4 <__errno>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2216      	movs	r2, #22
 8003d2e:	601a      	str	r2, [r3, #0]
	return -1;
 8003d30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3708      	adds	r7, #8
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <_exit>:

void _exit (int status)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003d44:	f04f 31ff 	mov.w	r1, #4294967295
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f7ff ffe7 	bl	8003d1c <_kill>
	while (1) {}		/* Make sure we hang here */
 8003d4e:	e7fe      	b.n	8003d4e <_exit+0x12>

08003d50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b086      	sub	sp, #24
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d58:	4a14      	ldr	r2, [pc, #80]	; (8003dac <_sbrk+0x5c>)
 8003d5a:	4b15      	ldr	r3, [pc, #84]	; (8003db0 <_sbrk+0x60>)
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d64:	4b13      	ldr	r3, [pc, #76]	; (8003db4 <_sbrk+0x64>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d102      	bne.n	8003d72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d6c:	4b11      	ldr	r3, [pc, #68]	; (8003db4 <_sbrk+0x64>)
 8003d6e:	4a12      	ldr	r2, [pc, #72]	; (8003db8 <_sbrk+0x68>)
 8003d70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d72:	4b10      	ldr	r3, [pc, #64]	; (8003db4 <_sbrk+0x64>)
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4413      	add	r3, r2
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d207      	bcs.n	8003d90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d80:	f00b fca8 	bl	800f6d4 <__errno>
 8003d84:	4603      	mov	r3, r0
 8003d86:	220c      	movs	r2, #12
 8003d88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d8e:	e009      	b.n	8003da4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d90:	4b08      	ldr	r3, [pc, #32]	; (8003db4 <_sbrk+0x64>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d96:	4b07      	ldr	r3, [pc, #28]	; (8003db4 <_sbrk+0x64>)
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4413      	add	r3, r2
 8003d9e:	4a05      	ldr	r2, [pc, #20]	; (8003db4 <_sbrk+0x64>)
 8003da0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003da2:	68fb      	ldr	r3, [r7, #12]
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3718      	adds	r7, #24
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	20080000 	.word	0x20080000
 8003db0:	00000400 	.word	0x00000400
 8003db4:	200003c0 	.word	0x200003c0
 8003db8:	200004a0 	.word	0x200004a0

08003dbc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003dc0:	4b06      	ldr	r3, [pc, #24]	; (8003ddc <SystemInit+0x20>)
 8003dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dc6:	4a05      	ldr	r2, [pc, #20]	; (8003ddc <SystemInit+0x20>)
 8003dc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003dcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003dd0:	bf00      	nop
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	e000ed00 	.word	0xe000ed00

08003de0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003de0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003e18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003de4:	480d      	ldr	r0, [pc, #52]	; (8003e1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003de6:	490e      	ldr	r1, [pc, #56]	; (8003e20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003de8:	4a0e      	ldr	r2, [pc, #56]	; (8003e24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003dea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003dec:	e002      	b.n	8003df4 <LoopCopyDataInit>

08003dee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003dee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003df0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003df2:	3304      	adds	r3, #4

08003df4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003df4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003df6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003df8:	d3f9      	bcc.n	8003dee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003dfa:	4a0b      	ldr	r2, [pc, #44]	; (8003e28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003dfc:	4c0b      	ldr	r4, [pc, #44]	; (8003e2c <LoopFillZerobss+0x26>)
  movs r3, #0
 8003dfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e00:	e001      	b.n	8003e06 <LoopFillZerobss>

08003e02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e04:	3204      	adds	r2, #4

08003e06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e08:	d3fb      	bcc.n	8003e02 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003e0a:	f7ff ffd7 	bl	8003dbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003e0e:	f00b fc67 	bl	800f6e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003e12:	f7fd ffa1 	bl	8001d58 <main>
  bx  lr    
 8003e16:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003e18:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8003e1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e20:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8003e24:	0802b304 	.word	0x0802b304
  ldr r2, =_sbss
 8003e28:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8003e2c:	200004a0 	.word	0x200004a0

08003e30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003e30:	e7fe      	b.n	8003e30 <ADC_IRQHandler>

08003e32 <arm_copy_q7>:

void arm_copy_q7(
  q7_t * pSrc,
  q7_t * pDst,
  uint32_t blockSize)
{
 8003e32:	b480      	push	{r7}
 8003e34:	b087      	sub	sp, #28
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	60f8      	str	r0, [r7, #12]
 8003e3a:	60b9      	str	r1, [r7, #8]
 8003e3c:	607a      	str	r2, [r7, #4]
#if defined (ARM_MATH_DSP)

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  /*loop Unrolling */
  blkCnt = blockSize >> 2U;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	089b      	lsrs	r3, r3, #2
 8003e42:	617b      	str	r3, [r7, #20]

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  while (blkCnt > 0U)
 8003e44:	e00e      	b.n	8003e64 <arm_copy_q7+0x32>
  {
    /* C = A */
    /* Copy and then store the results in the destination buffer */
    /* 4 samples are copied and stored at a time using SIMD */
    *__SIMD32(pDst)++ = *__SIMD32(pSrc)++;
 8003e46:	f107 030c 	add.w	r3, r7, #12
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	1d11      	adds	r1, r2, #4
 8003e4e:	6019      	str	r1, [r3, #0]
 8003e50:	f107 0108 	add.w	r1, r7, #8
 8003e54:	680b      	ldr	r3, [r1, #0]
 8003e56:	1d18      	adds	r0, r3, #4
 8003e58:	6008      	str	r0, [r1, #0]
 8003e5a:	6812      	ldr	r2, [r2, #0]
 8003e5c:	601a      	str	r2, [r3, #0]

    /* Decrement the loop counter */
    blkCnt--;
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	3b01      	subs	r3, #1
 8003e62:	617b      	str	r3, [r7, #20]
  while (blkCnt > 0U)
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1ed      	bne.n	8003e46 <arm_copy_q7+0x14>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4U;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f003 0303 	and.w	r3, r3, #3
 8003e70:	617b      	str	r3, [r7, #20]
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_DSP) */


  while (blkCnt > 0U)
 8003e72:	e00b      	b.n	8003e8c <arm_copy_q7+0x5a>
  {
    /* C = A */
    /* Copy and then store the results in the destination buffer */
    *pDst++ = *pSrc++;
 8003e74:	68fa      	ldr	r2, [r7, #12]
 8003e76:	1c53      	adds	r3, r2, #1
 8003e78:	60fb      	str	r3, [r7, #12]
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	1c59      	adds	r1, r3, #1
 8003e7e:	60b9      	str	r1, [r7, #8]
 8003e80:	f992 2000 	ldrsb.w	r2, [r2]
 8003e84:	701a      	strb	r2, [r3, #0]

    /* Decrement the loop counter */
    blkCnt--;
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	3b01      	subs	r3, #1
 8003e8a:	617b      	str	r3, [r7, #20]
  while (blkCnt > 0U)
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d1f0      	bne.n	8003e74 <arm_copy_q7+0x42>
  }
}
 8003e92:	bf00      	nop
 8003e94:	bf00      	nop
 8003e96:	371c      	adds	r7, #28
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <arm_cfft_radix8by2_f32>:
* \endcode
*
*/

void arm_cfft_radix8by2_f32( arm_cfft_instance_f32 * S, float32_t * p1)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b0a0      	sub	sp, #128	; 0x80
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	881b      	ldrh	r3, [r3, #0]
 8003eae:	66bb      	str	r3, [r7, #104]	; 0x68
    float32_t * pCol1, * pCol2, * pMid1, * pMid2;
    float32_t * p2 = p1 + L;
 8003eb0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	683a      	ldr	r2, [r7, #0]
 8003eb6:	4413      	add	r3, r2
 8003eb8:	677b      	str	r3, [r7, #116]	; 0x74
    const float32_t * tw = (float32_t *) S->pTwiddle;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	673b      	str	r3, [r7, #112]	; 0x70
    float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
    float32_t m0, m1, m2, m3;
    uint32_t l;

    pCol1 = p1;
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	667b      	str	r3, [r7, #100]	; 0x64
    pCol2 = p2;
 8003ec4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ec6:	663b      	str	r3, [r7, #96]	; 0x60

    //    Define new length
    L >>= 1;
 8003ec8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003eca:	085b      	lsrs	r3, r3, #1
 8003ecc:	66bb      	str	r3, [r7, #104]	; 0x68
    //    Initialize mid pointers
    pMid1 = p1 + L;
 8003ece:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	683a      	ldr	r2, [r7, #0]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	67fb      	str	r3, [r7, #124]	; 0x7c
    pMid2 = p2 + L;
 8003ed8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003ede:	4413      	add	r3, r2
 8003ee0:	67bb      	str	r3, [r7, #120]	; 0x78

    // do two dot Fourier transform
    for ( l = L >> 2; l > 0; l-- )
 8003ee2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ee4:	089b      	lsrs	r3, r3, #2
 8003ee6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ee8:	e1b6      	b.n	8004258 <arm_cfft_radix8by2_f32+0x3b8>
    {
        t1[0] = p1[0];
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	63bb      	str	r3, [r7, #56]	; 0x38
        t1[1] = p1[1];
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
        t1[2] = p1[2];
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	643b      	str	r3, [r7, #64]	; 0x40
        t1[3] = p1[3];
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	647b      	str	r3, [r7, #68]	; 0x44

        t2[0] = p2[0];
 8003f02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	62bb      	str	r3, [r7, #40]	; 0x28
        t2[1] = p2[1];
 8003f08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        t2[2] = p2[2];
 8003f0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	633b      	str	r3, [r7, #48]	; 0x30
        t2[3] = p2[3];
 8003f14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	637b      	str	r3, [r7, #52]	; 0x34

        t3[0] = pMid1[0];
 8003f1a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	61bb      	str	r3, [r7, #24]
        t3[1] = pMid1[1];
 8003f20:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	61fb      	str	r3, [r7, #28]
        t3[2] = pMid1[2];
 8003f26:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	623b      	str	r3, [r7, #32]
        t3[3] = pMid1[3];
 8003f2c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	627b      	str	r3, [r7, #36]	; 0x24

        t4[0] = pMid2[0];
 8003f32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	60bb      	str	r3, [r7, #8]
        t4[1] = pMid2[1];
 8003f38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	60fb      	str	r3, [r7, #12]
        t4[2] = pMid2[2];
 8003f3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	613b      	str	r3, [r7, #16]
        t4[3] = pMid2[3];
 8003f44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	617b      	str	r3, [r7, #20]

        *p1++ = t1[0] + t2[0];
 8003f4a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003f4e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	1d1a      	adds	r2, r3, #4
 8003f56:	603a      	str	r2, [r7, #0]
 8003f58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f5c:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[1] + t2[1];
 8003f60:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003f64:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	1d1a      	adds	r2, r3, #4
 8003f6c:	603a      	str	r2, [r7, #0]
 8003f6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f72:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[2] + t2[2];
 8003f76:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8003f7a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	1d1a      	adds	r2, r3, #4
 8003f82:	603a      	str	r2, [r7, #0]
 8003f84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f88:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[3] + t2[3];    // col 1
 8003f8c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8003f90:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	1d1a      	adds	r2, r3, #4
 8003f98:	603a      	str	r2, [r7, #0]
 8003f9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f9e:	edc3 7a00 	vstr	s15, [r3]

        t2[0] = t1[0] - t2[0];
 8003fa2:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003fa6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003faa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003fae:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        t2[1] = t1[1] - t2[1];
 8003fb2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003fb6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003fba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003fbe:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        t2[2] = t1[2] - t2[2];
 8003fc2:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8003fc6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003fca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003fce:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        t2[3] = t1[3] - t2[3];    // for col 2
 8003fd2:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8003fd6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003fda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003fde:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

        *pMid1++ = t3[0] + t4[0];
 8003fe2:	ed97 7a06 	vldr	s14, [r7, #24]
 8003fe6:	edd7 7a02 	vldr	s15, [r7, #8]
 8003fea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003fec:	1d1a      	adds	r2, r3, #4
 8003fee:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003ff0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ff4:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[1] + t4[1];
 8003ff8:	ed97 7a07 	vldr	s14, [r7, #28]
 8003ffc:	edd7 7a03 	vldr	s15, [r7, #12]
 8004000:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004002:	1d1a      	adds	r2, r3, #4
 8004004:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004006:	ee77 7a27 	vadd.f32	s15, s14, s15
 800400a:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[2] + t4[2];
 800400e:	ed97 7a08 	vldr	s14, [r7, #32]
 8004012:	edd7 7a04 	vldr	s15, [r7, #16]
 8004016:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004018:	1d1a      	adds	r2, r3, #4
 800401a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800401c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004020:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[3] + t4[3]; // col 1
 8004024:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8004028:	edd7 7a05 	vldr	s15, [r7, #20]
 800402c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800402e:	1d1a      	adds	r2, r3, #4
 8004030:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004032:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004036:	edc3 7a00 	vstr	s15, [r3]

        t4[0] = t4[0] - t3[0];
 800403a:	ed97 7a02 	vldr	s14, [r7, #8]
 800403e:	edd7 7a06 	vldr	s15, [r7, #24]
 8004042:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004046:	edc7 7a02 	vstr	s15, [r7, #8]
        t4[1] = t4[1] - t3[1];
 800404a:	ed97 7a03 	vldr	s14, [r7, #12]
 800404e:	edd7 7a07 	vldr	s15, [r7, #28]
 8004052:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004056:	edc7 7a03 	vstr	s15, [r7, #12]
        t4[2] = t4[2] - t3[2];
 800405a:	ed97 7a04 	vldr	s14, [r7, #16]
 800405e:	edd7 7a08 	vldr	s15, [r7, #32]
 8004062:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004066:	edc7 7a04 	vstr	s15, [r7, #16]
        t4[3] = t4[3] - t3[3];    // for col 2
 800406a:	ed97 7a05 	vldr	s14, [r7, #20]
 800406e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004072:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004076:	edc7 7a05 	vstr	s15, [r7, #20]

        twR = *tw++;
 800407a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800407c:	1d1a      	adds	r2, r3, #4
 800407e:	673a      	str	r2, [r7, #112]	; 0x70
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	65fb      	str	r3, [r7, #92]	; 0x5c
        twI = *tw++;
 8004084:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004086:	1d1a      	adds	r2, r3, #4
 8004088:	673a      	str	r2, [r7, #112]	; 0x70
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	65bb      	str	r3, [r7, #88]	; 0x58

        // multiply by twiddle factors
        m0 = t2[0] * twR;
 800408e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004092:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8004096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800409a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t2[1] * twI;
 800409e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80040a2:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80040a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040aa:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t2[1] * twR;
 80040ae:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80040b2:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80040b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040ba:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t2[0] * twI;
 80040be:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80040c2:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80040c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040ca:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

        // R  =  R  *  Tr - I * Ti
        *p2++ = m0 + m1;
 80040ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040d0:	1d1a      	adds	r2, r3, #4
 80040d2:	677a      	str	r2, [r7, #116]	; 0x74
 80040d4:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80040d8:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80040dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040e0:	edc3 7a00 	vstr	s15, [r3]
        // I  =  I  *  Tr + R * Ti
        *p2++ = m2 - m3;
 80040e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040e6:	1d1a      	adds	r2, r3, #4
 80040e8:	677a      	str	r2, [r7, #116]	; 0x74
 80040ea:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80040ee:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80040f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040f6:	edc3 7a00 	vstr	s15, [r3]

        // use vertical symmetry
        //  0.9988 - 0.0491i <==> -0.0491 - 0.9988i
        m0 = t4[0] * twI;
 80040fa:	edd7 7a02 	vldr	s15, [r7, #8]
 80040fe:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8004102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004106:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t4[1] * twR;
 800410a:	edd7 7a03 	vldr	s15, [r7, #12]
 800410e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8004112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004116:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t4[1] * twI;
 800411a:	edd7 7a03 	vldr	s15, [r7, #12]
 800411e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8004122:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004126:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t4[0] * twR;
 800412a:	edd7 7a02 	vldr	s15, [r7, #8]
 800412e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8004132:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004136:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

        *pMid2++ = m0 - m1;
 800413a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800413c:	1d1a      	adds	r2, r3, #4
 800413e:	67ba      	str	r2, [r7, #120]	; 0x78
 8004140:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8004144:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8004148:	ee77 7a67 	vsub.f32	s15, s14, s15
 800414c:	edc3 7a00 	vstr	s15, [r3]
        *pMid2++ = m2 + m3;
 8004150:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004152:	1d1a      	adds	r2, r3, #4
 8004154:	67ba      	str	r2, [r7, #120]	; 0x78
 8004156:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800415a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800415e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004162:	edc3 7a00 	vstr	s15, [r3]

        twR = *tw++;
 8004166:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004168:	1d1a      	adds	r2, r3, #4
 800416a:	673a      	str	r2, [r7, #112]	; 0x70
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	65fb      	str	r3, [r7, #92]	; 0x5c
        twI = *tw++;
 8004170:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004172:	1d1a      	adds	r2, r3, #4
 8004174:	673a      	str	r2, [r7, #112]	; 0x70
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	65bb      	str	r3, [r7, #88]	; 0x58

        m0 = t2[2] * twR;
 800417a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800417e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8004182:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004186:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t2[3] * twI;
 800418a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800418e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8004192:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004196:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t2[3] * twR;
 800419a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800419e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80041a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041a6:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t2[2] * twI;
 80041aa:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80041ae:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80041b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041b6:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

        *p2++ = m0 + m1;
 80041ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041bc:	1d1a      	adds	r2, r3, #4
 80041be:	677a      	str	r2, [r7, #116]	; 0x74
 80041c0:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80041c4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80041c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041cc:	edc3 7a00 	vstr	s15, [r3]
        *p2++ = m2 - m3;
 80041d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041d2:	1d1a      	adds	r2, r3, #4
 80041d4:	677a      	str	r2, [r7, #116]	; 0x74
 80041d6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80041da:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80041de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041e2:	edc3 7a00 	vstr	s15, [r3]

        m0 = t4[2] * twI;
 80041e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80041ea:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80041ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041f2:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t4[3] * twR;
 80041f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80041fa:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80041fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004202:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t4[3] * twI;
 8004206:	edd7 7a05 	vldr	s15, [r7, #20]
 800420a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800420e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004212:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t4[2] * twR;
 8004216:	edd7 7a04 	vldr	s15, [r7, #16]
 800421a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800421e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004222:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

        *pMid2++ = m0 - m1;
 8004226:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004228:	1d1a      	adds	r2, r3, #4
 800422a:	67ba      	str	r2, [r7, #120]	; 0x78
 800422c:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8004230:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8004234:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004238:	edc3 7a00 	vstr	s15, [r3]
        *pMid2++ = m2 + m3;
 800423c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800423e:	1d1a      	adds	r2, r3, #4
 8004240:	67ba      	str	r2, [r7, #120]	; 0x78
 8004242:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004246:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800424a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800424e:	edc3 7a00 	vstr	s15, [r3]
    for ( l = L >> 2; l > 0; l-- )
 8004252:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004254:	3b01      	subs	r3, #1
 8004256:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004258:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800425a:	2b00      	cmp	r3, #0
 800425c:	f47f ae45 	bne.w	8003eea <arm_cfft_radix8by2_f32+0x4a>
    }

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 2U);
 8004260:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004262:	b299      	uxth	r1, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685a      	ldr	r2, [r3, #4]
 8004268:	2302      	movs	r3, #2
 800426a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800426c:	f000 fef2 	bl	8005054 <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 2U);
 8004270:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004272:	b299      	uxth	r1, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685a      	ldr	r2, [r3, #4]
 8004278:	2302      	movs	r3, #2
 800427a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800427c:	f000 feea 	bl	8005054 <arm_radix8_butterfly_f32>
}
 8004280:	bf00      	nop
 8004282:	3780      	adds	r7, #128	; 0x80
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32( arm_cfft_instance_f32 * S, float32_t * p1)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b0ac      	sub	sp, #176	; 0xb0
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	881b      	ldrh	r3, [r3, #0]
 8004296:	085b      	lsrs	r3, r3, #1
 8004298:	b29b      	uxth	r3, r3
 800429a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 800429e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	683a      	ldr	r2, [r7, #0]
 80042a6:	4413      	add	r3, r2
 80042a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float32_t * p3 = p2 + L;
 80042ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80042b6:	4413      	add	r3, r2
 80042b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float32_t * p4 = p3 + L;
 80042bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80042c6:	4413      	add	r3, r2
 80042c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         // points to real values by default
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	67fb      	str	r3, [r7, #124]	; 0x7c
    pCol2 = p2;
 80042d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80042d4:	67bb      	str	r3, [r7, #120]	; 0x78
    pCol3 = p3;
 80042d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042da:	677b      	str	r3, [r7, #116]	; 0x74
    pCol4 = p4;
 80042dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80042e0:	673b      	str	r3, [r7, #112]	; 0x70
    pEnd1 = p2 - 1;     // points to imaginary values by default
 80042e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80042e6:	3b04      	subs	r3, #4
 80042e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    pEnd2 = p3 - 1;
 80042ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042f0:	3b04      	subs	r3, #4
 80042f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    pEnd3 = p4 - 1;
 80042f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80042fa:	3b04      	subs	r3, #4
 80042fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    pEnd4 = pEnd3 + L;
 8004300:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800430a:	4413      	add	r3, r2
 800430c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004318:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800431c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004320:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004324:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    L >>= 1;
 8004328:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800432c:	085b      	lsrs	r3, r3, #1
 800432e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    // do four dot Fourier transform

    twMod2 = 2;
 8004332:	2302      	movs	r3, #2
 8004334:	66fb      	str	r3, [r7, #108]	; 0x6c
    twMod3 = 4;
 8004336:	2304      	movs	r3, #4
 8004338:	66bb      	str	r3, [r7, #104]	; 0x68
    twMod4 = 6;
 800433a:	2306      	movs	r3, #6
 800433c:	667b      	str	r3, [r7, #100]	; 0x64

    // TOP
    p1ap3_0 = p1[0] + p3[0];
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	ed93 7a00 	vldr	s14, [r3]
 8004344:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004348:	edd3 7a00 	vldr	s15, [r3]
 800434c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004350:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	ed93 7a00 	vldr	s14, [r3]
 800435a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800435e:	edd3 7a00 	vldr	s15, [r3]
 8004362:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004366:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	3304      	adds	r3, #4
 800436e:	ed93 7a00 	vldr	s14, [r3]
 8004372:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004376:	3304      	adds	r3, #4
 8004378:	edd3 7a00 	vldr	s15, [r3]
 800437c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004380:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	3304      	adds	r3, #4
 8004388:	ed93 7a00 	vldr	s14, [r3]
 800438c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004390:	3304      	adds	r3, #4
 8004392:	edd3 7a00 	vldr	s15, [r3]
 8004396:	ee77 7a67 	vsub.f32	s15, s14, s15
 800439a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 800439e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80043a2:	3304      	adds	r3, #4
 80043a4:	ed93 7a00 	vldr	s14, [r3]
 80043a8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80043ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80043b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80043b4:	3304      	adds	r3, #4
 80043b6:	edd3 7a00 	vldr	s15, [r3]
 80043ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043be:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 80043c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80043c6:	edd3 7a00 	vldr	s15, [r3]
 80043ca:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80043ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80043d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80043d6:	edd3 7a00 	vldr	s15, [r3]
 80043da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043de:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 80043e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80043e6:	edd3 7a00 	vldr	s15, [r3]
 80043ea:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80043ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 80043f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80043f6:	edd3 7a00 	vldr	s15, [r3]
 80043fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043fe:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8004402:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004406:	3304      	adds	r3, #4
 8004408:	edd3 7a00 	vldr	s15, [r3]
 800440c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8004410:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004414:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004418:	3304      	adds	r3, #4
 800441a:	edd3 7a00 	vldr	s15, [r3]
 800441e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004422:	edc7 7a08 	vstr	s15, [r7, #32]
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8004426:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800442a:	3304      	adds	r3, #4
 800442c:	edd3 7a00 	vldr	s15, [r3]
 8004430:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8004434:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004438:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800443c:	3304      	adds	r3, #4
 800443e:	edd3 7a00 	vldr	s15, [r3]
 8004442:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004446:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 800444a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800444e:	ed93 7a00 	vldr	s14, [r3]
 8004452:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8004456:	ee37 7a27 	vadd.f32	s14, s14, s15
 800445a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800445e:	edd3 7a00 	vldr	s15, [r3]
 8004462:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004466:	edc7 7a04 	vstr	s15, [r7, #16]
    // col 1
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 800446a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800446e:	ed93 7a00 	vldr	s14, [r3]
 8004472:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8004476:	ee37 7a27 	vadd.f32	s14, s14, s15
 800447a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800447e:	edd3 7a00 	vldr	s15, [r3]
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	1d1a      	adds	r2, r3, #4
 8004486:	603a      	str	r2, [r7, #0]
 8004488:	ee77 7a27 	vadd.f32	s15, s14, s15
 800448c:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8004490:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004494:	3304      	adds	r3, #4
 8004496:	ed93 7a00 	vldr	s14, [r3]
 800449a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800449e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80044a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80044a6:	3304      	adds	r3, #4
 80044a8:	edd3 7a00 	vldr	s15, [r3]
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	1d1a      	adds	r2, r3, #4
 80044b0:	603a      	str	r2, [r7, #0]
 80044b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044b6:	edc3 7a00 	vstr	s15, [r3]

    // Twiddle factors are ones
    *p2++ = t2[0];
 80044ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80044be:	1d1a      	adds	r2, r3, #4
 80044c0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80044c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044c6:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 80044c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80044cc:	1d1a      	adds	r2, r3, #4
 80044ce:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80044d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044d4:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 80044d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044da:	1d1a      	adds	r2, r3, #4
 80044dc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80044e0:	69fa      	ldr	r2, [r7, #28]
 80044e2:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 80044e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044e8:	1d1a      	adds	r2, r3, #4
 80044ea:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80044ee:	6a3a      	ldr	r2, [r7, #32]
 80044f0:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 80044f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80044f6:	1d1a      	adds	r2, r3, #4
 80044f8:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 8004500:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004504:	1d1a      	adds	r2, r3, #4
 8004506:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800450a:	693a      	ldr	r2, [r7, #16]
 800450c:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 800450e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8004516:	4413      	add	r3, r2
 8004518:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    tw3 += twMod3;
 800451c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8004524:	4413      	add	r3, r2
 8004526:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tw4 += twMod4;
 800452a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004532:	4413      	add	r3, r2
 8004534:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    for (l = (L - 2) >> 1; l > 0; l-- )
 8004538:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800453c:	3b02      	subs	r3, #2
 800453e:	085b      	lsrs	r3, r3, #1
 8004540:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004544:	e31a      	b.n	8004b7c <arm_cfft_radix8by4_f32+0x8f4>
    {
        // TOP
        p1ap3_0 = p1[0] + p3[0];
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	ed93 7a00 	vldr	s14, [r3]
 800454c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004550:	edd3 7a00 	vldr	s15, [r3]
 8004554:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004558:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        p1sp3_0 = p1[0] - p3[0];
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	ed93 7a00 	vldr	s14, [r3]
 8004562:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004566:	edd3 7a00 	vldr	s15, [r3]
 800456a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800456e:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        p1ap3_1 = p1[1] + p3[1];
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	3304      	adds	r3, #4
 8004576:	ed93 7a00 	vldr	s14, [r3]
 800457a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800457e:	3304      	adds	r3, #4
 8004580:	edd3 7a00 	vldr	s15, [r3]
 8004584:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004588:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        p1sp3_1 = p1[1] - p3[1];
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	3304      	adds	r3, #4
 8004590:	ed93 7a00 	vldr	s14, [r3]
 8004594:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004598:	3304      	adds	r3, #4
 800459a:	edd3 7a00 	vldr	s15, [r3]
 800459e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045a2:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        // col 2
        t2[0] = p1sp3_0 + p2[1] - p4[1];
 80045a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80045aa:	3304      	adds	r3, #4
 80045ac:	ed93 7a00 	vldr	s14, [r3]
 80045b0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80045b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80045b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80045bc:	3304      	adds	r3, #4
 80045be:	edd3 7a00 	vldr	s15, [r3]
 80045c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045c6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        t2[1] = p1sp3_1 - p2[0] + p4[0];
 80045ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80045ce:	edd3 7a00 	vldr	s15, [r3]
 80045d2:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80045d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80045da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80045de:	edd3 7a00 	vldr	s15, [r3]
 80045e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045e6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        // col 3
        t3[0] = p1ap3_0 - p2[0] - p4[0];
 80045ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80045ee:	edd3 7a00 	vldr	s15, [r3]
 80045f2:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80045f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80045fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80045fe:	edd3 7a00 	vldr	s15, [r3]
 8004602:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004606:	edc7 7a07 	vstr	s15, [r7, #28]
        t3[1] = p1ap3_1 - p2[1] - p4[1];
 800460a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800460e:	3304      	adds	r3, #4
 8004610:	edd3 7a00 	vldr	s15, [r3]
 8004614:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8004618:	ee37 7a67 	vsub.f32	s14, s14, s15
 800461c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004620:	3304      	adds	r3, #4
 8004622:	edd3 7a00 	vldr	s15, [r3]
 8004626:	ee77 7a67 	vsub.f32	s15, s14, s15
 800462a:	edc7 7a08 	vstr	s15, [r7, #32]
        // col 4
        t4[0] = p1sp3_0 - p2[1] + p4[1];
 800462e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004632:	3304      	adds	r3, #4
 8004634:	edd3 7a00 	vldr	s15, [r3]
 8004638:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800463c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004640:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004644:	3304      	adds	r3, #4
 8004646:	edd3 7a00 	vldr	s15, [r3]
 800464a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800464e:	edc7 7a03 	vstr	s15, [r7, #12]
        t4[1] = p1sp3_1 + p2[0] - p4[0];
 8004652:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004656:	ed93 7a00 	vldr	s14, [r3]
 800465a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800465e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004662:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004666:	edd3 7a00 	vldr	s15, [r3]
 800466a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800466e:	edc7 7a04 	vstr	s15, [r7, #16]
        // col 1 - top
        *p1++ = p1ap3_0 + p2[0] + p4[0];
 8004672:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004676:	ed93 7a00 	vldr	s14, [r3]
 800467a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800467e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004682:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004686:	edd3 7a00 	vldr	s15, [r3]
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	1d1a      	adds	r2, r3, #4
 800468e:	603a      	str	r2, [r7, #0]
 8004690:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004694:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = p1ap3_1 + p2[1] + p4[1];
 8004698:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800469c:	3304      	adds	r3, #4
 800469e:	ed93 7a00 	vldr	s14, [r3]
 80046a2:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80046a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80046aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80046ae:	3304      	adds	r3, #4
 80046b0:	edd3 7a00 	vldr	s15, [r3]
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	1d1a      	adds	r2, r3, #4
 80046b8:	603a      	str	r2, [r7, #0]
 80046ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046be:	edc3 7a00 	vstr	s15, [r3]

        // BOTTOM
        p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 80046c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80046c6:	3b04      	subs	r3, #4
 80046c8:	ed93 7a00 	vldr	s14, [r3]
 80046cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80046d0:	3b04      	subs	r3, #4
 80046d2:	edd3 7a00 	vldr	s15, [r3]
 80046d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046da:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 80046de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80046e2:	3b04      	subs	r3, #4
 80046e4:	ed93 7a00 	vldr	s14, [r3]
 80046e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80046ec:	3b04      	subs	r3, #4
 80046ee:	edd3 7a00 	vldr	s15, [r3]
 80046f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046f6:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        p1ap3_0 = pEnd1[0] + pEnd3[0];
 80046fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80046fe:	ed93 7a00 	vldr	s14, [r3]
 8004702:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004706:	edd3 7a00 	vldr	s15, [r3]
 800470a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800470e:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        p1sp3_0 = pEnd1[0] - pEnd3[0];
 8004712:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004716:	ed93 7a00 	vldr	s14, [r3]
 800471a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800471e:	edd3 7a00 	vldr	s15, [r3]
 8004722:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004726:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        // col 2
        t2[2] = pEnd2[0]  - pEnd4[0] + p1sp3_1;
 800472a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800472e:	ed93 7a00 	vldr	s14, [r3]
 8004732:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004736:	edd3 7a00 	vldr	s15, [r3]
 800473a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800473e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8004742:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004746:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 800474a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800474e:	ed93 7a00 	vldr	s14, [r3]
 8004752:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004756:	edd3 7a00 	vldr	s15, [r3]
 800475a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800475e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004762:	3b04      	subs	r3, #4
 8004764:	edd3 7a00 	vldr	s15, [r3]
 8004768:	ee37 7a67 	vsub.f32	s14, s14, s15
 800476c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004770:	3b04      	subs	r3, #4
 8004772:	edd3 7a00 	vldr	s15, [r3]
 8004776:	ee77 7a27 	vadd.f32	s15, s14, s15
 800477a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        // col 3
        t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 800477e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004782:	3b04      	subs	r3, #4
 8004784:	edd3 7a00 	vldr	s15, [r3]
 8004788:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800478c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004790:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004794:	3b04      	subs	r3, #4
 8004796:	edd3 7a00 	vldr	s15, [r3]
 800479a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800479e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        t3[3] = p1ap3_0 - pEnd2[0]  - pEnd4[0];
 80047a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80047a6:	edd3 7a00 	vldr	s15, [r3]
 80047aa:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80047ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80047b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80047b6:	edd3 7a00 	vldr	s15, [r3]
 80047ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047be:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        // col 4
        t4[2] = pEnd2[0]  - pEnd4[0]  - p1sp3_1;
 80047c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80047c6:	ed93 7a00 	vldr	s14, [r3]
 80047ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80047ce:	edd3 7a00 	vldr	s15, [r3]
 80047d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80047d6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80047da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047de:	edc7 7a05 	vstr	s15, [r7, #20]
        t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 80047e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80047e6:	3b04      	subs	r3, #4
 80047e8:	ed93 7a00 	vldr	s14, [r3]
 80047ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80047f0:	3b04      	subs	r3, #4
 80047f2:	edd3 7a00 	vldr	s15, [r3]
 80047f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80047fa:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80047fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004802:	edc7 7a06 	vstr	s15, [r7, #24]
        // col 1 - Bottom
        *pEnd1-- = p1ap3_0 + pEnd2[0] + pEnd4[0];
 8004806:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800480a:	ed93 7a00 	vldr	s14, [r3]
 800480e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8004812:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004816:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800481a:	edd3 7a00 	vldr	s15, [r3]
 800481e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004822:	1f1a      	subs	r2, r3, #4
 8004824:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004828:	ee77 7a27 	vadd.f32	s15, s14, s15
 800482c:	edc3 7a00 	vstr	s15, [r3]
        *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8004830:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004834:	3b04      	subs	r3, #4
 8004836:	ed93 7a00 	vldr	s14, [r3]
 800483a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800483e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004842:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004846:	3b04      	subs	r3, #4
 8004848:	edd3 7a00 	vldr	s15, [r3]
 800484c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004850:	1f1a      	subs	r2, r3, #4
 8004852:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004856:	ee77 7a27 	vadd.f32	s15, s14, s15
 800485a:	edc3 7a00 	vstr	s15, [r3]

        // COL 2
        // read twiddle factors
        twR = *tw2++;
 800485e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004862:	1d1a      	adds	r2, r3, #4
 8004864:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	653b      	str	r3, [r7, #80]	; 0x50
        twI = *tw2++;
 800486c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004870:	1d1a      	adds	r2, r3, #4
 8004872:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	64fb      	str	r3, [r7, #76]	; 0x4c
        // multiply by twiddle factors
        //  let    Z1 = a + i(b),   Z2 = c + i(d)
        //   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d)

        // Top
        m0 = t2[0] * twR;
 800487a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800487e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004886:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t2[1] * twI;
 800488a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800488e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004892:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004896:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t2[1] * twR;
 800489a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800489e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80048a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048a6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t2[0] * twI;
 80048aa:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80048ae:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80048b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048b6:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *p2++ = m0 + m1;
 80048ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80048be:	1d1a      	adds	r2, r3, #4
 80048c0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80048c4:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80048c8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80048cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048d0:	edc3 7a00 	vstr	s15, [r3]
        *p2++ = m2 - m3;
 80048d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80048d8:	1d1a      	adds	r2, r3, #4
 80048da:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80048de:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80048e2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80048e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80048ea:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 2
        // 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i
        // Bottom
        m0 = t2[3] * twI;
 80048ee:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80048f2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80048f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048fa:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t2[2] * twR;
 80048fe:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8004902:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004906:	ee67 7a27 	vmul.f32	s15, s14, s15
 800490a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t2[2] * twI;
 800490e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8004912:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800491a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t2[3] * twR;
 800491e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8004922:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004926:	ee67 7a27 	vmul.f32	s15, s14, s15
 800492a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *pEnd2-- = m0 - m1;
 800492e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004932:	1f1a      	subs	r2, r3, #4
 8004934:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004938:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800493c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004940:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004944:	edc3 7a00 	vstr	s15, [r3]
        *pEnd2-- = m2 + m3;
 8004948:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800494c:	1f1a      	subs	r2, r3, #4
 800494e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004952:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004956:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800495a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800495e:	edc3 7a00 	vstr	s15, [r3]

        // COL 3
        twR = tw3[0];
 8004962:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	653b      	str	r3, [r7, #80]	; 0x50
        twI = tw3[1];
 800496a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	64fb      	str	r3, [r7, #76]	; 0x4c
        tw3 += twMod3;
 8004972:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800497a:	4413      	add	r3, r2
 800497c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        // Top
        m0 = t3[0] * twR;
 8004980:	edd7 7a07 	vldr	s15, [r7, #28]
 8004984:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004988:	ee67 7a27 	vmul.f32	s15, s14, s15
 800498c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t3[1] * twI;
 8004990:	edd7 7a08 	vldr	s15, [r7, #32]
 8004994:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004998:	ee67 7a27 	vmul.f32	s15, s14, s15
 800499c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t3[1] * twR;
 80049a0:	edd7 7a08 	vldr	s15, [r7, #32]
 80049a4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80049a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ac:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t3[0] * twI;
 80049b0:	edd7 7a07 	vldr	s15, [r7, #28]
 80049b4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80049b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049bc:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *p3++ = m0 + m1;
 80049c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80049c4:	1d1a      	adds	r2, r3, #4
 80049c6:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80049ca:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80049ce:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80049d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049d6:	edc3 7a00 	vstr	s15, [r3]
        *p3++ = m2 - m3;
 80049da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80049de:	1d1a      	adds	r2, r3, #4
 80049e0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80049e4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80049e8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80049ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80049f0:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 3
        // 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i
        // Bottom
        m0 = -t3[3] * twR;
 80049f4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80049f8:	eef1 7a67 	vneg.f32	s15, s15
 80049fc:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004a00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a04:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t3[2] * twI;
 8004a08:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004a0c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004a10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a14:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t3[2] * twR;
 8004a18:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004a1c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004a20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a24:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t3[3] * twI;
 8004a28:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004a2c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004a30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a34:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *pEnd3-- = m0 - m1;
 8004a38:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004a3c:	1f1a      	subs	r2, r3, #4
 8004a3e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004a42:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8004a46:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004a4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a4e:	edc3 7a00 	vstr	s15, [r3]
        *pEnd3-- = m3 - m2;
 8004a52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004a56:	1f1a      	subs	r2, r3, #4
 8004a58:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004a5c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8004a60:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8004a64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a68:	edc3 7a00 	vstr	s15, [r3]

        // COL 4
        twR = tw4[0];
 8004a6c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	653b      	str	r3, [r7, #80]	; 0x50
        twI = tw4[1];
 8004a74:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
        tw4 += twMod4;
 8004a7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004a84:	4413      	add	r3, r2
 8004a86:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        // Top
        m0 = t4[0] * twR;
 8004a8a:	edd7 7a03 	vldr	s15, [r7, #12]
 8004a8e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004a92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a96:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t4[1] * twI;
 8004a9a:	edd7 7a04 	vldr	s15, [r7, #16]
 8004a9e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aa6:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t4[1] * twR;
 8004aaa:	edd7 7a04 	vldr	s15, [r7, #16]
 8004aae:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ab6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t4[0] * twI;
 8004aba:	edd7 7a03 	vldr	s15, [r7, #12]
 8004abe:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ac6:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *p4++ = m0 + m1;
 8004aca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ace:	1d1a      	adds	r2, r3, #4
 8004ad0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004ad4:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8004ad8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004adc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ae0:	edc3 7a00 	vstr	s15, [r3]
        *p4++ = m2 - m3;
 8004ae4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ae8:	1d1a      	adds	r2, r3, #4
 8004aea:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004aee:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004af2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004af6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004afa:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 4
        // 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i
        // Bottom
        m0 = t4[3] * twI;
 8004afe:	edd7 7a06 	vldr	s15, [r7, #24]
 8004b02:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004b06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b0a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t4[2] * twR;
 8004b0e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004b12:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004b16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b1a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t4[2] * twI;
 8004b1e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004b22:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b2a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t4[3] * twR;
 8004b2e:	edd7 7a06 	vldr	s15, [r7, #24]
 8004b32:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004b36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b3a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *pEnd4-- = m0 - m1;
 8004b3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004b42:	1f1a      	subs	r2, r3, #4
 8004b44:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8004b48:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8004b4c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004b50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b54:	edc3 7a00 	vstr	s15, [r3]
        *pEnd4-- = m2 + m3;
 8004b58:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004b5c:	1f1a      	subs	r2, r3, #4
 8004b5e:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8004b62:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004b66:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004b6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b6e:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- )
 8004b72:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b76:	3b01      	subs	r3, #1
 8004b78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	f47f ace0 	bne.w	8004546 <arm_cfft_radix8by4_f32+0x2be>
    }

    //MIDDLE
    // Twiddle factors are
    //  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i
    p1ap3_0 = p1[0] + p3[0];
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	ed93 7a00 	vldr	s14, [r3]
 8004b8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b90:	edd3 7a00 	vldr	s15, [r3]
 8004b94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b98:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	ed93 7a00 	vldr	s14, [r3]
 8004ba2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ba6:	edd3 7a00 	vldr	s15, [r3]
 8004baa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004bae:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	3304      	adds	r3, #4
 8004bb6:	ed93 7a00 	vldr	s14, [r3]
 8004bba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004bbe:	3304      	adds	r3, #4
 8004bc0:	edd3 7a00 	vldr	s15, [r3]
 8004bc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bc8:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	3304      	adds	r3, #4
 8004bd0:	ed93 7a00 	vldr	s14, [r3]
 8004bd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004bd8:	3304      	adds	r3, #4
 8004bda:	edd3 7a00 	vldr	s15, [r3]
 8004bde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004be2:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8004be6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004bea:	3304      	adds	r3, #4
 8004bec:	ed93 7a00 	vldr	s14, [r3]
 8004bf0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8004bf4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004bf8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004bfc:	3304      	adds	r3, #4
 8004bfe:	edd3 7a00 	vldr	s15, [r3]
 8004c02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c06:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8004c0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004c0e:	edd3 7a00 	vldr	s15, [r3]
 8004c12:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8004c16:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004c1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c1e:	edd3 7a00 	vldr	s15, [r3]
 8004c22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c26:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8004c2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004c2e:	edd3 7a00 	vldr	s15, [r3]
 8004c32:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8004c36:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004c3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c3e:	edd3 7a00 	vldr	s15, [r3]
 8004c42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c46:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8004c4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004c4e:	3304      	adds	r3, #4
 8004c50:	edd3 7a00 	vldr	s15, [r3]
 8004c54:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8004c58:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004c5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c60:	3304      	adds	r3, #4
 8004c62:	edd3 7a00 	vldr	s15, [r3]
 8004c66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c6a:	edc7 7a08 	vstr	s15, [r7, #32]
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8004c6e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004c72:	3304      	adds	r3, #4
 8004c74:	edd3 7a00 	vldr	s15, [r3]
 8004c78:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8004c7c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004c80:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c84:	3304      	adds	r3, #4
 8004c86:	edd3 7a00 	vldr	s15, [r3]
 8004c8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c8e:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8004c92:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004c96:	ed93 7a00 	vldr	s14, [r3]
 8004c9a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8004c9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004ca2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ca6:	edd3 7a00 	vldr	s15, [r3]
 8004caa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004cae:	edc7 7a04 	vstr	s15, [r7, #16]
    // col 1 - Top
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8004cb2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004cb6:	ed93 7a00 	vldr	s14, [r3]
 8004cba:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8004cbe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004cc2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004cc6:	edd3 7a00 	vldr	s15, [r3]
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	1d1a      	adds	r2, r3, #4
 8004cce:	603a      	str	r2, [r7, #0]
 8004cd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004cd4:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8004cd8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004cdc:	3304      	adds	r3, #4
 8004cde:	ed93 7a00 	vldr	s14, [r3]
 8004ce2:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8004ce6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004cea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004cee:	3304      	adds	r3, #4
 8004cf0:	edd3 7a00 	vldr	s15, [r3]
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	1d1a      	adds	r2, r3, #4
 8004cf8:	603a      	str	r2, [r7, #0]
 8004cfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004cfe:	edc3 7a00 	vstr	s15, [r3]

    // COL 2
    twR = tw2[0];
 8004d02:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw2[1];
 8004d0a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t2[0] * twR;
 8004d12:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004d16:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004d1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d1e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t2[1] * twI;
 8004d22:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8004d26:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004d2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d2e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t2[1] * twR;
 8004d32:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8004d36:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004d3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d3e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t2[0] * twI;
 8004d42:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004d46:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004d4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d4e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p2++ = m0 + m1;
 8004d52:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004d56:	1d1a      	adds	r2, r3, #4
 8004d58:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8004d5c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8004d60:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004d64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d68:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 8004d6c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004d70:	1d1a      	adds	r2, r3, #4
 8004d72:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8004d76:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004d7a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004d7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d82:	edc3 7a00 	vstr	s15, [r3]
    // COL 3
    twR = tw3[0];
 8004d86:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw3[1];
 8004d8e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t3[0] * twR;
 8004d96:	edd7 7a07 	vldr	s15, [r7, #28]
 8004d9a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004da2:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t3[1] * twI;
 8004da6:	edd7 7a08 	vldr	s15, [r7, #32]
 8004daa:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004db2:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t3[1] * twR;
 8004db6:	edd7 7a08 	vldr	s15, [r7, #32]
 8004dba:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dc2:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t3[0] * twI;
 8004dc6:	edd7 7a07 	vldr	s15, [r7, #28]
 8004dca:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004dce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dd2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p3++ = m0 + m1;
 8004dd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004dda:	1d1a      	adds	r2, r3, #4
 8004ddc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004de0:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8004de4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004de8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004dec:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 8004df0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004df4:	1d1a      	adds	r2, r3, #4
 8004df6:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004dfa:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004dfe:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004e02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e06:	edc3 7a00 	vstr	s15, [r3]
    // COL 4
    twR = tw4[0];
 8004e0a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw4[1];
 8004e12:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t4[0] * twR;
 8004e1a:	edd7 7a03 	vldr	s15, [r7, #12]
 8004e1e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e26:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t4[1] * twI;
 8004e2a:	edd7 7a04 	vldr	s15, [r7, #16]
 8004e2e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e36:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t4[1] * twR;
 8004e3a:	edd7 7a04 	vldr	s15, [r7, #16]
 8004e3e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e46:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t4[0] * twI;
 8004e4a:	edd7 7a03 	vldr	s15, [r7, #12]
 8004e4e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004e52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e56:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p4++ = m0 + m1;
 8004e5a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e5e:	1d1a      	adds	r2, r3, #4
 8004e60:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004e64:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8004e68:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004e6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e70:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 8004e74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e78:	1d1a      	adds	r2, r3, #4
 8004e7a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004e7e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004e82:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004e86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e8a:	edc3 7a00 	vstr	s15, [r3]

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 4U);
 8004e8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004e92:	b299      	uxth	r1, r3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	685a      	ldr	r2, [r3, #4]
 8004e98:	2304      	movs	r3, #4
 8004e9a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8004e9c:	f000 f8da 	bl	8005054 <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 4U);
 8004ea0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004ea4:	b299      	uxth	r1, r3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685a      	ldr	r2, [r3, #4]
 8004eaa:	2304      	movs	r3, #4
 8004eac:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8004eae:	f000 f8d1 	bl	8005054 <arm_radix8_butterfly_f32>
    // third col
    arm_radix8_butterfly_f32( pCol3, L, (float32_t *) S->pTwiddle, 4U);
 8004eb2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004eb6:	b299      	uxth	r1, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	685a      	ldr	r2, [r3, #4]
 8004ebc:	2304      	movs	r3, #4
 8004ebe:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8004ec0:	f000 f8c8 	bl	8005054 <arm_radix8_butterfly_f32>
    // fourth col
    arm_radix8_butterfly_f32( pCol4, L, (float32_t *) S->pTwiddle, 4U);
 8004ec4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004ec8:	b299      	uxth	r1, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	685a      	ldr	r2, [r3, #4]
 8004ece:	2304      	movs	r3, #4
 8004ed0:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8004ed2:	f000 f8bf 	bl	8005054 <arm_radix8_butterfly_f32>
}
 8004ed6:	bf00      	nop
 8004ed8:	37b0      	adds	r7, #176	; 0xb0
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}

08004ede <arm_cfft_f32>:
void arm_cfft_f32(
    const arm_cfft_instance_f32 * S,
    float32_t * p1,
    uint8_t ifftFlag,
    uint8_t bitReverseFlag)
{
 8004ede:	b580      	push	{r7, lr}
 8004ee0:	b088      	sub	sp, #32
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	60f8      	str	r0, [r7, #12]
 8004ee6:	60b9      	str	r1, [r7, #8]
 8004ee8:	4611      	mov	r1, r2
 8004eea:	461a      	mov	r2, r3
 8004eec:	460b      	mov	r3, r1
 8004eee:	71fb      	strb	r3, [r7, #7]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	71bb      	strb	r3, [r7, #6]
    uint32_t  L = S->fftLen, l;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	881b      	ldrh	r3, [r3, #0]
 8004ef8:	617b      	str	r3, [r7, #20]
    float32_t invL, * pSrc;

    if (ifftFlag == 1U)
 8004efa:	79fb      	ldrb	r3, [r7, #7]
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d117      	bne.n	8004f30 <arm_cfft_f32+0x52>
    {
        /*  Conjugate input data  */
        pSrc = p1 + 1;
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	3304      	adds	r3, #4
 8004f04:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++)
 8004f06:	2300      	movs	r3, #0
 8004f08:	61fb      	str	r3, [r7, #28]
 8004f0a:	e00d      	b.n	8004f28 <arm_cfft_f32+0x4a>
        {
            *pSrc = -*pSrc;
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	edd3 7a00 	vldr	s15, [r3]
 8004f12:	eef1 7a67 	vneg.f32	s15, s15
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	edc3 7a00 	vstr	s15, [r3]
            pSrc += 2;
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	3308      	adds	r3, #8
 8004f20:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++)
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	3301      	adds	r3, #1
 8004f26:	61fb      	str	r3, [r7, #28]
 8004f28:	69fa      	ldr	r2, [r7, #28]
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d3ed      	bcc.n	8004f0c <arm_cfft_f32+0x2e>
        }
    }

    switch (L)
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f36:	d040      	beq.n	8004fba <arm_cfft_f32+0xdc>
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f3e:	d845      	bhi.n	8004fcc <arm_cfft_f32+0xee>
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f46:	d033      	beq.n	8004fb0 <arm_cfft_f32+0xd2>
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f4e:	d83d      	bhi.n	8004fcc <arm_cfft_f32+0xee>
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f56:	d026      	beq.n	8004fa6 <arm_cfft_f32+0xc8>
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f5e:	d835      	bhi.n	8004fcc <arm_cfft_f32+0xee>
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f66:	d028      	beq.n	8004fba <arm_cfft_f32+0xdc>
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f6e:	d82d      	bhi.n	8004fcc <arm_cfft_f32+0xee>
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f76:	d01b      	beq.n	8004fb0 <arm_cfft_f32+0xd2>
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f7e:	d825      	bhi.n	8004fcc <arm_cfft_f32+0xee>
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	2b80      	cmp	r3, #128	; 0x80
 8004f84:	d00f      	beq.n	8004fa6 <arm_cfft_f32+0xc8>
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	2b80      	cmp	r3, #128	; 0x80
 8004f8a:	d81f      	bhi.n	8004fcc <arm_cfft_f32+0xee>
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	2b40      	cmp	r3, #64	; 0x40
 8004f90:	d013      	beq.n	8004fba <arm_cfft_f32+0xdc>
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	2b40      	cmp	r3, #64	; 0x40
 8004f96:	d819      	bhi.n	8004fcc <arm_cfft_f32+0xee>
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	2b10      	cmp	r3, #16
 8004f9c:	d003      	beq.n	8004fa6 <arm_cfft_f32+0xc8>
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	2b20      	cmp	r3, #32
 8004fa2:	d005      	beq.n	8004fb0 <arm_cfft_f32+0xd2>
 8004fa4:	e012      	b.n	8004fcc <arm_cfft_f32+0xee>
    {
    case 16:
    case 128:
    case 1024:
        arm_cfft_radix8by2_f32  ( (arm_cfft_instance_f32 *) S, p1);
 8004fa6:	68b9      	ldr	r1, [r7, #8]
 8004fa8:	68f8      	ldr	r0, [r7, #12]
 8004faa:	f7fe ff79 	bl	8003ea0 <arm_cfft_radix8by2_f32>
        break;
 8004fae:	e00d      	b.n	8004fcc <arm_cfft_f32+0xee>
    case 32:
    case 256:
    case 2048:
        arm_cfft_radix8by4_f32  ( (arm_cfft_instance_f32 *) S, p1);
 8004fb0:	68b9      	ldr	r1, [r7, #8]
 8004fb2:	68f8      	ldr	r0, [r7, #12]
 8004fb4:	f7ff f968 	bl	8004288 <arm_cfft_radix8by4_f32>
        break;
 8004fb8:	e008      	b.n	8004fcc <arm_cfft_f32+0xee>
    case 64:
    case 512:
    case 4096:
        arm_radix8_butterfly_f32( p1, L, (float32_t *) S->pTwiddle, 1);
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	b299      	uxth	r1, r3
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	685a      	ldr	r2, [r3, #4]
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	68b8      	ldr	r0, [r7, #8]
 8004fc6:	f000 f845 	bl	8005054 <arm_radix8_butterfly_f32>
        break;
 8004fca:	bf00      	nop
    }

    if ( bitReverseFlag )
 8004fcc:	79bb      	ldrb	r3, [r7, #6]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d007      	beq.n	8004fe2 <arm_cfft_f32+0x104>
        arm_bitreversal_32((uint32_t*)p1,S->bitRevLength,S->pBitRevTable);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	8999      	ldrh	r1, [r3, #12]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	461a      	mov	r2, r3
 8004fdc:	68b8      	ldr	r0, [r7, #8]
 8004fde:	f7fb f92f 	bl	8000240 <arm_bitreversal_32>

    if (ifftFlag == 1U)
 8004fe2:	79fb      	ldrb	r3, [r7, #7]
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d130      	bne.n	800504a <arm_cfft_f32+0x16c>
    {
        invL = 1.0f/(float32_t)L;
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	ee07 3a90 	vmov	s15, r3
 8004fee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004ff2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ff6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ffa:	edc7 7a04 	vstr	s15, [r7, #16]
        /*  Conjugate and scale output data */
        pSrc = p1;
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++)
 8005002:	2300      	movs	r3, #0
 8005004:	61fb      	str	r3, [r7, #28]
 8005006:	e01c      	b.n	8005042 <arm_cfft_f32+0x164>
        {
            *pSrc++ *=   invL ;
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	1d1a      	adds	r2, r3, #4
 800500c:	61ba      	str	r2, [r7, #24]
 800500e:	ed93 7a00 	vldr	s14, [r3]
 8005012:	edd7 7a04 	vldr	s15, [r7, #16]
 8005016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800501a:	edc3 7a00 	vstr	s15, [r3]
            *pSrc  = -(*pSrc) * invL;
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	edd3 7a00 	vldr	s15, [r3]
 8005024:	eeb1 7a67 	vneg.f32	s14, s15
 8005028:	edd7 7a04 	vldr	s15, [r7, #16]
 800502c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	edc3 7a00 	vstr	s15, [r3]
            pSrc++;
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	3304      	adds	r3, #4
 800503a:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++)
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	3301      	adds	r3, #1
 8005040:	61fb      	str	r3, [r7, #28]
 8005042:	69fa      	ldr	r2, [r7, #28]
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	429a      	cmp	r2, r3
 8005048:	d3de      	bcc.n	8005008 <arm_cfft_f32+0x12a>
        }
    }
}
 800504a:	bf00      	nop
 800504c:	3720      	adds	r7, #32
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
	...

08005054 <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
float32_t * pSrc,
uint16_t fftLen,
const float32_t * pCoef,
uint16_t twidCoefModifier)
{
 8005054:	b480      	push	{r7}
 8005056:	b0bd      	sub	sp, #244	; 0xf4
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	607a      	str	r2, [r7, #4]
 800505e:	461a      	mov	r2, r3
 8005060:	460b      	mov	r3, r1
 8005062:	817b      	strh	r3, [r7, #10]
 8005064:	4613      	mov	r3, r2
 8005066:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 8005068:	4b09      	ldr	r3, [pc, #36]	; (8005090 <arm_radix8_butterfly_f32+0x3c>)
 800506a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

   n2 = fftLen;
 800506e:	897b      	ldrh	r3, [r7, #10]
 8005070:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

   do
   {
      n1 = n2;
 8005074:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005078:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      n2 = n2 >> 3;
 800507c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005080:	08db      	lsrs	r3, r3, #3
 8005082:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      i1 = 0;
 8005086:	2300      	movs	r3, #0
 8005088:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800508c:	e002      	b.n	8005094 <arm_radix8_butterfly_f32+0x40>
 800508e:	bf00      	nop
 8005090:	3f3504f3 	.word	0x3f3504f3

      do
      {
         i2 = i1 + n2;
 8005094:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8005098:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800509c:	4413      	add	r3, r2
 800509e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
         i3 = i2 + n2;
 80050a2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80050a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050aa:	4413      	add	r3, r2
 80050ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
         i4 = i3 + n2;
 80050b0:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80050b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050b8:	4413      	add	r3, r2
 80050ba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
         i5 = i4 + n2;
 80050be:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80050c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050c6:	4413      	add	r3, r2
 80050c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
         i6 = i5 + n2;
 80050cc:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80050d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050d4:	4413      	add	r3, r2
 80050d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
         i7 = i6 + n2;
 80050da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80050de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050e2:	4413      	add	r3, r2
 80050e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
         i8 = i7 + n2;
 80050e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80050ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050f0:	4413      	add	r3, r2
 80050f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 80050f6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80050fa:	00db      	lsls	r3, r3, #3
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	4413      	add	r3, r2
 8005100:	ed93 7a00 	vldr	s14, [r3]
 8005104:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005108:	00db      	lsls	r3, r3, #3
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	4413      	add	r3, r2
 800510e:	edd3 7a00 	vldr	s15, [r3]
 8005112:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005116:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 800511a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800511e:	00db      	lsls	r3, r3, #3
 8005120:	68fa      	ldr	r2, [r7, #12]
 8005122:	4413      	add	r3, r2
 8005124:	ed93 7a00 	vldr	s14, [r3]
 8005128:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800512c:	00db      	lsls	r3, r3, #3
 800512e:	68fa      	ldr	r2, [r7, #12]
 8005130:	4413      	add	r3, r2
 8005132:	edd3 7a00 	vldr	s15, [r3]
 8005136:	ee77 7a67 	vsub.f32	s15, s14, s15
 800513a:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 800513e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005142:	00db      	lsls	r3, r3, #3
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	4413      	add	r3, r2
 8005148:	ed93 7a00 	vldr	s14, [r3]
 800514c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005150:	00db      	lsls	r3, r3, #3
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	4413      	add	r3, r2
 8005156:	edd3 7a00 	vldr	s15, [r3]
 800515a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800515e:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8005162:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005166:	00db      	lsls	r3, r3, #3
 8005168:	68fa      	ldr	r2, [r7, #12]
 800516a:	4413      	add	r3, r2
 800516c:	ed93 7a00 	vldr	s14, [r3]
 8005170:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005174:	00db      	lsls	r3, r3, #3
 8005176:	68fa      	ldr	r2, [r7, #12]
 8005178:	4413      	add	r3, r2
 800517a:	edd3 7a00 	vldr	s15, [r3]
 800517e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005182:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8005186:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800518a:	00db      	lsls	r3, r3, #3
 800518c:	68fa      	ldr	r2, [r7, #12]
 800518e:	4413      	add	r3, r2
 8005190:	ed93 7a00 	vldr	s14, [r3]
 8005194:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005198:	00db      	lsls	r3, r3, #3
 800519a:	68fa      	ldr	r2, [r7, #12]
 800519c:	4413      	add	r3, r2
 800519e:	edd3 7a00 	vldr	s15, [r3]
 80051a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051a6:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 80051aa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80051ae:	00db      	lsls	r3, r3, #3
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	4413      	add	r3, r2
 80051b4:	ed93 7a00 	vldr	s14, [r3]
 80051b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80051bc:	00db      	lsls	r3, r3, #3
 80051be:	68fa      	ldr	r2, [r7, #12]
 80051c0:	4413      	add	r3, r2
 80051c2:	edd3 7a00 	vldr	s15, [r3]
 80051c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80051ca:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 80051ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80051d2:	00db      	lsls	r3, r3, #3
 80051d4:	68fa      	ldr	r2, [r7, #12]
 80051d6:	4413      	add	r3, r2
 80051d8:	ed93 7a00 	vldr	s14, [r3]
 80051dc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80051e0:	00db      	lsls	r3, r3, #3
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	4413      	add	r3, r2
 80051e6:	edd3 7a00 	vldr	s15, [r3]
 80051ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051ee:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 80051f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80051f6:	00db      	lsls	r3, r3, #3
 80051f8:	68fa      	ldr	r2, [r7, #12]
 80051fa:	4413      	add	r3, r2
 80051fc:	ed93 7a00 	vldr	s14, [r3]
 8005200:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005204:	00db      	lsls	r3, r3, #3
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	4413      	add	r3, r2
 800520a:	edd3 7a00 	vldr	s15, [r3]
 800520e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005212:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         t1 = r1 - r3;
 8005216:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800521a:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800521e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005222:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r1 = r1 + r3;
 8005226:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800522a:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800522e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005232:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r3 = r2 - r4;
 8005236:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800523a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800523e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005242:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r2 = r2 + r4;
 8005246:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800524a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800524e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005252:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1] = r1 + r2;
 8005256:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800525a:	00db      	lsls	r3, r3, #3
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	4413      	add	r3, r2
 8005260:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8005264:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8005268:	ee77 7a27 	vadd.f32	s15, s14, s15
 800526c:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 8005270:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005274:	00db      	lsls	r3, r3, #3
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	4413      	add	r3, r2
 800527a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800527e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8005282:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005286:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 800528a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800528e:	00db      	lsls	r3, r3, #3
 8005290:	3304      	adds	r3, #4
 8005292:	68fa      	ldr	r2, [r7, #12]
 8005294:	4413      	add	r3, r2
 8005296:	ed93 7a00 	vldr	s14, [r3]
 800529a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800529e:	00db      	lsls	r3, r3, #3
 80052a0:	3304      	adds	r3, #4
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	4413      	add	r3, r2
 80052a6:	edd3 7a00 	vldr	s15, [r3]
 80052aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052ae:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 80052b2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80052b6:	00db      	lsls	r3, r3, #3
 80052b8:	3304      	adds	r3, #4
 80052ba:	68fa      	ldr	r2, [r7, #12]
 80052bc:	4413      	add	r3, r2
 80052be:	ed93 7a00 	vldr	s14, [r3]
 80052c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80052c6:	00db      	lsls	r3, r3, #3
 80052c8:	3304      	adds	r3, #4
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	4413      	add	r3, r2
 80052ce:	edd3 7a00 	vldr	s15, [r3]
 80052d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80052d6:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 80052da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052de:	00db      	lsls	r3, r3, #3
 80052e0:	3304      	adds	r3, #4
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	4413      	add	r3, r2
 80052e6:	ed93 7a00 	vldr	s14, [r3]
 80052ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80052ee:	00db      	lsls	r3, r3, #3
 80052f0:	3304      	adds	r3, #4
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	4413      	add	r3, r2
 80052f6:	edd3 7a00 	vldr	s15, [r3]
 80052fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052fe:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8005302:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005306:	00db      	lsls	r3, r3, #3
 8005308:	3304      	adds	r3, #4
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	4413      	add	r3, r2
 800530e:	ed93 7a00 	vldr	s14, [r3]
 8005312:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005316:	00db      	lsls	r3, r3, #3
 8005318:	3304      	adds	r3, #4
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	4413      	add	r3, r2
 800531e:	edd3 7a00 	vldr	s15, [r3]
 8005322:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005326:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 800532a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800532e:	00db      	lsls	r3, r3, #3
 8005330:	3304      	adds	r3, #4
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	4413      	add	r3, r2
 8005336:	ed93 7a00 	vldr	s14, [r3]
 800533a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800533e:	00db      	lsls	r3, r3, #3
 8005340:	3304      	adds	r3, #4
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	4413      	add	r3, r2
 8005346:	edd3 7a00 	vldr	s15, [r3]
 800534a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800534e:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8005352:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005356:	00db      	lsls	r3, r3, #3
 8005358:	3304      	adds	r3, #4
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	4413      	add	r3, r2
 800535e:	ed93 7a00 	vldr	s14, [r3]
 8005362:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005366:	00db      	lsls	r3, r3, #3
 8005368:	3304      	adds	r3, #4
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	4413      	add	r3, r2
 800536e:	edd3 7a00 	vldr	s15, [r3]
 8005372:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005376:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 800537a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800537e:	00db      	lsls	r3, r3, #3
 8005380:	3304      	adds	r3, #4
 8005382:	68fa      	ldr	r2, [r7, #12]
 8005384:	4413      	add	r3, r2
 8005386:	ed93 7a00 	vldr	s14, [r3]
 800538a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800538e:	00db      	lsls	r3, r3, #3
 8005390:	3304      	adds	r3, #4
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	4413      	add	r3, r2
 8005396:	edd3 7a00 	vldr	s15, [r3]
 800539a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800539e:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 80053a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80053a6:	00db      	lsls	r3, r3, #3
 80053a8:	3304      	adds	r3, #4
 80053aa:	68fa      	ldr	r2, [r7, #12]
 80053ac:	4413      	add	r3, r2
 80053ae:	ed93 7a00 	vldr	s14, [r3]
 80053b2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80053b6:	00db      	lsls	r3, r3, #3
 80053b8:	3304      	adds	r3, #4
 80053ba:	68fa      	ldr	r2, [r7, #12]
 80053bc:	4413      	add	r3, r2
 80053be:	edd3 7a00 	vldr	s15, [r3]
 80053c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053c6:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         t2 = r1 - s3;
 80053ca:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80053ce:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80053d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053d6:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         r1 = r1 + s3;
 80053da:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80053de:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80053e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053e6:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s3 = r2 - r4;
 80053ea:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80053ee:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80053f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053f6:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         r2 = r2 + r4;
 80053fa:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80053fe:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005402:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005406:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 800540a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800540e:	00db      	lsls	r3, r3, #3
 8005410:	3304      	adds	r3, #4
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	4413      	add	r3, r2
 8005416:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800541a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800541e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005422:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 8005426:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800542a:	00db      	lsls	r3, r3, #3
 800542c:	3304      	adds	r3, #4
 800542e:	68fa      	ldr	r2, [r7, #12]
 8005430:	4413      	add	r3, r2
 8005432:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8005436:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800543a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800543e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 8005442:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005446:	00db      	lsls	r3, r3, #3
 8005448:	68fa      	ldr	r2, [r7, #12]
 800544a:	4413      	add	r3, r2
 800544c:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8005450:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005454:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005458:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 800545c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005460:	00db      	lsls	r3, r3, #3
 8005462:	68fa      	ldr	r2, [r7, #12]
 8005464:	4413      	add	r3, r2
 8005466:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800546a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800546e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005472:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 8005476:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800547a:	00db      	lsls	r3, r3, #3
 800547c:	3304      	adds	r3, #4
 800547e:	68fa      	ldr	r2, [r7, #12]
 8005480:	4413      	add	r3, r2
 8005482:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8005486:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800548a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800548e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 8005492:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005496:	00db      	lsls	r3, r3, #3
 8005498:	3304      	adds	r3, #4
 800549a:	68fa      	ldr	r2, [r7, #12]
 800549c:	4413      	add	r3, r2
 800549e:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80054a2:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80054a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054aa:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 80054ae:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 80054b2:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80054b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80054ba:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80054be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054c2:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r6 = (r6 + r8) * C81;
 80054c6:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 80054ca:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80054ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054d2:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80054d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054da:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r2 = (s6 - s8) * C81;
 80054de:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80054e2:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80054e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80054ea:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80054ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054f2:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = (s6 + s8) * C81;
 80054f6:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80054fa:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80054fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005502:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8005506:	ee67 7a27 	vmul.f32	s15, s14, s15
 800550a:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         t1 = r5 - r1;
 800550e:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8005512:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005516:	ee77 7a67 	vsub.f32	s15, s14, s15
 800551a:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r5 = r5 + r1;
 800551e:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8005522:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005526:	ee77 7a27 	vadd.f32	s15, s14, s15
 800552a:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r8 = r7 - r6;
 800552e:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8005532:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8005536:	ee77 7a67 	vsub.f32	s15, s14, s15
 800553a:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         r7 = r7 + r6;
 800553e:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8005542:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8005546:	ee77 7a27 	vadd.f32	s15, s14, s15
 800554a:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         t2 = s5 - r2;
 800554e:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8005552:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8005556:	ee77 7a67 	vsub.f32	s15, s14, s15
 800555a:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         s5 = s5 + r2;
 800555e:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8005562:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8005566:	ee77 7a27 	vadd.f32	s15, s14, s15
 800556a:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         s8 = s7 - s6;
 800556e:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8005572:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005576:	ee77 7a67 	vsub.f32	s15, s14, s15
 800557a:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         s7 = s7 + s6;
 800557e:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8005582:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005586:	ee77 7a27 	vadd.f32	s15, s14, s15
 800558a:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         pSrc[2 * i2]     = r5 + s7;
 800558e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005592:	00db      	lsls	r3, r3, #3
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	4413      	add	r3, r2
 8005598:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800559c:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80055a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055a4:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 80055a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80055ac:	00db      	lsls	r3, r3, #3
 80055ae:	68fa      	ldr	r2, [r7, #12]
 80055b0:	4413      	add	r3, r2
 80055b2:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80055b6:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80055ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80055be:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 80055c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80055c6:	00db      	lsls	r3, r3, #3
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	4413      	add	r3, r2
 80055cc:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80055d0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80055d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055d8:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 80055dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80055e0:	00db      	lsls	r3, r3, #3
 80055e2:	68fa      	ldr	r2, [r7, #12]
 80055e4:	4413      	add	r3, r2
 80055e6:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80055ea:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80055ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80055f2:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 80055f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80055fa:	00db      	lsls	r3, r3, #3
 80055fc:	3304      	adds	r3, #4
 80055fe:	68fa      	ldr	r2, [r7, #12]
 8005600:	4413      	add	r3, r2
 8005602:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8005606:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800560a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800560e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 8005612:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005616:	00db      	lsls	r3, r3, #3
 8005618:	3304      	adds	r3, #4
 800561a:	68fa      	ldr	r2, [r7, #12]
 800561c:	4413      	add	r3, r2
 800561e:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8005622:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005626:	ee77 7a27 	vadd.f32	s15, s14, s15
 800562a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 800562e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005632:	00db      	lsls	r3, r3, #3
 8005634:	3304      	adds	r3, #4
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	4413      	add	r3, r2
 800563a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800563e:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005642:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005646:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 800564a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800564e:	00db      	lsls	r3, r3, #3
 8005650:	3304      	adds	r3, #4
 8005652:	68fa      	ldr	r2, [r7, #12]
 8005654:	4413      	add	r3, r2
 8005656:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800565a:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800565e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005662:	edc3 7a00 	vstr	s15, [r3]

         i1 += n1;
 8005666:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800566a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800566e:	4413      	add	r3, r2
 8005670:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      } while (i1 < fftLen);
 8005674:	897b      	ldrh	r3, [r7, #10]
 8005676:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800567a:	429a      	cmp	r2, r3
 800567c:	f4ff ad0a 	bcc.w	8005094 <arm_radix8_butterfly_f32+0x40>

      if (n2 < 8)
 8005680:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005684:	2b07      	cmp	r3, #7
 8005686:	f240 84e3 	bls.w	8006050 <arm_radix8_butterfly_f32+0xffc>
         break;

      ia1 = 0;
 800568a:	2300      	movs	r3, #0
 800568c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      j = 1;
 8005690:	2301      	movs	r3, #1
 8005692:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 8005696:	893b      	ldrh	r3, [r7, #8]
 8005698:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800569c:	4413      	add	r3, r2
 800569e:	67fb      	str	r3, [r7, #124]	; 0x7c
         ia1 = id;
 80056a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80056a2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
         ia2 = ia1 + id;
 80056a6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80056aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80056ac:	4413      	add	r3, r2
 80056ae:	67bb      	str	r3, [r7, #120]	; 0x78
         ia3 = ia2 + id;
 80056b0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80056b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80056b4:	4413      	add	r3, r2
 80056b6:	677b      	str	r3, [r7, #116]	; 0x74
         ia4 = ia3 + id;
 80056b8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80056ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80056bc:	4413      	add	r3, r2
 80056be:	673b      	str	r3, [r7, #112]	; 0x70
         ia5 = ia4 + id;
 80056c0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80056c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80056c4:	4413      	add	r3, r2
 80056c6:	66fb      	str	r3, [r7, #108]	; 0x6c
         ia6 = ia5 + id;
 80056c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80056ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80056cc:	4413      	add	r3, r2
 80056ce:	66bb      	str	r3, [r7, #104]	; 0x68
         ia7 = ia6 + id;
 80056d0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80056d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80056d4:	4413      	add	r3, r2
 80056d6:	667b      	str	r3, [r7, #100]	; 0x64

         co2 = pCoef[2 * ia1];
 80056d8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80056dc:	00db      	lsls	r3, r3, #3
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	4413      	add	r3, r2
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	663b      	str	r3, [r7, #96]	; 0x60
         co3 = pCoef[2 * ia2];
 80056e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056e8:	00db      	lsls	r3, r3, #3
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	4413      	add	r3, r2
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	65fb      	str	r3, [r7, #92]	; 0x5c
         co4 = pCoef[2 * ia3];
 80056f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056f4:	00db      	lsls	r3, r3, #3
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	4413      	add	r3, r2
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	65bb      	str	r3, [r7, #88]	; 0x58
         co5 = pCoef[2 * ia4];
 80056fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005700:	00db      	lsls	r3, r3, #3
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	4413      	add	r3, r2
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	657b      	str	r3, [r7, #84]	; 0x54
         co6 = pCoef[2 * ia5];
 800570a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800570c:	00db      	lsls	r3, r3, #3
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	4413      	add	r3, r2
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	653b      	str	r3, [r7, #80]	; 0x50
         co7 = pCoef[2 * ia6];
 8005716:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005718:	00db      	lsls	r3, r3, #3
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	4413      	add	r3, r2
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	64fb      	str	r3, [r7, #76]	; 0x4c
         co8 = pCoef[2 * ia7];
 8005722:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005724:	00db      	lsls	r3, r3, #3
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	4413      	add	r3, r2
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	64bb      	str	r3, [r7, #72]	; 0x48
         si2 = pCoef[2 * ia1 + 1];
 800572e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005732:	00db      	lsls	r3, r3, #3
 8005734:	3304      	adds	r3, #4
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	4413      	add	r3, r2
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	647b      	str	r3, [r7, #68]	; 0x44
         si3 = pCoef[2 * ia2 + 1];
 800573e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005740:	00db      	lsls	r3, r3, #3
 8005742:	3304      	adds	r3, #4
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	4413      	add	r3, r2
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	643b      	str	r3, [r7, #64]	; 0x40
         si4 = pCoef[2 * ia3 + 1];
 800574c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800574e:	00db      	lsls	r3, r3, #3
 8005750:	3304      	adds	r3, #4
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	4413      	add	r3, r2
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	63fb      	str	r3, [r7, #60]	; 0x3c
         si5 = pCoef[2 * ia4 + 1];
 800575a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800575c:	00db      	lsls	r3, r3, #3
 800575e:	3304      	adds	r3, #4
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	4413      	add	r3, r2
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	63bb      	str	r3, [r7, #56]	; 0x38
         si6 = pCoef[2 * ia5 + 1];
 8005768:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800576a:	00db      	lsls	r3, r3, #3
 800576c:	3304      	adds	r3, #4
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	4413      	add	r3, r2
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	637b      	str	r3, [r7, #52]	; 0x34
         si7 = pCoef[2 * ia6 + 1];
 8005776:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005778:	00db      	lsls	r3, r3, #3
 800577a:	3304      	adds	r3, #4
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	4413      	add	r3, r2
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	633b      	str	r3, [r7, #48]	; 0x30
         si8 = pCoef[2 * ia7 + 1];
 8005784:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005786:	00db      	lsls	r3, r3, #3
 8005788:	3304      	adds	r3, #4
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	4413      	add	r3, r2
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	62fb      	str	r3, [r7, #44]	; 0x2c

         i1 = j;
 8005792:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005796:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 800579a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800579e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057a2:	4413      	add	r3, r2
 80057a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            i3 = i2 + n2;
 80057a8:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80057ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057b0:	4413      	add	r3, r2
 80057b2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
            i4 = i3 + n2;
 80057b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80057ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057be:	4413      	add	r3, r2
 80057c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            i5 = i4 + n2;
 80057c4:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80057c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057cc:	4413      	add	r3, r2
 80057ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            i6 = i5 + n2;
 80057d2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80057d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057da:	4413      	add	r3, r2
 80057dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            i7 = i6 + n2;
 80057e0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80057e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057e8:	4413      	add	r3, r2
 80057ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            i8 = i7 + n2;
 80057ee:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80057f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057f6:	4413      	add	r3, r2
 80057f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 80057fc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005800:	00db      	lsls	r3, r3, #3
 8005802:	68fa      	ldr	r2, [r7, #12]
 8005804:	4413      	add	r3, r2
 8005806:	ed93 7a00 	vldr	s14, [r3]
 800580a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800580e:	00db      	lsls	r3, r3, #3
 8005810:	68fa      	ldr	r2, [r7, #12]
 8005812:	4413      	add	r3, r2
 8005814:	edd3 7a00 	vldr	s15, [r3]
 8005818:	ee77 7a27 	vadd.f32	s15, s14, s15
 800581c:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8005820:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005824:	00db      	lsls	r3, r3, #3
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	4413      	add	r3, r2
 800582a:	ed93 7a00 	vldr	s14, [r3]
 800582e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005832:	00db      	lsls	r3, r3, #3
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	4413      	add	r3, r2
 8005838:	edd3 7a00 	vldr	s15, [r3]
 800583c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005840:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8005844:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005848:	00db      	lsls	r3, r3, #3
 800584a:	68fa      	ldr	r2, [r7, #12]
 800584c:	4413      	add	r3, r2
 800584e:	ed93 7a00 	vldr	s14, [r3]
 8005852:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005856:	00db      	lsls	r3, r3, #3
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	4413      	add	r3, r2
 800585c:	edd3 7a00 	vldr	s15, [r3]
 8005860:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005864:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8005868:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800586c:	00db      	lsls	r3, r3, #3
 800586e:	68fa      	ldr	r2, [r7, #12]
 8005870:	4413      	add	r3, r2
 8005872:	ed93 7a00 	vldr	s14, [r3]
 8005876:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800587a:	00db      	lsls	r3, r3, #3
 800587c:	68fa      	ldr	r2, [r7, #12]
 800587e:	4413      	add	r3, r2
 8005880:	edd3 7a00 	vldr	s15, [r3]
 8005884:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005888:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 800588c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005890:	00db      	lsls	r3, r3, #3
 8005892:	68fa      	ldr	r2, [r7, #12]
 8005894:	4413      	add	r3, r2
 8005896:	ed93 7a00 	vldr	s14, [r3]
 800589a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800589e:	00db      	lsls	r3, r3, #3
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	4413      	add	r3, r2
 80058a4:	edd3 7a00 	vldr	s15, [r3]
 80058a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80058ac:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 80058b0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80058b4:	00db      	lsls	r3, r3, #3
 80058b6:	68fa      	ldr	r2, [r7, #12]
 80058b8:	4413      	add	r3, r2
 80058ba:	ed93 7a00 	vldr	s14, [r3]
 80058be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80058c2:	00db      	lsls	r3, r3, #3
 80058c4:	68fa      	ldr	r2, [r7, #12]
 80058c6:	4413      	add	r3, r2
 80058c8:	edd3 7a00 	vldr	s15, [r3]
 80058cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80058d0:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 80058d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80058d8:	00db      	lsls	r3, r3, #3
 80058da:	68fa      	ldr	r2, [r7, #12]
 80058dc:	4413      	add	r3, r2
 80058de:	ed93 7a00 	vldr	s14, [r3]
 80058e2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80058e6:	00db      	lsls	r3, r3, #3
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	4413      	add	r3, r2
 80058ec:	edd3 7a00 	vldr	s15, [r3]
 80058f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80058f4:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 80058f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80058fc:	00db      	lsls	r3, r3, #3
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	4413      	add	r3, r2
 8005902:	ed93 7a00 	vldr	s14, [r3]
 8005906:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800590a:	00db      	lsls	r3, r3, #3
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	4413      	add	r3, r2
 8005910:	edd3 7a00 	vldr	s15, [r3]
 8005914:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005918:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            t1 = r1 - r3;
 800591c:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8005920:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8005924:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005928:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r1 = r1 + r3;
 800592c:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8005930:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8005934:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005938:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r3 = r2 - r4;
 800593c:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8005940:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005944:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005948:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r2 = r2 + r4;
 800594c:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8005950:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005954:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005958:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            pSrc[2 * i1] = r1 + r2;
 800595c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005960:	00db      	lsls	r3, r3, #3
 8005962:	68fa      	ldr	r2, [r7, #12]
 8005964:	4413      	add	r3, r2
 8005966:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800596a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800596e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005972:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 8005976:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800597a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800597e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005982:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8005986:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800598a:	00db      	lsls	r3, r3, #3
 800598c:	3304      	adds	r3, #4
 800598e:	68fa      	ldr	r2, [r7, #12]
 8005990:	4413      	add	r3, r2
 8005992:	ed93 7a00 	vldr	s14, [r3]
 8005996:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800599a:	00db      	lsls	r3, r3, #3
 800599c:	3304      	adds	r3, #4
 800599e:	68fa      	ldr	r2, [r7, #12]
 80059a0:	4413      	add	r3, r2
 80059a2:	edd3 7a00 	vldr	s15, [r3]
 80059a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059aa:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 80059ae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80059b2:	00db      	lsls	r3, r3, #3
 80059b4:	3304      	adds	r3, #4
 80059b6:	68fa      	ldr	r2, [r7, #12]
 80059b8:	4413      	add	r3, r2
 80059ba:	ed93 7a00 	vldr	s14, [r3]
 80059be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80059c2:	00db      	lsls	r3, r3, #3
 80059c4:	3304      	adds	r3, #4
 80059c6:	68fa      	ldr	r2, [r7, #12]
 80059c8:	4413      	add	r3, r2
 80059ca:	edd3 7a00 	vldr	s15, [r3]
 80059ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80059d2:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 80059d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80059da:	00db      	lsls	r3, r3, #3
 80059dc:	3304      	adds	r3, #4
 80059de:	68fa      	ldr	r2, [r7, #12]
 80059e0:	4413      	add	r3, r2
 80059e2:	ed93 7a00 	vldr	s14, [r3]
 80059e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80059ea:	00db      	lsls	r3, r3, #3
 80059ec:	3304      	adds	r3, #4
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	4413      	add	r3, r2
 80059f2:	edd3 7a00 	vldr	s15, [r3]
 80059f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059fa:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 80059fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a02:	00db      	lsls	r3, r3, #3
 8005a04:	3304      	adds	r3, #4
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	4413      	add	r3, r2
 8005a0a:	ed93 7a00 	vldr	s14, [r3]
 8005a0e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005a12:	00db      	lsls	r3, r3, #3
 8005a14:	3304      	adds	r3, #4
 8005a16:	68fa      	ldr	r2, [r7, #12]
 8005a18:	4413      	add	r3, r2
 8005a1a:	edd3 7a00 	vldr	s15, [r3]
 8005a1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a22:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8005a26:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005a2a:	00db      	lsls	r3, r3, #3
 8005a2c:	3304      	adds	r3, #4
 8005a2e:	68fa      	ldr	r2, [r7, #12]
 8005a30:	4413      	add	r3, r2
 8005a32:	ed93 7a00 	vldr	s14, [r3]
 8005a36:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005a3a:	00db      	lsls	r3, r3, #3
 8005a3c:	3304      	adds	r3, #4
 8005a3e:	68fa      	ldr	r2, [r7, #12]
 8005a40:	4413      	add	r3, r2
 8005a42:	edd3 7a00 	vldr	s15, [r3]
 8005a46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a4a:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8005a4e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005a52:	00db      	lsls	r3, r3, #3
 8005a54:	3304      	adds	r3, #4
 8005a56:	68fa      	ldr	r2, [r7, #12]
 8005a58:	4413      	add	r3, r2
 8005a5a:	ed93 7a00 	vldr	s14, [r3]
 8005a5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005a62:	00db      	lsls	r3, r3, #3
 8005a64:	3304      	adds	r3, #4
 8005a66:	68fa      	ldr	r2, [r7, #12]
 8005a68:	4413      	add	r3, r2
 8005a6a:	edd3 7a00 	vldr	s15, [r3]
 8005a6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a72:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8005a76:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005a7a:	00db      	lsls	r3, r3, #3
 8005a7c:	3304      	adds	r3, #4
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	4413      	add	r3, r2
 8005a82:	ed93 7a00 	vldr	s14, [r3]
 8005a86:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005a8a:	00db      	lsls	r3, r3, #3
 8005a8c:	3304      	adds	r3, #4
 8005a8e:	68fa      	ldr	r2, [r7, #12]
 8005a90:	4413      	add	r3, r2
 8005a92:	edd3 7a00 	vldr	s15, [r3]
 8005a96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a9a:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8005a9e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005aa2:	00db      	lsls	r3, r3, #3
 8005aa4:	3304      	adds	r3, #4
 8005aa6:	68fa      	ldr	r2, [r7, #12]
 8005aa8:	4413      	add	r3, r2
 8005aaa:	ed93 7a00 	vldr	s14, [r3]
 8005aae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005ab2:	00db      	lsls	r3, r3, #3
 8005ab4:	3304      	adds	r3, #4
 8005ab6:	68fa      	ldr	r2, [r7, #12]
 8005ab8:	4413      	add	r3, r2
 8005aba:	edd3 7a00 	vldr	s15, [r3]
 8005abe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ac2:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            t2 = s1 - s3;
 8005ac6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8005aca:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005ace:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ad2:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s1 = s1 + s3;
 8005ad6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8005ada:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005ade:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ae2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s3 = s2 - s4;
 8005ae6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005aea:	edd7 7a08 	vldr	s15, [r7, #32]
 8005aee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005af2:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s2 = s2 + s4;
 8005af6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005afa:	edd7 7a08 	vldr	s15, [r7, #32]
 8005afe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b02:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            r1 = t1 + s3;
 8005b06:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8005b0a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005b0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b12:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            t1 = t1 - s3;
 8005b16:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8005b1a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005b1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b22:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 8005b26:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005b2a:	00db      	lsls	r3, r3, #3
 8005b2c:	3304      	adds	r3, #4
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	4413      	add	r3, r2
 8005b32:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8005b36:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005b3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b3e:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 8005b42:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8005b46:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005b4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b4e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s1 = t2 - r3;
 8005b52:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8005b56:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8005b5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b5e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            t2 = t2 + r3;
 8005b62:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8005b66:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8005b6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b6e:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co5 * r2;
 8005b72:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8005b76:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8005b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b7e:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 8005b82:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8005b86:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b8e:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 8005b92:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8005b96:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b9e:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 8005ba2:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8005ba6:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8005baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bae:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 8005bb2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005bb6:	00db      	lsls	r3, r3, #3
 8005bb8:	68fa      	ldr	r2, [r7, #12]
 8005bba:	4413      	add	r3, r2
 8005bbc:	ed97 7a07 	vldr	s14, [r7, #28]
 8005bc0:	edd7 7a06 	vldr	s15, [r7, #24]
 8005bc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005bc8:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 8005bcc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005bd0:	00db      	lsls	r3, r3, #3
 8005bd2:	3304      	adds	r3, #4
 8005bd4:	68fa      	ldr	r2, [r7, #12]
 8005bd6:	4413      	add	r3, r2
 8005bd8:	ed97 7a05 	vldr	s14, [r7, #20]
 8005bdc:	edd7 7a04 	vldr	s15, [r7, #16]
 8005be0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005be4:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 8005be8:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8005bec:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005bf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bf4:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 8005bf8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8005bfc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005c00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c04:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 8005c08:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8005c0c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005c10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c14:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 8005c18:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8005c1c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005c20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c24:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 8005c28:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005c2c:	00db      	lsls	r3, r3, #3
 8005c2e:	68fa      	ldr	r2, [r7, #12]
 8005c30:	4413      	add	r3, r2
 8005c32:	ed97 7a07 	vldr	s14, [r7, #28]
 8005c36:	edd7 7a06 	vldr	s15, [r7, #24]
 8005c3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c3e:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 8005c42:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005c46:	00db      	lsls	r3, r3, #3
 8005c48:	3304      	adds	r3, #4
 8005c4a:	68fa      	ldr	r2, [r7, #12]
 8005c4c:	4413      	add	r3, r2
 8005c4e:	ed97 7a05 	vldr	s14, [r7, #20]
 8005c52:	edd7 7a04 	vldr	s15, [r7, #16]
 8005c56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c5a:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 8005c5e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8005c62:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c6a:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 8005c6e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8005c72:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005c76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c7a:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 8005c7e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8005c82:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005c86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c8a:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 8005c8e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8005c92:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005c96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c9a:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 8005c9e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005ca2:	00db      	lsls	r3, r3, #3
 8005ca4:	68fa      	ldr	r2, [r7, #12]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	ed97 7a07 	vldr	s14, [r7, #28]
 8005cac:	edd7 7a06 	vldr	s15, [r7, #24]
 8005cb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005cb4:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 8005cb8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005cbc:	00db      	lsls	r3, r3, #3
 8005cbe:	3304      	adds	r3, #4
 8005cc0:	68fa      	ldr	r2, [r7, #12]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	ed97 7a05 	vldr	s14, [r7, #20]
 8005cc8:	edd7 7a04 	vldr	s15, [r7, #16]
 8005ccc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005cd0:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 8005cd4:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8005cd8:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005cdc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ce0:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8005ce4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ce8:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r6 = (r6 + r8) * C81;
 8005cec:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8005cf0:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005cf4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005cf8:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8005cfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d00:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            s1 = (s6 - s8) * C81;
 8005d04:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8005d08:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8005d0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d10:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8005d14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d18:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s6 = (s6 + s8) * C81;
 8005d1c:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8005d20:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8005d24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d28:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8005d2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d30:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t1 = r5 - r1;
 8005d34:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8005d38:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005d3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d40:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r5 = r5 + r1;
 8005d44:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8005d48:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005d4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d50:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r8 = r7 - r6;
 8005d54:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8005d58:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8005d5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d60:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            r7 = r7 + r6;
 8005d64:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8005d68:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8005d6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d70:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            t2 = s5 - s1;
 8005d74:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8005d78:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005d7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d80:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s5 = s5 + s1;
 8005d84:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8005d88:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005d8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d90:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s8 = s7 - s6;
 8005d94:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8005d98:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005d9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005da0:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            s7 = s7 + s6;
 8005da4:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8005da8:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005dac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005db0:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            r1 = r5 + s7;
 8005db4:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8005db8:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8005dbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005dc0:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = r5 - s7;
 8005dc4:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8005dc8:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8005dcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005dd0:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r6 = t1 + s8;
 8005dd4:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8005dd8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8005ddc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005de0:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            t1 = t1 - s8;
 8005de4:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8005de8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8005dec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005df0:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            s1 = s5 - r7;
 8005df4:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8005df8:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005dfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e00:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = s5 + r7;
 8005e04:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8005e08:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005e0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e10:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s6 = t2 - r8;
 8005e14:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8005e18:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005e1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e20:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t2 = t2 + r8;
 8005e24:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8005e28:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005e2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e30:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co2 * r1;
 8005e34:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8005e38:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005e3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e40:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 8005e44:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8005e48:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005e4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e50:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 8005e54:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8005e58:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005e5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e60:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 8005e64:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8005e68:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005e6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e70:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 8005e74:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e78:	00db      	lsls	r3, r3, #3
 8005e7a:	68fa      	ldr	r2, [r7, #12]
 8005e7c:	4413      	add	r3, r2
 8005e7e:	ed97 7a07 	vldr	s14, [r7, #28]
 8005e82:	edd7 7a06 	vldr	s15, [r7, #24]
 8005e86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e8a:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 8005e8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e92:	00db      	lsls	r3, r3, #3
 8005e94:	3304      	adds	r3, #4
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	4413      	add	r3, r2
 8005e9a:	ed97 7a05 	vldr	s14, [r7, #20]
 8005e9e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005ea2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ea6:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 8005eaa:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8005eae:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8005eb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eb6:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 8005eba:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8005ebe:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ec6:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 8005eca:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8005ece:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ed6:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 8005eda:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8005ede:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8005ee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ee6:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 8005eea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005eee:	00db      	lsls	r3, r3, #3
 8005ef0:	68fa      	ldr	r2, [r7, #12]
 8005ef2:	4413      	add	r3, r2
 8005ef4:	ed97 7a07 	vldr	s14, [r7, #28]
 8005ef8:	edd7 7a06 	vldr	s15, [r7, #24]
 8005efc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f00:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 8005f04:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005f08:	00db      	lsls	r3, r3, #3
 8005f0a:	3304      	adds	r3, #4
 8005f0c:	68fa      	ldr	r2, [r7, #12]
 8005f0e:	4413      	add	r3, r2
 8005f10:	ed97 7a05 	vldr	s14, [r7, #20]
 8005f14:	edd7 7a04 	vldr	s15, [r7, #16]
 8005f18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f1c:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 8005f20:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8005f24:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8005f28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f2c:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 8005f30:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8005f34:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005f38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f3c:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 8005f40:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8005f44:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005f48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f4c:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 8005f50:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8005f54:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8005f58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f5c:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 8005f60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005f64:	00db      	lsls	r3, r3, #3
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	4413      	add	r3, r2
 8005f6a:	ed97 7a07 	vldr	s14, [r7, #28]
 8005f6e:	edd7 7a06 	vldr	s15, [r7, #24]
 8005f72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f76:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 8005f7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005f7e:	00db      	lsls	r3, r3, #3
 8005f80:	3304      	adds	r3, #4
 8005f82:	68fa      	ldr	r2, [r7, #12]
 8005f84:	4413      	add	r3, r2
 8005f86:	ed97 7a05 	vldr	s14, [r7, #20]
 8005f8a:	edd7 7a04 	vldr	s15, [r7, #16]
 8005f8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f92:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 8005f96:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8005f9a:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fa2:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 8005fa6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8005faa:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fb2:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 8005fb6:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8005fba:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fc2:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 8005fc6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8005fca:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005fce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fd2:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 8005fd6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005fda:	00db      	lsls	r3, r3, #3
 8005fdc:	68fa      	ldr	r2, [r7, #12]
 8005fde:	4413      	add	r3, r2
 8005fe0:	ed97 7a07 	vldr	s14, [r7, #28]
 8005fe4:	edd7 7a06 	vldr	s15, [r7, #24]
 8005fe8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005fec:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 8005ff0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005ff4:	00db      	lsls	r3, r3, #3
 8005ff6:	3304      	adds	r3, #4
 8005ff8:	68fa      	ldr	r2, [r7, #12]
 8005ffa:	4413      	add	r3, r2
 8005ffc:	ed97 7a05 	vldr	s14, [r7, #20]
 8006000:	edd7 7a04 	vldr	s15, [r7, #16]
 8006004:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006008:	edc3 7a00 	vstr	s15, [r3]

            i1 += n1;
 800600c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8006010:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006014:	4413      	add	r3, r2
 8006016:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         } while (i1 < fftLen);
 800601a:	897b      	ldrh	r3, [r7, #10]
 800601c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8006020:	429a      	cmp	r2, r3
 8006022:	f4ff abba 	bcc.w	800579a <arm_radix8_butterfly_f32+0x746>

         j++;
 8006026:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800602a:	3301      	adds	r3, #1
 800602c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      } while (j < n2);
 8006030:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006038:	429a      	cmp	r2, r3
 800603a:	f4ff ab2c 	bcc.w	8005696 <arm_radix8_butterfly_f32+0x642>

      twidCoefModifier <<= 3;
 800603e:	893b      	ldrh	r3, [r7, #8]
 8006040:	00db      	lsls	r3, r3, #3
 8006042:	813b      	strh	r3, [r7, #8]
   } while (n2 > 7);
 8006044:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006048:	2b07      	cmp	r3, #7
 800604a:	f63f a813 	bhi.w	8005074 <arm_radix8_butterfly_f32+0x20>
}
 800604e:	e000      	b.n	8006052 <arm_radix8_butterfly_f32+0xffe>
         break;
 8006050:	bf00      	nop
}
 8006052:	bf00      	nop
 8006054:	37f4      	adds	r7, #244	; 0xf4
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr
 800605e:	bf00      	nop

08006060 <stage_rfft_f32>:
#include "arm_math.h"

void stage_rfft_f32(
  arm_rfft_fast_instance_f32 * S,
  float32_t * p, float32_t * pOut)
{
 8006060:	b480      	push	{r7}
 8006062:	b095      	sub	sp, #84	; 0x54
 8006064:	af00      	add	r7, sp, #0
 8006066:	60f8      	str	r0, [r7, #12]
 8006068:	60b9      	str	r1, [r7, #8]
 800606a:	607a      	str	r2, [r7, #4]
   uint32_t  k;								   /* Loop Counter                     */
   float32_t twR, twI;						   /* RFFT Twiddle coefficients        */
   float32_t * pCoeff = S->pTwiddleRFFT;  /* Points to RFFT Twiddle factors   */
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	695b      	ldr	r3, [r3, #20]
 8006070:	64bb      	str	r3, [r7, #72]	; 0x48
   float32_t *pA = p;						   /* increasing pointer               */
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	647b      	str	r3, [r7, #68]	; 0x44
   float32_t *pB = p;						   /* decreasing pointer               */
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	643b      	str	r3, [r7, #64]	; 0x40
   float32_t xAR, xAI, xBR, xBI;				/* temporary variables              */
   float32_t t1a, t1b;				         /* temporary variables              */
   float32_t p0, p1, p2, p3;				   /* temporary variables              */


   k = (S->Sint).fftLen - 1;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	881b      	ldrh	r3, [r3, #0]
 800607e:	3b01      	subs	r3, #1
 8006080:	64fb      	str	r3, [r7, #76]	; 0x4c

   /* Pack first and last sample of the frequency domain together */

   xBR = pB[0];
 8006082:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	63fb      	str	r3, [r7, #60]	; 0x3c
   xBI = pB[1];
 8006088:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	63bb      	str	r3, [r7, #56]	; 0x38
   xAR = pA[0];
 800608e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	637b      	str	r3, [r7, #52]	; 0x34
   xAI = pA[1];
 8006094:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	633b      	str	r3, [r7, #48]	; 0x30

   twR = *pCoeff++ ;
 800609a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800609c:	1d1a      	adds	r2, r3, #4
 800609e:	64ba      	str	r2, [r7, #72]	; 0x48
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   twI = *pCoeff++ ;
 80060a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060a6:	1d1a      	adds	r2, r3, #4
 80060a8:	64ba      	str	r2, [r7, #72]	; 0x48
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	62bb      	str	r3, [r7, #40]	; 0x28

   // U1 = XA(1) + XB(1); % It is real
   t1a = xBR + xAR  ;
 80060ae:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80060b2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80060b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80060ba:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

   // U2 = XB(1) - XA(1); % It is imaginary
   t1b = xBI + xAI  ;
 80060be:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80060c2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80060c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80060ca:	edc7 7a08 	vstr	s15, [r7, #32]

   // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
   // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
   *pOut++ = 0.5f * ( t1a + t1b );
 80060ce:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80060d2:	edd7 7a08 	vldr	s15, [r7, #32]
 80060d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	1d1a      	adds	r2, r3, #4
 80060de:	607a      	str	r2, [r7, #4]
 80060e0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80060e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80060e8:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( t1a - t1b );
 80060ec:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80060f0:	edd7 7a08 	vldr	s15, [r7, #32]
 80060f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	1d1a      	adds	r2, r3, #4
 80060fc:	607a      	str	r2, [r7, #4]
 80060fe:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006102:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006106:	edc3 7a00 	vstr	s15, [r3]

   // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
   pB  = p + 2*k;
 800610a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800610c:	00db      	lsls	r3, r3, #3
 800610e:	68ba      	ldr	r2, [r7, #8]
 8006110:	4413      	add	r3, r2
 8006112:	643b      	str	r3, [r7, #64]	; 0x40
   pA += 2;
 8006114:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006116:	3308      	adds	r3, #8
 8006118:	647b      	str	r3, [r7, #68]	; 0x44
         end
         XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(1) - XB(1))));
         X = XA;
      */

      xBI = pB[1];
 800611a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	63bb      	str	r3, [r7, #56]	; 0x38
      xBR = pB[0];
 8006120:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAR = pA[0];
 8006126:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	637b      	str	r3, [r7, #52]	; 0x34
      xAI = pA[1];
 800612c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	633b      	str	r3, [r7, #48]	; 0x30

      twR = *pCoeff++;
 8006132:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006134:	1d1a      	adds	r2, r3, #4
 8006136:	64ba      	str	r2, [r7, #72]	; 0x48
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 800613c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800613e:	1d1a      	adds	r2, r3, #4
 8006140:	64ba      	str	r2, [r7, #72]	; 0x48
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xBR - xAR ;
 8006146:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800614a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800614e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006152:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xBI + xAI ;
 8006156:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800615a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800615e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006162:	edc7 7a08 	vstr	s15, [r7, #32]

      // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
      // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
      p0 = twR * t1a;
 8006166:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800616a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800616e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006172:	edc7 7a07 	vstr	s15, [r7, #28]
      p1 = twI * t1a;
 8006176:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800617a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800617e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006182:	edc7 7a06 	vstr	s15, [r7, #24]
      p2 = twR * t1b;
 8006186:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800618a:	edd7 7a08 	vldr	s15, [r7, #32]
 800618e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006192:	edc7 7a05 	vstr	s15, [r7, #20]
      p3 = twI * t1b;
 8006196:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800619a:	edd7 7a08 	vldr	s15, [r7, #32]
 800619e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061a2:	edc7 7a04 	vstr	s15, [r7, #16]

      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 80061a6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80061aa:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80061ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80061b2:	edd7 7a07 	vldr	s15, [r7, #28]
 80061b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80061ba:	edd7 7a04 	vldr	s15, [r7, #16]
 80061be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	1d1a      	adds	r2, r3, #4
 80061c6:	607a      	str	r2, [r7, #4]
 80061c8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80061cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80061d0:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 80061d4:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80061d8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80061dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80061e0:	edd7 7a06 	vldr	s15, [r7, #24]
 80061e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80061e8:	edd7 7a05 	vldr	s15, [r7, #20]
 80061ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	1d1a      	adds	r2, r3, #4
 80061f4:	607a      	str	r2, [r7, #4]
 80061f6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80061fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80061fe:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 8006202:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006204:	3308      	adds	r3, #8
 8006206:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 8006208:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800620a:	3b08      	subs	r3, #8
 800620c:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 800620e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006210:	3b01      	subs	r3, #1
 8006212:	64fb      	str	r3, [r7, #76]	; 0x4c
   } while (k > 0U);
 8006214:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006216:	2b00      	cmp	r3, #0
 8006218:	f47f af7f 	bne.w	800611a <stage_rfft_f32+0xba>
}
 800621c:	bf00      	nop
 800621e:	bf00      	nop
 8006220:	3754      	adds	r7, #84	; 0x54
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr

0800622a <merge_rfft_f32>:

/* Prepares data for inverse cfft */
void merge_rfft_f32(
arm_rfft_fast_instance_f32 * S,
float32_t * p, float32_t * pOut)
{
 800622a:	b480      	push	{r7}
 800622c:	b095      	sub	sp, #84	; 0x54
 800622e:	af00      	add	r7, sp, #0
 8006230:	60f8      	str	r0, [r7, #12]
 8006232:	60b9      	str	r1, [r7, #8]
 8006234:	607a      	str	r2, [r7, #4]
   uint32_t  k;								/* Loop Counter                     */
   float32_t twR, twI;						/* RFFT Twiddle coefficients        */
   float32_t *pCoeff = S->pTwiddleRFFT;		/* Points to RFFT Twiddle factors   */
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	695b      	ldr	r3, [r3, #20]
 800623a:	64bb      	str	r3, [r7, #72]	; 0x48
   float32_t *pA = p;						/* increasing pointer               */
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	647b      	str	r3, [r7, #68]	; 0x44
   float32_t *pB = p;						/* decreasing pointer               */
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	643b      	str	r3, [r7, #64]	; 0x40
   float32_t xAR, xAI, xBR, xBI;			/* temporary variables              */
   float32_t t1a, t1b, r, s, t, u;			/* temporary variables              */

   k = (S->Sint).fftLen - 1;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	881b      	ldrh	r3, [r3, #0]
 8006248:	3b01      	subs	r3, #1
 800624a:	64fb      	str	r3, [r7, #76]	; 0x4c

   xAR = pA[0];
 800624c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	63fb      	str	r3, [r7, #60]	; 0x3c
   xAI = pA[1];
 8006252:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	63bb      	str	r3, [r7, #56]	; 0x38

   pCoeff += 2 ;
 8006258:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800625a:	3308      	adds	r3, #8
 800625c:	64bb      	str	r3, [r7, #72]	; 0x48

   *pOut++ = 0.5f * ( xAR + xAI );
 800625e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8006262:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8006266:	ee77 7a27 	vadd.f32	s15, s14, s15
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	1d1a      	adds	r2, r3, #4
 800626e:	607a      	str	r2, [r7, #4]
 8006270:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006274:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006278:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( xAR - xAI );
 800627c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8006280:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8006284:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	1d1a      	adds	r2, r3, #4
 800628c:	607a      	str	r2, [r7, #4]
 800628e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006292:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006296:	edc3 7a00 	vstr	s15, [r3]

   pB  =  p + 2*k ;
 800629a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800629c:	00db      	lsls	r3, r3, #3
 800629e:	68ba      	ldr	r2, [r7, #8]
 80062a0:	4413      	add	r3, r2
 80062a2:	643b      	str	r3, [r7, #64]	; 0x40
   pA +=  2	   ;
 80062a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062a6:	3308      	adds	r3, #8
 80062a8:	647b      	str	r3, [r7, #68]	; 0x44

   while (k > 0U)
 80062aa:	e07c      	b.n	80063a6 <merge_rfft_f32+0x17c>
   {
      /* G is half of the frequency complex spectrum */
      //for k = 2:N
      //    Xk(k) = 1/2 * (G(k) + conj(G(N-k+2)) + Tw(k)*( G(k) - conj(G(N-k+2))));
      xBI =   pB[1]    ;
 80062ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	637b      	str	r3, [r7, #52]	; 0x34
      xBR =   pB[0]    ;
 80062b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	633b      	str	r3, [r7, #48]	; 0x30
      xAR =  pA[0];
 80062b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAI =  pA[1];
 80062be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	63bb      	str	r3, [r7, #56]	; 0x38

      twR = *pCoeff++;
 80062c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062c6:	1d1a      	adds	r2, r3, #4
 80062c8:	64ba      	str	r2, [r7, #72]	; 0x48
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 80062ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062d0:	1d1a      	adds	r2, r3, #4
 80062d2:	64ba      	str	r2, [r7, #72]	; 0x48
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xAR - xBR ;
 80062d8:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80062dc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80062e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80062e4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xAI + xBI ;
 80062e8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80062ec:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80062f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062f4:	edc7 7a08 	vstr	s15, [r7, #32]

      r = twR * t1a;
 80062f8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80062fc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8006300:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006304:	edc7 7a07 	vstr	s15, [r7, #28]
      s = twI * t1b;
 8006308:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800630c:	edd7 7a08 	vldr	s15, [r7, #32]
 8006310:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006314:	edc7 7a06 	vstr	s15, [r7, #24]
      t = twI * t1a;
 8006318:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800631c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8006320:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006324:	edc7 7a05 	vstr	s15, [r7, #20]
      u = twR * t1b;
 8006328:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800632c:	edd7 7a08 	vldr	s15, [r7, #32]
 8006330:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006334:	edc7 7a04 	vstr	s15, [r7, #16]

      // real(tw * (xA - xB)) = twR * (xAR - xBR) - twI * (xAI - xBI);
      // imag(tw * (xA - xB)) = twI * (xAR - xBR) + twR * (xAI - xBI);
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 8006338:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800633c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8006340:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006344:	edd7 7a07 	vldr	s15, [r7, #28]
 8006348:	ee37 7a67 	vsub.f32	s14, s14, s15
 800634c:	edd7 7a06 	vldr	s15, [r7, #24]
 8006350:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	1d1a      	adds	r2, r3, #4
 8006358:	607a      	str	r2, [r7, #4]
 800635a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800635e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006362:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 8006366:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800636a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800636e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006372:	edd7 7a05 	vldr	s15, [r7, #20]
 8006376:	ee37 7a27 	vadd.f32	s14, s14, s15
 800637a:	edd7 7a04 	vldr	s15, [r7, #16]
 800637e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	1d1a      	adds	r2, r3, #4
 8006386:	607a      	str	r2, [r7, #4]
 8006388:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800638c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006390:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 8006394:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006396:	3308      	adds	r3, #8
 8006398:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 800639a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800639c:	3b08      	subs	r3, #8
 800639e:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 80063a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063a2:	3b01      	subs	r3, #1
 80063a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   while (k > 0U)
 80063a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	f47f af7f 	bne.w	80062ac <merge_rfft_f32+0x82>
   }

}
 80063ae:	bf00      	nop
 80063b0:	bf00      	nop
 80063b2:	3754      	adds	r7, #84	; 0x54
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr

080063bc <arm_rfft_fast_f32>:

void arm_rfft_fast_f32(
arm_rfft_fast_instance_f32 * S,
float32_t * p, float32_t * pOut,
uint8_t ifftFlag)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b086      	sub	sp, #24
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	60b9      	str	r1, [r7, #8]
 80063c6:	607a      	str	r2, [r7, #4]
 80063c8:	70fb      	strb	r3, [r7, #3]
   arm_cfft_instance_f32 * Sint = &(S->Sint);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	617b      	str	r3, [r7, #20]
   Sint->fftLen = S->fftLenRFFT / 2;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	8a1b      	ldrh	r3, [r3, #16]
 80063d2:	085b      	lsrs	r3, r3, #1
 80063d4:	b29a      	uxth	r2, r3
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	801a      	strh	r2, [r3, #0]

   /* Calculation of Real FFT */
   if (ifftFlag)
 80063da:	78fb      	ldrb	r3, [r7, #3]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d00b      	beq.n	80063f8 <arm_rfft_fast_f32+0x3c>
   {
      /*  Real FFT compression */
      merge_rfft_f32(S, p, pOut);
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	68b9      	ldr	r1, [r7, #8]
 80063e4:	68f8      	ldr	r0, [r7, #12]
 80063e6:	f7ff ff20 	bl	800622a <merge_rfft_f32>

      /* Complex radix-4 IFFT process */
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 80063ea:	78fa      	ldrb	r2, [r7, #3]
 80063ec:	2301      	movs	r3, #1
 80063ee:	6879      	ldr	r1, [r7, #4]
 80063f0:	6978      	ldr	r0, [r7, #20]
 80063f2:	f7fe fd74 	bl	8004ede <arm_cfft_f32>
      arm_cfft_f32( Sint, p, ifftFlag, 1);

      /*  Real FFT extraction */
      stage_rfft_f32(S, p, pOut);
   }
}
 80063f6:	e00a      	b.n	800640e <arm_rfft_fast_f32+0x52>
      arm_cfft_f32( Sint, p, ifftFlag, 1);
 80063f8:	78fa      	ldrb	r2, [r7, #3]
 80063fa:	2301      	movs	r3, #1
 80063fc:	68b9      	ldr	r1, [r7, #8]
 80063fe:	6978      	ldr	r0, [r7, #20]
 8006400:	f7fe fd6d 	bl	8004ede <arm_cfft_f32>
      stage_rfft_f32(S, p, pOut);
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	68b9      	ldr	r1, [r7, #8]
 8006408:	68f8      	ldr	r0, [r7, #12]
 800640a:	f7ff fe29 	bl	8006060 <stage_rfft_f32>
}
 800640e:	bf00      	nop
 8006410:	3718      	adds	r7, #24
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
	...

08006418 <arm_rfft_fast_init_f32>:
* This Function also initializes Twiddle factor table pointer and Bit reversal table pointer.
*/
arm_status arm_rfft_fast_init_f32(
  arm_rfft_fast_instance_f32 * S,
  uint16_t fftLen)
{
 8006418:	b480      	push	{r7}
 800641a:	b085      	sub	sp, #20
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	460b      	mov	r3, r1
 8006422:	807b      	strh	r3, [r7, #2]
  arm_cfft_instance_f32 * Sint;
  /*  Initialise the default arm status */
  arm_status status = ARM_MATH_SUCCESS;
 8006424:	2300      	movs	r3, #0
 8006426:	73fb      	strb	r3, [r7, #15]
  /*  Initialise the FFT length */
  Sint = &(S->Sint);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	60bb      	str	r3, [r7, #8]
  Sint->fftLen = fftLen/2;
 800642c:	887b      	ldrh	r3, [r7, #2]
 800642e:	085b      	lsrs	r3, r3, #1
 8006430:	b29a      	uxth	r2, r3
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	801a      	strh	r2, [r3, #0]
  S->fftLenRFFT = fftLen;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	887a      	ldrh	r2, [r7, #2]
 800643a:	821a      	strh	r2, [r3, #16]

  /*  Initializations of structure parameters depending on the FFT length */
  switch (Sint->fftLen)
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	881b      	ldrh	r3, [r3, #0]
 8006440:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006444:	d023      	beq.n	800648e <arm_rfft_fast_init_f32+0x76>
 8006446:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800644a:	f300 808c 	bgt.w	8006566 <arm_rfft_fast_init_f32+0x14e>
 800644e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006452:	d02a      	beq.n	80064aa <arm_rfft_fast_init_f32+0x92>
 8006454:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006458:	f300 8085 	bgt.w	8006566 <arm_rfft_fast_init_f32+0x14e>
 800645c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006460:	d031      	beq.n	80064c6 <arm_rfft_fast_init_f32+0xae>
 8006462:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006466:	dc7e      	bgt.n	8006566 <arm_rfft_fast_init_f32+0x14e>
 8006468:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800646c:	d039      	beq.n	80064e2 <arm_rfft_fast_init_f32+0xca>
 800646e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006472:	dc78      	bgt.n	8006566 <arm_rfft_fast_init_f32+0x14e>
 8006474:	2b80      	cmp	r3, #128	; 0x80
 8006476:	d042      	beq.n	80064fe <arm_rfft_fast_init_f32+0xe6>
 8006478:	2b80      	cmp	r3, #128	; 0x80
 800647a:	dc74      	bgt.n	8006566 <arm_rfft_fast_init_f32+0x14e>
 800647c:	2b40      	cmp	r3, #64	; 0x40
 800647e:	d04b      	beq.n	8006518 <arm_rfft_fast_init_f32+0x100>
 8006480:	2b40      	cmp	r3, #64	; 0x40
 8006482:	dc70      	bgt.n	8006566 <arm_rfft_fast_init_f32+0x14e>
 8006484:	2b10      	cmp	r3, #16
 8006486:	d061      	beq.n	800654c <arm_rfft_fast_init_f32+0x134>
 8006488:	2b20      	cmp	r3, #32
 800648a:	d052      	beq.n	8006532 <arm_rfft_fast_init_f32+0x11a>
 800648c:	e06b      	b.n	8006566 <arm_rfft_fast_init_f32+0x14e>
  {
  case 2048U:
    /*  Initializations of structure parameters for 2048 point FFT */
    /*  Initialise the bit reversal table length */
    Sint->bitRevLength = ARMBITREVINDEXTABLE_2048_TABLE_LENGTH;
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	f44f 626e 	mov.w	r2, #3808	; 0xee0
 8006494:	819a      	strh	r2, [r3, #12]
    /*  Initialise the bit reversal table pointer */
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable2048;
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	4a38      	ldr	r2, [pc, #224]	; (800657c <arm_rfft_fast_init_f32+0x164>)
 800649a:	609a      	str	r2, [r3, #8]
    /*  Initialise the Twiddle coefficient pointers */
		Sint->pTwiddle     = (float32_t *) twiddleCoef_2048;
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	4a38      	ldr	r2, [pc, #224]	; (8006580 <arm_rfft_fast_init_f32+0x168>)
 80064a0:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_4096;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	4a37      	ldr	r2, [pc, #220]	; (8006584 <arm_rfft_fast_init_f32+0x16c>)
 80064a6:	615a      	str	r2, [r3, #20]
    break;
 80064a8:	e060      	b.n	800656c <arm_rfft_fast_init_f32+0x154>
  case 1024U:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_1024_TABLE_LENGTH;
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80064b0:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable1024;
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	4a34      	ldr	r2, [pc, #208]	; (8006588 <arm_rfft_fast_init_f32+0x170>)
 80064b6:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_1024;
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	4a34      	ldr	r2, [pc, #208]	; (800658c <arm_rfft_fast_init_f32+0x174>)
 80064bc:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_2048;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	4a33      	ldr	r2, [pc, #204]	; (8006590 <arm_rfft_fast_init_f32+0x178>)
 80064c2:	615a      	str	r2, [r3, #20]
    break;
 80064c4:	e052      	b.n	800656c <arm_rfft_fast_init_f32+0x154>
  case 512U:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_512_TABLE_LENGTH;
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 80064cc:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable512;
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	4a30      	ldr	r2, [pc, #192]	; (8006594 <arm_rfft_fast_init_f32+0x17c>)
 80064d2:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_512;
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	4a30      	ldr	r2, [pc, #192]	; (8006598 <arm_rfft_fast_init_f32+0x180>)
 80064d8:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_1024;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	4a2f      	ldr	r2, [pc, #188]	; (800659c <arm_rfft_fast_init_f32+0x184>)
 80064de:	615a      	str	r2, [r3, #20]
    break;
 80064e0:	e044      	b.n	800656c <arm_rfft_fast_init_f32+0x154>
  case 256U:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_256_TABLE_LENGTH;
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80064e8:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable256;
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	4a2c      	ldr	r2, [pc, #176]	; (80065a0 <arm_rfft_fast_init_f32+0x188>)
 80064ee:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_256;
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	4a2c      	ldr	r2, [pc, #176]	; (80065a4 <arm_rfft_fast_init_f32+0x18c>)
 80064f4:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_512;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4a2b      	ldr	r2, [pc, #172]	; (80065a8 <arm_rfft_fast_init_f32+0x190>)
 80064fa:	615a      	str	r2, [r3, #20]
    break;
 80064fc:	e036      	b.n	800656c <arm_rfft_fast_init_f32+0x154>
  case 128U:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_128_TABLE_LENGTH;
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	22d0      	movs	r2, #208	; 0xd0
 8006502:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable128;
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	4a29      	ldr	r2, [pc, #164]	; (80065ac <arm_rfft_fast_init_f32+0x194>)
 8006508:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_128;
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	4a28      	ldr	r2, [pc, #160]	; (80065b0 <arm_rfft_fast_init_f32+0x198>)
 800650e:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_256;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	4a28      	ldr	r2, [pc, #160]	; (80065b4 <arm_rfft_fast_init_f32+0x19c>)
 8006514:	615a      	str	r2, [r3, #20]
    break;
 8006516:	e029      	b.n	800656c <arm_rfft_fast_init_f32+0x154>
  case 64U:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_64_TABLE_LENGTH;
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	2238      	movs	r2, #56	; 0x38
 800651c:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable64;
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	4a25      	ldr	r2, [pc, #148]	; (80065b8 <arm_rfft_fast_init_f32+0x1a0>)
 8006522:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_64;
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	4a25      	ldr	r2, [pc, #148]	; (80065bc <arm_rfft_fast_init_f32+0x1a4>)
 8006528:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_128;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4a24      	ldr	r2, [pc, #144]	; (80065c0 <arm_rfft_fast_init_f32+0x1a8>)
 800652e:	615a      	str	r2, [r3, #20]
    break;
 8006530:	e01c      	b.n	800656c <arm_rfft_fast_init_f32+0x154>
  case 32U:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_32_TABLE_LENGTH;
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	2230      	movs	r2, #48	; 0x30
 8006536:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable32;
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	4a22      	ldr	r2, [pc, #136]	; (80065c4 <arm_rfft_fast_init_f32+0x1ac>)
 800653c:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_32;
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	4a21      	ldr	r2, [pc, #132]	; (80065c8 <arm_rfft_fast_init_f32+0x1b0>)
 8006542:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_64;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	4a21      	ldr	r2, [pc, #132]	; (80065cc <arm_rfft_fast_init_f32+0x1b4>)
 8006548:	615a      	str	r2, [r3, #20]
    break;
 800654a:	e00f      	b.n	800656c <arm_rfft_fast_init_f32+0x154>
  case 16U:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_16_TABLE_LENGTH;
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	2214      	movs	r2, #20
 8006550:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable16;
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	4a1e      	ldr	r2, [pc, #120]	; (80065d0 <arm_rfft_fast_init_f32+0x1b8>)
 8006556:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_16;
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	4a1e      	ldr	r2, [pc, #120]	; (80065d4 <arm_rfft_fast_init_f32+0x1bc>)
 800655c:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_32;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4a1d      	ldr	r2, [pc, #116]	; (80065d8 <arm_rfft_fast_init_f32+0x1c0>)
 8006562:	615a      	str	r2, [r3, #20]
    break;
 8006564:	e002      	b.n	800656c <arm_rfft_fast_init_f32+0x154>
  default:
    /*  Reporting argument error if fftSize is not valid value */
    status = ARM_MATH_ARGUMENT_ERROR;
 8006566:	23ff      	movs	r3, #255	; 0xff
 8006568:	73fb      	strb	r3, [r7, #15]
    break;
 800656a:	bf00      	nop
  }

  return (status);
 800656c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006570:	4618      	mov	r0, r3
 8006572:	3714      	adds	r7, #20
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr
 800657c:	0801f134 	.word	0x0801f134
 8006580:	0801999c 	.word	0x0801999c
 8006584:	08024e74 	.word	0x08024e74
 8006588:	0801e324 	.word	0x0801e324
 800658c:	0801799c 	.word	0x0801799c
 8006590:	08022e74 	.word	0x08022e74
 8006594:	0801dfa4 	.word	0x0801dfa4
 8006598:	0801699c 	.word	0x0801699c
 800659c:	08021e74 	.word	0x08021e74
 80065a0:	0801dc34 	.word	0x0801dc34
 80065a4:	0801619c 	.word	0x0801619c
 80065a8:	08021674 	.word	0x08021674
 80065ac:	0801da94 	.word	0x0801da94
 80065b0:	08015d9c 	.word	0x08015d9c
 80065b4:	08021274 	.word	0x08021274
 80065b8:	0801da24 	.word	0x0801da24
 80065bc:	08015b9c 	.word	0x08015b9c
 80065c0:	08021074 	.word	0x08021074
 80065c4:	0801d9c4 	.word	0x0801d9c4
 80065c8:	08015a9c 	.word	0x08015a9c
 80065cc:	08020f74 	.word	0x08020f74
 80065d0:	0801d99c 	.word	0x0801d99c
 80065d4:	08015a1c 	.word	0x08015a1c
 80065d8:	08020ef4 	.word	0x08020ef4

080065dc <arm_relu_q7>:
   * Optimized relu with QSUB instructions.
   *
   */

void arm_relu_q7(q7_t * data, uint16_t size)
{
 80065dc:	b480      	push	{r7}
 80065de:	b08f      	sub	sp, #60	; 0x3c
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	460b      	mov	r3, r1
 80065e6:	807b      	strh	r3, [r7, #2]

#if defined (ARM_MATH_DSP)
    /* Run the following code for Cortex-M4 and Cortex-M7 */

    uint16_t  i = size >> 2;
 80065e8:	887b      	ldrh	r3, [r7, #2]
 80065ea:	089b      	lsrs	r3, r3, #2
 80065ec:	86fb      	strh	r3, [r7, #54]	; 0x36
    q7_t     *pIn = data;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	613b      	str	r3, [r7, #16]
    q7_t     *pOut = data;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	60fb      	str	r3, [r7, #12]
    q31_t     in;
    q31_t     buf;
    q31_t     mask;

    while (i)
 80065f6:	e032      	b.n	800665e <arm_relu_q7+0x82>
    {
        in = *__SIMD32(pIn)++;
 80065f8:	f107 0210 	add.w	r2, r7, #16
 80065fc:	6813      	ldr	r3, [r2, #0]
 80065fe:	1d19      	adds	r1, r3, #4
 8006600:	6011      	str	r1, [r2, #0]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	633b      	str	r3, [r7, #48]	; 0x30

        /* extract the first bit */
        buf = __ROR(in & 0x80808080, 7);
 8006606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006608:	f003 3380 	and.w	r3, r3, #2155905152	; 0x80808080
 800660c:	61bb      	str	r3, [r7, #24]
 800660e:	2307      	movs	r3, #7
 8006610:	617b      	str	r3, [r7, #20]
  op2 %= 32U;
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	f003 031f 	and.w	r3, r3, #31
 8006618:	617b      	str	r3, [r7, #20]
  if (op2 == 0U)
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d101      	bne.n	8006624 <arm_relu_q7+0x48>
    return op1;
 8006620:	69bb      	ldr	r3, [r7, #24]
 8006622:	e003      	b.n	800662c <arm_relu_q7+0x50>
  return (op1 >> op2) | (op1 << (32U - op2));
 8006624:	69ba      	ldr	r2, [r7, #24]
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	fa62 f303 	ror.w	r3, r2, r3
 800662c:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* if MSB=1, mask will be 0xFF, 0x0 otherwise */
        mask = __QSUB8(0x00000000, buf);
 800662e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006630:	2200      	movs	r2, #0
 8006632:	627a      	str	r2, [r7, #36]	; 0x24
 8006634:	623b      	str	r3, [r7, #32]

__STATIC_FORCEINLINE uint32_t __QSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM volatile ("qsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8006636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006638:	6a3a      	ldr	r2, [r7, #32]
 800663a:	fac3 f312 	qsub8	r3, r3, r2
 800663e:	61fb      	str	r3, [r7, #28]
  return(result);
 8006640:	69fb      	ldr	r3, [r7, #28]
 8006642:	62bb      	str	r3, [r7, #40]	; 0x28

        *__SIMD32(pOut)++ = in & (~mask);
 8006644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006646:	43d9      	mvns	r1, r3
 8006648:	f107 020c 	add.w	r2, r7, #12
 800664c:	6813      	ldr	r3, [r2, #0]
 800664e:	1d18      	adds	r0, r3, #4
 8006650:	6010      	str	r0, [r2, #0]
 8006652:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006654:	400a      	ands	r2, r1
 8006656:	601a      	str	r2, [r3, #0]
        i--;
 8006658:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800665a:	3b01      	subs	r3, #1
 800665c:	86fb      	strh	r3, [r7, #54]	; 0x36
    while (i)
 800665e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006660:	2b00      	cmp	r3, #0
 8006662:	d1c9      	bne.n	80065f8 <arm_relu_q7+0x1c>
    }

    i = size & 0x3;
 8006664:	887b      	ldrh	r3, [r7, #2]
 8006666:	f003 0303 	and.w	r3, r3, #3
 800666a:	86fb      	strh	r3, [r7, #54]	; 0x36
    while (i)
 800666c:	e00d      	b.n	800668a <arm_relu_q7+0xae>
    {
        if (*pIn < 0)
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	f993 3000 	ldrsb.w	r3, [r3]
 8006674:	2b00      	cmp	r3, #0
 8006676:	da02      	bge.n	800667e <arm_relu_q7+0xa2>
        {
            *pIn = 0;
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	2200      	movs	r2, #0
 800667c:	701a      	strb	r2, [r3, #0]
        }
        pIn++;
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	3301      	adds	r3, #1
 8006682:	613b      	str	r3, [r7, #16]
        i--;
 8006684:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006686:	3b01      	subs	r3, #1
 8006688:	86fb      	strh	r3, [r7, #54]	; 0x36
    while (i)
 800668a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800668c:	2b00      	cmp	r3, #0
 800668e:	d1ee      	bne.n	800666e <arm_relu_q7+0x92>
            data[i] = 0;
    }

#endif                          /* ARM_MATH_DSP */

}
 8006690:	bf00      	nop
 8006692:	bf00      	nop
 8006694:	373c      	adds	r7, #60	; 0x3c
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr

0800669e <arm_convolve_1x1_HWC_q7_fast_nonsquare>:
                                                  q7_t * Im_out,
                                                  const uint16_t dim_im_out_x,
                                                  const uint16_t dim_im_out_y, 
                                                  q15_t * bufferA, 
                                                  q7_t * bufferB)
{
 800669e:	b580      	push	{r7, lr}
 80066a0:	b0aa      	sub	sp, #168	; 0xa8
 80066a2:	af04      	add	r7, sp, #16
 80066a4:	60f8      	str	r0, [r7, #12]
 80066a6:	4608      	mov	r0, r1
 80066a8:	4611      	mov	r1, r2
 80066aa:	461a      	mov	r2, r3
 80066ac:	4603      	mov	r3, r0
 80066ae:	817b      	strh	r3, [r7, #10]
 80066b0:	460b      	mov	r3, r1
 80066b2:	813b      	strh	r3, [r7, #8]
 80066b4:	4613      	mov	r3, r2
 80066b6:	80fb      	strh	r3, [r7, #6]
    /* -----------------------
     *  Here we use bufferA as q15_t internally as computation are done with q15_t level
     *  im2col are done to output in q15_t format from q7_t input
     */

    q15_t    *pBuffer = bufferA;
 80066b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    q7_t     *pOut = Im_out;
 80066c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80066c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    if (ch_im_in % 4 != 0 || ch_im_out % 2 != 0 || dim_kernel_x != 1 || dim_kernel_y != 1
 80066c8:	88fb      	ldrh	r3, [r7, #6]
 80066ca:	f003 0303 	and.w	r3, r3, #3
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d11e      	bne.n	8006712 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x74>
 80066d4:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 80066d8:	f003 0301 	and.w	r3, r3, #1
 80066dc:	b29b      	uxth	r3, r3
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d117      	bne.n	8006712 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x74>
 80066e2:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d113      	bne.n	8006712 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x74>
 80066ea:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d10f      	bne.n	8006712 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x74>
        || padding_x != 0 || padding_y != 0 || stride_x != 1 || stride_y != 1)
 80066f2:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d10b      	bne.n	8006712 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x74>
 80066fa:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d107      	bne.n	8006712 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x74>
 8006702:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8006706:	2b01      	cmp	r3, #1
 8006708:	d103      	bne.n	8006712 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x74>
 800670a:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 800670e:	2b01      	cmp	r3, #1
 8006710:	d002      	beq.n	8006718 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x7a>
    {
        /* check if the input dimension meets the constraints */
        return ARM_MATH_SIZE_MISMATCH;
 8006712:	f06f 0302 	mvn.w	r3, #2
 8006716:	e162      	b.n	80069de <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x340>
    }

    for (i_out_y = 0; i_out_y < dim_im_out_y; i_out_y++)
 8006718:	2300      	movs	r3, #0
 800671a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 800671e:	e05f      	b.n	80067e0 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x142>
    {
        for (i_out_x = 0; i_out_x < dim_im_out_x; i_out_x++)
 8006720:	2300      	movs	r3, #0
 8006722:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8006726:	e04e      	b.n	80067c6 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x128>
        {
            /* This part implements the im2col function */
            arm_q7_to_q15_reordered_no_shift((q7_t *) Im_in + (i_out_y * dim_im_in_x + i_out_x) * ch_im_in, pBuffer,
 8006728:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 800672c:	897a      	ldrh	r2, [r7, #10]
 800672e:	fb02 f203 	mul.w	r2, r2, r3
 8006732:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 8006736:	4413      	add	r3, r2
 8006738:	88fa      	ldrh	r2, [r7, #6]
 800673a:	fb02 f303 	mul.w	r3, r2, r3
 800673e:	461a      	mov	r2, r3
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	4413      	add	r3, r2
 8006744:	88fa      	ldrh	r2, [r7, #6]
 8006746:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800674a:	4618      	mov	r0, r3
 800674c:	f002 fbd4 	bl	8008ef8 <arm_q7_to_q15_reordered_no_shift>
                                             ch_im_in);
            pBuffer += ch_im_in;
 8006750:	88fb      	ldrh	r3, [r7, #6]
 8006752:	005b      	lsls	r3, r3, #1
 8006754:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8006758:	4413      	add	r3, r2
 800675a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel_x * dim_kernel_y)
 800675e:	88fb      	ldrh	r3, [r7, #6]
 8006760:	f8b7 20a8 	ldrh.w	r2, [r7, #168]	; 0xa8
 8006764:	fb02 f303 	mul.w	r3, r2, r3
 8006768:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 800676c:	fb02 f303 	mul.w	r3, r2, r3
 8006770:	009b      	lsls	r3, r3, #2
 8006772:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8006776:	4413      	add	r3, r2
 8006778:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800677c:	429a      	cmp	r2, r3
 800677e:	d11b      	bne.n	80067b8 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x11a>
            {
                pOut =
                    arm_nn_mat_mult_kernel_q7_q15_reordered(wt, bufferA, ch_im_out, ch_im_in, bias_shift, out_shift, bias, pOut);
 8006780:	88f9      	ldrh	r1, [r7, #6]
 8006782:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8006786:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800678a:	9303      	str	r3, [sp, #12]
 800678c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006790:	9302      	str	r3, [sp, #8]
 8006792:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8006796:	9301      	str	r3, [sp, #4]
 8006798:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 800679c:	9300      	str	r3, [sp, #0]
 800679e:	460b      	mov	r3, r1
 80067a0:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80067a4:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80067a8:	f001 fcea 	bl	8008180 <arm_nn_mat_mult_kernel_q7_q15_reordered>
 80067ac:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
                /* counter reset */
                pBuffer = bufferA;
 80067b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80067b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        for (i_out_x = 0; i_out_x < dim_im_out_x; i_out_x++)
 80067b8:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 80067bc:	b29b      	uxth	r3, r3
 80067be:	3301      	adds	r3, #1
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80067c6:	f9b7 2094 	ldrsh.w	r2, [r7, #148]	; 0x94
 80067ca:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
 80067ce:	429a      	cmp	r2, r3
 80067d0:	dbaa      	blt.n	8006728 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x8a>
    for (i_out_y = 0; i_out_y < dim_im_out_y; i_out_y++)
 80067d2:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	3301      	adds	r3, #1
 80067da:	b29b      	uxth	r3, r3
 80067dc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 80067e0:	f9b7 2096 	ldrsh.w	r2, [r7, #150]	; 0x96
 80067e4:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 80067e8:	429a      	cmp	r2, r3
 80067ea:	db99      	blt.n	8006720 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x82>
            }
        }
    }

    /* check if there is left-over for compute */
    if (pBuffer != bufferA)
 80067ec:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80067f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80067f4:	429a      	cmp	r2, r3
 80067f6:	f000 80f1 	beq.w	80069dc <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x33e>
    {
        const q7_t *pA = wt;
 80067fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80067fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        for (i_ch_out = 0; i_ch_out < ch_im_out; i_ch_out++)
 8006802:	2300      	movs	r3, #0
 8006804:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 8006808:	e0e1      	b.n	80069ce <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x330>
        {
            q31_t     sum = ((q31_t)(bias[i_ch_out]) << bias_shift) + NN_ROUND(out_shift);
 800680a:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 800680e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006812:	4413      	add	r3, r2
 8006814:	f993 3000 	ldrsb.w	r3, [r3]
 8006818:	461a      	mov	r2, r3
 800681a:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 800681e:	409a      	lsls	r2, r3
 8006820:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8006824:	3b01      	subs	r3, #1
 8006826:	2101      	movs	r1, #1
 8006828:	fa01 f303 	lsl.w	r3, r1, r3
 800682c:	4413      	add	r3, r2
 800682e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            q15_t    *pB = bufferA;
 8006832:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006836:	623b      	str	r3, [r7, #32]
            /* basically each time it process 4 entries */
            uint16_t  colCnt = ch_im_in * dim_kernel_x * dim_kernel_y >> 2;
 8006838:	88fb      	ldrh	r3, [r7, #6]
 800683a:	f8b7 20a8 	ldrh.w	r2, [r7, #168]	; 0xa8
 800683e:	fb02 f303 	mul.w	r3, r2, r3
 8006842:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 8006846:	fb02 f303 	mul.w	r3, r2, r3
 800684a:	109b      	asrs	r3, r3, #2
 800684c:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

            while (colCnt)
 8006850:	e06b      	b.n	800692a <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x28c>
 8006852:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006856:	617b      	str	r3, [r7, #20]
 8006858:	f107 031c 	add.w	r3, r7, #28
 800685c:	647b      	str	r3, [r7, #68]	; 0x44
 800685e:	f107 0318 	add.w	r3, r7, #24
 8006862:	643b      	str	r3, [r7, #64]	; 0x40
 * @brief read and expand one Q7 word into two Q15 words with reordering
 */

__STATIC_FORCEINLINE void *read_and_pad_reordered(void *source, q31_t * out1, q31_t * out2)
{
        q31_t     inA = *__SIMD32(source)++;
 8006864:	f107 0214 	add.w	r2, r7, #20
 8006868:	6813      	ldr	r3, [r2, #0]
 800686a:	1d19      	adds	r1, r3, #4
 800686c:	6011      	str	r1, [r2, #0]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	63fb      	str	r3, [r7, #60]	; 0x3c
#ifndef ARM_MATH_BIG_ENDIAN
        *out2 = __SXTB16(__ROR(inA, 8));
 8006872:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006874:	63bb      	str	r3, [r7, #56]	; 0x38
 8006876:	2308      	movs	r3, #8
 8006878:	637b      	str	r3, [r7, #52]	; 0x34
  op2 %= 32U;
 800687a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800687c:	f003 031f 	and.w	r3, r3, #31
 8006880:	637b      	str	r3, [r7, #52]	; 0x34
  if (op2 == 0U)
 8006882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006884:	2b00      	cmp	r3, #0
 8006886:	d101      	bne.n	800688c <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x1ee>
    return op1;
 8006888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800688a:	e003      	b.n	8006894 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x1f6>
  return (op1 >> op2) | (op1 << (32U - op2));
 800688c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800688e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006890:	fa62 f303 	ror.w	r3, r2, r3
 8006894:	633b      	str	r3, [r7, #48]	; 0x30

__STATIC_FORCEINLINE uint32_t __SXTB16(uint32_t op1)
{
  uint32_t result;

  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8006896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006898:	fa2f f383 	sxtb16	r3, r3
 800689c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 800689e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a0:	461a      	mov	r2, r3
 80068a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068a4:	601a      	str	r2, [r3, #0]
        *out1 = __SXTB16(inA);
 80068a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068a8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80068aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ac:	fa2f f383 	sxtb16	r3, r3
 80068b0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80068b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b4:	461a      	mov	r2, r3
 80068b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068b8:	601a      	str	r2, [r3, #0]
#else
        *out1 = __SXTB16(__ROR(inA, 8));
        *out2 = __SXTB16(inA);
#endif

        return source;
 80068ba:	697b      	ldr	r3, [r7, #20]
            {

                q31_t     inA1, inA2;
                q31_t     inB1, inB2;

                pA = (const q7_t *)read_and_pad_reordered((void *)pA, &inA1, &inA2);
 80068bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

                inB1 = *__SIMD32(pB)++;
 80068c0:	f107 0220 	add.w	r2, r7, #32
 80068c4:	6813      	ldr	r3, [r2, #0]
 80068c6:	1d19      	adds	r1, r3, #4
 80068c8:	6011      	str	r1, [r2, #0]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	66fb      	str	r3, [r7, #108]	; 0x6c
                sum = __SMLAD(inA1, inB1, sum);
 80068ce:	69fb      	ldr	r3, [r7, #28]
 80068d0:	4619      	mov	r1, r3
 80068d2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80068d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80068d8:	6579      	str	r1, [r7, #84]	; 0x54
 80068da:	653a      	str	r2, [r7, #80]	; 0x50
 80068dc:	64fb      	str	r3, [r7, #76]	; 0x4c

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80068de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068e0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80068e2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80068e4:	fb23 1302 	smlad	r3, r3, r2, r1
 80068e8:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80068ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                inB2 = *__SIMD32(pB)++;
 80068f0:	f107 0220 	add.w	r2, r7, #32
 80068f4:	6813      	ldr	r3, [r2, #0]
 80068f6:	1d19      	adds	r1, r3, #4
 80068f8:	6011      	str	r1, [r2, #0]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	66bb      	str	r3, [r7, #104]	; 0x68
                sum = __SMLAD(inA2, inB2, sum);
 80068fe:	69bb      	ldr	r3, [r7, #24]
 8006900:	4619      	mov	r1, r3
 8006902:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006904:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006908:	6679      	str	r1, [r7, #100]	; 0x64
 800690a:	663a      	str	r2, [r7, #96]	; 0x60
 800690c:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800690e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006910:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006912:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8006914:	fb23 1302 	smlad	r3, r3, r2, r1
 8006918:	65bb      	str	r3, [r7, #88]	; 0x58
  return(result);
 800691a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800691c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                colCnt--;
 8006920:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8006924:	3b01      	subs	r3, #1
 8006926:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
            while (colCnt)
 800692a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800692e:	2b00      	cmp	r3, #0
 8006930:	d18f      	bne.n	8006852 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x1b4>
            }
            colCnt = ch_im_in * dim_kernel_y * dim_kernel_x & 0x3;
 8006932:	88fa      	ldrh	r2, [r7, #6]
 8006934:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8006938:	fb12 f303 	smulbb	r3, r2, r3
 800693c:	b29b      	uxth	r3, r3
 800693e:	f8b7 20a8 	ldrh.w	r2, [r7, #168]	; 0xa8
 8006942:	fb12 f303 	smulbb	r3, r2, r3
 8006946:	b29b      	uxth	r3, r3
 8006948:	f003 0303 	and.w	r3, r3, #3
 800694c:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
            while (colCnt)
 8006950:	e01d      	b.n	800698e <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x2f0>
            {
                q7_t      inA1 = *pA++;
 8006952:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006956:	1c5a      	adds	r2, r3, #1
 8006958:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
                q15_t     inB1 = *pB++;
 8006962:	6a3b      	ldr	r3, [r7, #32]
 8006964:	1c9a      	adds	r2, r3, #2
 8006966:	623a      	str	r2, [r7, #32]
 8006968:	881b      	ldrh	r3, [r3, #0]
 800696a:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
                sum += inA1 * inB1;
 800696e:	f997 3073 	ldrsb.w	r3, [r7, #115]	; 0x73
 8006972:	f9b7 2070 	ldrsh.w	r2, [r7, #112]	; 0x70
 8006976:	fb02 f303 	mul.w	r3, r2, r3
 800697a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800697e:	4413      	add	r3, r2
 8006980:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                colCnt--;
 8006984:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8006988:	3b01      	subs	r3, #1
 800698a:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
            while (colCnt)
 800698e:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8006992:	2b00      	cmp	r3, #0
 8006994:	d1dd      	bne.n	8006952 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x2b4>
            }
            *pOut = (q7_t) __SSAT((sum >> out_shift), 8);
 8006996:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 800699a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800699e:	fa42 f303 	asr.w	r3, r2, r3
 80069a2:	67bb      	str	r3, [r7, #120]	; 0x78
 80069a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069a6:	f303 0307 	ssat	r3, #8, r3
 80069aa:	677b      	str	r3, [r7, #116]	; 0x74
 80069ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069ae:	b25a      	sxtb	r2, r3
 80069b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80069b4:	701a      	strb	r2, [r3, #0]
            pOut++;
 80069b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80069ba:	3301      	adds	r3, #1
 80069bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (i_ch_out = 0; i_ch_out < ch_im_out; i_ch_out++)
 80069c0:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	3301      	adds	r3, #1
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 80069ce:	f9b7 2092 	ldrsh.w	r2, [r7, #146]	; 0x92
 80069d2:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 80069d6:	429a      	cmp	r2, r3
 80069d8:	f6ff af17 	blt.w	800680a <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x16c>
    }

#endif                          /* ARM_MATH_DSP */

    /* Return to application */
    return ARM_MATH_SUCCESS;
 80069dc:	2300      	movs	r3, #0
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3798      	adds	r7, #152	; 0x98
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
	...

080069e8 <arm_convolve_HWC_q7_basic_nonsquare>:
                                               q7_t * Im_out,
                                               const uint16_t dim_im_out_x,
                                               const uint16_t dim_im_out_y,
                                               q15_t * bufferA,
                                               q7_t * bufferB)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b0ac      	sub	sp, #176	; 0xb0
 80069ec:	af04      	add	r7, sp, #16
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	4608      	mov	r0, r1
 80069f2:	4611      	mov	r1, r2
 80069f4:	461a      	mov	r2, r3
 80069f6:	4603      	mov	r3, r0
 80069f8:	817b      	strh	r3, [r7, #10]
 80069fa:	460b      	mov	r3, r1
 80069fc:	813b      	strh	r3, [r7, #8]
 80069fe:	4613      	mov	r3, r2
 8006a00:	80fb      	strh	r3, [r7, #6]

    /* 
     *  Here we use bufferA as q15_t internally as computation are done with q15_t level
     *  im2col are done to output in q15_t format from q7_t input
     */
    q15_t    *pBuffer = bufferA;
 8006a02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    q7_t     *pOut = Im_out;
 8006a0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

    /* This part implements the im2col function */
    for (i_out_y = 0; i_out_y < dim_im_out_y; i_out_y++)
 8006a12:	2300      	movs	r3, #0
 8006a14:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 8006a18:	e0cf      	b.n	8006bba <arm_convolve_HWC_q7_basic_nonsquare+0x1d2>
    {
        for (i_out_x = 0; i_out_x < dim_im_out_x; i_out_x++)
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8006a20:	e0bd      	b.n	8006b9e <arm_convolve_HWC_q7_basic_nonsquare+0x1b6>
        {
            for (i_ker_y = i_out_y * stride_y - padding_y; i_ker_y < i_out_y * stride_y - padding_y + dim_kernel_y; i_ker_y++)
 8006a22:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8006a26:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	; 0xc4
 8006a2a:	fb12 f303 	smulbb	r3, r2, r3
 8006a2e:	b29a      	uxth	r2, r3
 8006a30:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8006a34:	1ad3      	subs	r3, r2, r3
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8006a3c:	e061      	b.n	8006b02 <arm_convolve_HWC_q7_basic_nonsquare+0x11a>
            {
                for (i_ker_x = i_out_x * stride_x - padding_x; i_ker_x < i_out_x * stride_x - padding_x + dim_kernel_x; i_ker_x++)
 8006a3e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8006a42:	f8b7 20c0 	ldrh.w	r2, [r7, #192]	; 0xc0
 8006a46:	fb12 f303 	smulbb	r3, r2, r3
 8006a4a:	b29a      	uxth	r2, r3
 8006a4c:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8006a50:	1ad3      	subs	r3, r2, r3
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8006a58:	e03c      	b.n	8006ad4 <arm_convolve_HWC_q7_basic_nonsquare+0xec>
                {
                    if (i_ker_y < 0 || i_ker_y >= dim_im_in_y || i_ker_x < 0 || i_ker_x >= dim_im_in_x)
 8006a5a:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	db0d      	blt.n	8006a7e <arm_convolve_HWC_q7_basic_nonsquare+0x96>
 8006a62:	f9b7 209a 	ldrsh.w	r2, [r7, #154]	; 0x9a
 8006a66:	893b      	ldrh	r3, [r7, #8]
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	da08      	bge.n	8006a7e <arm_convolve_HWC_q7_basic_nonsquare+0x96>
 8006a6c:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	db04      	blt.n	8006a7e <arm_convolve_HWC_q7_basic_nonsquare+0x96>
 8006a74:	f9b7 2098 	ldrsh.w	r2, [r7, #152]	; 0x98
 8006a78:	897b      	ldrh	r3, [r7, #10]
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	db08      	blt.n	8006a90 <arm_convolve_HWC_q7_basic_nonsquare+0xa8>
                    {
                        /* Filling 0 for out-of-bound paddings */
                        /* arm_fill_q15(0, pBuffer, ch_im_in); */
                        memset(pBuffer, 0, sizeof(q15_t)*ch_im_in);
 8006a7e:	88fb      	ldrh	r3, [r7, #6]
 8006a80:	005b      	lsls	r3, r3, #1
 8006a82:	461a      	mov	r2, r3
 8006a84:	2100      	movs	r1, #0
 8006a86:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8006a8a:	f008 fe85 	bl	800f798 <memset>
 8006a8e:	e013      	b.n	8006ab8 <arm_convolve_HWC_q7_basic_nonsquare+0xd0>
                    } else
                    {
                        /* Copying the pixel data to column */
                        arm_q7_to_q15_no_shift((q7_t *)
                                               Im_in + (i_ker_y * dim_im_in_x + i_ker_x) * ch_im_in, pBuffer, ch_im_in);
 8006a90:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 8006a94:	897a      	ldrh	r2, [r7, #10]
 8006a96:	fb02 f203 	mul.w	r2, r2, r3
 8006a9a:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8006a9e:	4413      	add	r3, r2
 8006aa0:	88fa      	ldrh	r2, [r7, #6]
 8006aa2:	fb02 f303 	mul.w	r3, r2, r3
 8006aa6:	461a      	mov	r2, r3
                        arm_q7_to_q15_no_shift((q7_t *)
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	4413      	add	r3, r2
 8006aac:	88fa      	ldrh	r2, [r7, #6]
 8006aae:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f002 f9ae 	bl	8008e14 <arm_q7_to_q15_no_shift>
                    }
                    pBuffer += ch_im_in;
 8006ab8:	88fb      	ldrh	r3, [r7, #6]
 8006aba:	005b      	lsls	r3, r3, #1
 8006abc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006ac0:	4413      	add	r3, r2
 8006ac2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                for (i_ker_x = i_out_x * stride_x - padding_x; i_ker_x < i_out_x * stride_x - padding_x + dim_kernel_x; i_ker_x++)
 8006ac6:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	3301      	adds	r3, #1
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8006ad4:	f9b7 2098 	ldrsh.w	r2, [r7, #152]	; 0x98
 8006ad8:	f9b7 309c 	ldrsh.w	r3, [r7, #156]	; 0x9c
 8006adc:	f8b7 10c0 	ldrh.w	r1, [r7, #192]	; 0xc0
 8006ae0:	fb01 f103 	mul.w	r1, r1, r3
 8006ae4:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8006ae8:	1ac9      	subs	r1, r1, r3
 8006aea:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8006aee:	440b      	add	r3, r1
 8006af0:	429a      	cmp	r2, r3
 8006af2:	dbb2      	blt.n	8006a5a <arm_convolve_HWC_q7_basic_nonsquare+0x72>
            for (i_ker_y = i_out_y * stride_y - padding_y; i_ker_y < i_out_y * stride_y - padding_y + dim_kernel_y; i_ker_y++)
 8006af4:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	3301      	adds	r3, #1
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8006b02:	f9b7 209a 	ldrsh.w	r2, [r7, #154]	; 0x9a
 8006b06:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	; 0x9e
 8006b0a:	f8b7 10c4 	ldrh.w	r1, [r7, #196]	; 0xc4
 8006b0e:	fb01 f103 	mul.w	r1, r1, r3
 8006b12:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8006b16:	1ac9      	subs	r1, r1, r3
 8006b18:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006b1c:	440b      	add	r3, r1
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	db8d      	blt.n	8006a3e <arm_convolve_HWC_q7_basic_nonsquare+0x56>
                }
            }

            /* Computation is filed for every 2 columns */
            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel_y * dim_kernel_x)
 8006b22:	88fb      	ldrh	r3, [r7, #6]
 8006b24:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	; 0xb4
 8006b28:	fb02 f303 	mul.w	r3, r2, r3
 8006b2c:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 8006b30:	fb02 f303 	mul.w	r3, r2, r3
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006b3a:	4413      	add	r3, r2
 8006b3c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d125      	bne.n	8006b90 <arm_convolve_HWC_q7_basic_nonsquare+0x1a8>
            {
                pOut =
                    arm_nn_mat_mult_kernel_q7_q15(wt, bufferA,
 8006b44:	88fa      	ldrh	r2, [r7, #6]
 8006b46:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006b4a:	fb12 f303 	smulbb	r3, r2, r3
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 8006b54:	fb12 f303 	smulbb	r3, r2, r3
 8006b58:	b299      	uxth	r1, r3
 8006b5a:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 8006b5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006b62:	9303      	str	r3, [sp, #12]
 8006b64:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006b68:	9302      	str	r3, [sp, #8]
 8006b6a:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
 8006b6e:	9301      	str	r3, [sp, #4]
 8006b70:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 8006b74:	9300      	str	r3, [sp, #0]
 8006b76:	460b      	mov	r3, r1
 8006b78:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8006b7c:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8006b80:	f000 fd8c 	bl	800769c <arm_nn_mat_mult_kernel_q7_q15>
 8006b84:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
                                                  ch_im_out,
                                                  ch_im_in *
                                                  dim_kernel_y * dim_kernel_x, bias_shift, out_shift, bias, pOut);

                /* counter reset */
                pBuffer = bufferA;
 8006b88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b8c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        for (i_out_x = 0; i_out_x < dim_im_out_x; i_out_x++)
 8006b90:	f9b7 309c 	ldrsh.w	r3, [r7, #156]	; 0x9c
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	3301      	adds	r3, #1
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8006b9e:	f9b7 209c 	ldrsh.w	r2, [r7, #156]	; 0x9c
 8006ba2:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	f6ff af3b 	blt.w	8006a22 <arm_convolve_HWC_q7_basic_nonsquare+0x3a>
    for (i_out_y = 0; i_out_y < dim_im_out_y; i_out_y++)
 8006bac:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	; 0x9e
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 8006bba:	f9b7 209e 	ldrsh.w	r2, [r7, #158]	; 0x9e
 8006bbe:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	; 0xdc
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	f6ff af29 	blt.w	8006a1a <arm_convolve_HWC_q7_basic_nonsquare+0x32>
            }
        }
    }

    /* left-over because odd number of output pixels */
    if (pBuffer != bufferA)
 8006bc8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006bcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	f000 80fa 	beq.w	8006dca <arm_convolve_HWC_q7_basic_nonsquare+0x3e2>
    {
        const q7_t *pA = wt;
 8006bd6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006bda:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        int       i;

        for (i = 0; i < ch_im_out; i++)
 8006bde:	2300      	movs	r3, #0
 8006be0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006be4:	e0ea      	b.n	8006dbc <arm_convolve_HWC_q7_basic_nonsquare+0x3d4>
        {
            /* Load the accumulator with bias first */
            q31_t     sum = ((q31_t)bias[i] << bias_shift) + NN_ROUND(out_shift);
 8006be6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006bea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006bee:	4413      	add	r3, r2
 8006bf0:	f993 3000 	ldrsb.w	r3, [r3]
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 8006bfa:	409a      	lsls	r2, r3
 8006bfc:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
 8006c00:	3b01      	subs	r3, #1
 8006c02:	2101      	movs	r1, #1
 8006c04:	fa01 f303 	lsl.w	r3, r1, r3
 8006c08:	4413      	add	r3, r2
 8006c0a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

            /* Point to the beging of the im2col buffer */
            q15_t    *pB = bufferA;
 8006c0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c12:	61fb      	str	r3, [r7, #28]

            /* Each time it process 4 entries */
            uint16_t  colCnt = ch_im_in * dim_kernel_y * dim_kernel_x >> 2;
 8006c14:	88fb      	ldrh	r3, [r7, #6]
 8006c16:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	; 0xb4
 8006c1a:	fb02 f303 	mul.w	r3, r2, r3
 8006c1e:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 8006c22:	fb02 f303 	mul.w	r3, r2, r3
 8006c26:	109b      	asrs	r3, r3, #2
 8006c28:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82

            while (colCnt)
 8006c2c:	e078      	b.n	8006d20 <arm_convolve_HWC_q7_basic_nonsquare+0x338>
 8006c2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c32:	613b      	str	r3, [r7, #16]
 8006c34:	f107 0318 	add.w	r3, r7, #24
 8006c38:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c3a:	f107 0314 	add.w	r3, r7, #20
 8006c3e:	647b      	str	r3, [r7, #68]	; 0x44
        q31_t     inA = *__SIMD32(source)++;
 8006c40:	f107 0210 	add.w	r2, r7, #16
 8006c44:	6813      	ldr	r3, [r2, #0]
 8006c46:	1d19      	adds	r1, r3, #4
 8006c48:	6011      	str	r1, [r2, #0]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	643b      	str	r3, [r7, #64]	; 0x40
        q31_t     inAbuf1 = __SXTB16(__ROR(inA, 8));
 8006c4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c52:	2308      	movs	r3, #8
 8006c54:	63bb      	str	r3, [r7, #56]	; 0x38
  op2 %= 32U;
 8006c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c58:	f003 031f 	and.w	r3, r3, #31
 8006c5c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (op2 == 0U)
 8006c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d101      	bne.n	8006c68 <arm_convolve_HWC_q7_basic_nonsquare+0x280>
    return op1;
 8006c64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c66:	e003      	b.n	8006c70 <arm_convolve_HWC_q7_basic_nonsquare+0x288>
  return (op1 >> op2) | (op1 << (32U - op2));
 8006c68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c6c:	fa62 f303 	ror.w	r3, r2, r3
 8006c70:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8006c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c74:	fa2f f383 	sxtb16	r3, r3
 8006c78:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8006c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        q31_t     inAbuf2 = __SXTB16(inA);
 8006c7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c80:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8006c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c84:	fa2f f383 	sxtb16	r3, r3
 8006c88:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8c:	623b      	str	r3, [r7, #32]
        *out2 = __PKHTB(inAbuf1, inAbuf2, 16);
 8006c8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c90:	4b50      	ldr	r3, [pc, #320]	; (8006dd4 <arm_convolve_HWC_q7_basic_nonsquare+0x3ec>)
 8006c92:	4013      	ands	r3, r2
 8006c94:	6a3a      	ldr	r2, [r7, #32]
 8006c96:	0c12      	lsrs	r2, r2, #16
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c9e:	601a      	str	r2, [r3, #0]
        *out1 = __PKHBT(inAbuf2, inAbuf1, 16);
 8006ca0:	6a3b      	ldr	r3, [r7, #32]
 8006ca2:	b29a      	uxth	r2, r3
 8006ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ca6:	041b      	lsls	r3, r3, #16
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	461a      	mov	r2, r3
 8006cac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cae:	601a      	str	r2, [r3, #0]
        return source;
 8006cb0:	693b      	ldr	r3, [r7, #16]
            {
                q31_t     inA1, inA2;
                q31_t     inB1, inB2;

                pA = (q7_t *) read_and_pad((void *)pA, &inA1, &inA2);
 8006cb2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

                inB1 = *__SIMD32(pB)++;
 8006cb6:	f107 021c 	add.w	r2, r7, #28
 8006cba:	6813      	ldr	r3, [r2, #0]
 8006cbc:	1d19      	adds	r1, r3, #4
 8006cbe:	6011      	str	r1, [r2, #0]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	673b      	str	r3, [r7, #112]	; 0x70
                sum = __SMLAD(inA1, inB1, sum);
 8006cc4:	69bb      	ldr	r3, [r7, #24]
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006cca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006cce:	65b9      	str	r1, [r7, #88]	; 0x58
 8006cd0:	657a      	str	r2, [r7, #84]	; 0x54
 8006cd2:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8006cd4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006cd6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006cd8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006cda:	fb23 1302 	smlad	r3, r3, r2, r1
 8006cde:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 8006ce0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ce2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                inB2 = *__SIMD32(pB)++;
 8006ce6:	f107 021c 	add.w	r2, r7, #28
 8006cea:	6813      	ldr	r3, [r2, #0]
 8006cec:	1d19      	adds	r1, r3, #4
 8006cee:	6011      	str	r1, [r2, #0]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	66fb      	str	r3, [r7, #108]	; 0x6c
                sum = __SMLAD(inA2, inB2, sum);
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	4619      	mov	r1, r3
 8006cf8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006cfa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006cfe:	66b9      	str	r1, [r7, #104]	; 0x68
 8006d00:	667a      	str	r2, [r7, #100]	; 0x64
 8006d02:	663b      	str	r3, [r7, #96]	; 0x60
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8006d04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006d06:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006d08:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8006d0a:	fb23 1302 	smlad	r3, r3, r2, r1
 8006d0e:	65fb      	str	r3, [r7, #92]	; 0x5c
  return(result);
 8006d10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d12:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

                colCnt--;
 8006d16:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8006d1a:	3b01      	subs	r3, #1
 8006d1c:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
            while (colCnt)
 8006d20:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d182      	bne.n	8006c2e <arm_convolve_HWC_q7_basic_nonsquare+0x246>
            }
            colCnt = ch_im_in * dim_kernel_y * dim_kernel_x & 0x3;
 8006d28:	88fa      	ldrh	r2, [r7, #6]
 8006d2a:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006d2e:	fb12 f303 	smulbb	r3, r2, r3
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 8006d38:	fb12 f303 	smulbb	r3, r2, r3
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	f003 0303 	and.w	r3, r3, #3
 8006d42:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
            while (colCnt)
 8006d46:	e01d      	b.n	8006d84 <arm_convolve_HWC_q7_basic_nonsquare+0x39c>
            {
                q7_t      inA1 = *pA++;
 8006d48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d4c:	1c5a      	adds	r2, r3, #1
 8006d4e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
                q15_t     inB1 = *pB++;
 8006d58:	69fb      	ldr	r3, [r7, #28]
 8006d5a:	1c9a      	adds	r2, r3, #2
 8006d5c:	61fa      	str	r2, [r7, #28]
 8006d5e:	881b      	ldrh	r3, [r3, #0]
 8006d60:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
                sum += inA1 * inB1;
 8006d64:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 8006d68:	f9b7 2074 	ldrsh.w	r2, [r7, #116]	; 0x74
 8006d6c:	fb02 f303 	mul.w	r3, r2, r3
 8006d70:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006d74:	4413      	add	r3, r2
 8006d76:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                colCnt--;
 8006d7a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8006d7e:	3b01      	subs	r3, #1
 8006d80:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
            while (colCnt)
 8006d84:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d1dd      	bne.n	8006d48 <arm_convolve_HWC_q7_basic_nonsquare+0x360>
            }
            *pOut++ = (q7_t) __SSAT((sum >> out_shift), 8);
 8006d8c:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
 8006d90:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006d94:	fa42 f303 	asr.w	r3, r2, r3
 8006d98:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006d9a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006d9c:	f303 0307 	ssat	r3, #8, r3
 8006da0:	67bb      	str	r3, [r7, #120]	; 0x78
 8006da2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8006da4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006da8:	1c5a      	adds	r2, r3, #1
 8006daa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8006dae:	b24a      	sxtb	r2, r1
 8006db0:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < ch_im_out; i++)
 8006db2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006db6:	3301      	adds	r3, #1
 8006db8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006dbc:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8006dc0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	f6ff af0e 	blt.w	8006be6 <arm_convolve_HWC_q7_basic_nonsquare+0x1fe>
    }

#endif                          /* ARM_MATH_DSP */

    /* Return to application */
    return ARM_MATH_SUCCESS;
 8006dca:	2300      	movs	r3, #0
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	37a0      	adds	r7, #160	; 0xa0
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}
 8006dd4:	ffff0000 	.word	0xffff0000

08006dd8 <arm_depthwise_separable_conv_HWC_q7_nonsquare>:
                                                         q7_t * Im_out,
                                                         const uint16_t dim_im_out_x,
                                                         const uint16_t dim_im_out_y, 
                                                         q15_t * bufferA, 
                                                         q7_t * bufferB)
{
 8006dd8:	b590      	push	{r4, r7, lr}
 8006dda:	b0d3      	sub	sp, #332	; 0x14c
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	f107 040c 	add.w	r4, r7, #12
 8006de2:	6020      	str	r0, [r4, #0]
 8006de4:	460c      	mov	r4, r1
 8006de6:	4610      	mov	r0, r2
 8006de8:	4619      	mov	r1, r3
 8006dea:	f107 030a 	add.w	r3, r7, #10
 8006dee:	4622      	mov	r2, r4
 8006df0:	801a      	strh	r2, [r3, #0]
 8006df2:	f107 0308 	add.w	r3, r7, #8
 8006df6:	4602      	mov	r2, r0
 8006df8:	801a      	strh	r2, [r3, #0]
 8006dfa:	1dbb      	adds	r3, r7, #6
 8006dfc:	460a      	mov	r2, r1
 8006dfe:	801a      	strh	r2, [r3, #0]
 *
 */

    int16_t   i_out_y, i_out_x;
    int16_t   i_ker_y, i_ker_x;
    q7_t     *colBuffer = (q7_t *) bufferA;
 8006e00:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8006e04:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    q7_t     *pBuffer = colBuffer;
 8006e08:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e0c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    const q7_t *pBias = bias;
 8006e10:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8006e14:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    q7_t     *pOut = Im_out;
 8006e18:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8006e1c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    uint16_t  rowCnt;
    uint16_t  row_shift;

    /* do some checking here, basically ch_im_in == ch_im_out */
    if (ch_im_in != ch_im_out)
 8006e20:	1dbb      	adds	r3, r7, #6
 8006e22:	881a      	ldrh	r2, [r3, #0]
 8006e24:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	d003      	beq.n	8006e34 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x5c>
    {
        return ARM_MATH_SIZE_MISMATCH;
 8006e2c:	f06f 0302 	mvn.w	r3, #2
 8006e30:	f000 bc2f 	b.w	8007692 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x8ba>
    }

    for (i_out_y = 0; i_out_y < dim_im_out_y; i_out_y++)
 8006e34:	2300      	movs	r3, #0
 8006e36:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
 8006e3a:	f000 bc22 	b.w	8007682 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x8aa>
    {
        for (i_out_x = 0; i_out_x < dim_im_out_x; i_out_x++)
 8006e3e:	2300      	movs	r3, #0
 8006e40:	f8a7 3144 	strh.w	r3, [r7, #324]	; 0x144
 8006e44:	f000 bc0f 	b.w	8007666 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x88e>
        {
            /* we first do im2col here */
            for (i_ker_y = i_out_y * stride_y - padding_y; i_ker_y < i_out_y * stride_y - padding_y + dim_kernel_y;
 8006e48:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8006e4c:	f8b7 2174 	ldrh.w	r2, [r7, #372]	; 0x174
 8006e50:	fb12 f303 	smulbb	r3, r2, r3
 8006e54:	b29a      	uxth	r2, r3
 8006e56:	f8b7 316c 	ldrh.w	r3, [r7, #364]	; 0x16c
 8006e5a:	1ad3      	subs	r3, r2, r3
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142
 8006e62:	e06b      	b.n	8006f3c <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x164>
                 i_ker_y++)
            {
                for (i_ker_x = i_out_x * stride_x - padding_x; i_ker_x < i_out_x * stride_x - padding_x + dim_kernel_x;
 8006e64:	f8b7 3144 	ldrh.w	r3, [r7, #324]	; 0x144
 8006e68:	f8b7 2170 	ldrh.w	r2, [r7, #368]	; 0x170
 8006e6c:	fb12 f303 	smulbb	r3, r2, r3
 8006e70:	b29a      	uxth	r2, r3
 8006e72:	f8b7 3168 	ldrh.w	r3, [r7, #360]	; 0x168
 8006e76:	1ad3      	subs	r3, r2, r3
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	f8a7 3140 	strh.w	r3, [r7, #320]	; 0x140
 8006e7e:	e046      	b.n	8006f0e <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x136>
                     i_ker_x++)
                {
                    if (i_ker_y < 0 || i_ker_y >= dim_im_in_y || i_ker_x < 0 || i_ker_x >= dim_im_in_x)
 8006e80:	f9b7 3142 	ldrsh.w	r3, [r7, #322]	; 0x142
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	db11      	blt.n	8006eac <arm_depthwise_separable_conv_HWC_q7_nonsquare+0xd4>
 8006e88:	f9b7 2142 	ldrsh.w	r2, [r7, #322]	; 0x142
 8006e8c:	f107 0308 	add.w	r3, r7, #8
 8006e90:	881b      	ldrh	r3, [r3, #0]
 8006e92:	429a      	cmp	r2, r3
 8006e94:	da0a      	bge.n	8006eac <arm_depthwise_separable_conv_HWC_q7_nonsquare+0xd4>
 8006e96:	f9b7 3140 	ldrsh.w	r3, [r7, #320]	; 0x140
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	db06      	blt.n	8006eac <arm_depthwise_separable_conv_HWC_q7_nonsquare+0xd4>
 8006e9e:	f9b7 2140 	ldrsh.w	r2, [r7, #320]	; 0x140
 8006ea2:	f107 030a 	add.w	r3, r7, #10
 8006ea6:	881b      	ldrh	r3, [r3, #0]
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	db08      	blt.n	8006ebe <arm_depthwise_separable_conv_HWC_q7_nonsquare+0xe6>
                    {
                        /* arm_fill_q7(0, pBuffer, ch_im_in); */
                        memset(pBuffer, 0, ch_im_in);
 8006eac:	1dbb      	adds	r3, r7, #6
 8006eae:	881b      	ldrh	r3, [r3, #0]
 8006eb0:	461a      	mov	r2, r3
 8006eb2:	2100      	movs	r1, #0
 8006eb4:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8006eb8:	f008 fc6e 	bl	800f798 <memset>
 8006ebc:	e019      	b.n	8006ef2 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x11a>
                    } else
                    {
                        /* arm_copy_q7((q7_t *) Im_in + (i_ker_y * dim_im_in_x + i_ker_x) * ch_im_in, pBuffer, ch_im_in); */
                        memcpy(pBuffer, (q7_t *) Im_in + (i_ker_y * dim_im_in_x + i_ker_x) * ch_im_in, ch_im_in);
 8006ebe:	f9b7 3142 	ldrsh.w	r3, [r7, #322]	; 0x142
 8006ec2:	f107 020a 	add.w	r2, r7, #10
 8006ec6:	8812      	ldrh	r2, [r2, #0]
 8006ec8:	fb02 f203 	mul.w	r2, r2, r3
 8006ecc:	f9b7 3140 	ldrsh.w	r3, [r7, #320]	; 0x140
 8006ed0:	4413      	add	r3, r2
 8006ed2:	1dba      	adds	r2, r7, #6
 8006ed4:	8812      	ldrh	r2, [r2, #0]
 8006ed6:	fb02 f303 	mul.w	r3, r2, r3
 8006eda:	461a      	mov	r2, r3
 8006edc:	f107 030c 	add.w	r3, r7, #12
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	1899      	adds	r1, r3, r2
 8006ee4:	1dbb      	adds	r3, r7, #6
 8006ee6:	881b      	ldrh	r3, [r3, #0]
 8006ee8:	461a      	mov	r2, r3
 8006eea:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8006eee:	f008 fc2b 	bl	800f748 <memcpy>
                    }
                    pBuffer += ch_im_in;
 8006ef2:	1dbb      	adds	r3, r7, #6
 8006ef4:	881b      	ldrh	r3, [r3, #0]
 8006ef6:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8006efa:	4413      	add	r3, r2
 8006efc:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
                     i_ker_x++)
 8006f00:	f9b7 3140 	ldrsh.w	r3, [r7, #320]	; 0x140
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	3301      	adds	r3, #1
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	f8a7 3140 	strh.w	r3, [r7, #320]	; 0x140
                for (i_ker_x = i_out_x * stride_x - padding_x; i_ker_x < i_out_x * stride_x - padding_x + dim_kernel_x;
 8006f0e:	f9b7 2140 	ldrsh.w	r2, [r7, #320]	; 0x140
 8006f12:	f9b7 3144 	ldrsh.w	r3, [r7, #324]	; 0x144
 8006f16:	f8b7 1170 	ldrh.w	r1, [r7, #368]	; 0x170
 8006f1a:	fb01 f103 	mul.w	r1, r1, r3
 8006f1e:	f8b7 3168 	ldrh.w	r3, [r7, #360]	; 0x168
 8006f22:	1ac9      	subs	r1, r1, r3
 8006f24:	f8b7 3160 	ldrh.w	r3, [r7, #352]	; 0x160
 8006f28:	440b      	add	r3, r1
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	dba8      	blt.n	8006e80 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0xa8>
                 i_ker_y++)
 8006f2e:	f9b7 3142 	ldrsh.w	r3, [r7, #322]	; 0x142
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	3301      	adds	r3, #1
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142
            for (i_ker_y = i_out_y * stride_y - padding_y; i_ker_y < i_out_y * stride_y - padding_y + dim_kernel_y;
 8006f3c:	f9b7 2142 	ldrsh.w	r2, [r7, #322]	; 0x142
 8006f40:	f9b7 3146 	ldrsh.w	r3, [r7, #326]	; 0x146
 8006f44:	f8b7 1174 	ldrh.w	r1, [r7, #372]	; 0x174
 8006f48:	fb01 f103 	mul.w	r1, r1, r3
 8006f4c:	f8b7 316c 	ldrh.w	r3, [r7, #364]	; 0x16c
 8006f50:	1ac9      	subs	r1, r1, r3
 8006f52:	f8b7 3164 	ldrh.w	r3, [r7, #356]	; 0x164
 8006f56:	440b      	add	r3, r1
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	db83      	blt.n	8006e64 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x8c>
                }
            }

            /* we will do the computation here for each channel */
            rowCnt = ch_im_out >> 2;
 8006f5c:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8006f60:	089b      	lsrs	r3, r3, #2
 8006f62:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132
            row_shift = 0;
 8006f66:	2300      	movs	r3, #0
 8006f68:	f8a7 3130 	strh.w	r3, [r7, #304]	; 0x130
            pBias = bias;
 8006f6c:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8006f70:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138

            while (rowCnt)
 8006f74:	e2e4      	b.n	8007540 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x768>
            {
                q31_t     sum =  ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8006f76:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006f7a:	1c5a      	adds	r2, r3, #1
 8006f7c:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
 8006f80:	f993 3000 	ldrsb.w	r3, [r3]
 8006f84:	461a      	mov	r2, r3
 8006f86:	f8b7 317c 	ldrh.w	r3, [r7, #380]	; 0x17c
 8006f8a:	409a      	lsls	r2, r3
 8006f8c:	f8b7 3180 	ldrh.w	r3, [r7, #384]	; 0x180
 8006f90:	3b01      	subs	r3, #1
 8006f92:	2101      	movs	r1, #1
 8006f94:	fa01 f303 	lsl.w	r3, r1, r3
 8006f98:	4413      	add	r3, r2
 8006f9a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                q31_t     sum2 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8006f9e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006fa2:	1c5a      	adds	r2, r3, #1
 8006fa4:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
 8006fa8:	f993 3000 	ldrsb.w	r3, [r3]
 8006fac:	461a      	mov	r2, r3
 8006fae:	f8b7 317c 	ldrh.w	r3, [r7, #380]	; 0x17c
 8006fb2:	409a      	lsls	r2, r3
 8006fb4:	f8b7 3180 	ldrh.w	r3, [r7, #384]	; 0x180
 8006fb8:	3b01      	subs	r3, #1
 8006fba:	2101      	movs	r1, #1
 8006fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8006fc0:	4413      	add	r3, r2
 8006fc2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
                q31_t     sum3 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8006fc6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006fca:	1c5a      	adds	r2, r3, #1
 8006fcc:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
 8006fd0:	f993 3000 	ldrsb.w	r3, [r3]
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	f8b7 317c 	ldrh.w	r3, [r7, #380]	; 0x17c
 8006fda:	409a      	lsls	r2, r3
 8006fdc:	f8b7 3180 	ldrh.w	r3, [r7, #384]	; 0x180
 8006fe0:	3b01      	subs	r3, #1
 8006fe2:	2101      	movs	r1, #1
 8006fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8006fe8:	4413      	add	r3, r2
 8006fea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
                q31_t     sum4 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8006fee:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006ff2:	1c5a      	adds	r2, r3, #1
 8006ff4:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
 8006ff8:	f993 3000 	ldrsb.w	r3, [r3]
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	f8b7 317c 	ldrh.w	r3, [r7, #380]	; 0x17c
 8007002:	409a      	lsls	r2, r3
 8007004:	f8b7 3180 	ldrh.w	r3, [r7, #384]	; 0x180
 8007008:	3b01      	subs	r3, #1
 800700a:	2101      	movs	r1, #1
 800700c:	fa01 f303 	lsl.w	r3, r1, r3
 8007010:	4413      	add	r3, r2
 8007012:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

                uint16_t  colCnt = (dim_kernel_x * dim_kernel_y) >> 1;
 8007016:	f8b7 3160 	ldrh.w	r3, [r7, #352]	; 0x160
 800701a:	f8b7 2164 	ldrh.w	r2, [r7, #356]	; 0x164
 800701e:	fb02 f303 	mul.w	r3, r2, r3
 8007022:	105b      	asrs	r3, r3, #1
 8007024:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
                q7_t     *pB = colBuffer + row_shift;
 8007028:	f8b7 3130 	ldrh.w	r3, [r7, #304]	; 0x130
 800702c:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8007030:	441a      	add	r2, r3
 8007032:	f107 0320 	add.w	r3, r7, #32
 8007036:	601a      	str	r2, [r3, #0]
                const q7_t *pA = wt + row_shift;
 8007038:	f8b7 3130 	ldrh.w	r3, [r7, #304]	; 0x130
 800703c:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8007040:	441a      	add	r2, r3
 8007042:	f107 031c 	add.w	r3, r7, #28
 8007046:	601a      	str	r2, [r3, #0]
                row_shift += 4;
 8007048:	f8b7 3130 	ldrh.w	r3, [r7, #304]	; 0x130
 800704c:	3304      	adds	r3, #4
 800704e:	f8a7 3130 	strh.w	r3, [r7, #304]	; 0x130

#ifdef USE_INTRINSIC

#ifndef ARM_MATH_BIG_ENDIAN

                while (colCnt)
 8007052:	e198      	b.n	8007386 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x5ae>
                {
                    q31_t     inA1, inA2, inB1, inB2, opA, opB;

                    inB1 = *__SIMD32(pB);
 8007054:	f107 0320 	add.w	r3, r7, #32
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
                    pB += ch_im_in;
 8007060:	f107 0320 	add.w	r3, r7, #32
 8007064:	681a      	ldr	r2, [r3, #0]
 8007066:	1dbb      	adds	r3, r7, #6
 8007068:	881b      	ldrh	r3, [r3, #0]
 800706a:	441a      	add	r2, r3
 800706c:	f107 0320 	add.w	r3, r7, #32
 8007070:	601a      	str	r2, [r3, #0]
                    opB = *__SIMD32(pB);
 8007072:	f107 0320 	add.w	r3, r7, #32
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                    pB += ch_im_in;
 800707e:	f107 0320 	add.w	r3, r7, #32
 8007082:	681a      	ldr	r2, [r3, #0]
 8007084:	1dbb      	adds	r3, r7, #6
 8007086:	881b      	ldrh	r3, [r3, #0]
 8007088:	441a      	add	r2, r3
 800708a:	f107 0320 	add.w	r3, r7, #32
 800708e:	601a      	str	r2, [r3, #0]
                    inB2 = __PKHTB(opB, inB1, 16);
 8007090:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8007094:	4bc4      	ldr	r3, [pc, #784]	; (80073a8 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x5d0>)
 8007096:	4013      	ands	r3, r2
 8007098:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800709c:	0c12      	lsrs	r2, r2, #16
 800709e:	4313      	orrs	r3, r2
 80070a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
                    inB1 = __PKHBT(inB1, opB, 16);
 80070a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80070a8:	b29a      	uxth	r2, r3
 80070aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80070ae:	041b      	lsls	r3, r3, #16
 80070b0:	4313      	orrs	r3, r2
 80070b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
                    inA1 = *__SIMD32(pA);
 80070b6:	f107 031c 	add.w	r3, r7, #28
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                    pA += ch_im_in;
 80070c2:	f107 031c 	add.w	r3, r7, #28
 80070c6:	681a      	ldr	r2, [r3, #0]
 80070c8:	1dbb      	adds	r3, r7, #6
 80070ca:	881b      	ldrh	r3, [r3, #0]
 80070cc:	441a      	add	r2, r3
 80070ce:	f107 031c 	add.w	r3, r7, #28
 80070d2:	601a      	str	r2, [r3, #0]
                    opB = *__SIMD32(pA);
 80070d4:	f107 031c 	add.w	r3, r7, #28
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                    pA += ch_im_in;
 80070e0:	f107 031c 	add.w	r3, r7, #28
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	1dbb      	adds	r3, r7, #6
 80070e8:	881b      	ldrh	r3, [r3, #0]
 80070ea:	441a      	add	r2, r3
 80070ec:	f107 031c 	add.w	r3, r7, #28
 80070f0:	601a      	str	r2, [r3, #0]
                    inA2 = __PKHTB(opB, inA1, 16);
 80070f2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80070f6:	4bac      	ldr	r3, [pc, #688]	; (80073a8 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x5d0>)
 80070f8:	4013      	ands	r3, r2
 80070fa:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80070fe:	0c12      	lsrs	r2, r2, #16
 8007100:	4313      	orrs	r3, r2
 8007102:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
                    inA1 = __PKHBT(inA1, opB, 16);
 8007106:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800710a:	b29a      	uxth	r2, r3
 800710c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007110:	041b      	lsls	r3, r3, #16
 8007112:	4313      	orrs	r3, r2
 8007114:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                    opA = __SXTB16(inA1);
 8007118:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800711c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007120:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8007122:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	fa2f f283 	sxtb16	r2, r3
 800712c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007130:	601a      	str	r2, [r3, #0]
  return(result);
 8007132:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                    opB = __SXTB16(inB1);
 800713c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8007140:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007144:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8007146:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	fa2f f283 	sxtb16	r2, r3
 8007150:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007154:	601a      	str	r2, [r3, #0]
  return(result);
 8007156:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                    sum = __SMLAD(opA, opB, sum);
 8007160:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8007164:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8007168:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800716c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007170:	6018      	str	r0, [r3, #0]
 8007172:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007176:	6019      	str	r1, [r3, #0]
 8007178:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800717c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800717e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8007188:	6812      	ldr	r2, [r2, #0]
 800718a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800718e:	6809      	ldr	r1, [r1, #0]
 8007190:	fb23 1202 	smlad	r2, r3, r2, r1
 8007194:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007198:	601a      	str	r2, [r3, #0]
  return(result);
 800719a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    opA = __SXTB16(__ROR(inA1, 8));
 80071a4:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80071a8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80071ac:	601a      	str	r2, [r3, #0]
 80071ae:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80071b2:	2208      	movs	r2, #8
 80071b4:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 80071b6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80071ba:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80071be:	6812      	ldr	r2, [r2, #0]
 80071c0:	f002 021f 	and.w	r2, r2, #31
 80071c4:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 80071c6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d103      	bne.n	80071d8 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x400>
    return op1;
 80071d0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	e007      	b.n	80071e8 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x410>
  return (op1 >> op2) | (op1 << (32U - op2));
 80071d8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80071dc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80071e0:	6812      	ldr	r2, [r2, #0]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	fa62 f303 	ror.w	r3, r2, r3
 80071e8:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80071ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071ec:	fa2f f383 	sxtb16	r3, r3
 80071f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 80071f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                    opB = __SXTB16(__ROR(inB1, 8));
 80071f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80071fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80071fe:	2308      	movs	r3, #8
 8007200:	657b      	str	r3, [r7, #84]	; 0x54
  op2 %= 32U;
 8007202:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007204:	f003 031f 	and.w	r3, r3, #31
 8007208:	657b      	str	r3, [r7, #84]	; 0x54
  if (op2 == 0U)
 800720a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800720c:	2b00      	cmp	r3, #0
 800720e:	d101      	bne.n	8007214 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x43c>
    return op1;
 8007210:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007212:	e003      	b.n	800721c <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x444>
  return (op1 >> op2) | (op1 << (32U - op2));
 8007214:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007216:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007218:	fa62 f303 	ror.w	r3, r2, r3
 800721c:	663b      	str	r3, [r7, #96]	; 0x60
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800721e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007220:	fa2f f383 	sxtb16	r3, r3
 8007224:	65fb      	str	r3, [r7, #92]	; 0x5c
  return(result);
 8007226:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007228:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                    sum2 = __SMLAD(opA, opB, sum2);
 800722c:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8007230:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8007234:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007238:	6739      	str	r1, [r7, #112]	; 0x70
 800723a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800723c:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800723e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007240:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007242:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007244:	fb23 1302 	smlad	r3, r3, r2, r1
 8007248:	667b      	str	r3, [r7, #100]	; 0x64
  return(result);
 800724a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800724c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
                    opA = __SXTB16(inA2);
 8007250:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007254:	67bb      	str	r3, [r7, #120]	; 0x78
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8007256:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007258:	fa2f f383 	sxtb16	r3, r3
 800725c:	677b      	str	r3, [r7, #116]	; 0x74
  return(result);
 800725e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007260:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                    opB = __SXTB16(inB2);
 8007264:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007268:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800726c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007270:	fa2f f383 	sxtb16	r3, r3
 8007274:	67fb      	str	r3, [r7, #124]	; 0x7c
  return(result);
 8007276:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007278:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                    sum3 = __SMLAD(opA, opB, sum3);
 800727c:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8007280:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8007284:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007288:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 800728c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007290:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8007294:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007298:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800729c:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80072a0:	fb23 1302 	smlad	r3, r3, r2, r1
 80072a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return(result);
 80072a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80072ac:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
                    opA = __SXTB16(__ROR(inA2, 8));
 80072b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80072b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80072b8:	2308      	movs	r3, #8
 80072ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  op2 %= 32U;
 80072be:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80072c2:	f003 031f 	and.w	r3, r3, #31
 80072c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (op2 == 0U)
 80072ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d102      	bne.n	80072d8 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x500>
    return op1;
 80072d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80072d6:	e005      	b.n	80072e4 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x50c>
  return (op1 >> op2) | (op1 << (32U - op2));
 80072d8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80072dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80072e0:	fa62 f303 	ror.w	r3, r2, r3
 80072e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80072e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80072ec:	fa2f f383 	sxtb16	r3, r3
 80072f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return(result);
 80072f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80072f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                    opB = __SXTB16(__ROR(inB2, 8));
 80072fc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007300:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007304:	2308      	movs	r3, #8
 8007306:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  op2 %= 32U;
 800730a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800730e:	f003 031f 	and.w	r3, r3, #31
 8007312:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (op2 == 0U)
 8007316:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800731a:	2b00      	cmp	r3, #0
 800731c:	d102      	bne.n	8007324 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x54c>
    return op1;
 800731e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007322:	e005      	b.n	8007330 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x558>
  return (op1 >> op2) | (op1 << (32U - op2));
 8007324:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007328:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800732c:	fa62 f303 	ror.w	r3, r2, r3
 8007330:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8007334:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007338:	fa2f f383 	sxtb16	r3, r3
 800733c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return(result);
 8007340:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007344:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                    sum4 = __SMLAD(opA, opB, sum4);
 8007348:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 800734c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8007350:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007354:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8007358:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800735c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8007360:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007364:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8007368:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800736c:	fb23 1302 	smlad	r3, r3, r2, r1
 8007370:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return(result);
 8007374:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007378:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
                    colCnt--;
 800737c:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 8007380:	3b01      	subs	r3, #1
 8007382:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
                while (colCnt)
 8007386:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 800738a:	2b00      	cmp	r3, #0
 800738c:	f47f ae62 	bne.w	8007054 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x27c>
                              [ch_im_in] "r"(ch_im_in):"r0", "r1", "r2", "r3", "r4", "r5");
#endif                          /*ARM_MATH_BIG_ENDIAN */

#endif                          /* USE_INTRINSIC */

                colCnt = (dim_kernel_x * dim_kernel_y) & 0x1;
 8007390:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8007394:	f8b7 3164 	ldrh.w	r3, [r7, #356]	; 0x164
 8007398:	fb12 f303 	smulbb	r3, r2, r3
 800739c:	b29b      	uxth	r3, r3
 800739e:	f003 0301 	and.w	r3, r3, #1
 80073a2:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
                while (colCnt)
 80073a6:	e066      	b.n	8007476 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x69e>
 80073a8:	ffff0000 	.word	0xffff0000
                {
                    union arm_nnword inA, inB;
                    inA.word = *__SIMD32(pA);
 80073ac:	f107 031c 	add.w	r3, r7, #28
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	f107 0318 	add.w	r3, r7, #24
 80073b8:	601a      	str	r2, [r3, #0]
                    pA += ch_im_in;
 80073ba:	f107 031c 	add.w	r3, r7, #28
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	1dbb      	adds	r3, r7, #6
 80073c2:	881b      	ldrh	r3, [r3, #0]
 80073c4:	441a      	add	r2, r3
 80073c6:	f107 031c 	add.w	r3, r7, #28
 80073ca:	601a      	str	r2, [r3, #0]
                    inB.word = *__SIMD32(pB);
 80073cc:	f107 0320 	add.w	r3, r7, #32
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	681a      	ldr	r2, [r3, #0]
 80073d4:	f107 0314 	add.w	r3, r7, #20
 80073d8:	601a      	str	r2, [r3, #0]
                    pB += ch_im_in;
 80073da:	f107 0320 	add.w	r3, r7, #32
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	1dbb      	adds	r3, r7, #6
 80073e2:	881b      	ldrh	r3, [r3, #0]
 80073e4:	441a      	add	r2, r3
 80073e6:	f107 0320 	add.w	r3, r7, #32
 80073ea:	601a      	str	r2, [r3, #0]
                    sum += inA.bytes[0] * inB.bytes[0];
 80073ec:	f107 0318 	add.w	r3, r7, #24
 80073f0:	f993 3000 	ldrsb.w	r3, [r3]
 80073f4:	461a      	mov	r2, r3
 80073f6:	f107 0314 	add.w	r3, r7, #20
 80073fa:	f993 3000 	ldrsb.w	r3, [r3]
 80073fe:	fb03 f302 	mul.w	r3, r3, r2
 8007402:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8007406:	4413      	add	r3, r2
 8007408:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    sum2 += inA.bytes[1] * inB.bytes[1];
 800740c:	f107 0318 	add.w	r3, r7, #24
 8007410:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8007414:	461a      	mov	r2, r3
 8007416:	f107 0314 	add.w	r3, r7, #20
 800741a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800741e:	fb03 f302 	mul.w	r3, r3, r2
 8007422:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007426:	4413      	add	r3, r2
 8007428:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
                    sum3 += inA.bytes[2] * inB.bytes[2];
 800742c:	f107 0318 	add.w	r3, r7, #24
 8007430:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8007434:	461a      	mov	r2, r3
 8007436:	f107 0314 	add.w	r3, r7, #20
 800743a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800743e:	fb03 f302 	mul.w	r3, r3, r2
 8007442:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8007446:	4413      	add	r3, r2
 8007448:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
                    sum4 += inA.bytes[3] * inB.bytes[3];
 800744c:	f107 0318 	add.w	r3, r7, #24
 8007450:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8007454:	461a      	mov	r2, r3
 8007456:	f107 0314 	add.w	r3, r7, #20
 800745a:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800745e:	fb03 f302 	mul.w	r3, r3, r2
 8007462:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8007466:	4413      	add	r3, r2
 8007468:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
                    colCnt--;
 800746c:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 8007470:	3b01      	subs	r3, #1
 8007472:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
                while (colCnt)
 8007476:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 800747a:	2b00      	cmp	r3, #0
 800747c:	d196      	bne.n	80073ac <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x5d4>
                }

                *pOut++ = (q7_t) __SSAT((sum >> out_shift), 8);
 800747e:	f8b7 3180 	ldrh.w	r3, [r7, #384]	; 0x180
 8007482:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8007486:	fa42 f303 	asr.w	r3, r2, r3
 800748a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800748e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007492:	f303 0307 	ssat	r3, #8, r3
 8007496:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800749a:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 800749e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80074a2:	1c5a      	adds	r2, r3, #1
 80074a4:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 80074a8:	b24a      	sxtb	r2, r1
 80074aa:	701a      	strb	r2, [r3, #0]
                *pOut++ = (q7_t) __SSAT((sum2 >> out_shift), 8);
 80074ac:	f8b7 3180 	ldrh.w	r3, [r7, #384]	; 0x180
 80074b0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80074b4:	fa42 f303 	asr.w	r3, r2, r3
 80074b8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80074bc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80074c0:	f303 0307 	ssat	r3, #8, r3
 80074c4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80074c8:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 80074cc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80074d0:	1c5a      	adds	r2, r3, #1
 80074d2:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 80074d6:	b24a      	sxtb	r2, r1
 80074d8:	701a      	strb	r2, [r3, #0]
                *pOut++ = (q7_t) __SSAT((sum3 >> out_shift), 8);
 80074da:	f8b7 3180 	ldrh.w	r3, [r7, #384]	; 0x180
 80074de:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80074e2:	fa42 f303 	asr.w	r3, r2, r3
 80074e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80074ea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80074ee:	f303 0307 	ssat	r3, #8, r3
 80074f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80074f6:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 80074fa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80074fe:	1c5a      	adds	r2, r3, #1
 8007500:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8007504:	b24a      	sxtb	r2, r1
 8007506:	701a      	strb	r2, [r3, #0]
                *pOut++ = (q7_t) __SSAT((sum4 >> out_shift), 8);
 8007508:	f8b7 3180 	ldrh.w	r3, [r7, #384]	; 0x180
 800750c:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8007510:	fa42 f303 	asr.w	r3, r2, r3
 8007514:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007518:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800751c:	f303 0307 	ssat	r3, #8, r3
 8007520:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007524:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8007528:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800752c:	1c5a      	adds	r2, r3, #1
 800752e:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8007532:	b24a      	sxtb	r2, r1
 8007534:	701a      	strb	r2, [r3, #0]

                rowCnt--;
 8007536:	f8b7 3132 	ldrh.w	r3, [r7, #306]	; 0x132
 800753a:	3b01      	subs	r3, #1
 800753c:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132
            while (rowCnt)
 8007540:	f8b7 3132 	ldrh.w	r3, [r7, #306]	; 0x132
 8007544:	2b00      	cmp	r3, #0
 8007546:	f47f ad16 	bne.w	8006f76 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x19e>
            }

            rowCnt = ch_im_out & 0x3;
 800754a:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 800754e:	f003 0303 	and.w	r3, r3, #3
 8007552:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132
            while (rowCnt)
 8007556:	e077      	b.n	8007648 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x870>
            {
                q7_t     *pB = colBuffer + row_shift;
 8007558:	f8b7 3130 	ldrh.w	r3, [r7, #304]	; 0x130
 800755c:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8007560:	4413      	add	r3, r2
 8007562:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
                const q7_t *pA = wt + row_shift;
 8007566:	f8b7 3130 	ldrh.w	r3, [r7, #304]	; 0x130
 800756a:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 800756e:	4413      	add	r3, r2
 8007570:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
                q31_t     sum = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8007574:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007578:	1c5a      	adds	r2, r3, #1
 800757a:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
 800757e:	f993 3000 	ldrsb.w	r3, [r3]
 8007582:	461a      	mov	r2, r3
 8007584:	f8b7 317c 	ldrh.w	r3, [r7, #380]	; 0x17c
 8007588:	409a      	lsls	r2, r3
 800758a:	f8b7 3180 	ldrh.w	r3, [r7, #384]	; 0x180
 800758e:	3b01      	subs	r3, #1
 8007590:	2101      	movs	r1, #1
 8007592:	fa01 f303 	lsl.w	r3, r1, r3
 8007596:	4413      	add	r3, r2
 8007598:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
                uint16_t  colCnt = (dim_kernel_x * dim_kernel_y);
 800759c:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 80075a0:	f8b7 3164 	ldrh.w	r3, [r7, #356]	; 0x164
 80075a4:	fb12 f303 	smulbb	r3, r2, r3
 80075a8:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

                row_shift += 1;
 80075ac:	f8b7 3130 	ldrh.w	r3, [r7, #304]	; 0x130
 80075b0:	3301      	adds	r3, #1
 80075b2:	f8a7 3130 	strh.w	r3, [r7, #304]	; 0x130

                while (colCnt)
 80075b6:	e027      	b.n	8007608 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x830>
                {
                    q7_t      A1 = *pA;
 80075b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
                    q7_t      B1 = *pB;
 80075c2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	f887 30fe 	strb.w	r3, [r7, #254]	; 0xfe
                    pA += ch_im_in;
 80075cc:	1dbb      	adds	r3, r7, #6
 80075ce:	881b      	ldrh	r3, [r3, #0]
 80075d0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80075d4:	4413      	add	r3, r2
 80075d6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
                    pB += ch_im_in;
 80075da:	1dbb      	adds	r3, r7, #6
 80075dc:	881b      	ldrh	r3, [r3, #0]
 80075de:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80075e2:	4413      	add	r3, r2
 80075e4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
                    sum += A1 * B1;
 80075e8:	f997 30ff 	ldrsb.w	r3, [r7, #255]	; 0xff
 80075ec:	f997 20fe 	ldrsb.w	r2, [r7, #254]	; 0xfe
 80075f0:	fb02 f303 	mul.w	r3, r2, r3
 80075f4:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80075f8:	4413      	add	r3, r2
 80075fa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

                    colCnt--;
 80075fe:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8007602:	3b01      	subs	r3, #1
 8007604:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
                while (colCnt)
 8007608:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 800760c:	2b00      	cmp	r3, #0
 800760e:	d1d3      	bne.n	80075b8 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x7e0>
                }
                *pOut++ = (q7_t) __SSAT((sum >> out_shift), 8);
 8007610:	f8b7 3180 	ldrh.w	r3, [r7, #384]	; 0x180
 8007614:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8007618:	fa42 f303 	asr.w	r3, r2, r3
 800761c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007620:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007624:	f303 0307 	ssat	r3, #8, r3
 8007628:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800762c:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8007630:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007634:	1c5a      	adds	r2, r3, #1
 8007636:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 800763a:	b24a      	sxtb	r2, r1
 800763c:	701a      	strb	r2, [r3, #0]
                rowCnt--;
 800763e:	f8b7 3132 	ldrh.w	r3, [r7, #306]	; 0x132
 8007642:	3b01      	subs	r3, #1
 8007644:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132
            while (rowCnt)
 8007648:	f8b7 3132 	ldrh.w	r3, [r7, #306]	; 0x132
 800764c:	2b00      	cmp	r3, #0
 800764e:	d183      	bne.n	8007558 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x780>
            }

            // clear counter and pointers
            pBuffer = colBuffer;
 8007650:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007654:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
        for (i_out_x = 0; i_out_x < dim_im_out_x; i_out_x++)
 8007658:	f9b7 3144 	ldrsh.w	r3, [r7, #324]	; 0x144
 800765c:	b29b      	uxth	r3, r3
 800765e:	3301      	adds	r3, #1
 8007660:	b29b      	uxth	r3, r3
 8007662:	f8a7 3144 	strh.w	r3, [r7, #324]	; 0x144
 8007666:	f9b7 2144 	ldrsh.w	r2, [r7, #324]	; 0x144
 800766a:	f8b7 3188 	ldrh.w	r3, [r7, #392]	; 0x188
 800766e:	429a      	cmp	r2, r3
 8007670:	f6ff abea 	blt.w	8006e48 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x70>
    for (i_out_y = 0; i_out_y < dim_im_out_y; i_out_y++)
 8007674:	f9b7 3146 	ldrsh.w	r3, [r7, #326]	; 0x146
 8007678:	b29b      	uxth	r3, r3
 800767a:	3301      	adds	r3, #1
 800767c:	b29b      	uxth	r3, r3
 800767e:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
 8007682:	f9b7 2146 	ldrsh.w	r2, [r7, #326]	; 0x146
 8007686:	f8b7 318c 	ldrh.w	r3, [r7, #396]	; 0x18c
 800768a:	429a      	cmp	r2, r3
 800768c:	f6ff abd7 	blt.w	8006e3e <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x66>

#endif                          /* ARM_MATH_DSP */


    /* Return to application */
    return ARM_MATH_SUCCESS;
 8007690:	2300      	movs	r3, #0

}
 8007692:	4618      	mov	r0, r3
 8007694:	f507 77a6 	add.w	r7, r7, #332	; 0x14c
 8007698:	46bd      	mov	sp, r7
 800769a:	bd90      	pop	{r4, r7, pc}

0800769c <arm_nn_mat_mult_kernel_q7_q15>:
                                        const uint16_t numCol_A,
                                        const uint16_t bias_shift,
                                        const uint16_t out_shift, 
                                        const q7_t * bias, 
                                        q7_t * pOut)
{
 800769c:	b490      	push	{r4, r7}
 800769e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	f107 040c 	add.w	r4, r7, #12
 80076a8:	6020      	str	r0, [r4, #0]
 80076aa:	f107 0008 	add.w	r0, r7, #8
 80076ae:	6001      	str	r1, [r0, #0]
 80076b0:	4619      	mov	r1, r3
 80076b2:	1dbb      	adds	r3, r7, #6
 80076b4:	801a      	strh	r2, [r3, #0]
 80076b6:	1d3b      	adds	r3, r7, #4
 80076b8:	460a      	mov	r2, r1
 80076ba:	801a      	strh	r2, [r3, #0]
#if defined (ARM_MATH_DSP)
    /* set up the second output pointers */
    q7_t     *pOut2 = pOut + ch_im_out;
 80076bc:	1dbb      	adds	r3, r7, #6
 80076be:	881b      	ldrh	r3, [r3, #0]
 80076c0:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 80076c4:	4413      	add	r3, r2
 80076c6:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
    const q7_t *pBias = bias;
 80076ca:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80076ce:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200

    uint16_t  rowCnt = ch_im_out >> 1;
 80076d2:	1dbb      	adds	r3, r7, #6
 80076d4:	881b      	ldrh	r3, [r3, #0]
 80076d6:	085b      	lsrs	r3, r3, #1
 80076d8:	f8a7 31fe 	strh.w	r3, [r7, #510]	; 0x1fe
    /* this loop over rows in A */
    while (rowCnt)
 80076dc:	e347      	b.n	8007d6e <arm_nn_mat_mult_kernel_q7_q15+0x6d2>
    {
        /* setup pointers for B */
        const q15_t *pB = pInBuffer;
 80076de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80076e2:	f107 0208 	add.w	r2, r7, #8
 80076e6:	6812      	ldr	r2, [r2, #0]
 80076e8:	601a      	str	r2, [r3, #0]
        const q15_t *pB2 = pB + numCol_A;
 80076ea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80076ee:	681a      	ldr	r2, [r3, #0]
 80076f0:	1d3b      	adds	r3, r7, #4
 80076f2:	881b      	ldrh	r3, [r3, #0]
 80076f4:	005b      	lsls	r3, r3, #1
 80076f6:	441a      	add	r2, r3
 80076f8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80076fc:	601a      	str	r2, [r3, #0]

        /* align the second pointer for A */
        const q7_t *pA2 = pA + numCol_A;
 80076fe:	1d3b      	adds	r3, r7, #4
 8007700:	881b      	ldrh	r3, [r3, #0]
 8007702:	f107 020c 	add.w	r2, r7, #12
 8007706:	6812      	ldr	r2, [r2, #0]
 8007708:	4413      	add	r3, r2
 800770a:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8

        /* init the sum with bias */
        q31_t     sum =  ((q31_t)(*pBias) << bias_shift) + NN_ROUND(out_shift);
 800770e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007712:	f993 3000 	ldrsb.w	r3, [r3]
 8007716:	461a      	mov	r2, r3
 8007718:	f8b7 3210 	ldrh.w	r3, [r7, #528]	; 0x210
 800771c:	409a      	lsls	r2, r3
 800771e:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8007722:	3b01      	subs	r3, #1
 8007724:	2101      	movs	r1, #1
 8007726:	fa01 f303 	lsl.w	r3, r1, r3
 800772a:	4413      	add	r3, r2
 800772c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        q31_t     sum2 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8007730:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007734:	1c5a      	adds	r2, r3, #1
 8007736:	f8c7 2200 	str.w	r2, [r7, #512]	; 0x200
 800773a:	f993 3000 	ldrsb.w	r3, [r3]
 800773e:	461a      	mov	r2, r3
 8007740:	f8b7 3210 	ldrh.w	r3, [r7, #528]	; 0x210
 8007744:	409a      	lsls	r2, r3
 8007746:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 800774a:	3b01      	subs	r3, #1
 800774c:	2101      	movs	r1, #1
 800774e:	fa01 f303 	lsl.w	r3, r1, r3
 8007752:	4413      	add	r3, r2
 8007754:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
        q31_t     sum3 = ((q31_t)(*pBias) << bias_shift) + NN_ROUND(out_shift);
 8007758:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800775c:	f993 3000 	ldrsb.w	r3, [r3]
 8007760:	461a      	mov	r2, r3
 8007762:	f8b7 3210 	ldrh.w	r3, [r7, #528]	; 0x210
 8007766:	409a      	lsls	r2, r3
 8007768:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 800776c:	3b01      	subs	r3, #1
 800776e:	2101      	movs	r1, #1
 8007770:	fa01 f303 	lsl.w	r3, r1, r3
 8007774:	4413      	add	r3, r2
 8007776:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
        q31_t     sum4 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 800777a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800777e:	1c5a      	adds	r2, r3, #1
 8007780:	f8c7 2200 	str.w	r2, [r7, #512]	; 0x200
 8007784:	f993 3000 	ldrsb.w	r3, [r3]
 8007788:	461a      	mov	r2, r3
 800778a:	f8b7 3210 	ldrh.w	r3, [r7, #528]	; 0x210
 800778e:	409a      	lsls	r2, r3
 8007790:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8007794:	3b01      	subs	r3, #1
 8007796:	2101      	movs	r1, #1
 8007798:	fa01 f303 	lsl.w	r3, r1, r3
 800779c:	4413      	add	r3, r2
 800779e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

        uint16_t  colCnt = numCol_A >> 2;
 80077a2:	1d3b      	adds	r3, r7, #4
 80077a4:	881b      	ldrh	r3, [r3, #0]
 80077a6:	089b      	lsrs	r3, r3, #2
 80077a8:	f8a7 31e6 	strh.w	r3, [r7, #486]	; 0x1e6
        /* accumulate over the vector */
        while (colCnt)
 80077ac:	e20c      	b.n	8007bc8 <arm_nn_mat_mult_kernel_q7_q15+0x52c>
        {
            q31_t     inA11, inA12, inA21, inA22;
            q31_t     inB1 = *__SIMD32(pB)++;
 80077ae:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80077b2:	6813      	ldr	r3, [r2, #0]
 80077b4:	1d19      	adds	r1, r3, #4
 80077b6:	6011      	str	r1, [r2, #0]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
            q31_t     inB2 = *__SIMD32(pB2)++;
 80077be:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80077c2:	6813      	ldr	r3, [r2, #0]
 80077c4:	1d19      	adds	r1, r3, #4
 80077c6:	6011      	str	r1, [r2, #0]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80077ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80077d2:	f107 020c 	add.w	r2, r7, #12
 80077d6:	6812      	ldr	r2, [r2, #0]
 80077d8:	601a      	str	r2, [r3, #0]
 80077da:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80077de:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80077e2:	601a      	str	r2, [r3, #0]
 80077e4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80077e8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80077ec:	601a      	str	r2, [r3, #0]
        q31_t     inA = *__SIMD32(source)++;
 80077ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80077f2:	6813      	ldr	r3, [r2, #0]
 80077f4:	1d19      	adds	r1, r3, #4
 80077f6:	6011      	str	r1, [r2, #0]
 80077f8:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	6013      	str	r3, [r2, #0]
        q31_t     inAbuf1 = __SXTB16(__ROR(inA, 8));
 8007800:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8007804:	681a      	ldr	r2, [r3, #0]
 8007806:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800780a:	601a      	str	r2, [r3, #0]
 800780c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8007810:	2208      	movs	r2, #8
 8007812:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8007814:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8007818:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 800781c:	6812      	ldr	r2, [r2, #0]
 800781e:	f002 021f 	and.w	r2, r2, #31
 8007822:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8007824:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d103      	bne.n	8007836 <arm_nn_mat_mult_kernel_q7_q15+0x19a>
    return op1;
 800782e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	e007      	b.n	8007846 <arm_nn_mat_mult_kernel_q7_q15+0x1aa>
  return (op1 >> op2) | (op1 << (32U - op2));
 8007836:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 800783a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800783e:	6812      	ldr	r2, [r2, #0]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	fa62 f303 	ror.w	r3, r2, r3
 8007846:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 800784a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800784c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	fa2f f283 	sxtb16	r2, r3
 8007856:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800785a:	601a      	str	r2, [r3, #0]
  return(result);
 800785c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8007860:	681a      	ldr	r2, [r3, #0]
 8007862:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8007866:	601a      	str	r2, [r3, #0]
        q31_t     inAbuf2 = __SXTB16(inA);
 8007868:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800786c:	681a      	ldr	r2, [r3, #0]
 800786e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8007872:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8007874:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	fa2f f283 	sxtb16	r2, r3
 800787e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8007882:	601a      	str	r2, [r3, #0]
  return(result);
 8007884:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8007888:	681a      	ldr	r2, [r3, #0]
 800788a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800788e:	601a      	str	r2, [r3, #0]
        *out2 = __PKHTB(inAbuf1, inAbuf2, 16);
 8007890:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8007894:	681a      	ldr	r2, [r3, #0]
 8007896:	4bd2      	ldr	r3, [pc, #840]	; (8007be0 <arm_nn_mat_mult_kernel_q7_q15+0x544>)
 8007898:	4013      	ands	r3, r2
 800789a:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800789e:	6812      	ldr	r2, [r2, #0]
 80078a0:	0c12      	lsrs	r2, r2, #16
 80078a2:	4313      	orrs	r3, r2
 80078a4:	461a      	mov	r2, r3
 80078a6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	601a      	str	r2, [r3, #0]
        *out1 = __PKHBT(inAbuf2, inAbuf1, 16);
 80078ae:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	b29a      	uxth	r2, r3
 80078b6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	041b      	lsls	r3, r3, #16
 80078be:	4313      	orrs	r3, r2
 80078c0:	461a      	mov	r2, r3
 80078c2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	601a      	str	r2, [r3, #0]
        return source;
 80078ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80078ce:	681a      	ldr	r2, [r3, #0]

            pA = (q7_t *) read_and_pad((void *)pA, &inA11, &inA12);
 80078d0:	f107 030c 	add.w	r3, r7, #12
 80078d4:	601a      	str	r2, [r3, #0]
 80078d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078da:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
 80078de:	601a      	str	r2, [r3, #0]
 80078e0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80078e4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80078e8:	601a      	str	r2, [r3, #0]
 80078ea:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80078ee:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80078f2:	601a      	str	r2, [r3, #0]
        q31_t     inA = *__SIMD32(source)++;
 80078f4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80078f8:	6813      	ldr	r3, [r2, #0]
 80078fa:	1d19      	adds	r1, r3, #4
 80078fc:	6011      	str	r1, [r2, #0]
 80078fe:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	6013      	str	r3, [r2, #0]
        q31_t     inAbuf1 = __SXTB16(__ROR(inA, 8));
 8007906:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800790a:	681a      	ldr	r2, [r3, #0]
 800790c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8007910:	601a      	str	r2, [r3, #0]
 8007912:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8007916:	2208      	movs	r2, #8
 8007918:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 800791a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800791e:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 8007922:	6812      	ldr	r2, [r2, #0]
 8007924:	f002 021f 	and.w	r2, r2, #31
 8007928:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 800792a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d103      	bne.n	800793c <arm_nn_mat_mult_kernel_q7_q15+0x2a0>
    return op1;
 8007934:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	e007      	b.n	800794c <arm_nn_mat_mult_kernel_q7_q15+0x2b0>
  return (op1 >> op2) | (op1 << (32U - op2));
 800793c:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8007940:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8007944:	6812      	ldr	r2, [r2, #0]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	fa62 f303 	ror.w	r3, r2, r3
 800794c:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8007950:	6013      	str	r3, [r2, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8007952:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	fa2f f283 	sxtb16	r2, r3
 800795c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8007960:	601a      	str	r2, [r3, #0]
  return(result);
 8007962:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800796c:	601a      	str	r2, [r3, #0]
        q31_t     inAbuf2 = __SXTB16(inA);
 800796e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8007972:	681a      	ldr	r2, [r3, #0]
 8007974:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8007978:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800797a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	fa2f f283 	sxtb16	r2, r3
 8007984:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8007988:	601a      	str	r2, [r3, #0]
  return(result);
 800798a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800798e:	681a      	ldr	r2, [r3, #0]
 8007990:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8007994:	601a      	str	r2, [r3, #0]
        *out2 = __PKHTB(inAbuf1, inAbuf2, 16);
 8007996:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800799a:	681a      	ldr	r2, [r3, #0]
 800799c:	4b90      	ldr	r3, [pc, #576]	; (8007be0 <arm_nn_mat_mult_kernel_q7_q15+0x544>)
 800799e:	4013      	ands	r3, r2
 80079a0:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 80079a4:	6812      	ldr	r2, [r2, #0]
 80079a6:	0c12      	lsrs	r2, r2, #16
 80079a8:	4313      	orrs	r3, r2
 80079aa:	461a      	mov	r2, r3
 80079ac:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	601a      	str	r2, [r3, #0]
        *out1 = __PKHBT(inAbuf2, inAbuf1, 16);
 80079b4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	b29a      	uxth	r2, r3
 80079bc:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	041b      	lsls	r3, r3, #16
 80079c4:	4313      	orrs	r3, r2
 80079c6:	461a      	mov	r2, r3
 80079c8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	601a      	str	r2, [r3, #0]
        return source;
 80079d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80079d4:	681b      	ldr	r3, [r3, #0]
            pA2 = (q7_t *) read_and_pad((void *)pA2, &inA21, &inA22);
 80079d6:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8

            sum = __SMLAD(inA11, inB1, sum);
 80079da:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4619      	mov	r1, r3
 80079e2:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 80079e6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80079ea:	f8c7 1114 	str.w	r1, [r7, #276]	; 0x114
 80079ee:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 80079f2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80079f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079fa:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80079fe:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8007a02:	fb23 1202 	smlad	r2, r3, r2, r1
 8007a06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a0a:	601a      	str	r2, [r3, #0]
  return(result);
 8007a0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
            sum2 = __SMLAD(inA11, inB2, sum2);
 8007a16:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4619      	mov	r1, r3
 8007a1e:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8007a22:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8007a26:	f8c7 1124 	str.w	r1, [r7, #292]	; 0x124
 8007a2a:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
 8007a2e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8007a32:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007a36:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8007a3a:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8007a3e:	fb23 1302 	smlad	r3, r3, r2, r1
 8007a42:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  return(result);
 8007a46:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007a4a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
            sum3 = __SMLAD(inA21, inB1, sum3);
 8007a4e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4619      	mov	r1, r3
 8007a56:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8007a5a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8007a5e:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 8007a62:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 8007a66:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8007a6a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007a6e:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8007a72:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8007a76:	fb23 1302 	smlad	r3, r3, r2, r1
 8007a7a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  return(result);
 8007a7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007a82:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
            sum4 = __SMLAD(inA21, inB2, sum4);
 8007a86:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4619      	mov	r1, r3
 8007a8e:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8007a92:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8007a96:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
 8007a9a:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 8007a9e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8007aa2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8007aa6:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8007aaa:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8007aae:	fb23 1302 	smlad	r3, r3, r2, r1
 8007ab2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 8007ab6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007aba:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

            inB1 = *__SIMD32(pB)++;
 8007abe:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8007ac2:	6813      	ldr	r3, [r2, #0]
 8007ac4:	1d19      	adds	r1, r3, #4
 8007ac6:	6011      	str	r1, [r2, #0]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
            inB2 = *__SIMD32(pB2)++;
 8007ace:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8007ad2:	6813      	ldr	r3, [r2, #0]
 8007ad4:	1d19      	adds	r1, r3, #4
 8007ad6:	6011      	str	r1, [r2, #0]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188

            sum = __SMLAD(inA12, inB1, sum);
 8007ade:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4619      	mov	r1, r3
 8007ae6:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8007aea:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8007aee:	f8c7 1154 	str.w	r1, [r7, #340]	; 0x154
 8007af2:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 8007af6:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8007afa:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8007afe:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8007b02:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 8007b06:	fb23 1302 	smlad	r3, r3, r2, r1
 8007b0a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
  return(result);
 8007b0e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8007b12:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
            sum2 = __SMLAD(inA12, inB2, sum2);
 8007b16:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4619      	mov	r1, r3
 8007b1e:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8007b22:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8007b26:	f8c7 1164 	str.w	r1, [r7, #356]	; 0x164
 8007b2a:	f8c7 2160 	str.w	r2, [r7, #352]	; 0x160
 8007b2e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8007b32:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8007b36:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8007b3a:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 8007b3e:	fb23 1302 	smlad	r3, r3, r2, r1
 8007b42:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
  return(result);
 8007b46:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8007b4a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
            sum3 = __SMLAD(inA22, inB1, sum3);
 8007b4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4619      	mov	r1, r3
 8007b56:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8007b5a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8007b5e:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
 8007b62:	f8c7 2170 	str.w	r2, [r7, #368]	; 0x170
 8007b66:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8007b6a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8007b6e:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 8007b72:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8007b76:	fb23 1302 	smlad	r3, r3, r2, r1
 8007b7a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 8007b7e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8007b82:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
            sum4 = __SMLAD(inA22, inB2, sum4);
 8007b86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4619      	mov	r1, r3
 8007b8e:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8007b92:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8007b96:	f8c7 1184 	str.w	r1, [r7, #388]	; 0x184
 8007b9a:	f8c7 2180 	str.w	r2, [r7, #384]	; 0x180
 8007b9e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8007ba2:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8007ba6:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8007baa:	f8d7 117c 	ldr.w	r1, [r7, #380]	; 0x17c
 8007bae:	fb23 1302 	smlad	r3, r3, r2, r1
 8007bb2:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
  return(result);
 8007bb6:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8007bba:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

            colCnt--;
 8007bbe:	f8b7 31e6 	ldrh.w	r3, [r7, #486]	; 0x1e6
 8007bc2:	3b01      	subs	r3, #1
 8007bc4:	f8a7 31e6 	strh.w	r3, [r7, #486]	; 0x1e6
        while (colCnt)
 8007bc8:	f8b7 31e6 	ldrh.w	r3, [r7, #486]	; 0x1e6
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	f47f adee 	bne.w	80077ae <arm_nn_mat_mult_kernel_q7_q15+0x112>
        }                       /* while over colCnt */
        colCnt = numCol_A & 0x3;
 8007bd2:	1d3b      	adds	r3, r7, #4
 8007bd4:	881b      	ldrh	r3, [r3, #0]
 8007bd6:	f003 0303 	and.w	r3, r3, #3
 8007bda:	f8a7 31e6 	strh.w	r3, [r7, #486]	; 0x1e6
        while (colCnt)
 8007bde:	e058      	b.n	8007c92 <arm_nn_mat_mult_kernel_q7_q15+0x5f6>
 8007be0:	ffff0000 	.word	0xffff0000
        {
            q7_t      inA1 = *pA++;
 8007be4:	f107 030c 	add.w	r3, r7, #12
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f107 020c 	add.w	r2, r7, #12
 8007bee:	1c59      	adds	r1, r3, #1
 8007bf0:	6011      	str	r1, [r2, #0]
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
            q15_t     inB1 = *pB++;
 8007bf8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	1c99      	adds	r1, r3, #2
 8007c00:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8007c04:	6011      	str	r1, [r2, #0]
 8007c06:	881b      	ldrh	r3, [r3, #0]
 8007c08:	f8a7 3194 	strh.w	r3, [r7, #404]	; 0x194
            q7_t      inA2 = *pA2++;
 8007c0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007c10:	1c5a      	adds	r2, r3, #1
 8007c12:	f8c7 21f8 	str.w	r2, [r7, #504]	; 0x1f8
 8007c16:	781b      	ldrb	r3, [r3, #0]
 8007c18:	f887 3193 	strb.w	r3, [r7, #403]	; 0x193
            q15_t     inB2 = *pB2++;
 8007c1c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	1c99      	adds	r1, r3, #2
 8007c24:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8007c28:	6011      	str	r1, [r2, #0]
 8007c2a:	881b      	ldrh	r3, [r3, #0]
 8007c2c:	f8a7 3190 	strh.w	r3, [r7, #400]	; 0x190

            sum += inA1 * inB1;
 8007c30:	f997 3197 	ldrsb.w	r3, [r7, #407]	; 0x197
 8007c34:	f9b7 2194 	ldrsh.w	r2, [r7, #404]	; 0x194
 8007c38:	fb02 f303 	mul.w	r3, r2, r3
 8007c3c:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8007c40:	4413      	add	r3, r2
 8007c42:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
            sum2 += inA1 * inB2;
 8007c46:	f997 3197 	ldrsb.w	r3, [r7, #407]	; 0x197
 8007c4a:	f9b7 2190 	ldrsh.w	r2, [r7, #400]	; 0x190
 8007c4e:	fb02 f303 	mul.w	r3, r2, r3
 8007c52:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 8007c56:	4413      	add	r3, r2
 8007c58:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
            sum3 += inA2 * inB1;
 8007c5c:	f997 3193 	ldrsb.w	r3, [r7, #403]	; 0x193
 8007c60:	f9b7 2194 	ldrsh.w	r2, [r7, #404]	; 0x194
 8007c64:	fb02 f303 	mul.w	r3, r2, r3
 8007c68:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8007c6c:	4413      	add	r3, r2
 8007c6e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
            sum4 += inA2 * inB2;
 8007c72:	f997 3193 	ldrsb.w	r3, [r7, #403]	; 0x193
 8007c76:	f9b7 2190 	ldrsh.w	r2, [r7, #400]	; 0x190
 8007c7a:	fb02 f303 	mul.w	r3, r2, r3
 8007c7e:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 8007c82:	4413      	add	r3, r2
 8007c84:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
            colCnt--;
 8007c88:	f8b7 31e6 	ldrh.w	r3, [r7, #486]	; 0x1e6
 8007c8c:	3b01      	subs	r3, #1
 8007c8e:	f8a7 31e6 	strh.w	r3, [r7, #486]	; 0x1e6
        while (colCnt)
 8007c92:	f8b7 31e6 	ldrh.w	r3, [r7, #486]	; 0x1e6
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d1a4      	bne.n	8007be4 <arm_nn_mat_mult_kernel_q7_q15+0x548>
        }                       /* while over colCnt */
        *pOut++ = (q7_t) __SSAT((sum >> out_shift), 8);
 8007c9a:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8007c9e:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8007ca2:	fa42 f303 	asr.w	r3, r2, r3
 8007ca6:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8007caa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8007cae:	f303 0307 	ssat	r3, #8, r3
 8007cb2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8007cb6:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 8007cba:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8007cbe:	1c5a      	adds	r2, r3, #1
 8007cc0:	f8c7 221c 	str.w	r2, [r7, #540]	; 0x21c
 8007cc4:	b24a      	sxtb	r2, r1
 8007cc6:	701a      	strb	r2, [r3, #0]
        *pOut++ = (q7_t) __SSAT((sum3 >> out_shift), 8);
 8007cc8:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8007ccc:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8007cd0:	fa42 f303 	asr.w	r3, r2, r3
 8007cd4:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8007cd8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8007cdc:	f303 0307 	ssat	r3, #8, r3
 8007ce0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8007ce4:	f8d7 11a8 	ldr.w	r1, [r7, #424]	; 0x1a8
 8007ce8:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8007cec:	1c5a      	adds	r2, r3, #1
 8007cee:	f8c7 221c 	str.w	r2, [r7, #540]	; 0x21c
 8007cf2:	b24a      	sxtb	r2, r1
 8007cf4:	701a      	strb	r2, [r3, #0]
        *pOut2++ = (q7_t) __SSAT((sum2 >> out_shift), 8);
 8007cf6:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8007cfa:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 8007cfe:	fa42 f303 	asr.w	r3, r2, r3
 8007d02:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8007d06:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8007d0a:	f303 0307 	ssat	r3, #8, r3
 8007d0e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8007d12:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 8007d16:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8007d1a:	1c5a      	adds	r2, r3, #1
 8007d1c:	f8c7 2204 	str.w	r2, [r7, #516]	; 0x204
 8007d20:	b24a      	sxtb	r2, r1
 8007d22:	701a      	strb	r2, [r3, #0]
        *pOut2++ = (q7_t) __SSAT((sum4 >> out_shift), 8);
 8007d24:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8007d28:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 8007d2c:	fa42 f303 	asr.w	r3, r2, r3
 8007d30:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8007d34:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8007d38:	f303 0307 	ssat	r3, #8, r3
 8007d3c:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8007d40:	f8d7 1198 	ldr.w	r1, [r7, #408]	; 0x198
 8007d44:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8007d48:	1c5a      	adds	r2, r3, #1
 8007d4a:	f8c7 2204 	str.w	r2, [r7, #516]	; 0x204
 8007d4e:	b24a      	sxtb	r2, r1
 8007d50:	701a      	strb	r2, [r3, #0]

        /* skip the row computed with A2 */
        pA += numCol_A;
 8007d52:	1d3b      	adds	r3, r7, #4
 8007d54:	881a      	ldrh	r2, [r3, #0]
 8007d56:	f107 030c 	add.w	r3, r7, #12
 8007d5a:	f107 010c 	add.w	r1, r7, #12
 8007d5e:	6809      	ldr	r1, [r1, #0]
 8007d60:	440a      	add	r2, r1
 8007d62:	601a      	str	r2, [r3, #0]
        rowCnt--;
 8007d64:	f8b7 31fe 	ldrh.w	r3, [r7, #510]	; 0x1fe
 8007d68:	3b01      	subs	r3, #1
 8007d6a:	f8a7 31fe 	strh.w	r3, [r7, #510]	; 0x1fe
    while (rowCnt)
 8007d6e:	f8b7 31fe 	ldrh.w	r3, [r7, #510]	; 0x1fe
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	f47f acb3 	bne.w	80076de <arm_nn_mat_mult_kernel_q7_q15+0x42>
    }                           /* for over ch_im_out */

    /* compute left-over row if any */
    if (ch_im_out & 0x1)
 8007d78:	1dbb      	adds	r3, r7, #6
 8007d7a:	881b      	ldrh	r3, [r3, #0]
 8007d7c:	f003 0301 	and.w	r3, r3, #1
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	f000 81eb 	beq.w	800815c <arm_nn_mat_mult_kernel_q7_q15+0xac0>
    {
        /* setup pointers for B */
        const q15_t *pB = pInBuffer;
 8007d86:	f107 0320 	add.w	r3, r7, #32
 8007d8a:	f107 0208 	add.w	r2, r7, #8
 8007d8e:	6812      	ldr	r2, [r2, #0]
 8007d90:	601a      	str	r2, [r3, #0]
        const q15_t *pB2 = pB + numCol_A;
 8007d92:	f107 0320 	add.w	r3, r7, #32
 8007d96:	681a      	ldr	r2, [r3, #0]
 8007d98:	1d3b      	adds	r3, r7, #4
 8007d9a:	881b      	ldrh	r3, [r3, #0]
 8007d9c:	005b      	lsls	r3, r3, #1
 8007d9e:	441a      	add	r2, r3
 8007da0:	f107 031c 	add.w	r3, r7, #28
 8007da4:	601a      	str	r2, [r3, #0]

        /* load the bias */
        q31_t     sum = ((q31_t)(*pBias) << bias_shift) + NN_ROUND(out_shift);
 8007da6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007daa:	f993 3000 	ldrsb.w	r3, [r3]
 8007dae:	461a      	mov	r2, r3
 8007db0:	f8b7 3210 	ldrh.w	r3, [r7, #528]	; 0x210
 8007db4:	409a      	lsls	r2, r3
 8007db6:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8007dba:	3b01      	subs	r3, #1
 8007dbc:	2101      	movs	r1, #1
 8007dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8007dc2:	4413      	add	r3, r2
 8007dc4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
        q31_t     sum2 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8007dc8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007dcc:	1c5a      	adds	r2, r3, #1
 8007dce:	f8c7 2200 	str.w	r2, [r7, #512]	; 0x200
 8007dd2:	f993 3000 	ldrsb.w	r3, [r3]
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	f8b7 3210 	ldrh.w	r3, [r7, #528]	; 0x210
 8007ddc:	409a      	lsls	r2, r3
 8007dde:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8007de2:	3b01      	subs	r3, #1
 8007de4:	2101      	movs	r1, #1
 8007de6:	fa01 f303 	lsl.w	r3, r1, r3
 8007dea:	4413      	add	r3, r2
 8007dec:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc

        uint16_t  colCnt = numCol_A >> 2;
 8007df0:	1d3b      	adds	r3, r7, #4
 8007df2:	881b      	ldrh	r3, [r3, #0]
 8007df4:	089b      	lsrs	r3, r3, #2
 8007df6:	f8a7 31da 	strh.w	r3, [r7, #474]	; 0x1da
        while (colCnt)
 8007dfa:	e138      	b.n	800806e <arm_nn_mat_mult_kernel_q7_q15+0x9d2>
        {
            q31_t     inA11, inA12;
            q31_t     inB1 = *__SIMD32(pB)++;
 8007dfc:	f107 0220 	add.w	r2, r7, #32
 8007e00:	6813      	ldr	r3, [r2, #0]
 8007e02:	1d19      	adds	r1, r3, #4
 8007e04:	6011      	str	r1, [r2, #0]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
            q31_t     inB2 = *__SIMD32(pB2)++;
 8007e0c:	f107 021c 	add.w	r2, r7, #28
 8007e10:	6813      	ldr	r3, [r2, #0]
 8007e12:	1d19      	adds	r1, r3, #4
 8007e14:	6011      	str	r1, [r2, #0]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8007e1c:	f107 0310 	add.w	r3, r7, #16
 8007e20:	f107 020c 	add.w	r2, r7, #12
 8007e24:	6812      	ldr	r2, [r2, #0]
 8007e26:	601a      	str	r2, [r3, #0]
 8007e28:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007e2c:	f107 0218 	add.w	r2, r7, #24
 8007e30:	601a      	str	r2, [r3, #0]
 8007e32:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007e36:	f107 0214 	add.w	r2, r7, #20
 8007e3a:	601a      	str	r2, [r3, #0]
        q31_t     inA = *__SIMD32(source)++;
 8007e3c:	f107 0210 	add.w	r2, r7, #16
 8007e40:	6813      	ldr	r3, [r2, #0]
 8007e42:	1d19      	adds	r1, r3, #4
 8007e44:	6011      	str	r1, [r2, #0]
 8007e46:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	6013      	str	r3, [r2, #0]
        q31_t     inAbuf1 = __SXTB16(__ROR(inA, 8));
 8007e4e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007e52:	681a      	ldr	r2, [r3, #0]
 8007e54:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007e58:	601a      	str	r2, [r3, #0]
 8007e5a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007e5e:	2208      	movs	r2, #8
 8007e60:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8007e62:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007e66:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8007e6a:	6812      	ldr	r2, [r2, #0]
 8007e6c:	f002 021f 	and.w	r2, r2, #31
 8007e70:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8007e72:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d103      	bne.n	8007e84 <arm_nn_mat_mult_kernel_q7_q15+0x7e8>
    return op1;
 8007e7c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	e007      	b.n	8007e94 <arm_nn_mat_mult_kernel_q7_q15+0x7f8>
  return (op1 >> op2) | (op1 << (32U - op2));
 8007e84:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8007e88:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007e8c:	6812      	ldr	r2, [r2, #0]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	fa62 f303 	ror.w	r3, r2, r3
 8007e94:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007e98:	6013      	str	r3, [r2, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8007e9a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	fa2f f283 	sxtb16	r2, r3
 8007ea4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007ea8:	601a      	str	r2, [r3, #0]
  return(result);
 8007eaa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007eae:	681a      	ldr	r2, [r3, #0]
 8007eb0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007eb4:	601a      	str	r2, [r3, #0]
        q31_t     inAbuf2 = __SXTB16(inA);
 8007eb6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007eba:	681a      	ldr	r2, [r3, #0]
 8007ebc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007ec0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8007ec2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	fa2f f283 	sxtb16	r2, r3
 8007ecc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007ed0:	601a      	str	r2, [r3, #0]
  return(result);
 8007ed2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007ed6:	681a      	ldr	r2, [r3, #0]
 8007ed8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007edc:	601a      	str	r2, [r3, #0]
        *out2 = __PKHTB(inAbuf1, inAbuf2, 16);
 8007ede:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007ee2:	681a      	ldr	r2, [r3, #0]
 8007ee4:	4ba5      	ldr	r3, [pc, #660]	; (800817c <arm_nn_mat_mult_kernel_q7_q15+0xae0>)
 8007ee6:	4013      	ands	r3, r2
 8007ee8:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8007eec:	6812      	ldr	r2, [r2, #0]
 8007eee:	0c12      	lsrs	r2, r2, #16
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	461a      	mov	r2, r3
 8007ef4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	601a      	str	r2, [r3, #0]
        *out1 = __PKHBT(inAbuf2, inAbuf1, 16);
 8007efc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	b29a      	uxth	r2, r3
 8007f04:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	041b      	lsls	r3, r3, #16
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	461a      	mov	r2, r3
 8007f10:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	601a      	str	r2, [r3, #0]
        return source;
 8007f18:	f107 0310 	add.w	r3, r7, #16
 8007f1c:	681a      	ldr	r2, [r3, #0]

            pA = (q7_t *) read_and_pad((void *)pA, &inA11, &inA12);
 8007f1e:	f107 030c 	add.w	r3, r7, #12
 8007f22:	601a      	str	r2, [r3, #0]

            sum = __SMLAD(inA11, inB1, sum);
 8007f24:	f107 0318 	add.w	r3, r7, #24
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 8007f30:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 8007f34:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8007f38:	6018      	str	r0, [r3, #0]
 8007f3a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8007f3e:	6019      	str	r1, [r3, #0]
 8007f40:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007f44:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8007f46:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8007f50:	6812      	ldr	r2, [r2, #0]
 8007f52:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8007f56:	6809      	ldr	r1, [r1, #0]
 8007f58:	fb23 1202 	smlad	r2, r3, r2, r1
 8007f5c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007f60:	601a      	str	r2, [r3, #0]
  return(result);
 8007f62:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
            sum2 = __SMLAD(inA11, inB2, sum2);
 8007f6c:	f107 0318 	add.w	r3, r7, #24
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4618      	mov	r0, r3
 8007f74:	f8d7 11b8 	ldr.w	r1, [r7, #440]	; 0x1b8
 8007f78:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8007f7c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8007f80:	6018      	str	r0, [r3, #0]
 8007f82:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8007f86:	6019      	str	r1, [r3, #0]
 8007f88:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8007f8c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8007f8e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8007f98:	6812      	ldr	r2, [r2, #0]
 8007f9a:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8007f9e:	6809      	ldr	r1, [r1, #0]
 8007fa0:	fb23 1202 	smlad	r2, r3, r2, r1
 8007fa4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8007fa8:	601a      	str	r2, [r3, #0]
  return(result);
 8007faa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc

            inB1 = *__SIMD32(pB)++;
 8007fb4:	f107 0220 	add.w	r2, r7, #32
 8007fb8:	6813      	ldr	r3, [r2, #0]
 8007fba:	1d19      	adds	r1, r3, #4
 8007fbc:	6011      	str	r1, [r2, #0]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
            inB2 = *__SIMD32(pB2)++;
 8007fc4:	f107 021c 	add.w	r2, r7, #28
 8007fc8:	6813      	ldr	r3, [r2, #0]
 8007fca:	1d19      	adds	r1, r3, #4
 8007fcc:	6011      	str	r1, [r2, #0]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
            sum = __SMLAD(inA12, inB1, sum);
 8007fd4:	f107 0314 	add.w	r3, r7, #20
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 8007fe0:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 8007fe4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8007fe8:	6018      	str	r0, [r3, #0]
 8007fea:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8007fee:	6019      	str	r1, [r3, #0]
 8007ff0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8007ff4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8007ff6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8008000:	6812      	ldr	r2, [r2, #0]
 8008002:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8008006:	6809      	ldr	r1, [r1, #0]
 8008008:	fb23 1202 	smlad	r2, r3, r2, r1
 800800c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8008010:	601a      	str	r2, [r3, #0]
  return(result);
 8008012:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
            sum2 = __SMLAD(inA12, inB2, sum2);
 800801c:	f107 0314 	add.w	r3, r7, #20
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	4618      	mov	r0, r3
 8008024:	f8d7 11b8 	ldr.w	r1, [r7, #440]	; 0x1b8
 8008028:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800802c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8008030:	6018      	str	r0, [r3, #0]
 8008032:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8008036:	6019      	str	r1, [r3, #0]
 8008038:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800803c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800803e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8008048:	6812      	ldr	r2, [r2, #0]
 800804a:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 800804e:	6809      	ldr	r1, [r1, #0]
 8008050:	fb23 1202 	smlad	r2, r3, r2, r1
 8008054:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008058:	601a      	str	r2, [r3, #0]
  return(result);
 800805a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc

            colCnt--;
 8008064:	f8b7 31da 	ldrh.w	r3, [r7, #474]	; 0x1da
 8008068:	3b01      	subs	r3, #1
 800806a:	f8a7 31da 	strh.w	r3, [r7, #474]	; 0x1da
        while (colCnt)
 800806e:	f8b7 31da 	ldrh.w	r3, [r7, #474]	; 0x1da
 8008072:	2b00      	cmp	r3, #0
 8008074:	f47f aec2 	bne.w	8007dfc <arm_nn_mat_mult_kernel_q7_q15+0x760>
        }
        colCnt = numCol_A & 0x3;
 8008078:	1d3b      	adds	r3, r7, #4
 800807a:	881b      	ldrh	r3, [r3, #0]
 800807c:	f003 0303 	and.w	r3, r3, #3
 8008080:	f8a7 31da 	strh.w	r3, [r7, #474]	; 0x1da
        while (colCnt)
 8008084:	e038      	b.n	80080f8 <arm_nn_mat_mult_kernel_q7_q15+0xa5c>
        {
            q7_t      inA1 = *pA++;
 8008086:	f107 030c 	add.w	r3, r7, #12
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f107 020c 	add.w	r2, r7, #12
 8008090:	1c59      	adds	r1, r3, #1
 8008092:	6011      	str	r1, [r2, #0]
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	f887 31c7 	strb.w	r3, [r7, #455]	; 0x1c7
            q15_t     inB1 = *pB++;
 800809a:	f107 0320 	add.w	r3, r7, #32
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	1c99      	adds	r1, r3, #2
 80080a2:	f107 0220 	add.w	r2, r7, #32
 80080a6:	6011      	str	r1, [r2, #0]
 80080a8:	881b      	ldrh	r3, [r3, #0]
 80080aa:	f8a7 31c4 	strh.w	r3, [r7, #452]	; 0x1c4
            q15_t     inB2 = *pB2++;
 80080ae:	f107 031c 	add.w	r3, r7, #28
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	1c99      	adds	r1, r3, #2
 80080b6:	f107 021c 	add.w	r2, r7, #28
 80080ba:	6011      	str	r1, [r2, #0]
 80080bc:	881b      	ldrh	r3, [r3, #0]
 80080be:	f8a7 31c2 	strh.w	r3, [r7, #450]	; 0x1c2

            sum += inA1 * inB1;
 80080c2:	f997 31c7 	ldrsb.w	r3, [r7, #455]	; 0x1c7
 80080c6:	f9b7 21c4 	ldrsh.w	r2, [r7, #452]	; 0x1c4
 80080ca:	fb02 f303 	mul.w	r3, r2, r3
 80080ce:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 80080d2:	4413      	add	r3, r2
 80080d4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
            sum2 += inA1 * inB2;
 80080d8:	f997 31c7 	ldrsb.w	r3, [r7, #455]	; 0x1c7
 80080dc:	f9b7 21c2 	ldrsh.w	r2, [r7, #450]	; 0x1c2
 80080e0:	fb02 f303 	mul.w	r3, r2, r3
 80080e4:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80080e8:	4413      	add	r3, r2
 80080ea:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
            colCnt--;
 80080ee:	f8b7 31da 	ldrh.w	r3, [r7, #474]	; 0x1da
 80080f2:	3b01      	subs	r3, #1
 80080f4:	f8a7 31da 	strh.w	r3, [r7, #474]	; 0x1da
        while (colCnt)
 80080f8:	f8b7 31da 	ldrh.w	r3, [r7, #474]	; 0x1da
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d1c2      	bne.n	8008086 <arm_nn_mat_mult_kernel_q7_q15+0x9ea>
        }

        *pOut++ = (q7_t) __SSAT((sum >> out_shift), 8);
 8008100:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8008104:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 8008108:	fa42 f303 	asr.w	r3, r2, r3
 800810c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8008110:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8008114:	f303 0307 	ssat	r3, #8, r3
 8008118:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 800811c:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 8008120:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8008124:	1c5a      	adds	r2, r3, #1
 8008126:	f8c7 221c 	str.w	r2, [r7, #540]	; 0x21c
 800812a:	b24a      	sxtb	r2, r1
 800812c:	701a      	strb	r2, [r3, #0]
        *pOut2++ = (q7_t) __SSAT((sum2 >> out_shift), 8);
 800812e:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8008132:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8008136:	fa42 f303 	asr.w	r3, r2, r3
 800813a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 800813e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8008142:	f303 0307 	ssat	r3, #8, r3
 8008146:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800814a:	f8d7 11c8 	ldr.w	r1, [r7, #456]	; 0x1c8
 800814e:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8008152:	1c5a      	adds	r2, r3, #1
 8008154:	f8c7 2204 	str.w	r2, [r7, #516]	; 0x204
 8008158:	b24a      	sxtb	r2, r1
 800815a:	701a      	strb	r2, [r3, #0]
    }

    pOut += ch_im_out;
 800815c:	1dbb      	adds	r3, r7, #6
 800815e:	881b      	ldrh	r3, [r3, #0]
 8008160:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8008164:	4413      	add	r3, r2
 8008166:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c

    /* return the new output pointer with offset */
    return pOut;
 800816a:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
#else
    /* To be completed */
    return NULL;
#endif                          /* ARM_MATH_DSP */

}
 800816e:	4618      	mov	r0, r3
 8008170:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8008174:	46bd      	mov	sp, r7
 8008176:	bc90      	pop	{r4, r7}
 8008178:	4770      	bx	lr
 800817a:	bf00      	nop
 800817c:	ffff0000 	.word	0xffff0000

08008180 <arm_nn_mat_mult_kernel_q7_q15_reordered>:
                                                  const uint16_t numCol_A,
                                                  const uint16_t bias_shift,
                                                  const uint16_t out_shift, 
                                                  const q7_t * bias, 
                                                  q7_t * pOut)
{
 8008180:	b490      	push	{r4, r7}
 8008182:	b0d2      	sub	sp, #328	; 0x148
 8008184:	af00      	add	r7, sp, #0
 8008186:	f107 040c 	add.w	r4, r7, #12
 800818a:	6020      	str	r0, [r4, #0]
 800818c:	f107 0008 	add.w	r0, r7, #8
 8008190:	6001      	str	r1, [r0, #0]
 8008192:	4619      	mov	r1, r3
 8008194:	1dbb      	adds	r3, r7, #6
 8008196:	801a      	strh	r2, [r3, #0]
 8008198:	1d3b      	adds	r3, r7, #4
 800819a:	460a      	mov	r2, r1
 800819c:	801a      	strh	r2, [r3, #0]

#if defined (ARM_MATH_DSP)
    /* set up the second output pointers */
    q7_t     *pOut2 = pOut + ch_im_out;
 800819e:	1dbb      	adds	r3, r7, #6
 80081a0:	881b      	ldrh	r3, [r3, #0]
 80081a2:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 80081a6:	4413      	add	r3, r2
 80081a8:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    int       i;

    /* this loop over rows in A */
    for (i = 0; i < ch_im_out; i += 2)
 80081ac:	2300      	movs	r3, #0
 80081ae:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80081b2:	e2df      	b.n	8008774 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x5f4>
    {
        /* setup pointers for B */
        const q15_t *pB = pInBuffer;
 80081b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80081b8:	f107 0208 	add.w	r2, r7, #8
 80081bc:	6812      	ldr	r2, [r2, #0]
 80081be:	601a      	str	r2, [r3, #0]
        const q15_t *pB2 = pB + numCol_A;
 80081c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80081c4:	681a      	ldr	r2, [r3, #0]
 80081c6:	1d3b      	adds	r3, r7, #4
 80081c8:	881b      	ldrh	r3, [r3, #0]
 80081ca:	005b      	lsls	r3, r3, #1
 80081cc:	441a      	add	r2, r3
 80081ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80081d2:	601a      	str	r2, [r3, #0]

        /* align the second pointer for A */
        const q7_t *pA2 = pA + numCol_A;
 80081d4:	1d3b      	adds	r3, r7, #4
 80081d6:	881b      	ldrh	r3, [r3, #0]
 80081d8:	f107 020c 	add.w	r2, r7, #12
 80081dc:	6812      	ldr	r2, [r2, #0]
 80081de:	4413      	add	r3, r2
 80081e0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

        /* init the sum with bias */
        q31_t     sum =  ((q31_t)(bias[i]) << bias_shift) + NN_ROUND(out_shift);
 80081e4:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80081e8:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 80081ec:	4413      	add	r3, r2
 80081ee:	f993 3000 	ldrsb.w	r3, [r3]
 80081f2:	461a      	mov	r2, r3
 80081f4:	f8b7 3150 	ldrh.w	r3, [r7, #336]	; 0x150
 80081f8:	409a      	lsls	r2, r3
 80081fa:	f8b7 3154 	ldrh.w	r3, [r7, #340]	; 0x154
 80081fe:	3b01      	subs	r3, #1
 8008200:	2101      	movs	r1, #1
 8008202:	fa01 f303 	lsl.w	r3, r1, r3
 8008206:	4413      	add	r3, r2
 8008208:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
        q31_t     sum2 = ((q31_t)(bias[i]) << bias_shift) + NN_ROUND(out_shift);
 800820c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8008210:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8008214:	4413      	add	r3, r2
 8008216:	f993 3000 	ldrsb.w	r3, [r3]
 800821a:	461a      	mov	r2, r3
 800821c:	f8b7 3150 	ldrh.w	r3, [r7, #336]	; 0x150
 8008220:	409a      	lsls	r2, r3
 8008222:	f8b7 3154 	ldrh.w	r3, [r7, #340]	; 0x154
 8008226:	3b01      	subs	r3, #1
 8008228:	2101      	movs	r1, #1
 800822a:	fa01 f303 	lsl.w	r3, r1, r3
 800822e:	4413      	add	r3, r2
 8008230:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
        q31_t     sum3 = ((q31_t)(bias[i + 1]) << bias_shift) + NN_ROUND(out_shift);
 8008234:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8008238:	3301      	adds	r3, #1
 800823a:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 800823e:	4413      	add	r3, r2
 8008240:	f993 3000 	ldrsb.w	r3, [r3]
 8008244:	461a      	mov	r2, r3
 8008246:	f8b7 3150 	ldrh.w	r3, [r7, #336]	; 0x150
 800824a:	409a      	lsls	r2, r3
 800824c:	f8b7 3154 	ldrh.w	r3, [r7, #340]	; 0x154
 8008250:	3b01      	subs	r3, #1
 8008252:	2101      	movs	r1, #1
 8008254:	fa01 f303 	lsl.w	r3, r1, r3
 8008258:	4413      	add	r3, r2
 800825a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
        q31_t     sum4 = ((q31_t)(bias[i + 1]) << bias_shift) + NN_ROUND(out_shift);
 800825e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8008262:	3301      	adds	r3, #1
 8008264:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8008268:	4413      	add	r3, r2
 800826a:	f993 3000 	ldrsb.w	r3, [r3]
 800826e:	461a      	mov	r2, r3
 8008270:	f8b7 3150 	ldrh.w	r3, [r7, #336]	; 0x150
 8008274:	409a      	lsls	r2, r3
 8008276:	f8b7 3154 	ldrh.w	r3, [r7, #340]	; 0x154
 800827a:	3b01      	subs	r3, #1
 800827c:	2101      	movs	r1, #1
 800827e:	fa01 f303 	lsl.w	r3, r1, r3
 8008282:	4413      	add	r3, r2
 8008284:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

        uint16_t  colCnt = numCol_A >> 2;
 8008288:	1d3b      	adds	r3, r7, #4
 800828a:	881b      	ldrh	r3, [r3, #0]
 800828c:	089b      	lsrs	r3, r3, #2
 800828e:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
        /* accumulate over the vector */
        while (colCnt)
 8008292:	e19e      	b.n	80085d2 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x452>
        {
            q31_t     inA11, inA12, inA21, inA22;
            q31_t     inB1 = *__SIMD32(pB)++;
 8008294:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8008298:	6813      	ldr	r3, [r2, #0]
 800829a:	1d19      	adds	r1, r3, #4
 800829c:	6011      	str	r1, [r2, #0]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
            q31_t     inB2 = *__SIMD32(pB2)++;
 80082a4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80082a8:	6813      	ldr	r3, [r2, #0]
 80082aa:	1d19      	adds	r1, r3, #4
 80082ac:	6011      	str	r1, [r2, #0]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80082b4:	f107 0314 	add.w	r3, r7, #20
 80082b8:	f107 020c 	add.w	r2, r7, #12
 80082bc:	6812      	ldr	r2, [r2, #0]
 80082be:	601a      	str	r2, [r3, #0]
 80082c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80082c4:	653b      	str	r3, [r7, #80]	; 0x50
 80082c6:	f107 0320 	add.w	r3, r7, #32
 80082ca:	64fb      	str	r3, [r7, #76]	; 0x4c
        q31_t     inA = *__SIMD32(source)++;
 80082cc:	f107 0214 	add.w	r2, r7, #20
 80082d0:	6813      	ldr	r3, [r2, #0]
 80082d2:	1d19      	adds	r1, r3, #4
 80082d4:	6011      	str	r1, [r2, #0]
 80082d6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	6013      	str	r3, [r2, #0]
        *out2 = __SXTB16(__ROR(inA, 8));
 80082de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80082e2:	681a      	ldr	r2, [r3, #0]
 80082e4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80082e8:	601a      	str	r2, [r3, #0]
 80082ea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80082ee:	2208      	movs	r2, #8
 80082f0:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 80082f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80082f6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80082fa:	6812      	ldr	r2, [r2, #0]
 80082fc:	f002 021f 	and.w	r2, r2, #31
 8008300:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8008302:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d103      	bne.n	8008314 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x194>
    return op1;
 800830c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	e007      	b.n	8008324 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x1a4>
  return (op1 >> op2) | (op1 << (32U - op2));
 8008314:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8008318:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800831c:	6812      	ldr	r2, [r2, #0]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	fa62 f303 	ror.w	r3, r2, r3
 8008324:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8008328:	6013      	str	r3, [r2, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800832a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	fa2f f283 	sxtb16	r2, r3
 8008334:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008338:	601a      	str	r2, [r3, #0]
  return(result);
 800833a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	461a      	mov	r2, r3
 8008342:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008344:	601a      	str	r2, [r3, #0]
        *out1 = __SXTB16(inA);
 8008346:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800834a:	681a      	ldr	r2, [r3, #0]
 800834c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008350:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008352:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	fa2f f283 	sxtb16	r2, r3
 800835c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008360:	601a      	str	r2, [r3, #0]
  return(result);
 8008362:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	461a      	mov	r2, r3
 800836a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800836c:	601a      	str	r2, [r3, #0]
        return source;
 800836e:	f107 0314 	add.w	r3, r7, #20
 8008372:	681a      	ldr	r2, [r3, #0]

            pA = (q7_t *) read_and_pad_reordered((void *)pA, &inA11, &inA12);
 8008374:	f107 030c 	add.w	r3, r7, #12
 8008378:	601a      	str	r2, [r3, #0]
 800837a:	f107 0310 	add.w	r3, r7, #16
 800837e:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8008382:	601a      	str	r2, [r3, #0]
 8008384:	f107 031c 	add.w	r3, r7, #28
 8008388:	677b      	str	r3, [r7, #116]	; 0x74
 800838a:	f107 0318 	add.w	r3, r7, #24
 800838e:	673b      	str	r3, [r7, #112]	; 0x70
        q31_t     inA = *__SIMD32(source)++;
 8008390:	f107 0210 	add.w	r2, r7, #16
 8008394:	6813      	ldr	r3, [r2, #0]
 8008396:	1d19      	adds	r1, r3, #4
 8008398:	6011      	str	r1, [r2, #0]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	66fb      	str	r3, [r7, #108]	; 0x6c
        *out2 = __SXTB16(__ROR(inA, 8));
 800839e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80083a2:	2308      	movs	r3, #8
 80083a4:	667b      	str	r3, [r7, #100]	; 0x64
  op2 %= 32U;
 80083a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083a8:	f003 031f 	and.w	r3, r3, #31
 80083ac:	667b      	str	r3, [r7, #100]	; 0x64
  if (op2 == 0U)
 80083ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d101      	bne.n	80083b8 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x238>
    return op1;
 80083b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80083b6:	e003      	b.n	80083c0 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x240>
  return (op1 >> op2) | (op1 << (32U - op2));
 80083b8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80083ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083bc:	fa62 f303 	ror.w	r3, r2, r3
 80083c0:	663b      	str	r3, [r7, #96]	; 0x60
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80083c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80083c4:	fa2f f383 	sxtb16	r3, r3
 80083c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  return(result);
 80083ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083cc:	461a      	mov	r2, r3
 80083ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80083d0:	601a      	str	r2, [r3, #0]
        *out1 = __SXTB16(inA);
 80083d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083d4:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80083d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80083d8:	fa2f f383 	sxtb16	r3, r3
 80083dc:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80083de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80083e0:	461a      	mov	r2, r3
 80083e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80083e4:	601a      	str	r2, [r3, #0]
        return source;
 80083e6:	f107 0310 	add.w	r3, r7, #16
 80083ea:	681b      	ldr	r3, [r3, #0]
            pA2 = (q7_t *) read_and_pad_reordered((void *)pA2, &inA21, &inA22);
 80083ec:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

            sum = __SMLAD(inA11, inB1, sum);
 80083f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4619      	mov	r1, r3
 80083f8:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 80083fc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008400:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 8008404:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008408:	67fb      	str	r3, [r7, #124]	; 0x7c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800840a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800840e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008412:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008414:	fb23 1302 	smlad	r3, r3, r2, r1
 8008418:	67bb      	str	r3, [r7, #120]	; 0x78
  return(result);
 800841a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800841c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
            sum2 = __SMLAD(inA11, inB2, sum2);
 8008420:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4619      	mov	r1, r3
 8008428:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800842c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008430:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8008434:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8008438:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800843c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008440:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8008444:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8008448:	fb23 1302 	smlad	r3, r3, r2, r1
 800844c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return(result);
 8008450:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008454:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            sum3 = __SMLAD(inA21, inB1, sum3);
 8008458:	f107 031c 	add.w	r3, r7, #28
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4619      	mov	r1, r3
 8008460:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8008464:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008468:	f8c7 10a4 	str.w	r1, [r7, #164]	; 0xa4
 800846c:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8008470:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008474:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008478:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800847c:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8008480:	fb23 1302 	smlad	r3, r3, r2, r1
 8008484:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  return(result);
 8008488:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800848c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            sum4 = __SMLAD(inA21, inB2, sum4);
 8008490:	f107 031c 	add.w	r3, r7, #28
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4619      	mov	r1, r3
 8008498:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800849c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084a0:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
 80084a4:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 80084a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80084ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80084b0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80084b4:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 80084b8:	fb23 1302 	smlad	r3, r3, r2, r1
 80084bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return(result);
 80084c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80084c4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

            inB1 = *__SIMD32(pB)++;
 80084c8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80084cc:	6813      	ldr	r3, [r2, #0]
 80084ce:	1d19      	adds	r1, r3, #4
 80084d0:	6011      	str	r1, [r2, #0]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
            inB2 = *__SIMD32(pB2)++;
 80084d8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80084dc:	6813      	ldr	r3, [r2, #0]
 80084de:	1d19      	adds	r1, r3, #4
 80084e0:	6011      	str	r1, [r2, #0]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

            sum = __SMLAD(inA12, inB1, sum);
 80084e8:	f107 0320 	add.w	r3, r7, #32
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4619      	mov	r1, r3
 80084f0:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 80084f4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80084f8:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 80084fc:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8008500:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008504:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008508:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800850c:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8008510:	fb23 1302 	smlad	r3, r3, r2, r1
 8008514:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return(result);
 8008518:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800851c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
            sum2 = __SMLAD(inA12, inB2, sum2);
 8008520:	f107 0320 	add.w	r3, r7, #32
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4619      	mov	r1, r3
 8008528:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800852c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008530:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 8008534:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8008538:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800853c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008540:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008544:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8008548:	fb23 1302 	smlad	r3, r3, r2, r1
 800854c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  return(result);
 8008550:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008554:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            sum3 = __SMLAD(inA22, inB1, sum3);
 8008558:	f107 0318 	add.w	r3, r7, #24
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	4619      	mov	r1, r3
 8008560:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8008564:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008568:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 800856c:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8008570:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008578:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800857c:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8008580:	fb23 1302 	smlad	r3, r3, r2, r1
 8008584:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  return(result);
 8008588:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800858c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            sum4 = __SMLAD(inA22, inB2, sum4);
 8008590:	f107 0318 	add.w	r3, r7, #24
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4619      	mov	r1, r3
 8008598:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800859c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085a0:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 80085a4:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 80085a8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80085ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085b0:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 80085b4:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 80085b8:	fb23 1302 	smlad	r3, r3, r2, r1
 80085bc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  return(result);
 80085c0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80085c4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

            colCnt--;
 80085c8:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 80085cc:	3b01      	subs	r3, #1
 80085ce:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
        while (colCnt)
 80085d2:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	f47f ae5c 	bne.w	8008294 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x114>
        }                       /* while over colCnt */
        colCnt = numCol_A & 0x3;
 80085dc:	1d3b      	adds	r3, r7, #4
 80085de:	881b      	ldrh	r3, [r3, #0]
 80085e0:	f003 0303 	and.w	r3, r3, #3
 80085e4:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
        while (colCnt)
 80085e8:	e056      	b.n	8008698 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x518>
        {
            q7_t      inA1 = *pA++;
 80085ea:	f107 030c 	add.w	r3, r7, #12
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f107 020c 	add.w	r2, r7, #12
 80085f4:	1c59      	adds	r1, r3, #1
 80085f6:	6011      	str	r1, [r2, #0]
 80085f8:	781b      	ldrb	r3, [r3, #0]
 80085fa:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            q15_t     inB1 = *pB++;
 80085fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	1c99      	adds	r1, r3, #2
 8008606:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800860a:	6011      	str	r1, [r2, #0]
 800860c:	881b      	ldrh	r3, [r3, #0]
 800860e:	f8a7 3104 	strh.w	r3, [r7, #260]	; 0x104
            q7_t      inA2 = *pA2++;
 8008612:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8008616:	1c5a      	adds	r2, r3, #1
 8008618:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 800861c:	781b      	ldrb	r3, [r3, #0]
 800861e:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
            q15_t     inB2 = *pB2++;
 8008622:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	1c99      	adds	r1, r3, #2
 800862a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800862e:	6011      	str	r1, [r2, #0]
 8008630:	881b      	ldrh	r3, [r3, #0]
 8008632:	f8a7 3100 	strh.w	r3, [r7, #256]	; 0x100

            sum += inA1 * inB1;
 8008636:	f997 3107 	ldrsb.w	r3, [r7, #263]	; 0x107
 800863a:	f9b7 2104 	ldrsh.w	r2, [r7, #260]	; 0x104
 800863e:	fb02 f303 	mul.w	r3, r2, r3
 8008642:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8008646:	4413      	add	r3, r2
 8008648:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
            sum2 += inA1 * inB2;
 800864c:	f997 3107 	ldrsb.w	r3, [r7, #263]	; 0x107
 8008650:	f9b7 2100 	ldrsh.w	r2, [r7, #256]	; 0x100
 8008654:	fb02 f303 	mul.w	r3, r2, r3
 8008658:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800865c:	4413      	add	r3, r2
 800865e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            sum3 += inA2 * inB1;
 8008662:	f997 3103 	ldrsb.w	r3, [r7, #259]	; 0x103
 8008666:	f9b7 2104 	ldrsh.w	r2, [r7, #260]	; 0x104
 800866a:	fb02 f303 	mul.w	r3, r2, r3
 800866e:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8008672:	4413      	add	r3, r2
 8008674:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            sum4 += inA2 * inB2;
 8008678:	f997 3103 	ldrsb.w	r3, [r7, #259]	; 0x103
 800867c:	f9b7 2100 	ldrsh.w	r2, [r7, #256]	; 0x100
 8008680:	fb02 f303 	mul.w	r3, r2, r3
 8008684:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8008688:	4413      	add	r3, r2
 800868a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            colCnt--;
 800868e:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 8008692:	3b01      	subs	r3, #1
 8008694:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
        while (colCnt)
 8008698:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 800869c:	2b00      	cmp	r3, #0
 800869e:	d1a4      	bne.n	80085ea <arm_nn_mat_mult_kernel_q7_q15_reordered+0x46a>
        }                       /* while over colCnt */
        *pOut++ = (q7_t) __SSAT((sum >> out_shift), 8);
 80086a0:	f8b7 3154 	ldrh.w	r3, [r7, #340]	; 0x154
 80086a4:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80086a8:	fa42 f303 	asr.w	r3, r2, r3
 80086ac:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80086b0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80086b4:	f303 0307 	ssat	r3, #8, r3
 80086b8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80086bc:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 80086c0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80086c4:	1c5a      	adds	r2, r3, #1
 80086c6:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 80086ca:	b24a      	sxtb	r2, r1
 80086cc:	701a      	strb	r2, [r3, #0]
        *pOut++ = (q7_t) __SSAT((sum3 >> out_shift), 8);
 80086ce:	f8b7 3154 	ldrh.w	r3, [r7, #340]	; 0x154
 80086d2:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80086d6:	fa42 f303 	asr.w	r3, r2, r3
 80086da:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80086de:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80086e2:	f303 0307 	ssat	r3, #8, r3
 80086e6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80086ea:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 80086ee:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80086f2:	1c5a      	adds	r2, r3, #1
 80086f4:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 80086f8:	b24a      	sxtb	r2, r1
 80086fa:	701a      	strb	r2, [r3, #0]
        *pOut2++ = (q7_t) __SSAT((sum2 >> out_shift), 8);
 80086fc:	f8b7 3154 	ldrh.w	r3, [r7, #340]	; 0x154
 8008700:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8008704:	fa42 f303 	asr.w	r3, r2, r3
 8008708:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800870c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008710:	f303 0307 	ssat	r3, #8, r3
 8008714:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008718:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 800871c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8008720:	1c5a      	adds	r2, r3, #1
 8008722:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
 8008726:	b24a      	sxtb	r2, r1
 8008728:	701a      	strb	r2, [r3, #0]
        *pOut2++ = (q7_t) __SSAT((sum4 >> out_shift), 8);
 800872a:	f8b7 3154 	ldrh.w	r3, [r7, #340]	; 0x154
 800872e:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8008732:	fa42 f303 	asr.w	r3, r2, r3
 8008736:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800873a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800873e:	f303 0307 	ssat	r3, #8, r3
 8008742:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008746:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 800874a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800874e:	1c5a      	adds	r2, r3, #1
 8008750:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
 8008754:	b24a      	sxtb	r2, r1
 8008756:	701a      	strb	r2, [r3, #0]

        /* skip the row computed with A2 */
        pA += numCol_A;
 8008758:	1d3b      	adds	r3, r7, #4
 800875a:	881a      	ldrh	r2, [r3, #0]
 800875c:	f107 030c 	add.w	r3, r7, #12
 8008760:	f107 010c 	add.w	r1, r7, #12
 8008764:	6809      	ldr	r1, [r1, #0]
 8008766:	440a      	add	r2, r1
 8008768:	601a      	str	r2, [r3, #0]
    for (i = 0; i < ch_im_out; i += 2)
 800876a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800876e:	3302      	adds	r3, #2
 8008770:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8008774:	1dbb      	adds	r3, r7, #6
 8008776:	881b      	ldrh	r3, [r3, #0]
 8008778:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 800877c:	429a      	cmp	r2, r3
 800877e:	f6ff ad19 	blt.w	80081b4 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x34>
    }                           /* for over ch_im_out */

    pOut += ch_im_out;
 8008782:	1dbb      	adds	r3, r7, #6
 8008784:	881b      	ldrh	r3, [r3, #0]
 8008786:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 800878a:	4413      	add	r3, r2
 800878c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

    /* return the new output pointer with offset */
    return pOut;
 8008790:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
#else
    /* To be completed */
    return NULL;
#endif                          /* ARM_MATH_DSP */
}
 8008794:	4618      	mov	r0, r3
 8008796:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 800879a:	46bd      	mov	sp, r7
 800879c:	bc90      	pop	{r4, r7}
 800879e:	4770      	bx	lr

080087a0 <arm_fully_connected_q7>:
                       const q7_t * pM,
                       const uint16_t dim_vec,
                       const uint16_t num_of_rows,
                       const uint16_t bias_shift,
                       const uint16_t out_shift, const q7_t * bias, q7_t * pOut, q15_t * vec_buffer)
{
 80087a0:	b590      	push	{r4, r7, lr}
 80087a2:	b0d7      	sub	sp, #348	; 0x15c
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	f107 040c 	add.w	r4, r7, #12
 80087aa:	6020      	str	r0, [r4, #0]
 80087ac:	f107 0008 	add.w	r0, r7, #8
 80087b0:	6001      	str	r1, [r0, #0]
 80087b2:	4619      	mov	r1, r3
 80087b4:	1dbb      	adds	r3, r7, #6
 80087b6:	801a      	strh	r2, [r3, #0]
 80087b8:	1d3b      	adds	r3, r7, #4
 80087ba:	460a      	mov	r2, r1
 80087bc:	801a      	strh	r2, [r3, #0]

#if defined (ARM_MATH_DSP)
    /* Run the following code for Cortex-M4 and Cortex-M7 */

    const q7_t *pB = pM;
 80087be:	f107 0308 	add.w	r3, r7, #8
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    const q7_t *pB2;
    q7_t     *pO = pOut;
 80087c8:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80087cc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    const q7_t *pBias = bias;
 80087d0:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80087d4:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
    q15_t    *pA;
    uint16_t  rowCnt = num_of_rows >> 1;
 80087d8:	1d3b      	adds	r3, r7, #4
 80087da:	881b      	ldrh	r3, [r3, #0]
 80087dc:	085b      	lsrs	r3, r3, #1
 80087de:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146

    /* expand the vector into the buffer */
    arm_q7_to_q15_reordered_no_shift(pV, vec_buffer, dim_vec);
 80087e2:	1dbb      	adds	r3, r7, #6
 80087e4:	881a      	ldrh	r2, [r3, #0]
 80087e6:	f107 030c 	add.w	r3, r7, #12
 80087ea:	f8d7 1178 	ldr.w	r1, [r7, #376]	; 0x178
 80087ee:	6818      	ldr	r0, [r3, #0]
 80087f0:	f000 fb82 	bl	8008ef8 <arm_q7_to_q15_reordered_no_shift>

    while (rowCnt)
 80087f4:	e1e2      	b.n	8008bbc <arm_fully_connected_q7+0x41c>
    {
        q31_t     sum =  ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 80087f6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80087fa:	1c5a      	adds	r2, r3, #1
 80087fc:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8008800:	f993 3000 	ldrsb.w	r3, [r3]
 8008804:	461a      	mov	r2, r3
 8008806:	f8b7 3168 	ldrh.w	r3, [r7, #360]	; 0x168
 800880a:	409a      	lsls	r2, r3
 800880c:	f8b7 316c 	ldrh.w	r3, [r7, #364]	; 0x16c
 8008810:	3b01      	subs	r3, #1
 8008812:	2101      	movs	r1, #1
 8008814:	fa01 f303 	lsl.w	r3, r1, r3
 8008818:	4413      	add	r3, r2
 800881a:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
        q31_t     sum2 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 800881e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008822:	1c5a      	adds	r2, r3, #1
 8008824:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8008828:	f993 3000 	ldrsb.w	r3, [r3]
 800882c:	461a      	mov	r2, r3
 800882e:	f8b7 3168 	ldrh.w	r3, [r7, #360]	; 0x168
 8008832:	409a      	lsls	r2, r3
 8008834:	f8b7 316c 	ldrh.w	r3, [r7, #364]	; 0x16c
 8008838:	3b01      	subs	r3, #1
 800883a:	2101      	movs	r1, #1
 800883c:	fa01 f303 	lsl.w	r3, r1, r3
 8008840:	4413      	add	r3, r2
 8008842:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
        uint16_t  colCnt = dim_vec >> 2;
 8008846:	1dbb      	adds	r3, r7, #6
 8008848:	881b      	ldrh	r3, [r3, #0]
 800884a:	089b      	lsrs	r3, r3, #2
 800884c:	f8a7 313a 	strh.w	r3, [r7, #314]	; 0x13a

        pA = vec_buffer;
 8008850:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008854:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8008858:	601a      	str	r2, [r3, #0]
        pB2 = pB + dim_vec;
 800885a:	1dbb      	adds	r3, r7, #6
 800885c:	881b      	ldrh	r3, [r3, #0]
 800885e:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8008862:	4413      	add	r3, r2
 8008864:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

        while (colCnt)
 8008868:	e126      	b.n	8008ab8 <arm_fully_connected_q7+0x318>
 800886a:	f107 0320 	add.w	r3, r7, #32
 800886e:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8008872:	601a      	str	r2, [r3, #0]
 8008874:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008878:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800887c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008880:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        q31_t     inA = *__SIMD32(source)++;
 8008884:	f107 0220 	add.w	r2, r7, #32
 8008888:	6813      	ldr	r3, [r2, #0]
 800888a:	1d19      	adds	r1, r3, #4
 800888c:	6011      	str	r1, [r2, #0]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        *out2 = __SXTB16(__ROR(inA, 8));
 8008894:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008898:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800889c:	2308      	movs	r3, #8
 800889e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  op2 %= 32U;
 80088a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80088a6:	f003 031f 	and.w	r3, r3, #31
 80088aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (op2 == 0U)
 80088ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d102      	bne.n	80088bc <arm_fully_connected_q7+0x11c>
    return op1;
 80088b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80088ba:	e005      	b.n	80088c8 <arm_fully_connected_q7+0x128>
  return (op1 >> op2) | (op1 << (32U - op2));
 80088bc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80088c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80088c4:	fa62 f303 	ror.w	r3, r2, r3
 80088c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80088cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80088d0:	fa2f f383 	sxtb16	r3, r3
 80088d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return(result);
 80088d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80088dc:	461a      	mov	r2, r3
 80088de:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80088e2:	601a      	str	r2, [r3, #0]
        *out1 = __SXTB16(inA);
 80088e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80088e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80088ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80088f0:	fa2f f383 	sxtb16	r3, r3
 80088f4:	67fb      	str	r3, [r7, #124]	; 0x7c
  return(result);
 80088f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80088f8:	461a      	mov	r2, r3
 80088fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80088fe:	601a      	str	r2, [r3, #0]
        return source;
 8008900:	f107 0320 	add.w	r3, r7, #32
 8008904:	681b      	ldr	r3, [r3, #0]
        {
            q31_t     inV, inM11, inM12, inM21, inM22;
            pB = (q7_t *) read_and_pad_reordered((void *)pB, &inM11, &inM12);
 8008906:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800890a:	f107 031c 	add.w	r3, r7, #28
 800890e:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8008912:	601a      	str	r2, [r3, #0]
 8008914:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008918:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800891c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008920:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
        q31_t     inA = *__SIMD32(source)++;
 8008924:	f107 021c 	add.w	r2, r7, #28
 8008928:	6813      	ldr	r3, [r2, #0]
 800892a:	1d19      	adds	r1, r3, #4
 800892c:	6011      	str	r1, [r2, #0]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
        *out2 = __SXTB16(__ROR(inA, 8));
 8008934:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008938:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800893c:	2308      	movs	r3, #8
 800893e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  op2 %= 32U;
 8008942:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008946:	f003 031f 	and.w	r3, r3, #31
 800894a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (op2 == 0U)
 800894e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008952:	2b00      	cmp	r3, #0
 8008954:	d102      	bne.n	800895c <arm_fully_connected_q7+0x1bc>
    return op1;
 8008956:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800895a:	e005      	b.n	8008968 <arm_fully_connected_q7+0x1c8>
  return (op1 >> op2) | (op1 << (32U - op2));
 800895c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008960:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008964:	fa62 f303 	ror.w	r3, r2, r3
 8008968:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800896c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008970:	fa2f f383 	sxtb16	r3, r3
 8008974:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return(result);
 8008978:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800897c:	461a      	mov	r2, r3
 800897e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008982:	601a      	str	r2, [r3, #0]
        *out1 = __SXTB16(inA);
 8008984:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008988:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800898c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008990:	fa2f f383 	sxtb16	r3, r3
 8008994:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return(result);
 8008998:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800899c:	461a      	mov	r2, r3
 800899e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80089a2:	601a      	str	r2, [r3, #0]
        return source;
 80089a4:	f107 031c 	add.w	r3, r7, #28
 80089a8:	681b      	ldr	r3, [r3, #0]
            pB2 = (q7_t *) read_and_pad_reordered((void *)pB2, &inM21, &inM22);
 80089aa:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

            inV = *__SIMD32(pA)++;
 80089ae:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80089b2:	6813      	ldr	r3, [r2, #0]
 80089b4:	1d19      	adds	r1, r3, #4
 80089b6:	6011      	str	r1, [r2, #0]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

            sum = __SMLAD(inV, inM11, sum);
 80089be:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80089c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	4619      	mov	r1, r3
 80089ca:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80089ce:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80089d2:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 80089d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80089da:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80089de:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80089e2:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 80089e6:	fb23 1302 	smlad	r3, r3, r2, r1
 80089ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  return(result);
 80089ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80089f2:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
            sum2 = __SMLAD(inV, inM21, sum2);
 80089f6:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80089fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4619      	mov	r1, r3
 8008a02:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8008a06:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8008a0a:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 8008a0e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008a12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a16:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008a1a:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8008a1e:	fb23 1302 	smlad	r3, r3, r2, r1
 8008a22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  return(result);
 8008a26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008a2a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

            inV = *__SIMD32(pA)++;
 8008a2e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8008a32:	6813      	ldr	r3, [r2, #0]
 8008a34:	1d19      	adds	r1, r3, #4
 8008a36:	6011      	str	r1, [r2, #0]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

            sum = __SMLAD(inV, inM12, sum);
 8008a3e:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8008a42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	4619      	mov	r1, r3
 8008a4a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8008a4e:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8008a52:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
 8008a56:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008a5a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008a5e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8008a62:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8008a66:	fb23 1302 	smlad	r3, r3, r2, r1
 8008a6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  return(result);
 8008a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a72:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
            sum2 = __SMLAD(inV, inM22, sum2);
 8008a76:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8008a7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4619      	mov	r1, r3
 8008a82:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8008a86:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 8008a8a:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
 8008a8e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008a92:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008a96:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8008a9a:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8008a9e:	fb23 1302 	smlad	r3, r3, r2, r1
 8008aa2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  return(result);
 8008aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008aaa:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

            colCnt--;
 8008aae:	f8b7 313a 	ldrh.w	r3, [r7, #314]	; 0x13a
 8008ab2:	3b01      	subs	r3, #1
 8008ab4:	f8a7 313a 	strh.w	r3, [r7, #314]	; 0x13a
        while (colCnt)
 8008ab8:	f8b7 313a 	ldrh.w	r3, [r7, #314]	; 0x13a
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	f47f aed4 	bne.w	800886a <arm_fully_connected_q7+0xca>
        }
        colCnt = dim_vec & 0x3;
 8008ac2:	1dbb      	adds	r3, r7, #6
 8008ac4:	881b      	ldrh	r3, [r3, #0]
 8008ac6:	f003 0303 	and.w	r3, r3, #3
 8008aca:	f8a7 313a 	strh.w	r3, [r7, #314]	; 0x13a
        while (colCnt)
 8008ace:	e037      	b.n	8008b40 <arm_fully_connected_q7+0x3a0>
        {
            q7_t      inV = *pA++;
 8008ad0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	1c99      	adds	r1, r3, #2
 8008ad8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8008adc:	6011      	str	r1, [r2, #0]
 8008ade:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008ae2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
            q15_t     inM = *pB++;
 8008ae6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8008aea:	1c5a      	adds	r2, r3, #1
 8008aec:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8008af0:	f993 3000 	ldrsb.w	r3, [r3]
 8008af4:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
            q15_t     inM2 = *pB2++;
 8008af8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8008afc:	1c5a      	adds	r2, r3, #1
 8008afe:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 8008b02:	f993 3000 	ldrsb.w	r3, [r3]
 8008b06:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            sum += inV * inM;
 8008b0a:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 8008b0e:	f9b7 210c 	ldrsh.w	r2, [r7, #268]	; 0x10c
 8008b12:	fb02 f303 	mul.w	r3, r2, r3
 8008b16:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8008b1a:	4413      	add	r3, r2
 8008b1c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
            sum2 += inV * inM2;
 8008b20:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 8008b24:	f9b7 210a 	ldrsh.w	r2, [r7, #266]	; 0x10a
 8008b28:	fb02 f303 	mul.w	r3, r2, r3
 8008b2c:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8008b30:	4413      	add	r3, r2
 8008b32:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
            colCnt--;
 8008b36:	f8b7 313a 	ldrh.w	r3, [r7, #314]	; 0x13a
 8008b3a:	3b01      	subs	r3, #1
 8008b3c:	f8a7 313a 	strh.w	r3, [r7, #314]	; 0x13a
        while (colCnt)
 8008b40:	f8b7 313a 	ldrh.w	r3, [r7, #314]	; 0x13a
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d1c3      	bne.n	8008ad0 <arm_fully_connected_q7+0x330>
        }                       /* while over colCnt */
        *pO++ = (q7_t) (__SSAT((sum >> out_shift), 8));
 8008b48:	f8b7 316c 	ldrh.w	r3, [r7, #364]	; 0x16c
 8008b4c:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8008b50:	fa42 f303 	asr.w	r3, r2, r3
 8008b54:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008b58:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008b5c:	f303 0307 	ssat	r3, #8, r3
 8008b60:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008b64:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8008b68:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008b6c:	1c5a      	adds	r2, r3, #1
 8008b6e:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8008b72:	b24a      	sxtb	r2, r1
 8008b74:	701a      	strb	r2, [r3, #0]
        *pO++ = (q7_t) (__SSAT((sum2 >> out_shift), 8));
 8008b76:	f8b7 316c 	ldrh.w	r3, [r7, #364]	; 0x16c
 8008b7a:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8008b7e:	fa42 f303 	asr.w	r3, r2, r3
 8008b82:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b8a:	f303 0307 	ssat	r3, #8, r3
 8008b8e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008b92:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8008b96:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008b9a:	1c5a      	adds	r2, r3, #1
 8008b9c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8008ba0:	b24a      	sxtb	r2, r1
 8008ba2:	701a      	strb	r2, [r3, #0]

        /* adjust the pointers and counters */
        pB += dim_vec;
 8008ba4:	1dbb      	adds	r3, r7, #6
 8008ba6:	881b      	ldrh	r3, [r3, #0]
 8008ba8:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8008bac:	4413      	add	r3, r2
 8008bae:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
        rowCnt--;
 8008bb2:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8008bb6:	3b01      	subs	r3, #1
 8008bb8:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
    while (rowCnt)
 8008bbc:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	f47f ae18 	bne.w	80087f6 <arm_fully_connected_q7+0x56>
    }

    /* left-over part of the rows */
    rowCnt = num_of_rows & 0x1;
 8008bc6:	1d3b      	adds	r3, r7, #4
 8008bc8:	881b      	ldrh	r3, [r3, #0]
 8008bca:	f003 0301 	and.w	r3, r3, #1
 8008bce:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146

    while (rowCnt)
 8008bd2:	e114      	b.n	8008dfe <arm_fully_connected_q7+0x65e>
    {
        uint16_t  colCnt = dim_vec >> 2;
 8008bd4:	1dbb      	adds	r3, r7, #6
 8008bd6:	881b      	ldrh	r3, [r3, #0]
 8008bd8:	089b      	lsrs	r3, r3, #2
 8008bda:	f8a7 3138 	strh.w	r3, [r7, #312]	; 0x138
        q31_t     sum = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8008bde:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008be2:	1c5a      	adds	r2, r3, #1
 8008be4:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8008be8:	f993 3000 	ldrsb.w	r3, [r3]
 8008bec:	461a      	mov	r2, r3
 8008bee:	f8b7 3168 	ldrh.w	r3, [r7, #360]	; 0x168
 8008bf2:	409a      	lsls	r2, r3
 8008bf4:	f8b7 316c 	ldrh.w	r3, [r7, #364]	; 0x16c
 8008bf8:	3b01      	subs	r3, #1
 8008bfa:	2101      	movs	r1, #1
 8008bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8008c00:	4413      	add	r3, r2
 8008c02:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

        pA = vec_buffer;
 8008c06:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008c0a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8008c0e:	601a      	str	r2, [r3, #0]

        while (colCnt)
 8008c10:	e0a5      	b.n	8008d5e <arm_fully_connected_q7+0x5be>
 8008c12:	f107 0310 	add.w	r3, r7, #16
 8008c16:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8008c1a:	601a      	str	r2, [r3, #0]
 8008c1c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008c20:	f107 0218 	add.w	r2, r7, #24
 8008c24:	601a      	str	r2, [r3, #0]
 8008c26:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008c2a:	f107 0214 	add.w	r2, r7, #20
 8008c2e:	601a      	str	r2, [r3, #0]
        q31_t     inA = *__SIMD32(source)++;
 8008c30:	f107 0210 	add.w	r2, r7, #16
 8008c34:	6813      	ldr	r3, [r2, #0]
 8008c36:	1d19      	adds	r1, r3, #4
 8008c38:	6011      	str	r1, [r2, #0]
 8008c3a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	6013      	str	r3, [r2, #0]
        *out2 = __SXTB16(__ROR(inA, 8));
 8008c42:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008c46:	681a      	ldr	r2, [r3, #0]
 8008c48:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008c4c:	601a      	str	r2, [r3, #0]
 8008c4e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008c52:	2208      	movs	r2, #8
 8008c54:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8008c56:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008c5a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008c5e:	6812      	ldr	r2, [r2, #0]
 8008c60:	f002 021f 	and.w	r2, r2, #31
 8008c64:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8008c66:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d103      	bne.n	8008c78 <arm_fully_connected_q7+0x4d8>
    return op1;
 8008c70:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	e007      	b.n	8008c88 <arm_fully_connected_q7+0x4e8>
  return (op1 >> op2) | (op1 << (32U - op2));
 8008c78:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8008c7c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008c80:	6812      	ldr	r2, [r2, #0]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	fa62 f303 	ror.w	r3, r2, r3
 8008c88:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8008c8c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008c8e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	fa2f f283 	sxtb16	r2, r3
 8008c98:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008c9c:	601a      	str	r2, [r3, #0]
  return(result);
 8008c9e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	461a      	mov	r2, r3
 8008ca6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	601a      	str	r2, [r3, #0]
        *out1 = __SXTB16(inA);
 8008cae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008cb2:	681a      	ldr	r2, [r3, #0]
 8008cb4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008cb8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008cba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	fa2f f283 	sxtb16	r2, r3
 8008cc4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008cc8:	601a      	str	r2, [r3, #0]
  return(result);
 8008cca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	461a      	mov	r2, r3
 8008cd2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	601a      	str	r2, [r3, #0]
        return source;
 8008cda:	f107 0310 	add.w	r3, r7, #16
 8008cde:	681b      	ldr	r3, [r3, #0]
        {
            q31_t     inV1, inV2, inM11, inM12;

            pB = (q7_t *) read_and_pad_reordered((void *)pB, &inM11, &inM12);
 8008ce0:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154

            inV1 = *__SIMD32(pA)++;
 8008ce4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8008ce8:	6813      	ldr	r3, [r2, #0]
 8008cea:	1d19      	adds	r1, r3, #4
 8008cec:	6011      	str	r1, [r2, #0]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
            sum = __SMLAD(inV1, inM11, sum);
 8008cf4:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8008cf8:	f107 0318 	add.w	r3, r7, #24
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	4619      	mov	r1, r3
 8008d00:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008d04:	66ba      	str	r2, [r7, #104]	; 0x68
 8008d06:	6679      	str	r1, [r7, #100]	; 0x64
 8008d08:	663b      	str	r3, [r7, #96]	; 0x60
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008d0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008d0c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008d0e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008d10:	fb23 1302 	smlad	r3, r3, r2, r1
 8008d14:	65fb      	str	r3, [r7, #92]	; 0x5c
  return(result);
 8008d16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d18:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

            inV2 = *__SIMD32(pA)++;
 8008d1c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8008d20:	6813      	ldr	r3, [r2, #0]
 8008d22:	1d19      	adds	r1, r3, #4
 8008d24:	6011      	str	r1, [r2, #0]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            sum = __SMLAD(inV2, inM12, sum);
 8008d2c:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8008d30:	f107 0314 	add.w	r3, r7, #20
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	4619      	mov	r1, r3
 8008d38:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008d3c:	67ba      	str	r2, [r7, #120]	; 0x78
 8008d3e:	6779      	str	r1, [r7, #116]	; 0x74
 8008d40:	673b      	str	r3, [r7, #112]	; 0x70
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008d42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d44:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008d46:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8008d48:	fb23 1302 	smlad	r3, r3, r2, r1
 8008d4c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 8008d4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d50:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

            colCnt--;
 8008d54:	f8b7 3138 	ldrh.w	r3, [r7, #312]	; 0x138
 8008d58:	3b01      	subs	r3, #1
 8008d5a:	f8a7 3138 	strh.w	r3, [r7, #312]	; 0x138
        while (colCnt)
 8008d5e:	f8b7 3138 	ldrh.w	r3, [r7, #312]	; 0x138
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	f47f af55 	bne.w	8008c12 <arm_fully_connected_q7+0x472>
        }

        /* left-over of the vector */
        colCnt = dim_vec & 0x3;
 8008d68:	1dbb      	adds	r3, r7, #6
 8008d6a:	881b      	ldrh	r3, [r3, #0]
 8008d6c:	f003 0303 	and.w	r3, r3, #3
 8008d70:	f8a7 3138 	strh.w	r3, [r7, #312]	; 0x138
        while (colCnt)
 8008d74:	e023      	b.n	8008dbe <arm_fully_connected_q7+0x61e>
        {
            q7_t      inV = *pA++;
 8008d76:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	1c99      	adds	r1, r3, #2
 8008d7e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8008d82:	6011      	str	r1, [r2, #0]
 8008d84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d88:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
            q15_t     inM = *pB++;
 8008d8c:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8008d90:	1c5a      	adds	r2, r3, #1
 8008d92:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8008d96:	f993 3000 	ldrsb.w	r3, [r3]
 8008d9a:	f8a7 3128 	strh.w	r3, [r7, #296]	; 0x128
            sum += inV * inM;
 8008d9e:	f997 312b 	ldrsb.w	r3, [r7, #299]	; 0x12b
 8008da2:	f9b7 2128 	ldrsh.w	r2, [r7, #296]	; 0x128
 8008da6:	fb02 f303 	mul.w	r3, r2, r3
 8008daa:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8008dae:	4413      	add	r3, r2
 8008db0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            colCnt--;
 8008db4:	f8b7 3138 	ldrh.w	r3, [r7, #312]	; 0x138
 8008db8:	3b01      	subs	r3, #1
 8008dba:	f8a7 3138 	strh.w	r3, [r7, #312]	; 0x138
        while (colCnt)
 8008dbe:	f8b7 3138 	ldrh.w	r3, [r7, #312]	; 0x138
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d1d7      	bne.n	8008d76 <arm_fully_connected_q7+0x5d6>
        }

        *pO++ = (q7_t) (__SSAT((sum >> out_shift), 8));
 8008dc6:	f8b7 316c 	ldrh.w	r3, [r7, #364]	; 0x16c
 8008dca:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8008dce:	fa42 f303 	asr.w	r3, r2, r3
 8008dd2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8008dd6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008dda:	f303 0307 	ssat	r3, #8, r3
 8008dde:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8008de2:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8008de6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008dea:	1c5a      	adds	r2, r3, #1
 8008dec:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8008df0:	b24a      	sxtb	r2, r1
 8008df2:	701a      	strb	r2, [r3, #0]

        rowCnt--;
 8008df4:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8008df8:	3b01      	subs	r3, #1
 8008dfa:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
    while (rowCnt)
 8008dfe:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	f47f aee6 	bne.w	8008bd4 <arm_fully_connected_q7+0x434>
    }

#endif                          /* ARM_MATH_DSP */

    /* Return to ARM_MATH_SUCCESS */
    return (ARM_MATH_SUCCESS);
 8008e08:	2300      	movs	r3, #0

}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd90      	pop	{r4, r7, pc}

08008e14 <arm_q7_to_q15_no_shift>:
 * </pre>    
 *   
 */

void arm_q7_to_q15_no_shift(const q7_t * pSrc, q15_t * pDst, uint32_t blockSize)
{
 8008e14:	b480      	push	{r7}
 8008e16:	b093      	sub	sp, #76	; 0x4c
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	60f8      	str	r0, [r7, #12]
 8008e1c:	60b9      	str	r1, [r7, #8]
 8008e1e:	607a      	str	r2, [r7, #4]
    const q7_t *pIn = pSrc;     /* Src pointer */
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	617b      	str	r3, [r7, #20]
    q31_t     out1, out2;

    /* Run the below code for Cortex-M4 and Cortex-M3 */

    /*loop Unrolling */
    blkCnt = blockSize >> 2u;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	089b      	lsrs	r3, r3, #2
 8008e28:	647b      	str	r3, [r7, #68]	; 0x44

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
     ** a second loop below computes the remaining 1 to 3 samples. */
    while (blkCnt > 0u)
 8008e2a:	e044      	b.n	8008eb6 <arm_q7_to_q15_no_shift+0xa2>
    {
        /* C = (q15_t) A << 8 */
        /* convert from q7 to q15 and then store the results in the destination buffer */
        in = *__SIMD32(pIn)++;
 8008e2c:	f107 0214 	add.w	r2, r7, #20
 8008e30:	6813      	ldr	r3, [r2, #0]
 8008e32:	1d19      	adds	r1, r3, #4
 8008e34:	6011      	str	r1, [r2, #0]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	643b      	str	r3, [r7, #64]	; 0x40

        /* rotatate in by 8 and extend two q7_t values to q15_t values */
        in1 = __SXTB16(__ROR(in, 8));
 8008e3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e3c:	61fb      	str	r3, [r7, #28]
 8008e3e:	2308      	movs	r3, #8
 8008e40:	61bb      	str	r3, [r7, #24]
  op2 %= 32U;
 8008e42:	69bb      	ldr	r3, [r7, #24]
 8008e44:	f003 031f 	and.w	r3, r3, #31
 8008e48:	61bb      	str	r3, [r7, #24]
  if (op2 == 0U)
 8008e4a:	69bb      	ldr	r3, [r7, #24]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d101      	bne.n	8008e54 <arm_q7_to_q15_no_shift+0x40>
    return op1;
 8008e50:	69fb      	ldr	r3, [r7, #28]
 8008e52:	e003      	b.n	8008e5c <arm_q7_to_q15_no_shift+0x48>
  return (op1 >> op2) | (op1 << (32U - op2));
 8008e54:	69fa      	ldr	r2, [r7, #28]
 8008e56:	69bb      	ldr	r3, [r7, #24]
 8008e58:	fa62 f303 	ror.w	r3, r2, r3
 8008e5c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e60:	fa2f f383 	sxtb16	r3, r3
 8008e64:	623b      	str	r3, [r7, #32]
  return(result);
 8008e66:	6a3b      	ldr	r3, [r7, #32]
 8008e68:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* extend remainig two q7_t values to q15_t values */
        in2 = __SXTB16(in);
 8008e6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e70:	fa2f f383 	sxtb16	r3, r3
 8008e74:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8008e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e78:	63bb      	str	r3, [r7, #56]	; 0x38

#ifndef ARM_MATH_BIG_ENDIAN

        out2 = __PKHTB(in1, in2, 16);
 8008e7a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008e7c:	4b1d      	ldr	r3, [pc, #116]	; (8008ef4 <arm_q7_to_q15_no_shift+0xe0>)
 8008e7e:	4013      	ands	r3, r2
 8008e80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e82:	0c12      	lsrs	r2, r2, #16
 8008e84:	4313      	orrs	r3, r2
 8008e86:	637b      	str	r3, [r7, #52]	; 0x34
        out1 = __PKHBT(in2, in1, 16);
 8008e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e8a:	b29a      	uxth	r2, r3
 8008e8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e8e:	041b      	lsls	r3, r3, #16
 8008e90:	4313      	orrs	r3, r2
 8008e92:	633b      	str	r3, [r7, #48]	; 0x30
        out1 = __PKHTB(in1, in2, 16);
        out2 = __PKHBT(in2, in1, 16);

#endif

        *__SIMD32(pDst)++ = out1;
 8008e94:	f107 0208 	add.w	r2, r7, #8
 8008e98:	6813      	ldr	r3, [r2, #0]
 8008e9a:	1d19      	adds	r1, r3, #4
 8008e9c:	6011      	str	r1, [r2, #0]
 8008e9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ea0:	601a      	str	r2, [r3, #0]
        *__SIMD32(pDst)++ = out2;
 8008ea2:	f107 0208 	add.w	r2, r7, #8
 8008ea6:	6813      	ldr	r3, [r2, #0]
 8008ea8:	1d19      	adds	r1, r3, #4
 8008eaa:	6011      	str	r1, [r2, #0]
 8008eac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008eae:	601a      	str	r2, [r3, #0]

        /* Decrement the loop counter */
        blkCnt--;
 8008eb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008eb2:	3b01      	subs	r3, #1
 8008eb4:	647b      	str	r3, [r7, #68]	; 0x44
    while (blkCnt > 0u)
 8008eb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d1b7      	bne.n	8008e2c <arm_q7_to_q15_no_shift+0x18>
    }

    /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
     ** No loop unrolling is used. */
    blkCnt = blockSize % 0x4u;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f003 0303 	and.w	r3, r3, #3
 8008ec2:	647b      	str	r3, [r7, #68]	; 0x44
    /* Loop over blockSize number of values */
    blkCnt = blockSize;

#endif                          /* #ifndef ARM_MATH_CM0_FAMILY */

    while (blkCnt > 0u)
 8008ec4:	e00c      	b.n	8008ee0 <arm_q7_to_q15_no_shift+0xcc>
    {
        /* C = (q15_t) A << 8 */
        /* convert from q7 to q15 and then store the results in the destination buffer */
        *pDst++ = (q15_t) * pIn++;
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	1c5a      	adds	r2, r3, #1
 8008eca:	617a      	str	r2, [r7, #20]
 8008ecc:	f993 1000 	ldrsb.w	r1, [r3]
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	1c9a      	adds	r2, r3, #2
 8008ed4:	60ba      	str	r2, [r7, #8]
 8008ed6:	b20a      	sxth	r2, r1
 8008ed8:	801a      	strh	r2, [r3, #0]

        /* Decrement the loop counter */
        blkCnt--;
 8008eda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008edc:	3b01      	subs	r3, #1
 8008ede:	647b      	str	r3, [r7, #68]	; 0x44
    while (blkCnt > 0u)
 8008ee0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d1ef      	bne.n	8008ec6 <arm_q7_to_q15_no_shift+0xb2>
    }

}
 8008ee6:	bf00      	nop
 8008ee8:	bf00      	nop
 8008eea:	374c      	adds	r7, #76	; 0x4c
 8008eec:	46bd      	mov	sp, r7
 8008eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef2:	4770      	bx	lr
 8008ef4:	ffff0000 	.word	0xffff0000

08008ef8 <arm_q7_to_q15_reordered_no_shift>:
 * The tail (i.e., last (N % 4) elements) will still be in original order.
 *   
 */

void arm_q7_to_q15_reordered_no_shift(const q7_t * pSrc, q15_t * pDst, uint32_t blockSize)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b091      	sub	sp, #68	; 0x44
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	60f8      	str	r0, [r7, #12]
 8008f00:	60b9      	str	r1, [r7, #8]
 8008f02:	607a      	str	r2, [r7, #4]
    const q7_t *pIn = pSrc;     /* Src pointer */
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	617b      	str	r3, [r7, #20]
    q31_t     in1, in2;

    /* Run the below code for Cortex-M4 and Cortex-M3 */

    /*loop Unrolling */
    blkCnt = blockSize >> 2u;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	089b      	lsrs	r3, r3, #2
 8008f0c:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
     ** a second loop below computes the remaining 1 to 3 samples. */
    while (blkCnt > 0u)
 8008f0e:	e037      	b.n	8008f80 <arm_q7_to_q15_reordered_no_shift+0x88>
    {
        /* C = (q15_t) A << 8 */
        /* convert from q7 to q15 and then store the results in the destination buffer */
        in = *__SIMD32(pIn)++;
 8008f10:	f107 0214 	add.w	r2, r7, #20
 8008f14:	6813      	ldr	r3, [r2, #0]
 8008f16:	1d19      	adds	r1, r3, #4
 8008f18:	6011      	str	r1, [r2, #0]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* rotatate in by 8 and extend two q7_t values to q15_t values */
        in1 = __SXTB16(__ROR(in, 8));
 8008f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f20:	61fb      	str	r3, [r7, #28]
 8008f22:	2308      	movs	r3, #8
 8008f24:	61bb      	str	r3, [r7, #24]
  op2 %= 32U;
 8008f26:	69bb      	ldr	r3, [r7, #24]
 8008f28:	f003 031f 	and.w	r3, r3, #31
 8008f2c:	61bb      	str	r3, [r7, #24]
  if (op2 == 0U)
 8008f2e:	69bb      	ldr	r3, [r7, #24]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d101      	bne.n	8008f38 <arm_q7_to_q15_reordered_no_shift+0x40>
    return op1;
 8008f34:	69fb      	ldr	r3, [r7, #28]
 8008f36:	e003      	b.n	8008f40 <arm_q7_to_q15_reordered_no_shift+0x48>
  return (op1 >> op2) | (op1 << (32U - op2));
 8008f38:	69fa      	ldr	r2, [r7, #28]
 8008f3a:	69bb      	ldr	r3, [r7, #24]
 8008f3c:	fa62 f303 	ror.w	r3, r2, r3
 8008f40:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f44:	fa2f f383 	sxtb16	r3, r3
 8008f48:	623b      	str	r3, [r7, #32]
  return(result);
 8008f4a:	6a3b      	ldr	r3, [r7, #32]
 8008f4c:	637b      	str	r3, [r7, #52]	; 0x34

        /* extend remainig two q7_t values to q15_t values */
        in2 = __SXTB16(in);
 8008f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f50:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f54:	fa2f f383 	sxtb16	r3, r3
 8008f58:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8008f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f5c:	633b      	str	r3, [r7, #48]	; 0x30

#ifndef ARM_MATH_BIG_ENDIAN
        *__SIMD32(pDst)++ = in2;
 8008f5e:	f107 0208 	add.w	r2, r7, #8
 8008f62:	6813      	ldr	r3, [r2, #0]
 8008f64:	1d19      	adds	r1, r3, #4
 8008f66:	6011      	str	r1, [r2, #0]
 8008f68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f6a:	601a      	str	r2, [r3, #0]
        *__SIMD32(pDst)++ = in1;
 8008f6c:	f107 0208 	add.w	r2, r7, #8
 8008f70:	6813      	ldr	r3, [r2, #0]
 8008f72:	1d19      	adds	r1, r3, #4
 8008f74:	6011      	str	r1, [r2, #0]
 8008f76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f78:	601a      	str	r2, [r3, #0]
        *__SIMD32(pDst)++ = in1;
        *__SIMD32(pDst)++ = in2;
#endif

        /* Decrement the loop counter */
        blkCnt--;
 8008f7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f7c:	3b01      	subs	r3, #1
 8008f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (blkCnt > 0u)
 8008f80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d1c4      	bne.n	8008f10 <arm_q7_to_q15_reordered_no_shift+0x18>
    }

    /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
     ** No loop unrolling is used. */
    blkCnt = blockSize % 0x4u;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f003 0303 	and.w	r3, r3, #3
 8008f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* Loop over blockSize number of values */
    blkCnt = blockSize;

#endif                          /* #ifndef ARM_MATH_CM0_FAMILY */

    while (blkCnt > 0u)
 8008f8e:	e00c      	b.n	8008faa <arm_q7_to_q15_reordered_no_shift+0xb2>
    {
        /* C = (q15_t) A << 8 */
        /* convert from q7 to q15 and then store the results in the destination buffer */
        *pDst++ = (q15_t) * pIn++;
 8008f90:	697b      	ldr	r3, [r7, #20]
 8008f92:	1c5a      	adds	r2, r3, #1
 8008f94:	617a      	str	r2, [r7, #20]
 8008f96:	f993 1000 	ldrsb.w	r1, [r3]
 8008f9a:	68bb      	ldr	r3, [r7, #8]
 8008f9c:	1c9a      	adds	r2, r3, #2
 8008f9e:	60ba      	str	r2, [r7, #8]
 8008fa0:	b20a      	sxth	r2, r1
 8008fa2:	801a      	strh	r2, [r3, #0]

        /* Decrement the loop counter */
        blkCnt--;
 8008fa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fa6:	3b01      	subs	r3, #1
 8008fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (blkCnt > 0u)
 8008faa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d1ef      	bne.n	8008f90 <arm_q7_to_q15_reordered_no_shift+0x98>
    }

}
 8008fb0:	bf00      	nop
 8008fb2:	bf00      	nop
 8008fb4:	3744      	adds	r7, #68	; 0x44
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbc:	4770      	bx	lr

08008fbe <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008fbe:	b580      	push	{r7, lr}
 8008fc0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008fc2:	2003      	movs	r0, #3
 8008fc4:	f000 f8f9 	bl	80091ba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008fc8:	200f      	movs	r0, #15
 8008fca:	f7fa fdd3 	bl	8003b74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008fce:	f7fa facf 	bl	8003570 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008fd2:	2300      	movs	r3, #0
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	bd80      	pop	{r7, pc}

08008fd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008fdc:	4b06      	ldr	r3, [pc, #24]	; (8008ff8 <HAL_IncTick+0x20>)
 8008fde:	781b      	ldrb	r3, [r3, #0]
 8008fe0:	461a      	mov	r2, r3
 8008fe2:	4b06      	ldr	r3, [pc, #24]	; (8008ffc <HAL_IncTick+0x24>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4413      	add	r3, r2
 8008fe8:	4a04      	ldr	r2, [pc, #16]	; (8008ffc <HAL_IncTick+0x24>)
 8008fea:	6013      	str	r3, [r2, #0]
}
 8008fec:	bf00      	nop
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff4:	4770      	bx	lr
 8008ff6:	bf00      	nop
 8008ff8:	20000010 	.word	0x20000010
 8008ffc:	2000048c 	.word	0x2000048c

08009000 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009000:	b480      	push	{r7}
 8009002:	af00      	add	r7, sp, #0
  return uwTick;
 8009004:	4b03      	ldr	r3, [pc, #12]	; (8009014 <HAL_GetTick+0x14>)
 8009006:	681b      	ldr	r3, [r3, #0]
}
 8009008:	4618      	mov	r0, r3
 800900a:	46bd      	mov	sp, r7
 800900c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009010:	4770      	bx	lr
 8009012:	bf00      	nop
 8009014:	2000048c 	.word	0x2000048c

08009018 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b084      	sub	sp, #16
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009020:	f7ff ffee 	bl	8009000 <HAL_GetTick>
 8009024:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009030:	d005      	beq.n	800903e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009032:	4b0a      	ldr	r3, [pc, #40]	; (800905c <HAL_Delay+0x44>)
 8009034:	781b      	ldrb	r3, [r3, #0]
 8009036:	461a      	mov	r2, r3
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	4413      	add	r3, r2
 800903c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800903e:	bf00      	nop
 8009040:	f7ff ffde 	bl	8009000 <HAL_GetTick>
 8009044:	4602      	mov	r2, r0
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	1ad3      	subs	r3, r2, r3
 800904a:	68fa      	ldr	r2, [r7, #12]
 800904c:	429a      	cmp	r2, r3
 800904e:	d8f7      	bhi.n	8009040 <HAL_Delay+0x28>
  {
  }
}
 8009050:	bf00      	nop
 8009052:	bf00      	nop
 8009054:	3710      	adds	r7, #16
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}
 800905a:	bf00      	nop
 800905c:	20000010 	.word	0x20000010

08009060 <__NVIC_SetPriorityGrouping>:
{
 8009060:	b480      	push	{r7}
 8009062:	b085      	sub	sp, #20
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f003 0307 	and.w	r3, r3, #7
 800906e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009070:	4b0b      	ldr	r3, [pc, #44]	; (80090a0 <__NVIC_SetPriorityGrouping+0x40>)
 8009072:	68db      	ldr	r3, [r3, #12]
 8009074:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009076:	68ba      	ldr	r2, [r7, #8]
 8009078:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800907c:	4013      	ands	r3, r2
 800907e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8009088:	4b06      	ldr	r3, [pc, #24]	; (80090a4 <__NVIC_SetPriorityGrouping+0x44>)
 800908a:	4313      	orrs	r3, r2
 800908c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800908e:	4a04      	ldr	r2, [pc, #16]	; (80090a0 <__NVIC_SetPriorityGrouping+0x40>)
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	60d3      	str	r3, [r2, #12]
}
 8009094:	bf00      	nop
 8009096:	3714      	adds	r7, #20
 8009098:	46bd      	mov	sp, r7
 800909a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909e:	4770      	bx	lr
 80090a0:	e000ed00 	.word	0xe000ed00
 80090a4:	05fa0000 	.word	0x05fa0000

080090a8 <__NVIC_GetPriorityGrouping>:
{
 80090a8:	b480      	push	{r7}
 80090aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80090ac:	4b04      	ldr	r3, [pc, #16]	; (80090c0 <__NVIC_GetPriorityGrouping+0x18>)
 80090ae:	68db      	ldr	r3, [r3, #12]
 80090b0:	0a1b      	lsrs	r3, r3, #8
 80090b2:	f003 0307 	and.w	r3, r3, #7
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	46bd      	mov	sp, r7
 80090ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090be:	4770      	bx	lr
 80090c0:	e000ed00 	.word	0xe000ed00

080090c4 <__NVIC_EnableIRQ>:
{
 80090c4:	b480      	push	{r7}
 80090c6:	b083      	sub	sp, #12
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	4603      	mov	r3, r0
 80090cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80090ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	db0b      	blt.n	80090ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80090d6:	79fb      	ldrb	r3, [r7, #7]
 80090d8:	f003 021f 	and.w	r2, r3, #31
 80090dc:	4907      	ldr	r1, [pc, #28]	; (80090fc <__NVIC_EnableIRQ+0x38>)
 80090de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80090e2:	095b      	lsrs	r3, r3, #5
 80090e4:	2001      	movs	r0, #1
 80090e6:	fa00 f202 	lsl.w	r2, r0, r2
 80090ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80090ee:	bf00      	nop
 80090f0:	370c      	adds	r7, #12
 80090f2:	46bd      	mov	sp, r7
 80090f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f8:	4770      	bx	lr
 80090fa:	bf00      	nop
 80090fc:	e000e100 	.word	0xe000e100

08009100 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009100:	b480      	push	{r7}
 8009102:	b083      	sub	sp, #12
 8009104:	af00      	add	r7, sp, #0
 8009106:	4603      	mov	r3, r0
 8009108:	6039      	str	r1, [r7, #0]
 800910a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800910c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009110:	2b00      	cmp	r3, #0
 8009112:	db0a      	blt.n	800912a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	b2da      	uxtb	r2, r3
 8009118:	490c      	ldr	r1, [pc, #48]	; (800914c <__NVIC_SetPriority+0x4c>)
 800911a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800911e:	0112      	lsls	r2, r2, #4
 8009120:	b2d2      	uxtb	r2, r2
 8009122:	440b      	add	r3, r1
 8009124:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009128:	e00a      	b.n	8009140 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	b2da      	uxtb	r2, r3
 800912e:	4908      	ldr	r1, [pc, #32]	; (8009150 <__NVIC_SetPriority+0x50>)
 8009130:	79fb      	ldrb	r3, [r7, #7]
 8009132:	f003 030f 	and.w	r3, r3, #15
 8009136:	3b04      	subs	r3, #4
 8009138:	0112      	lsls	r2, r2, #4
 800913a:	b2d2      	uxtb	r2, r2
 800913c:	440b      	add	r3, r1
 800913e:	761a      	strb	r2, [r3, #24]
}
 8009140:	bf00      	nop
 8009142:	370c      	adds	r7, #12
 8009144:	46bd      	mov	sp, r7
 8009146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914a:	4770      	bx	lr
 800914c:	e000e100 	.word	0xe000e100
 8009150:	e000ed00 	.word	0xe000ed00

08009154 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009154:	b480      	push	{r7}
 8009156:	b089      	sub	sp, #36	; 0x24
 8009158:	af00      	add	r7, sp, #0
 800915a:	60f8      	str	r0, [r7, #12]
 800915c:	60b9      	str	r1, [r7, #8]
 800915e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	f003 0307 	and.w	r3, r3, #7
 8009166:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009168:	69fb      	ldr	r3, [r7, #28]
 800916a:	f1c3 0307 	rsb	r3, r3, #7
 800916e:	2b04      	cmp	r3, #4
 8009170:	bf28      	it	cs
 8009172:	2304      	movcs	r3, #4
 8009174:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009176:	69fb      	ldr	r3, [r7, #28]
 8009178:	3304      	adds	r3, #4
 800917a:	2b06      	cmp	r3, #6
 800917c:	d902      	bls.n	8009184 <NVIC_EncodePriority+0x30>
 800917e:	69fb      	ldr	r3, [r7, #28]
 8009180:	3b03      	subs	r3, #3
 8009182:	e000      	b.n	8009186 <NVIC_EncodePriority+0x32>
 8009184:	2300      	movs	r3, #0
 8009186:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009188:	f04f 32ff 	mov.w	r2, #4294967295
 800918c:	69bb      	ldr	r3, [r7, #24]
 800918e:	fa02 f303 	lsl.w	r3, r2, r3
 8009192:	43da      	mvns	r2, r3
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	401a      	ands	r2, r3
 8009198:	697b      	ldr	r3, [r7, #20]
 800919a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800919c:	f04f 31ff 	mov.w	r1, #4294967295
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	fa01 f303 	lsl.w	r3, r1, r3
 80091a6:	43d9      	mvns	r1, r3
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80091ac:	4313      	orrs	r3, r2
         );
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	3724      	adds	r7, #36	; 0x24
 80091b2:	46bd      	mov	sp, r7
 80091b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b8:	4770      	bx	lr

080091ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80091ba:	b580      	push	{r7, lr}
 80091bc:	b082      	sub	sp, #8
 80091be:	af00      	add	r7, sp, #0
 80091c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f7ff ff4c 	bl	8009060 <__NVIC_SetPriorityGrouping>
}
 80091c8:	bf00      	nop
 80091ca:	3708      	adds	r7, #8
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}

080091d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b086      	sub	sp, #24
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	4603      	mov	r3, r0
 80091d8:	60b9      	str	r1, [r7, #8]
 80091da:	607a      	str	r2, [r7, #4]
 80091dc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80091de:	2300      	movs	r3, #0
 80091e0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80091e2:	f7ff ff61 	bl	80090a8 <__NVIC_GetPriorityGrouping>
 80091e6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80091e8:	687a      	ldr	r2, [r7, #4]
 80091ea:	68b9      	ldr	r1, [r7, #8]
 80091ec:	6978      	ldr	r0, [r7, #20]
 80091ee:	f7ff ffb1 	bl	8009154 <NVIC_EncodePriority>
 80091f2:	4602      	mov	r2, r0
 80091f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80091f8:	4611      	mov	r1, r2
 80091fa:	4618      	mov	r0, r3
 80091fc:	f7ff ff80 	bl	8009100 <__NVIC_SetPriority>
}
 8009200:	bf00      	nop
 8009202:	3718      	adds	r7, #24
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}

08009208 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b082      	sub	sp, #8
 800920c:	af00      	add	r7, sp, #0
 800920e:	4603      	mov	r3, r0
 8009210:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009216:	4618      	mov	r0, r3
 8009218:	f7ff ff54 	bl	80090c4 <__NVIC_EnableIRQ>
}
 800921c:	bf00      	nop
 800921e:	3708      	adds	r7, #8
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}

08009224 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b082      	sub	sp, #8
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d101      	bne.n	8009236 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8009232:	2301      	movs	r3, #1
 8009234:	e0ac      	b.n	8009390 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));
  
  /* Check that channel has not been already initialized */
  if(a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4618      	mov	r0, r3
 800923c:	f000 fab8 	bl	80097b0 <DFSDM_GetChannelFromInstance>
 8009240:	4603      	mov	r3, r0
 8009242:	4a55      	ldr	r2, [pc, #340]	; (8009398 <HAL_DFSDM_ChannelInit+0x174>)
 8009244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d001      	beq.n	8009250 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 800924c:	2301      	movs	r3, #1
 800924e:	e09f      	b.n	8009390 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f7fa fa65 	bl	8003720 <HAL_DFSDM_ChannelMspInit>
#endif
  
  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8009256:	4b51      	ldr	r3, [pc, #324]	; (800939c <HAL_DFSDM_ChannelInit+0x178>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	3301      	adds	r3, #1
 800925c:	4a4f      	ldr	r2, [pc, #316]	; (800939c <HAL_DFSDM_ChannelInit+0x178>)
 800925e:	6013      	str	r3, [r2, #0]
  
  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(v_dfsdm1ChannelCounter == 1)
 8009260:	4b4e      	ldr	r3, [pc, #312]	; (800939c <HAL_DFSDM_ChannelInit+0x178>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	2b01      	cmp	r3, #1
 8009266:	d125      	bne.n	80092b4 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8009268:	4b4d      	ldr	r3, [pc, #308]	; (80093a0 <HAL_DFSDM_ChannelInit+0x17c>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	4a4c      	ldr	r2, [pc, #304]	; (80093a0 <HAL_DFSDM_ChannelInit+0x17c>)
 800926e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009272:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8009274:	4b4a      	ldr	r3, [pc, #296]	; (80093a0 <HAL_DFSDM_ChannelInit+0x17c>)
 8009276:	681a      	ldr	r2, [r3, #0]
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	689b      	ldr	r3, [r3, #8]
 800927c:	4948      	ldr	r1, [pc, #288]	; (80093a0 <HAL_DFSDM_ChannelInit+0x17c>)
 800927e:	4313      	orrs	r3, r2
 8009280:	600b      	str	r3, [r1, #0]
    
    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8009282:	4b47      	ldr	r3, [pc, #284]	; (80093a0 <HAL_DFSDM_ChannelInit+0x17c>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	4a46      	ldr	r2, [pc, #280]	; (80093a0 <HAL_DFSDM_ChannelInit+0x17c>)
 8009288:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800928c:	6013      	str	r3, [r2, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	791b      	ldrb	r3, [r3, #4]
 8009292:	2b01      	cmp	r3, #1
 8009294:	d108      	bne.n	80092a8 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1) << 
 8009296:	4b42      	ldr	r3, [pc, #264]	; (80093a0 <HAL_DFSDM_ChannelInit+0x17c>)
 8009298:	681a      	ldr	r2, [r3, #0]
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	68db      	ldr	r3, [r3, #12]
 800929e:	3b01      	subs	r3, #1
 80092a0:	041b      	lsls	r3, r3, #16
 80092a2:	493f      	ldr	r1, [pc, #252]	; (80093a0 <HAL_DFSDM_ChannelInit+0x17c>)
 80092a4:	4313      	orrs	r3, r2
 80092a6:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }
    
    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80092a8:	4b3d      	ldr	r3, [pc, #244]	; (80093a0 <HAL_DFSDM_ChannelInit+0x17c>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	4a3c      	ldr	r2, [pc, #240]	; (80093a0 <HAL_DFSDM_ChannelInit+0x17c>)
 80092ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80092b2:	6013      	str	r3, [r2, #0]
  }
  
  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	681a      	ldr	r2, [r3, #0]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80092c2:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	6819      	ldr	r1, [r3, #0]
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 80092d2:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 80092d8:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	430a      	orrs	r2, r1
 80092e0:	601a      	str	r2, [r3, #0]
  
  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	681a      	ldr	r2, [r3, #0]
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f022 020f 	bic.w	r2, r2, #15
 80092f0:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	6819      	ldr	r1, [r3, #0]
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8009300:	431a      	orrs	r2, r3
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	430a      	orrs	r2, r1
 8009308:	601a      	str	r2, [r3, #0]
  
  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	689a      	ldr	r2, [r3, #8]
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8009318:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	6899      	ldr	r1, [r3, #8]
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009328:	3b01      	subs	r3, #1
 800932a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 800932c:	431a      	orrs	r2, r3
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	430a      	orrs	r2, r1
 8009334:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	685a      	ldr	r2, [r3, #4]
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f002 0207 	and.w	r2, r2, #7
 8009344:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	6859      	ldr	r1, [r3, #4]
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009350:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009356:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8009358:	431a      	orrs	r2, r3
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	430a      	orrs	r2, r1
 8009360:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	681a      	ldr	r2, [r3, #0]
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009370:	601a      	str	r2, [r3, #0]
  
  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2201      	movs	r2, #1
 8009376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	4618      	mov	r0, r3
 8009380:	f000 fa16 	bl	80097b0 <DFSDM_GetChannelFromInstance>
 8009384:	4602      	mov	r2, r0
 8009386:	4904      	ldr	r1, [pc, #16]	; (8009398 <HAL_DFSDM_ChannelInit+0x174>)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  
  return HAL_OK;
 800938e:	2300      	movs	r3, #0
}
 8009390:	4618      	mov	r0, r3
 8009392:	3708      	adds	r7, #8
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}
 8009398:	200003c8 	.word	0x200003c8
 800939c:	200003c4 	.word	0x200003c4
 80093a0:	40017400 	.word	0x40017400

080093a4 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b082      	sub	sp, #8
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_filter == NULL)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d101      	bne.n	80093b6 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 80093b2:	2301      	movs	r3, #1
 80093b4:	e0c6      	b.n	8009544 <HAL_DFSDM_FilterInit+0x1a0>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) && 
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	4a64      	ldr	r2, [pc, #400]	; (800954c <HAL_DFSDM_FilterInit+0x1a8>)
 80093bc:	4293      	cmp	r3, r2
 80093be:	d109      	bne.n	80093d4 <HAL_DFSDM_FilterInit+0x30>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	685b      	ldr	r3, [r3, #4]
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) && 
 80093c4:	2b01      	cmp	r3, #1
 80093c6:	d003      	beq.n	80093d0 <HAL_DFSDM_FilterInit+0x2c>
     (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	68db      	ldr	r3, [r3, #12]
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 80093cc:	2b01      	cmp	r3, #1
 80093ce:	d101      	bne.n	80093d4 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 80093d0:	2301      	movs	r3, #1
 80093d2:	e0b7      	b.n	8009544 <HAL_DFSDM_FilterInit+0x1a0>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2200      	movs	r2, #0
 80093d8:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2201      	movs	r2, #1
 80093de:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2201      	movs	r2, #1
 80093e4:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2200      	movs	r2, #0
 80093ea:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f7fa f8e3 	bl	80035b8 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	681a      	ldr	r2, [r3, #0]
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8009400:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	7a1b      	ldrb	r3, [r3, #8]
 8009406:	2b01      	cmp	r3, #1
 8009408:	d108      	bne.n	800941c <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	681a      	ldr	r2, [r3, #0]
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8009418:	601a      	str	r2, [r3, #0]
 800941a:	e007      	b.n	800942c <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	681a      	ldr	r2, [r3, #0]
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800942a:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	7a5b      	ldrb	r3, [r3, #9]
 8009430:	2b01      	cmp	r3, #1
 8009432:	d108      	bne.n	8009446 <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	681a      	ldr	r2, [r3, #0]
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8009442:	601a      	str	r2, [r3, #0]
 8009444:	e007      	b.n	8009456 <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	681a      	ldr	r2, [r3, #0]
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8009454:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	6819      	ldr	r1, [r3, #0]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681a      	ldr	r2, [r3, #0]
 8009460:	4b3b      	ldr	r3, [pc, #236]	; (8009550 <HAL_DFSDM_FilterInit+0x1ac>)
 8009462:	400b      	ands	r3, r1
 8009464:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	68db      	ldr	r3, [r3, #12]
 800946a:	2b02      	cmp	r3, #2
 800946c:	d108      	bne.n	8009480 <HAL_DFSDM_FilterInit+0xdc>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	6819      	ldr	r1, [r3, #0]
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	695a      	ldr	r2, [r3, #20]
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	430a      	orrs	r2, r1
 800947e:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	7c1b      	ldrb	r3, [r3, #16]
 8009484:	2b01      	cmp	r3, #1
 8009486:	d108      	bne.n	800949a <HAL_DFSDM_FilterInit+0xf6>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	681a      	ldr	r2, [r3, #0]
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f042 0210 	orr.w	r2, r2, #16
 8009496:	601a      	str	r2, [r3, #0]
 8009498:	e007      	b.n	80094aa <HAL_DFSDM_FilterInit+0x106>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	681a      	ldr	r2, [r3, #0]
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f022 0210 	bic.w	r2, r2, #16
 80094a8:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	7c5b      	ldrb	r3, [r3, #17]
 80094ae:	2b01      	cmp	r3, #1
 80094b0:	d108      	bne.n	80094c4 <HAL_DFSDM_FilterInit+0x120>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	681a      	ldr	r2, [r3, #0]
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f042 0220 	orr.w	r2, r2, #32
 80094c0:	601a      	str	r2, [r3, #0]
 80094c2:	e007      	b.n	80094d4 <HAL_DFSDM_FilterInit+0x130>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	681a      	ldr	r2, [r3, #0]
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f022 0220 	bic.w	r2, r2, #32
 80094d2:	601a      	str	r2, [r3, #0]
  }
  
  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	6959      	ldr	r1, [r3, #20]
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681a      	ldr	r2, [r3, #0]
 80094de:	4b1d      	ldr	r3, [pc, #116]	; (8009554 <HAL_DFSDM_FilterInit+0x1b0>)
 80094e0:	400b      	ands	r3, r1
 80094e2:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	6959      	ldr	r1, [r3, #20]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	69da      	ldr	r2, [r3, #28]
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6a1b      	ldr	r3, [r3, #32]
 80094f2:	3b01      	subs	r3, #1
 80094f4:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80094f6:	431a      	orrs	r2, r3
                                  (hdfsdm_filter->Init.FilterParam.IntOversampling - 1));
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094fc:	3b01      	subs	r3, #1
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 80094fe:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	430a      	orrs	r2, r1
 8009506:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	685a      	ldr	r2, [r3, #4]
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	68da      	ldr	r2, [r3, #12]
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	699a      	ldr	r2, [r3, #24]
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	7c1a      	ldrb	r2, [r3, #16]
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	681a      	ldr	r2, [r3, #0]
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f042 0201 	orr.w	r2, r2, #1
 8009538:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2201      	movs	r2, #1
 800953e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  
  return HAL_OK;
 8009542:	2300      	movs	r3, #0
}
 8009544:	4618      	mov	r0, r3
 8009546:	3708      	adds	r7, #8
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}
 800954c:	40017500 	.word	0x40017500
 8009550:	ffff80f7 	.word	0xffff80f7
 8009554:	1c00ff00 	.word	0x1c00ff00

08009558 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8009558:	b480      	push	{r7}
 800955a:	b087      	sub	sp, #28
 800955c:	af00      	add	r7, sp, #0
 800955e:	60f8      	str	r0, [r7, #12]
 8009560:	60b9      	str	r1, [r7, #8]
 8009562:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009564:	2300      	movs	r3, #0
 8009566:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));
  
  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) && 
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800956e:	2b00      	cmp	r3, #0
 8009570:	d02c      	beq.n	80095cc <HAL_DFSDM_FilterConfigRegChannel+0x74>
     (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) && 
 8009578:	2bff      	cmp	r3, #255	; 0xff
 800957a:	d027      	beq.n	80095cc <HAL_DFSDM_FilterConfigRegChannel+0x74>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	6819      	ldr	r1, [r3, #0]
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681a      	ldr	r2, [r3, #0]
 8009586:	4b16      	ldr	r3, [pc, #88]	; (80095e0 <HAL_DFSDM_FilterConfigRegChannel+0x88>)
 8009588:	400b      	ands	r3, r1
 800958a:	6013      	str	r3, [r2, #0]
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2b01      	cmp	r3, #1
 8009590:	d10d      	bne.n	80095ae <HAL_DFSDM_FilterConfigRegChannel+0x56>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	681a      	ldr	r2, [r3, #0]
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	021b      	lsls	r3, r3, #8
 800959c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80095a0:	431a      	orrs	r2, r3
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80095aa:	601a      	str	r2, [r3, #0]
 80095ac:	e00a      	b.n	80095c4 <HAL_DFSDM_FilterConfigRegChannel+0x6c>
                                                     DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	6819      	ldr	r1, [r3, #0]
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	021b      	lsls	r3, r3, #8
 80095b8:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	430a      	orrs	r2, r1
 80095c2:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	687a      	ldr	r2, [r7, #4]
 80095c8:	631a      	str	r2, [r3, #48]	; 0x30
 80095ca:	e001      	b.n	80095d0 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  }  
  else
  {
    status = HAL_ERROR;
 80095cc:	2301      	movs	r3, #1
 80095ce:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 80095d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	371c      	adds	r7, #28
 80095d6:	46bd      	mov	sp, r7
 80095d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095dc:	4770      	bx	lr
 80095de:	bf00      	nop
 80095e0:	f8fbffff 	.word	0xf8fbffff

080095e4 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b086      	sub	sp, #24
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	60f8      	str	r0, [r7, #12]
 80095ec:	60b9      	str	r1, [r7, #8]
 80095ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80095f0:	2300      	movs	r3, #0
 80095f2:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if((pData == NULL) || (Length == 0))
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d002      	beq.n	8009600 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d102      	bne.n	8009606 <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 8009600:	2301      	movs	r3, #1
 8009602:	75fb      	strb	r3, [r7, #23]
 8009604:	e066      	b.n	80096d4 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check that DMA is enabled for regular conversion */
  else if((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009610:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009614:	d002      	beq.n	800961c <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 8009616:	2301      	movs	r3, #1
 8009618:	75fb      	strb	r3, [r7, #23]
 800961a:	e05b      	b.n	80096d4 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check parameters compatibility */
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009620:	2b00      	cmp	r3, #0
 8009622:	d10e      	bne.n	8009642 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8009628:	2b00      	cmp	r3, #0
 800962a:	d10a      	bne.n	8009642 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009630:	69db      	ldr	r3, [r3, #28]
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8009632:	2b00      	cmp	r3, #0
 8009634:	d105      	bne.n	8009642 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2b01      	cmp	r3, #1
 800963a:	d002      	beq.n	8009642 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (Length != 1))
  {
    status = HAL_ERROR;
 800963c:	2301      	movs	r3, #1
 800963e:	75fb      	strb	r3, [r7, #23]
 8009640:	e048      	b.n	80096d4 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009646:	2b00      	cmp	r3, #0
 8009648:	d10c      	bne.n	8009664 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 800964e:	2b00      	cmp	r3, #0
 8009650:	d108      	bne.n	8009664 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009656:	69db      	ldr	r3, [r3, #28]
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8009658:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800965c:	d102      	bne.n	8009664 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
  {
    status = HAL_ERROR;
 800965e:	2301      	movs	r3, #1
 8009660:	75fb      	strb	r3, [r7, #23]
 8009662:	e037      	b.n	80096d4 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check DFSDM filter state */
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800966a:	2b01      	cmp	r3, #1
 800966c:	d004      	beq.n	8009678 <HAL_DFSDM_FilterRegularStart_DMA+0x94>
          (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8009674:	2b03      	cmp	r3, #3
 8009676:	d12b      	bne.n	80096d0 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800967c:	4a18      	ldr	r2, [pc, #96]	; (80096e0 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 800967e:	63da      	str	r2, [r3, #60]	; 0x3c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009684:	4a17      	ldr	r2, [pc, #92]	; (80096e4 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 8009686:	64da      	str	r2, [r3, #76]	; 0x4c
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800968c:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 800968e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009692:	d101      	bne.n	8009698 <HAL_DFSDM_FilterRegularStart_DMA+0xb4>
 8009694:	4a14      	ldr	r2, [pc, #80]	; (80096e8 <HAL_DFSDM_FilterRegularStart_DMA+0x104>)
 8009696:	e000      	b.n	800969a <HAL_DFSDM_FilterRegularStart_DMA+0xb6>
 8009698:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800969e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Start DMA in interrupt mode */
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	331c      	adds	r3, #28
 80096aa:	4619      	mov	r1, r3
 80096ac:	68ba      	ldr	r2, [r7, #8]
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f000 fa1c 	bl	8009aec <HAL_DMA_Start_IT>
 80096b4:	4603      	mov	r3, r0
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d006      	beq.n	80096c8 <HAL_DFSDM_FilterRegularStart_DMA+0xe4>
                        (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	22ff      	movs	r2, #255	; 0xff
 80096be:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 80096c2:	2301      	movs	r3, #1
 80096c4:	75fb      	strb	r3, [r7, #23]
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 80096c6:	e005      	b.n	80096d4 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 80096c8:	68f8      	ldr	r0, [r7, #12]
 80096ca:	f000 f8bd 	bl	8009848 <DFSDM_RegConvStart>
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 80096ce:	e001      	b.n	80096d4 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
  }
  else
  {
    status = HAL_ERROR;
 80096d0:	2301      	movs	r3, #1
 80096d2:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 80096d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3718      	adds	r7, #24
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}
 80096de:	bf00      	nop
 80096e0:	08009771 	.word	0x08009771
 80096e4:	0800978d 	.word	0x0800978d
 80096e8:	08009755 	.word	0x08009755

080096ec <HAL_DFSDM_FilterRegularStop_DMA>:
  * @note   This function should be called only if regular conversion is ongoing.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStop_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b084      	sub	sp, #16
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80096f4:	2300      	movs	r3, #0
 80096f6:	73fb      	strb	r3, [r7, #15]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80096fe:	2b02      	cmp	r3, #2
 8009700:	d007      	beq.n	8009712 <HAL_DFSDM_FilterRegularStop_DMA+0x26>
     (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG_INJ))
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 8009708:	2b04      	cmp	r3, #4
 800970a:	d002      	beq.n	8009712 <HAL_DFSDM_FilterRegularStop_DMA+0x26>
  {
    /* Return error status */
    status = HAL_ERROR;
 800970c:	2301      	movs	r3, #1
 800970e:	73fb      	strb	r3, [r7, #15]
 8009710:	e011      	b.n	8009736 <HAL_DFSDM_FilterRegularStop_DMA+0x4a>
  }
  else
  {
    /* Stop current DMA transfer */
    if(HAL_DMA_Abort(hdfsdm_filter->hdmaReg) != HAL_OK)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009716:	4618      	mov	r0, r3
 8009718:	f000 fa48 	bl	8009bac <HAL_DMA_Abort>
 800971c:	4603      	mov	r3, r0
 800971e:	2b00      	cmp	r3, #0
 8009720:	d006      	beq.n	8009730 <HAL_DFSDM_FilterRegularStop_DMA+0x44>
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	22ff      	movs	r2, #255	; 0xff
 8009726:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 800972a:	2301      	movs	r3, #1
 800972c:	73fb      	strb	r3, [r7, #15]
 800972e:	e002      	b.n	8009736 <HAL_DFSDM_FilterRegularStop_DMA+0x4a>
    }
    else
    {
      /* Stop regular conversion */
      DFSDM_RegConvStop(hdfsdm_filter);
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f000 f8df 	bl	80098f4 <DFSDM_RegConvStop>
    }
  }
  /* Return function status */
  return status;
 8009736:	7bfb      	ldrb	r3, [r7, #15]
}
 8009738:	4618      	mov	r0, r3
 800973a:	3710      	adds	r7, #16
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}

08009740 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback. 
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8009740:	b480      	push	{r7}
 8009742:	b083      	sub	sp, #12
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);
  
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 8009748:	bf00      	nop
 800974a:	370c      	adds	r7, #12
 800974c:	46bd      	mov	sp, r7
 800974e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009752:	4770      	bx	lr

08009754 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion. 
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b084      	sub	sp, #16
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009760:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 8009762:	68f8      	ldr	r0, [r7, #12]
 8009764:	f7f9 f820 	bl	80027a8 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 8009768:	bf00      	nop
 800976a:	3710      	adds	r7, #16
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}

08009770 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion. 
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)   
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b084      	sub	sp, #16
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800977c:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 800977e:	68f8      	ldr	r0, [r7, #12]
 8009780:	f7f9 f842 	bl	8002808 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8009784:	bf00      	nop
 8009786:	3710      	adds	r7, #16
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}

0800978c <DFSDM_DMAError>:
  * @brief  DMA error callback. 
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)   
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b084      	sub	sp, #16
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009798:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	2203      	movs	r2, #3
 800979e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 80097a0:	68f8      	ldr	r0, [r7, #12]
 80097a2:	f7ff ffcd 	bl	8009740 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 80097a6:	bf00      	nop
 80097a8:	3710      	adds	r7, #16
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}
	...

080097b0 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(DFSDM_Channel_TypeDef* Instance)
{
 80097b0:	b480      	push	{r7}
 80097b2:	b085      	sub	sp, #20
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
  uint32_t channel;
  
  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	4a1c      	ldr	r2, [pc, #112]	; (800982c <DFSDM_GetChannelFromInstance+0x7c>)
 80097bc:	4293      	cmp	r3, r2
 80097be:	d102      	bne.n	80097c6 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80097c0:	2300      	movs	r3, #0
 80097c2:	60fb      	str	r3, [r7, #12]
 80097c4:	e02b      	b.n	800981e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel1)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	4a19      	ldr	r2, [pc, #100]	; (8009830 <DFSDM_GetChannelFromInstance+0x80>)
 80097ca:	4293      	cmp	r3, r2
 80097cc:	d102      	bne.n	80097d4 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80097ce:	2301      	movs	r3, #1
 80097d0:	60fb      	str	r3, [r7, #12]
 80097d2:	e024      	b.n	800981e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel2)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	4a17      	ldr	r2, [pc, #92]	; (8009834 <DFSDM_GetChannelFromInstance+0x84>)
 80097d8:	4293      	cmp	r3, r2
 80097da:	d102      	bne.n	80097e2 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80097dc:	2302      	movs	r3, #2
 80097de:	60fb      	str	r3, [r7, #12]
 80097e0:	e01d      	b.n	800981e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel3)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	4a14      	ldr	r2, [pc, #80]	; (8009838 <DFSDM_GetChannelFromInstance+0x88>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d102      	bne.n	80097f0 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 80097ea:	2303      	movs	r3, #3
 80097ec:	60fb      	str	r3, [r7, #12]
 80097ee:	e016      	b.n	800981e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel4)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	4a12      	ldr	r2, [pc, #72]	; (800983c <DFSDM_GetChannelFromInstance+0x8c>)
 80097f4:	4293      	cmp	r3, r2
 80097f6:	d102      	bne.n	80097fe <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 80097f8:	2304      	movs	r3, #4
 80097fa:	60fb      	str	r3, [r7, #12]
 80097fc:	e00f      	b.n	800981e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel5)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	4a0f      	ldr	r2, [pc, #60]	; (8009840 <DFSDM_GetChannelFromInstance+0x90>)
 8009802:	4293      	cmp	r3, r2
 8009804:	d102      	bne.n	800980c <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 8009806:	2305      	movs	r3, #5
 8009808:	60fb      	str	r3, [r7, #12]
 800980a:	e008      	b.n	800981e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel6)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	4a0d      	ldr	r2, [pc, #52]	; (8009844 <DFSDM_GetChannelFromInstance+0x94>)
 8009810:	4293      	cmp	r3, r2
 8009812:	d102      	bne.n	800981a <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 8009814:	2306      	movs	r3, #6
 8009816:	60fb      	str	r3, [r7, #12]
 8009818:	e001      	b.n	800981e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else /* DFSDM1_Channel7 */
  {
    channel = 7;
 800981a:	2307      	movs	r3, #7
 800981c:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800981e:	68fb      	ldr	r3, [r7, #12]
}
 8009820:	4618      	mov	r0, r3
 8009822:	3714      	adds	r7, #20
 8009824:	46bd      	mov	sp, r7
 8009826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982a:	4770      	bx	lr
 800982c:	40017400 	.word	0x40017400
 8009830:	40017420 	.word	0x40017420
 8009834:	40017440 	.word	0x40017440
 8009838:	40017460 	.word	0x40017460
 800983c:	40017480 	.word	0x40017480
 8009840:	400174a0 	.word	0x400174a0
 8009844:	400174c0 	.word	0x400174c0

08009848 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8009848:	b480      	push	{r7}
 800984a:	b083      	sub	sp, #12
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if(hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009854:	2b00      	cmp	r3, #0
 8009856:	d108      	bne.n	800986a <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	681a      	ldr	r2, [r3, #0]
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009866:	601a      	str	r2, [r3, #0]
 8009868:	e033      	b.n	80098d2 <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	681a      	ldr	r2, [r3, #0]
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f022 0201 	bic.w	r2, r2, #1
 8009878:	601a      	str	r2, [r3, #0]
    
    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	681a      	ldr	r2, [r3, #0]
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8009888:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	681a      	ldr	r2, [r3, #0]
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f042 0201 	orr.w	r2, r2, #1
 8009898:	601a      	str	r2, [r3, #0]
    
    /* If injected conversion was in progress, restart it */
    if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80098a0:	2b03      	cmp	r3, #3
 80098a2:	d116      	bne.n	80098d2 <DFSDM_RegConvStart+0x8a>
    {
      if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d107      	bne.n	80098bc <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	681a      	ldr	r2, [r3, #0]
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f042 0202 	orr.w	r2, r2, #2
 80098ba:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                         hdfsdm_filter->InjectedChannelsNbr : 1;
 80098c2:	2b01      	cmp	r3, #1
 80098c4:	d102      	bne.n	80098cc <DFSDM_RegConvStart+0x84>
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098ca:	e000      	b.n	80098ce <DFSDM_RegConvStart+0x86>
 80098cc:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80098ce:	687a      	ldr	r2, [r7, #4]
 80098d0:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                          HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 80098d8:	2b01      	cmp	r3, #1
 80098da:	d101      	bne.n	80098e0 <DFSDM_RegConvStart+0x98>
 80098dc:	2202      	movs	r2, #2
 80098de:	e000      	b.n	80098e2 <DFSDM_RegConvStart+0x9a>
 80098e0:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 80098e8:	bf00      	nop
 80098ea:	370c      	adds	r7, #12
 80098ec:	46bd      	mov	sp, r7
 80098ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f2:	4770      	bx	lr

080098f4 <DFSDM_RegConvStop>:
  * @brief  This function allows to really stop regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStop(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 80098f4:	b480      	push	{r7}
 80098f6:	b083      	sub	sp, #12
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
  /* Disable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	681a      	ldr	r2, [r3, #0]
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f022 0201 	bic.w	r2, r2, #1
 800990a:	601a      	str	r2, [r3, #0]

  /* If regular trigger was synchronous, reset RSYNC bit in DFSDM_FLTCR1 register */
  if(hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SYNC_TRIGGER)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009910:	2b01      	cmp	r3, #1
 8009912:	d107      	bne.n	8009924 <DFSDM_RegConvStop+0x30>
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	681a      	ldr	r2, [r3, #0]
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8009922:	601a      	str	r2, [r3, #0]
  }

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	681a      	ldr	r2, [r3, #0]
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f042 0201 	orr.w	r2, r2, #1
 8009932:	601a      	str	r2, [r3, #0]
  
  /* If injected conversion was in progress, restart it */
  if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG_INJ)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800993a:	2b04      	cmp	r3, #4
 800993c:	d116      	bne.n	800996c <DFSDM_RegConvStop+0x78>
  {
    if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009942:	2b00      	cmp	r3, #0
 8009944:	d107      	bne.n	8009956 <DFSDM_RegConvStop+0x62>
    {
      hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	681a      	ldr	r2, [r3, #0]
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f042 0202 	orr.w	r2, r2, #2
 8009954:	601a      	str	r2, [r3, #0]
    }
    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                       hdfsdm_filter->InjectedChannelsNbr : 1;
 800995c:	2b01      	cmp	r3, #1
 800995e:	d102      	bne.n	8009966 <DFSDM_RegConvStop+0x72>
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009964:	e000      	b.n	8009968 <DFSDM_RegConvStop+0x74>
 8009966:	2301      	movs	r3, #1
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8009968:	687a      	ldr	r2, [r7, #4]
 800996a:	6493      	str	r3, [r2, #72]	; 0x48
  }
  
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                          HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 8009972:	2b02      	cmp	r3, #2
 8009974:	d101      	bne.n	800997a <DFSDM_RegConvStop+0x86>
 8009976:	2201      	movs	r2, #1
 8009978:	e000      	b.n	800997c <DFSDM_RegConvStop+0x88>
 800997a:	2203      	movs	r2, #3
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8009982:	bf00      	nop
 8009984:	370c      	adds	r7, #12
 8009986:	46bd      	mov	sp, r7
 8009988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998c:	4770      	bx	lr
	...

08009990 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b086      	sub	sp, #24
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8009998:	2300      	movs	r3, #0
 800999a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800999c:	f7ff fb30 	bl	8009000 <HAL_GetTick>
 80099a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d101      	bne.n	80099ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80099a8:	2301      	movs	r3, #1
 80099aa:	e099      	b.n	8009ae0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2202      	movs	r2, #2
 80099b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2200      	movs	r2, #0
 80099b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	681a      	ldr	r2, [r3, #0]
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	f022 0201 	bic.w	r2, r2, #1
 80099ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80099cc:	e00f      	b.n	80099ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80099ce:	f7ff fb17 	bl	8009000 <HAL_GetTick>
 80099d2:	4602      	mov	r2, r0
 80099d4:	693b      	ldr	r3, [r7, #16]
 80099d6:	1ad3      	subs	r3, r2, r3
 80099d8:	2b05      	cmp	r3, #5
 80099da:	d908      	bls.n	80099ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2220      	movs	r2, #32
 80099e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2203      	movs	r2, #3
 80099e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80099ea:	2303      	movs	r3, #3
 80099ec:	e078      	b.n	8009ae0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f003 0301 	and.w	r3, r3, #1
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d1e8      	bne.n	80099ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8009a04:	697a      	ldr	r2, [r7, #20]
 8009a06:	4b38      	ldr	r3, [pc, #224]	; (8009ae8 <HAL_DMA_Init+0x158>)
 8009a08:	4013      	ands	r3, r2
 8009a0a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	685a      	ldr	r2, [r3, #4]
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	689b      	ldr	r3, [r3, #8]
 8009a14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009a1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	691b      	ldr	r3, [r3, #16]
 8009a20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009a26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	699b      	ldr	r3, [r3, #24]
 8009a2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009a32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6a1b      	ldr	r3, [r3, #32]
 8009a38:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009a3a:	697a      	ldr	r2, [r7, #20]
 8009a3c:	4313      	orrs	r3, r2
 8009a3e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a44:	2b04      	cmp	r3, #4
 8009a46:	d107      	bne.n	8009a58 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a50:	4313      	orrs	r3, r2
 8009a52:	697a      	ldr	r2, [r7, #20]
 8009a54:	4313      	orrs	r3, r2
 8009a56:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	697a      	ldr	r2, [r7, #20]
 8009a5e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	695b      	ldr	r3, [r3, #20]
 8009a66:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	f023 0307 	bic.w	r3, r3, #7
 8009a6e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a74:	697a      	ldr	r2, [r7, #20]
 8009a76:	4313      	orrs	r3, r2
 8009a78:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a7e:	2b04      	cmp	r3, #4
 8009a80:	d117      	bne.n	8009ab2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a86:	697a      	ldr	r2, [r7, #20]
 8009a88:	4313      	orrs	r3, r2
 8009a8a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d00e      	beq.n	8009ab2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f000 fae7 	bl	800a068 <DMA_CheckFifoParam>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d008      	beq.n	8009ab2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2240      	movs	r2, #64	; 0x40
 8009aa4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2201      	movs	r2, #1
 8009aaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8009aae:	2301      	movs	r3, #1
 8009ab0:	e016      	b.n	8009ae0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	697a      	ldr	r2, [r7, #20]
 8009ab8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f000 fa9e 	bl	8009ffc <DMA_CalcBaseAndBitshift>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ac8:	223f      	movs	r2, #63	; 0x3f
 8009aca:	409a      	lsls	r2, r3
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2201      	movs	r2, #1
 8009ada:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8009ade:	2300      	movs	r3, #0
}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	3718      	adds	r7, #24
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}
 8009ae8:	e010803f 	.word	0xe010803f

08009aec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b086      	sub	sp, #24
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	60f8      	str	r0, [r7, #12]
 8009af4:	60b9      	str	r1, [r7, #8]
 8009af6:	607a      	str	r2, [r7, #4]
 8009af8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009afa:	2300      	movs	r3, #0
 8009afc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b02:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009b0a:	2b01      	cmp	r3, #1
 8009b0c:	d101      	bne.n	8009b12 <HAL_DMA_Start_IT+0x26>
 8009b0e:	2302      	movs	r3, #2
 8009b10:	e048      	b.n	8009ba4 <HAL_DMA_Start_IT+0xb8>
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	2201      	movs	r2, #1
 8009b16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009b20:	b2db      	uxtb	r3, r3
 8009b22:	2b01      	cmp	r3, #1
 8009b24:	d137      	bne.n	8009b96 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	2202      	movs	r2, #2
 8009b2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	2200      	movs	r2, #0
 8009b32:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	687a      	ldr	r2, [r7, #4]
 8009b38:	68b9      	ldr	r1, [r7, #8]
 8009b3a:	68f8      	ldr	r0, [r7, #12]
 8009b3c:	f000 fa30 	bl	8009fa0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b44:	223f      	movs	r2, #63	; 0x3f
 8009b46:	409a      	lsls	r2, r3
 8009b48:	693b      	ldr	r3, [r7, #16]
 8009b4a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	681a      	ldr	r2, [r3, #0]
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f042 0216 	orr.w	r2, r2, #22
 8009b5a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	695a      	ldr	r2, [r3, #20]
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009b6a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d007      	beq.n	8009b84 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	681a      	ldr	r2, [r3, #0]
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f042 0208 	orr.w	r2, r2, #8
 8009b82:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	681a      	ldr	r2, [r3, #0]
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f042 0201 	orr.w	r2, r2, #1
 8009b92:	601a      	str	r2, [r3, #0]
 8009b94:	e005      	b.n	8009ba2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8009b9e:	2302      	movs	r3, #2
 8009ba0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8009ba2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3718      	adds	r7, #24
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}

08009bac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b084      	sub	sp, #16
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bb8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8009bba:	f7ff fa21 	bl	8009000 <HAL_GetTick>
 8009bbe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009bc6:	b2db      	uxtb	r3, r3
 8009bc8:	2b02      	cmp	r3, #2
 8009bca:	d008      	beq.n	8009bde <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2280      	movs	r2, #128	; 0x80
 8009bd0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8009bda:	2301      	movs	r3, #1
 8009bdc:	e052      	b.n	8009c84 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	681a      	ldr	r2, [r3, #0]
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f022 0216 	bic.w	r2, r2, #22
 8009bec:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	695a      	ldr	r2, [r3, #20]
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009bfc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d103      	bne.n	8009c0e <HAL_DMA_Abort+0x62>
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d007      	beq.n	8009c1e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	681a      	ldr	r2, [r3, #0]
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f022 0208 	bic.w	r2, r2, #8
 8009c1c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	681a      	ldr	r2, [r3, #0]
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f022 0201 	bic.w	r2, r2, #1
 8009c2c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009c2e:	e013      	b.n	8009c58 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009c30:	f7ff f9e6 	bl	8009000 <HAL_GetTick>
 8009c34:	4602      	mov	r2, r0
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	1ad3      	subs	r3, r2, r3
 8009c3a:	2b05      	cmp	r3, #5
 8009c3c:	d90c      	bls.n	8009c58 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2220      	movs	r2, #32
 8009c42:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2203      	movs	r2, #3
 8009c48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2200      	movs	r2, #0
 8009c50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8009c54:	2303      	movs	r3, #3
 8009c56:	e015      	b.n	8009c84 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f003 0301 	and.w	r3, r3, #1
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d1e4      	bne.n	8009c30 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c6a:	223f      	movs	r2, #63	; 0x3f
 8009c6c:	409a      	lsls	r2, r3
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2201      	movs	r2, #1
 8009c76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8009c82:	2300      	movs	r3, #0
}
 8009c84:	4618      	mov	r0, r3
 8009c86:	3710      	adds	r7, #16
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}

08009c8c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b086      	sub	sp, #24
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8009c94:	2300      	movs	r3, #0
 8009c96:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8009c98:	4b92      	ldr	r3, [pc, #584]	; (8009ee4 <HAL_DMA_IRQHandler+0x258>)
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	4a92      	ldr	r2, [pc, #584]	; (8009ee8 <HAL_DMA_IRQHandler+0x25c>)
 8009c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8009ca2:	0a9b      	lsrs	r3, r3, #10
 8009ca4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009caa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8009cac:	693b      	ldr	r3, [r7, #16]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009cb6:	2208      	movs	r2, #8
 8009cb8:	409a      	lsls	r2, r3
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	4013      	ands	r3, r2
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d01a      	beq.n	8009cf8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	f003 0304 	and.w	r3, r3, #4
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d013      	beq.n	8009cf8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	681a      	ldr	r2, [r3, #0]
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f022 0204 	bic.w	r2, r2, #4
 8009cde:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ce4:	2208      	movs	r2, #8
 8009ce6:	409a      	lsls	r2, r3
 8009ce8:	693b      	ldr	r3, [r7, #16]
 8009cea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cf0:	f043 0201 	orr.w	r2, r3, #1
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009cfc:	2201      	movs	r2, #1
 8009cfe:	409a      	lsls	r2, r3
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	4013      	ands	r3, r2
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d012      	beq.n	8009d2e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	695b      	ldr	r3, [r3, #20]
 8009d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d00b      	beq.n	8009d2e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d1a:	2201      	movs	r2, #1
 8009d1c:	409a      	lsls	r2, r3
 8009d1e:	693b      	ldr	r3, [r7, #16]
 8009d20:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d26:	f043 0202 	orr.w	r2, r3, #2
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d32:	2204      	movs	r2, #4
 8009d34:	409a      	lsls	r2, r3
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	4013      	ands	r3, r2
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d012      	beq.n	8009d64 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f003 0302 	and.w	r3, r3, #2
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d00b      	beq.n	8009d64 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d50:	2204      	movs	r2, #4
 8009d52:	409a      	lsls	r2, r3
 8009d54:	693b      	ldr	r3, [r7, #16]
 8009d56:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d5c:	f043 0204 	orr.w	r2, r3, #4
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d68:	2210      	movs	r2, #16
 8009d6a:	409a      	lsls	r2, r3
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	4013      	ands	r3, r2
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d043      	beq.n	8009dfc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f003 0308 	and.w	r3, r3, #8
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d03c      	beq.n	8009dfc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d86:	2210      	movs	r2, #16
 8009d88:	409a      	lsls	r2, r3
 8009d8a:	693b      	ldr	r3, [r7, #16]
 8009d8c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d018      	beq.n	8009dce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d108      	bne.n	8009dbc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d024      	beq.n	8009dfc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	4798      	blx	r3
 8009dba:	e01f      	b.n	8009dfc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d01b      	beq.n	8009dfc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	4798      	blx	r3
 8009dcc:	e016      	b.n	8009dfc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d107      	bne.n	8009dec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	681a      	ldr	r2, [r3, #0]
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f022 0208 	bic.w	r2, r2, #8
 8009dea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d003      	beq.n	8009dfc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e00:	2220      	movs	r2, #32
 8009e02:	409a      	lsls	r2, r3
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	4013      	ands	r3, r2
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	f000 808e 	beq.w	8009f2a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f003 0310 	and.w	r3, r3, #16
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	f000 8086 	beq.w	8009f2a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e22:	2220      	movs	r2, #32
 8009e24:	409a      	lsls	r2, r3
 8009e26:	693b      	ldr	r3, [r7, #16]
 8009e28:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009e30:	b2db      	uxtb	r3, r3
 8009e32:	2b05      	cmp	r3, #5
 8009e34:	d136      	bne.n	8009ea4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	681a      	ldr	r2, [r3, #0]
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f022 0216 	bic.w	r2, r2, #22
 8009e44:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	695a      	ldr	r2, [r3, #20]
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009e54:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d103      	bne.n	8009e66 <HAL_DMA_IRQHandler+0x1da>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d007      	beq.n	8009e76 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	681a      	ldr	r2, [r3, #0]
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	f022 0208 	bic.w	r2, r2, #8
 8009e74:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e7a:	223f      	movs	r2, #63	; 0x3f
 8009e7c:	409a      	lsls	r2, r3
 8009e7e:	693b      	ldr	r3, [r7, #16]
 8009e80:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	2201      	movs	r2, #1
 8009e86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d07d      	beq.n	8009f96 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	4798      	blx	r3
        }
        return;
 8009ea2:	e078      	b.n	8009f96 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d01c      	beq.n	8009eec <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d108      	bne.n	8009ed2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d030      	beq.n	8009f2a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	4798      	blx	r3
 8009ed0:	e02b      	b.n	8009f2a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d027      	beq.n	8009f2a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	4798      	blx	r3
 8009ee2:	e022      	b.n	8009f2a <HAL_DMA_IRQHandler+0x29e>
 8009ee4:	20000008 	.word	0x20000008
 8009ee8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d10f      	bne.n	8009f1a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	681a      	ldr	r2, [r3, #0]
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	f022 0210 	bic.w	r2, r2, #16
 8009f08:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2201      	movs	r2, #1
 8009f0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2200      	movs	r2, #0
 8009f16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d003      	beq.n	8009f2a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d032      	beq.n	8009f98 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f36:	f003 0301 	and.w	r3, r3, #1
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d022      	beq.n	8009f84 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2205      	movs	r2, #5
 8009f42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	681a      	ldr	r2, [r3, #0]
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	f022 0201 	bic.w	r2, r2, #1
 8009f54:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	3301      	adds	r3, #1
 8009f5a:	60bb      	str	r3, [r7, #8]
 8009f5c:	697a      	ldr	r2, [r7, #20]
 8009f5e:	429a      	cmp	r2, r3
 8009f60:	d307      	bcc.n	8009f72 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f003 0301 	and.w	r3, r3, #1
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d1f2      	bne.n	8009f56 <HAL_DMA_IRQHandler+0x2ca>
 8009f70:	e000      	b.n	8009f74 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8009f72:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2201      	movs	r2, #1
 8009f78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d005      	beq.n	8009f98 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	4798      	blx	r3
 8009f94:	e000      	b.n	8009f98 <HAL_DMA_IRQHandler+0x30c>
        return;
 8009f96:	bf00      	nop
    }
  }
}
 8009f98:	3718      	adds	r7, #24
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}
 8009f9e:	bf00      	nop

08009fa0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	b085      	sub	sp, #20
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	60f8      	str	r0, [r7, #12]
 8009fa8:	60b9      	str	r1, [r7, #8]
 8009faa:	607a      	str	r2, [r7, #4]
 8009fac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	681a      	ldr	r2, [r3, #0]
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009fbc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	683a      	ldr	r2, [r7, #0]
 8009fc4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	689b      	ldr	r3, [r3, #8]
 8009fca:	2b40      	cmp	r3, #64	; 0x40
 8009fcc:	d108      	bne.n	8009fe0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	687a      	ldr	r2, [r7, #4]
 8009fd4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	68ba      	ldr	r2, [r7, #8]
 8009fdc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8009fde:	e007      	b.n	8009ff0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	68ba      	ldr	r2, [r7, #8]
 8009fe6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	687a      	ldr	r2, [r7, #4]
 8009fee:	60da      	str	r2, [r3, #12]
}
 8009ff0:	bf00      	nop
 8009ff2:	3714      	adds	r7, #20
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffa:	4770      	bx	lr

08009ffc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	b085      	sub	sp, #20
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	b2db      	uxtb	r3, r3
 800a00a:	3b10      	subs	r3, #16
 800a00c:	4a13      	ldr	r2, [pc, #76]	; (800a05c <DMA_CalcBaseAndBitshift+0x60>)
 800a00e:	fba2 2303 	umull	r2, r3, r2, r3
 800a012:	091b      	lsrs	r3, r3, #4
 800a014:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a016:	4a12      	ldr	r2, [pc, #72]	; (800a060 <DMA_CalcBaseAndBitshift+0x64>)
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	4413      	add	r3, r2
 800a01c:	781b      	ldrb	r3, [r3, #0]
 800a01e:	461a      	mov	r2, r3
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	2b03      	cmp	r3, #3
 800a028:	d908      	bls.n	800a03c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	461a      	mov	r2, r3
 800a030:	4b0c      	ldr	r3, [pc, #48]	; (800a064 <DMA_CalcBaseAndBitshift+0x68>)
 800a032:	4013      	ands	r3, r2
 800a034:	1d1a      	adds	r2, r3, #4
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	659a      	str	r2, [r3, #88]	; 0x58
 800a03a:	e006      	b.n	800a04a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	461a      	mov	r2, r3
 800a042:	4b08      	ldr	r3, [pc, #32]	; (800a064 <DMA_CalcBaseAndBitshift+0x68>)
 800a044:	4013      	ands	r3, r2
 800a046:	687a      	ldr	r2, [r7, #4]
 800a048:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a04e:	4618      	mov	r0, r3
 800a050:	3714      	adds	r7, #20
 800a052:	46bd      	mov	sp, r7
 800a054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a058:	4770      	bx	lr
 800a05a:	bf00      	nop
 800a05c:	aaaaaaab 	.word	0xaaaaaaab
 800a060:	08028e74 	.word	0x08028e74
 800a064:	fffffc00 	.word	0xfffffc00

0800a068 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a068:	b480      	push	{r7}
 800a06a:	b085      	sub	sp, #20
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a070:	2300      	movs	r3, #0
 800a072:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a078:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	699b      	ldr	r3, [r3, #24]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d11f      	bne.n	800a0c2 <DMA_CheckFifoParam+0x5a>
 800a082:	68bb      	ldr	r3, [r7, #8]
 800a084:	2b03      	cmp	r3, #3
 800a086:	d856      	bhi.n	800a136 <DMA_CheckFifoParam+0xce>
 800a088:	a201      	add	r2, pc, #4	; (adr r2, 800a090 <DMA_CheckFifoParam+0x28>)
 800a08a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a08e:	bf00      	nop
 800a090:	0800a0a1 	.word	0x0800a0a1
 800a094:	0800a0b3 	.word	0x0800a0b3
 800a098:	0800a0a1 	.word	0x0800a0a1
 800a09c:	0800a137 	.word	0x0800a137
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d046      	beq.n	800a13a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a0b0:	e043      	b.n	800a13a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0b6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a0ba:	d140      	bne.n	800a13e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800a0bc:	2301      	movs	r3, #1
 800a0be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a0c0:	e03d      	b.n	800a13e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	699b      	ldr	r3, [r3, #24]
 800a0c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0ca:	d121      	bne.n	800a110 <DMA_CheckFifoParam+0xa8>
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	2b03      	cmp	r3, #3
 800a0d0:	d837      	bhi.n	800a142 <DMA_CheckFifoParam+0xda>
 800a0d2:	a201      	add	r2, pc, #4	; (adr r2, 800a0d8 <DMA_CheckFifoParam+0x70>)
 800a0d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0d8:	0800a0e9 	.word	0x0800a0e9
 800a0dc:	0800a0ef 	.word	0x0800a0ef
 800a0e0:	0800a0e9 	.word	0x0800a0e9
 800a0e4:	0800a101 	.word	0x0800a101
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	73fb      	strb	r3, [r7, #15]
      break;
 800a0ec:	e030      	b.n	800a150 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d025      	beq.n	800a146 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a0fe:	e022      	b.n	800a146 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a104:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a108:	d11f      	bne.n	800a14a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800a10a:	2301      	movs	r3, #1
 800a10c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800a10e:	e01c      	b.n	800a14a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	2b02      	cmp	r3, #2
 800a114:	d903      	bls.n	800a11e <DMA_CheckFifoParam+0xb6>
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	2b03      	cmp	r3, #3
 800a11a:	d003      	beq.n	800a124 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800a11c:	e018      	b.n	800a150 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800a11e:	2301      	movs	r3, #1
 800a120:	73fb      	strb	r3, [r7, #15]
      break;
 800a122:	e015      	b.n	800a150 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a128:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d00e      	beq.n	800a14e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800a130:	2301      	movs	r3, #1
 800a132:	73fb      	strb	r3, [r7, #15]
      break;
 800a134:	e00b      	b.n	800a14e <DMA_CheckFifoParam+0xe6>
      break;
 800a136:	bf00      	nop
 800a138:	e00a      	b.n	800a150 <DMA_CheckFifoParam+0xe8>
      break;
 800a13a:	bf00      	nop
 800a13c:	e008      	b.n	800a150 <DMA_CheckFifoParam+0xe8>
      break;
 800a13e:	bf00      	nop
 800a140:	e006      	b.n	800a150 <DMA_CheckFifoParam+0xe8>
      break;
 800a142:	bf00      	nop
 800a144:	e004      	b.n	800a150 <DMA_CheckFifoParam+0xe8>
      break;
 800a146:	bf00      	nop
 800a148:	e002      	b.n	800a150 <DMA_CheckFifoParam+0xe8>
      break;   
 800a14a:	bf00      	nop
 800a14c:	e000      	b.n	800a150 <DMA_CheckFifoParam+0xe8>
      break;
 800a14e:	bf00      	nop
    }
  } 
  
  return status; 
 800a150:	7bfb      	ldrb	r3, [r7, #15]
}
 800a152:	4618      	mov	r0, r3
 800a154:	3714      	adds	r7, #20
 800a156:	46bd      	mov	sp, r7
 800a158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15c:	4770      	bx	lr
 800a15e:	bf00      	nop

0800a160 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a160:	b480      	push	{r7}
 800a162:	b089      	sub	sp, #36	; 0x24
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
 800a168:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800a16a:	2300      	movs	r3, #0
 800a16c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800a16e:	2300      	movs	r3, #0
 800a170:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800a172:	2300      	movs	r3, #0
 800a174:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800a176:	2300      	movs	r3, #0
 800a178:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800a17a:	2300      	movs	r3, #0
 800a17c:	61fb      	str	r3, [r7, #28]
 800a17e:	e175      	b.n	800a46c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800a180:	2201      	movs	r2, #1
 800a182:	69fb      	ldr	r3, [r7, #28]
 800a184:	fa02 f303 	lsl.w	r3, r2, r3
 800a188:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	697a      	ldr	r2, [r7, #20]
 800a190:	4013      	ands	r3, r2
 800a192:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800a194:	693a      	ldr	r2, [r7, #16]
 800a196:	697b      	ldr	r3, [r7, #20]
 800a198:	429a      	cmp	r2, r3
 800a19a:	f040 8164 	bne.w	800a466 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	685b      	ldr	r3, [r3, #4]
 800a1a2:	f003 0303 	and.w	r3, r3, #3
 800a1a6:	2b01      	cmp	r3, #1
 800a1a8:	d005      	beq.n	800a1b6 <HAL_GPIO_Init+0x56>
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	685b      	ldr	r3, [r3, #4]
 800a1ae:	f003 0303 	and.w	r3, r3, #3
 800a1b2:	2b02      	cmp	r3, #2
 800a1b4:	d130      	bne.n	800a218 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	689b      	ldr	r3, [r3, #8]
 800a1ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800a1bc:	69fb      	ldr	r3, [r7, #28]
 800a1be:	005b      	lsls	r3, r3, #1
 800a1c0:	2203      	movs	r2, #3
 800a1c2:	fa02 f303 	lsl.w	r3, r2, r3
 800a1c6:	43db      	mvns	r3, r3
 800a1c8:	69ba      	ldr	r2, [r7, #24]
 800a1ca:	4013      	ands	r3, r2
 800a1cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	68da      	ldr	r2, [r3, #12]
 800a1d2:	69fb      	ldr	r3, [r7, #28]
 800a1d4:	005b      	lsls	r3, r3, #1
 800a1d6:	fa02 f303 	lsl.w	r3, r2, r3
 800a1da:	69ba      	ldr	r2, [r7, #24]
 800a1dc:	4313      	orrs	r3, r2
 800a1de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	69ba      	ldr	r2, [r7, #24]
 800a1e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	685b      	ldr	r3, [r3, #4]
 800a1ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a1ec:	2201      	movs	r2, #1
 800a1ee:	69fb      	ldr	r3, [r7, #28]
 800a1f0:	fa02 f303 	lsl.w	r3, r2, r3
 800a1f4:	43db      	mvns	r3, r3
 800a1f6:	69ba      	ldr	r2, [r7, #24]
 800a1f8:	4013      	ands	r3, r2
 800a1fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	685b      	ldr	r3, [r3, #4]
 800a200:	091b      	lsrs	r3, r3, #4
 800a202:	f003 0201 	and.w	r2, r3, #1
 800a206:	69fb      	ldr	r3, [r7, #28]
 800a208:	fa02 f303 	lsl.w	r3, r2, r3
 800a20c:	69ba      	ldr	r2, [r7, #24]
 800a20e:	4313      	orrs	r3, r2
 800a210:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	69ba      	ldr	r2, [r7, #24]
 800a216:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	685b      	ldr	r3, [r3, #4]
 800a21c:	f003 0303 	and.w	r3, r3, #3
 800a220:	2b03      	cmp	r3, #3
 800a222:	d017      	beq.n	800a254 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	68db      	ldr	r3, [r3, #12]
 800a228:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800a22a:	69fb      	ldr	r3, [r7, #28]
 800a22c:	005b      	lsls	r3, r3, #1
 800a22e:	2203      	movs	r2, #3
 800a230:	fa02 f303 	lsl.w	r3, r2, r3
 800a234:	43db      	mvns	r3, r3
 800a236:	69ba      	ldr	r2, [r7, #24]
 800a238:	4013      	ands	r3, r2
 800a23a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	689a      	ldr	r2, [r3, #8]
 800a240:	69fb      	ldr	r3, [r7, #28]
 800a242:	005b      	lsls	r3, r3, #1
 800a244:	fa02 f303 	lsl.w	r3, r2, r3
 800a248:	69ba      	ldr	r2, [r7, #24]
 800a24a:	4313      	orrs	r3, r2
 800a24c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	69ba      	ldr	r2, [r7, #24]
 800a252:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	685b      	ldr	r3, [r3, #4]
 800a258:	f003 0303 	and.w	r3, r3, #3
 800a25c:	2b02      	cmp	r3, #2
 800a25e:	d123      	bne.n	800a2a8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800a260:	69fb      	ldr	r3, [r7, #28]
 800a262:	08da      	lsrs	r2, r3, #3
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	3208      	adds	r2, #8
 800a268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a26c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800a26e:	69fb      	ldr	r3, [r7, #28]
 800a270:	f003 0307 	and.w	r3, r3, #7
 800a274:	009b      	lsls	r3, r3, #2
 800a276:	220f      	movs	r2, #15
 800a278:	fa02 f303 	lsl.w	r3, r2, r3
 800a27c:	43db      	mvns	r3, r3
 800a27e:	69ba      	ldr	r2, [r7, #24]
 800a280:	4013      	ands	r3, r2
 800a282:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	691a      	ldr	r2, [r3, #16]
 800a288:	69fb      	ldr	r3, [r7, #28]
 800a28a:	f003 0307 	and.w	r3, r3, #7
 800a28e:	009b      	lsls	r3, r3, #2
 800a290:	fa02 f303 	lsl.w	r3, r2, r3
 800a294:	69ba      	ldr	r2, [r7, #24]
 800a296:	4313      	orrs	r3, r2
 800a298:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800a29a:	69fb      	ldr	r3, [r7, #28]
 800a29c:	08da      	lsrs	r2, r3, #3
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	3208      	adds	r2, #8
 800a2a2:	69b9      	ldr	r1, [r7, #24]
 800a2a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800a2ae:	69fb      	ldr	r3, [r7, #28]
 800a2b0:	005b      	lsls	r3, r3, #1
 800a2b2:	2203      	movs	r2, #3
 800a2b4:	fa02 f303 	lsl.w	r3, r2, r3
 800a2b8:	43db      	mvns	r3, r3
 800a2ba:	69ba      	ldr	r2, [r7, #24]
 800a2bc:	4013      	ands	r3, r2
 800a2be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	685b      	ldr	r3, [r3, #4]
 800a2c4:	f003 0203 	and.w	r2, r3, #3
 800a2c8:	69fb      	ldr	r3, [r7, #28]
 800a2ca:	005b      	lsls	r3, r3, #1
 800a2cc:	fa02 f303 	lsl.w	r3, r2, r3
 800a2d0:	69ba      	ldr	r2, [r7, #24]
 800a2d2:	4313      	orrs	r3, r2
 800a2d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	69ba      	ldr	r2, [r7, #24]
 800a2da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	685b      	ldr	r3, [r3, #4]
 800a2e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	f000 80be 	beq.w	800a466 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a2ea:	4b66      	ldr	r3, [pc, #408]	; (800a484 <HAL_GPIO_Init+0x324>)
 800a2ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2ee:	4a65      	ldr	r2, [pc, #404]	; (800a484 <HAL_GPIO_Init+0x324>)
 800a2f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a2f4:	6453      	str	r3, [r2, #68]	; 0x44
 800a2f6:	4b63      	ldr	r3, [pc, #396]	; (800a484 <HAL_GPIO_Init+0x324>)
 800a2f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a2fe:	60fb      	str	r3, [r7, #12]
 800a300:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800a302:	4a61      	ldr	r2, [pc, #388]	; (800a488 <HAL_GPIO_Init+0x328>)
 800a304:	69fb      	ldr	r3, [r7, #28]
 800a306:	089b      	lsrs	r3, r3, #2
 800a308:	3302      	adds	r3, #2
 800a30a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a30e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800a310:	69fb      	ldr	r3, [r7, #28]
 800a312:	f003 0303 	and.w	r3, r3, #3
 800a316:	009b      	lsls	r3, r3, #2
 800a318:	220f      	movs	r2, #15
 800a31a:	fa02 f303 	lsl.w	r3, r2, r3
 800a31e:	43db      	mvns	r3, r3
 800a320:	69ba      	ldr	r2, [r7, #24]
 800a322:	4013      	ands	r3, r2
 800a324:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	4a58      	ldr	r2, [pc, #352]	; (800a48c <HAL_GPIO_Init+0x32c>)
 800a32a:	4293      	cmp	r3, r2
 800a32c:	d037      	beq.n	800a39e <HAL_GPIO_Init+0x23e>
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	4a57      	ldr	r2, [pc, #348]	; (800a490 <HAL_GPIO_Init+0x330>)
 800a332:	4293      	cmp	r3, r2
 800a334:	d031      	beq.n	800a39a <HAL_GPIO_Init+0x23a>
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	4a56      	ldr	r2, [pc, #344]	; (800a494 <HAL_GPIO_Init+0x334>)
 800a33a:	4293      	cmp	r3, r2
 800a33c:	d02b      	beq.n	800a396 <HAL_GPIO_Init+0x236>
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	4a55      	ldr	r2, [pc, #340]	; (800a498 <HAL_GPIO_Init+0x338>)
 800a342:	4293      	cmp	r3, r2
 800a344:	d025      	beq.n	800a392 <HAL_GPIO_Init+0x232>
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	4a54      	ldr	r2, [pc, #336]	; (800a49c <HAL_GPIO_Init+0x33c>)
 800a34a:	4293      	cmp	r3, r2
 800a34c:	d01f      	beq.n	800a38e <HAL_GPIO_Init+0x22e>
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	4a53      	ldr	r2, [pc, #332]	; (800a4a0 <HAL_GPIO_Init+0x340>)
 800a352:	4293      	cmp	r3, r2
 800a354:	d019      	beq.n	800a38a <HAL_GPIO_Init+0x22a>
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	4a52      	ldr	r2, [pc, #328]	; (800a4a4 <HAL_GPIO_Init+0x344>)
 800a35a:	4293      	cmp	r3, r2
 800a35c:	d013      	beq.n	800a386 <HAL_GPIO_Init+0x226>
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	4a51      	ldr	r2, [pc, #324]	; (800a4a8 <HAL_GPIO_Init+0x348>)
 800a362:	4293      	cmp	r3, r2
 800a364:	d00d      	beq.n	800a382 <HAL_GPIO_Init+0x222>
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	4a50      	ldr	r2, [pc, #320]	; (800a4ac <HAL_GPIO_Init+0x34c>)
 800a36a:	4293      	cmp	r3, r2
 800a36c:	d007      	beq.n	800a37e <HAL_GPIO_Init+0x21e>
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	4a4f      	ldr	r2, [pc, #316]	; (800a4b0 <HAL_GPIO_Init+0x350>)
 800a372:	4293      	cmp	r3, r2
 800a374:	d101      	bne.n	800a37a <HAL_GPIO_Init+0x21a>
 800a376:	2309      	movs	r3, #9
 800a378:	e012      	b.n	800a3a0 <HAL_GPIO_Init+0x240>
 800a37a:	230a      	movs	r3, #10
 800a37c:	e010      	b.n	800a3a0 <HAL_GPIO_Init+0x240>
 800a37e:	2308      	movs	r3, #8
 800a380:	e00e      	b.n	800a3a0 <HAL_GPIO_Init+0x240>
 800a382:	2307      	movs	r3, #7
 800a384:	e00c      	b.n	800a3a0 <HAL_GPIO_Init+0x240>
 800a386:	2306      	movs	r3, #6
 800a388:	e00a      	b.n	800a3a0 <HAL_GPIO_Init+0x240>
 800a38a:	2305      	movs	r3, #5
 800a38c:	e008      	b.n	800a3a0 <HAL_GPIO_Init+0x240>
 800a38e:	2304      	movs	r3, #4
 800a390:	e006      	b.n	800a3a0 <HAL_GPIO_Init+0x240>
 800a392:	2303      	movs	r3, #3
 800a394:	e004      	b.n	800a3a0 <HAL_GPIO_Init+0x240>
 800a396:	2302      	movs	r3, #2
 800a398:	e002      	b.n	800a3a0 <HAL_GPIO_Init+0x240>
 800a39a:	2301      	movs	r3, #1
 800a39c:	e000      	b.n	800a3a0 <HAL_GPIO_Init+0x240>
 800a39e:	2300      	movs	r3, #0
 800a3a0:	69fa      	ldr	r2, [r7, #28]
 800a3a2:	f002 0203 	and.w	r2, r2, #3
 800a3a6:	0092      	lsls	r2, r2, #2
 800a3a8:	4093      	lsls	r3, r2
 800a3aa:	69ba      	ldr	r2, [r7, #24]
 800a3ac:	4313      	orrs	r3, r2
 800a3ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800a3b0:	4935      	ldr	r1, [pc, #212]	; (800a488 <HAL_GPIO_Init+0x328>)
 800a3b2:	69fb      	ldr	r3, [r7, #28]
 800a3b4:	089b      	lsrs	r3, r3, #2
 800a3b6:	3302      	adds	r3, #2
 800a3b8:	69ba      	ldr	r2, [r7, #24]
 800a3ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a3be:	4b3d      	ldr	r3, [pc, #244]	; (800a4b4 <HAL_GPIO_Init+0x354>)
 800a3c0:	689b      	ldr	r3, [r3, #8]
 800a3c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a3c4:	693b      	ldr	r3, [r7, #16]
 800a3c6:	43db      	mvns	r3, r3
 800a3c8:	69ba      	ldr	r2, [r7, #24]
 800a3ca:	4013      	ands	r3, r2
 800a3cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	685b      	ldr	r3, [r3, #4]
 800a3d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d003      	beq.n	800a3e2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800a3da:	69ba      	ldr	r2, [r7, #24]
 800a3dc:	693b      	ldr	r3, [r7, #16]
 800a3de:	4313      	orrs	r3, r2
 800a3e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800a3e2:	4a34      	ldr	r2, [pc, #208]	; (800a4b4 <HAL_GPIO_Init+0x354>)
 800a3e4:	69bb      	ldr	r3, [r7, #24]
 800a3e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800a3e8:	4b32      	ldr	r3, [pc, #200]	; (800a4b4 <HAL_GPIO_Init+0x354>)
 800a3ea:	68db      	ldr	r3, [r3, #12]
 800a3ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a3ee:	693b      	ldr	r3, [r7, #16]
 800a3f0:	43db      	mvns	r3, r3
 800a3f2:	69ba      	ldr	r2, [r7, #24]
 800a3f4:	4013      	ands	r3, r2
 800a3f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	685b      	ldr	r3, [r3, #4]
 800a3fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a400:	2b00      	cmp	r3, #0
 800a402:	d003      	beq.n	800a40c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800a404:	69ba      	ldr	r2, [r7, #24]
 800a406:	693b      	ldr	r3, [r7, #16]
 800a408:	4313      	orrs	r3, r2
 800a40a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800a40c:	4a29      	ldr	r2, [pc, #164]	; (800a4b4 <HAL_GPIO_Init+0x354>)
 800a40e:	69bb      	ldr	r3, [r7, #24]
 800a410:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800a412:	4b28      	ldr	r3, [pc, #160]	; (800a4b4 <HAL_GPIO_Init+0x354>)
 800a414:	685b      	ldr	r3, [r3, #4]
 800a416:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a418:	693b      	ldr	r3, [r7, #16]
 800a41a:	43db      	mvns	r3, r3
 800a41c:	69ba      	ldr	r2, [r7, #24]
 800a41e:	4013      	ands	r3, r2
 800a420:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	685b      	ldr	r3, [r3, #4]
 800a426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d003      	beq.n	800a436 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800a42e:	69ba      	ldr	r2, [r7, #24]
 800a430:	693b      	ldr	r3, [r7, #16]
 800a432:	4313      	orrs	r3, r2
 800a434:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800a436:	4a1f      	ldr	r2, [pc, #124]	; (800a4b4 <HAL_GPIO_Init+0x354>)
 800a438:	69bb      	ldr	r3, [r7, #24]
 800a43a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a43c:	4b1d      	ldr	r3, [pc, #116]	; (800a4b4 <HAL_GPIO_Init+0x354>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a442:	693b      	ldr	r3, [r7, #16]
 800a444:	43db      	mvns	r3, r3
 800a446:	69ba      	ldr	r2, [r7, #24]
 800a448:	4013      	ands	r3, r2
 800a44a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	685b      	ldr	r3, [r3, #4]
 800a450:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a454:	2b00      	cmp	r3, #0
 800a456:	d003      	beq.n	800a460 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800a458:	69ba      	ldr	r2, [r7, #24]
 800a45a:	693b      	ldr	r3, [r7, #16]
 800a45c:	4313      	orrs	r3, r2
 800a45e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800a460:	4a14      	ldr	r2, [pc, #80]	; (800a4b4 <HAL_GPIO_Init+0x354>)
 800a462:	69bb      	ldr	r3, [r7, #24]
 800a464:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800a466:	69fb      	ldr	r3, [r7, #28]
 800a468:	3301      	adds	r3, #1
 800a46a:	61fb      	str	r3, [r7, #28]
 800a46c:	69fb      	ldr	r3, [r7, #28]
 800a46e:	2b0f      	cmp	r3, #15
 800a470:	f67f ae86 	bls.w	800a180 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800a474:	bf00      	nop
 800a476:	bf00      	nop
 800a478:	3724      	adds	r7, #36	; 0x24
 800a47a:	46bd      	mov	sp, r7
 800a47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a480:	4770      	bx	lr
 800a482:	bf00      	nop
 800a484:	40023800 	.word	0x40023800
 800a488:	40013800 	.word	0x40013800
 800a48c:	40020000 	.word	0x40020000
 800a490:	40020400 	.word	0x40020400
 800a494:	40020800 	.word	0x40020800
 800a498:	40020c00 	.word	0x40020c00
 800a49c:	40021000 	.word	0x40021000
 800a4a0:	40021400 	.word	0x40021400
 800a4a4:	40021800 	.word	0x40021800
 800a4a8:	40021c00 	.word	0x40021c00
 800a4ac:	40022000 	.word	0x40022000
 800a4b0:	40022400 	.word	0x40022400
 800a4b4:	40013c00 	.word	0x40013c00

0800a4b8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b087      	sub	sp, #28
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
 800a4c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	617b      	str	r3, [r7, #20]
 800a4d2:	e0d9      	b.n	800a688 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800a4d4:	2201      	movs	r2, #1
 800a4d6:	697b      	ldr	r3, [r7, #20]
 800a4d8:	fa02 f303 	lsl.w	r3, r2, r3
 800a4dc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800a4de:	683a      	ldr	r2, [r7, #0]
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	4013      	ands	r3, r2
 800a4e4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800a4e6:	68fa      	ldr	r2, [r7, #12]
 800a4e8:	693b      	ldr	r3, [r7, #16]
 800a4ea:	429a      	cmp	r2, r3
 800a4ec:	f040 80c9 	bne.w	800a682 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 800a4f0:	4a6b      	ldr	r2, [pc, #428]	; (800a6a0 <HAL_GPIO_DeInit+0x1e8>)
 800a4f2:	697b      	ldr	r3, [r7, #20]
 800a4f4:	089b      	lsrs	r3, r3, #2
 800a4f6:	3302      	adds	r3, #2
 800a4f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a4fc:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800a4fe:	697b      	ldr	r3, [r7, #20]
 800a500:	f003 0303 	and.w	r3, r3, #3
 800a504:	009b      	lsls	r3, r3, #2
 800a506:	220f      	movs	r2, #15
 800a508:	fa02 f303 	lsl.w	r3, r2, r3
 800a50c:	68ba      	ldr	r2, [r7, #8]
 800a50e:	4013      	ands	r3, r2
 800a510:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	4a63      	ldr	r2, [pc, #396]	; (800a6a4 <HAL_GPIO_DeInit+0x1ec>)
 800a516:	4293      	cmp	r3, r2
 800a518:	d037      	beq.n	800a58a <HAL_GPIO_DeInit+0xd2>
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	4a62      	ldr	r2, [pc, #392]	; (800a6a8 <HAL_GPIO_DeInit+0x1f0>)
 800a51e:	4293      	cmp	r3, r2
 800a520:	d031      	beq.n	800a586 <HAL_GPIO_DeInit+0xce>
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	4a61      	ldr	r2, [pc, #388]	; (800a6ac <HAL_GPIO_DeInit+0x1f4>)
 800a526:	4293      	cmp	r3, r2
 800a528:	d02b      	beq.n	800a582 <HAL_GPIO_DeInit+0xca>
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	4a60      	ldr	r2, [pc, #384]	; (800a6b0 <HAL_GPIO_DeInit+0x1f8>)
 800a52e:	4293      	cmp	r3, r2
 800a530:	d025      	beq.n	800a57e <HAL_GPIO_DeInit+0xc6>
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	4a5f      	ldr	r2, [pc, #380]	; (800a6b4 <HAL_GPIO_DeInit+0x1fc>)
 800a536:	4293      	cmp	r3, r2
 800a538:	d01f      	beq.n	800a57a <HAL_GPIO_DeInit+0xc2>
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	4a5e      	ldr	r2, [pc, #376]	; (800a6b8 <HAL_GPIO_DeInit+0x200>)
 800a53e:	4293      	cmp	r3, r2
 800a540:	d019      	beq.n	800a576 <HAL_GPIO_DeInit+0xbe>
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	4a5d      	ldr	r2, [pc, #372]	; (800a6bc <HAL_GPIO_DeInit+0x204>)
 800a546:	4293      	cmp	r3, r2
 800a548:	d013      	beq.n	800a572 <HAL_GPIO_DeInit+0xba>
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	4a5c      	ldr	r2, [pc, #368]	; (800a6c0 <HAL_GPIO_DeInit+0x208>)
 800a54e:	4293      	cmp	r3, r2
 800a550:	d00d      	beq.n	800a56e <HAL_GPIO_DeInit+0xb6>
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	4a5b      	ldr	r2, [pc, #364]	; (800a6c4 <HAL_GPIO_DeInit+0x20c>)
 800a556:	4293      	cmp	r3, r2
 800a558:	d007      	beq.n	800a56a <HAL_GPIO_DeInit+0xb2>
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	4a5a      	ldr	r2, [pc, #360]	; (800a6c8 <HAL_GPIO_DeInit+0x210>)
 800a55e:	4293      	cmp	r3, r2
 800a560:	d101      	bne.n	800a566 <HAL_GPIO_DeInit+0xae>
 800a562:	2309      	movs	r3, #9
 800a564:	e012      	b.n	800a58c <HAL_GPIO_DeInit+0xd4>
 800a566:	230a      	movs	r3, #10
 800a568:	e010      	b.n	800a58c <HAL_GPIO_DeInit+0xd4>
 800a56a:	2308      	movs	r3, #8
 800a56c:	e00e      	b.n	800a58c <HAL_GPIO_DeInit+0xd4>
 800a56e:	2307      	movs	r3, #7
 800a570:	e00c      	b.n	800a58c <HAL_GPIO_DeInit+0xd4>
 800a572:	2306      	movs	r3, #6
 800a574:	e00a      	b.n	800a58c <HAL_GPIO_DeInit+0xd4>
 800a576:	2305      	movs	r3, #5
 800a578:	e008      	b.n	800a58c <HAL_GPIO_DeInit+0xd4>
 800a57a:	2304      	movs	r3, #4
 800a57c:	e006      	b.n	800a58c <HAL_GPIO_DeInit+0xd4>
 800a57e:	2303      	movs	r3, #3
 800a580:	e004      	b.n	800a58c <HAL_GPIO_DeInit+0xd4>
 800a582:	2302      	movs	r3, #2
 800a584:	e002      	b.n	800a58c <HAL_GPIO_DeInit+0xd4>
 800a586:	2301      	movs	r3, #1
 800a588:	e000      	b.n	800a58c <HAL_GPIO_DeInit+0xd4>
 800a58a:	2300      	movs	r3, #0
 800a58c:	697a      	ldr	r2, [r7, #20]
 800a58e:	f002 0203 	and.w	r2, r2, #3
 800a592:	0092      	lsls	r2, r2, #2
 800a594:	4093      	lsls	r3, r2
 800a596:	68ba      	ldr	r2, [r7, #8]
 800a598:	429a      	cmp	r2, r3
 800a59a:	d132      	bne.n	800a602 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800a59c:	4b4b      	ldr	r3, [pc, #300]	; (800a6cc <HAL_GPIO_DeInit+0x214>)
 800a59e:	681a      	ldr	r2, [r3, #0]
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	43db      	mvns	r3, r3
 800a5a4:	4949      	ldr	r1, [pc, #292]	; (800a6cc <HAL_GPIO_DeInit+0x214>)
 800a5a6:	4013      	ands	r3, r2
 800a5a8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800a5aa:	4b48      	ldr	r3, [pc, #288]	; (800a6cc <HAL_GPIO_DeInit+0x214>)
 800a5ac:	685a      	ldr	r2, [r3, #4]
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	43db      	mvns	r3, r3
 800a5b2:	4946      	ldr	r1, [pc, #280]	; (800a6cc <HAL_GPIO_DeInit+0x214>)
 800a5b4:	4013      	ands	r3, r2
 800a5b6:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800a5b8:	4b44      	ldr	r3, [pc, #272]	; (800a6cc <HAL_GPIO_DeInit+0x214>)
 800a5ba:	68da      	ldr	r2, [r3, #12]
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	43db      	mvns	r3, r3
 800a5c0:	4942      	ldr	r1, [pc, #264]	; (800a6cc <HAL_GPIO_DeInit+0x214>)
 800a5c2:	4013      	ands	r3, r2
 800a5c4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800a5c6:	4b41      	ldr	r3, [pc, #260]	; (800a6cc <HAL_GPIO_DeInit+0x214>)
 800a5c8:	689a      	ldr	r2, [r3, #8]
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	43db      	mvns	r3, r3
 800a5ce:	493f      	ldr	r1, [pc, #252]	; (800a6cc <HAL_GPIO_DeInit+0x214>)
 800a5d0:	4013      	ands	r3, r2
 800a5d2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 800a5d4:	697b      	ldr	r3, [r7, #20]
 800a5d6:	f003 0303 	and.w	r3, r3, #3
 800a5da:	009b      	lsls	r3, r3, #2
 800a5dc:	220f      	movs	r2, #15
 800a5de:	fa02 f303 	lsl.w	r3, r2, r3
 800a5e2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800a5e4:	4a2e      	ldr	r2, [pc, #184]	; (800a6a0 <HAL_GPIO_DeInit+0x1e8>)
 800a5e6:	697b      	ldr	r3, [r7, #20]
 800a5e8:	089b      	lsrs	r3, r3, #2
 800a5ea:	3302      	adds	r3, #2
 800a5ec:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a5f0:	68bb      	ldr	r3, [r7, #8]
 800a5f2:	43da      	mvns	r2, r3
 800a5f4:	482a      	ldr	r0, [pc, #168]	; (800a6a0 <HAL_GPIO_DeInit+0x1e8>)
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	089b      	lsrs	r3, r3, #2
 800a5fa:	400a      	ands	r2, r1
 800a5fc:	3302      	adds	r3, #2
 800a5fe:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681a      	ldr	r2, [r3, #0]
 800a606:	697b      	ldr	r3, [r7, #20]
 800a608:	005b      	lsls	r3, r3, #1
 800a60a:	2103      	movs	r1, #3
 800a60c:	fa01 f303 	lsl.w	r3, r1, r3
 800a610:	43db      	mvns	r3, r3
 800a612:	401a      	ands	r2, r3
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	08da      	lsrs	r2, r3, #3
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	3208      	adds	r2, #8
 800a620:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a624:	697b      	ldr	r3, [r7, #20]
 800a626:	f003 0307 	and.w	r3, r3, #7
 800a62a:	009b      	lsls	r3, r3, #2
 800a62c:	220f      	movs	r2, #15
 800a62e:	fa02 f303 	lsl.w	r3, r2, r3
 800a632:	43db      	mvns	r3, r3
 800a634:	697a      	ldr	r2, [r7, #20]
 800a636:	08d2      	lsrs	r2, r2, #3
 800a638:	4019      	ands	r1, r3
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	3208      	adds	r2, #8
 800a63e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	68da      	ldr	r2, [r3, #12]
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	005b      	lsls	r3, r3, #1
 800a64a:	2103      	movs	r1, #3
 800a64c:	fa01 f303 	lsl.w	r3, r1, r3
 800a650:	43db      	mvns	r3, r3
 800a652:	401a      	ands	r2, r3
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	685a      	ldr	r2, [r3, #4]
 800a65c:	2101      	movs	r1, #1
 800a65e:	697b      	ldr	r3, [r7, #20]
 800a660:	fa01 f303 	lsl.w	r3, r1, r3
 800a664:	43db      	mvns	r3, r3
 800a666:	401a      	ands	r2, r3
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	689a      	ldr	r2, [r3, #8]
 800a670:	697b      	ldr	r3, [r7, #20]
 800a672:	005b      	lsls	r3, r3, #1
 800a674:	2103      	movs	r1, #3
 800a676:	fa01 f303 	lsl.w	r3, r1, r3
 800a67a:	43db      	mvns	r3, r3
 800a67c:	401a      	ands	r2, r3
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800a682:	697b      	ldr	r3, [r7, #20]
 800a684:	3301      	adds	r3, #1
 800a686:	617b      	str	r3, [r7, #20]
 800a688:	697b      	ldr	r3, [r7, #20]
 800a68a:	2b0f      	cmp	r3, #15
 800a68c:	f67f af22 	bls.w	800a4d4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800a690:	bf00      	nop
 800a692:	bf00      	nop
 800a694:	371c      	adds	r7, #28
 800a696:	46bd      	mov	sp, r7
 800a698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69c:	4770      	bx	lr
 800a69e:	bf00      	nop
 800a6a0:	40013800 	.word	0x40013800
 800a6a4:	40020000 	.word	0x40020000
 800a6a8:	40020400 	.word	0x40020400
 800a6ac:	40020800 	.word	0x40020800
 800a6b0:	40020c00 	.word	0x40020c00
 800a6b4:	40021000 	.word	0x40021000
 800a6b8:	40021400 	.word	0x40021400
 800a6bc:	40021800 	.word	0x40021800
 800a6c0:	40021c00 	.word	0x40021c00
 800a6c4:	40022000 	.word	0x40022000
 800a6c8:	40022400 	.word	0x40022400
 800a6cc:	40013c00 	.word	0x40013c00

0800a6d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a6d0:	b480      	push	{r7}
 800a6d2:	b083      	sub	sp, #12
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
 800a6d8:	460b      	mov	r3, r1
 800a6da:	807b      	strh	r3, [r7, #2]
 800a6dc:	4613      	mov	r3, r2
 800a6de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a6e0:	787b      	ldrb	r3, [r7, #1]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d003      	beq.n	800a6ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a6e6:	887a      	ldrh	r2, [r7, #2]
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800a6ec:	e003      	b.n	800a6f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800a6ee:	887b      	ldrh	r3, [r7, #2]
 800a6f0:	041a      	lsls	r2, r3, #16
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	619a      	str	r2, [r3, #24]
}
 800a6f6:	bf00      	nop
 800a6f8:	370c      	adds	r7, #12
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a700:	4770      	bx	lr
	...

0800a704 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b082      	sub	sp, #8
 800a708:	af00      	add	r7, sp, #0
 800a70a:	4603      	mov	r3, r0
 800a70c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800a70e:	4b08      	ldr	r3, [pc, #32]	; (800a730 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a710:	695a      	ldr	r2, [r3, #20]
 800a712:	88fb      	ldrh	r3, [r7, #6]
 800a714:	4013      	ands	r3, r2
 800a716:	2b00      	cmp	r3, #0
 800a718:	d006      	beq.n	800a728 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a71a:	4a05      	ldr	r2, [pc, #20]	; (800a730 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a71c:	88fb      	ldrh	r3, [r7, #6]
 800a71e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a720:	88fb      	ldrh	r3, [r7, #6]
 800a722:	4618      	mov	r0, r3
 800a724:	f7f7 ff9a 	bl	800265c <HAL_GPIO_EXTI_Callback>
  }
}
 800a728:	bf00      	nop
 800a72a:	3708      	adds	r7, #8
 800a72c:	46bd      	mov	sp, r7
 800a72e:	bd80      	pop	{r7, pc}
 800a730:	40013c00 	.word	0x40013c00

0800a734 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 800a734:	b480      	push	{r7}
 800a736:	b083      	sub	sp, #12
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
 800a73c:	460b      	mov	r3, r1
 800a73e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800a740:	4b0c      	ldr	r3, [pc, #48]	; (800a774 <HAL_PWR_EnterSLEEPMode+0x40>)
 800a742:	691b      	ldr	r3, [r3, #16]
 800a744:	4a0b      	ldr	r2, [pc, #44]	; (800a774 <HAL_PWR_EnterSLEEPMode+0x40>)
 800a746:	f023 0304 	bic.w	r3, r3, #4
 800a74a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 800a74c:	f3bf 8f4f 	dsb	sy
}
 800a750:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a752:	f3bf 8f6f 	isb	sy
}
 800a756:	bf00      	nop
  /* Ensure that all instructions done before entering SLEEP mode */
  __DSB();
  __ISB();

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800a758:	78fb      	ldrb	r3, [r7, #3]
 800a75a:	2b01      	cmp	r3, #1
 800a75c:	d101      	bne.n	800a762 <HAL_PWR_EnterSLEEPMode+0x2e>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 800a75e:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 800a760:	e002      	b.n	800a768 <HAL_PWR_EnterSLEEPMode+0x34>
    __SEV();
 800a762:	bf40      	sev
    __WFE();
 800a764:	bf20      	wfe
    __WFE();
 800a766:	bf20      	wfe
}
 800a768:	bf00      	nop
 800a76a:	370c      	adds	r7, #12
 800a76c:	46bd      	mov	sp, r7
 800a76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a772:	4770      	bx	lr
 800a774:	e000ed00 	.word	0xe000ed00

0800a778 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b082      	sub	sp, #8
 800a77c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800a77e:	2300      	movs	r3, #0
 800a780:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800a782:	4b23      	ldr	r3, [pc, #140]	; (800a810 <HAL_PWREx_EnableOverDrive+0x98>)
 800a784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a786:	4a22      	ldr	r2, [pc, #136]	; (800a810 <HAL_PWREx_EnableOverDrive+0x98>)
 800a788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a78c:	6413      	str	r3, [r2, #64]	; 0x40
 800a78e:	4b20      	ldr	r3, [pc, #128]	; (800a810 <HAL_PWREx_EnableOverDrive+0x98>)
 800a790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a796:	603b      	str	r3, [r7, #0]
 800a798:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800a79a:	4b1e      	ldr	r3, [pc, #120]	; (800a814 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	4a1d      	ldr	r2, [pc, #116]	; (800a814 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a7a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a7a4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a7a6:	f7fe fc2b 	bl	8009000 <HAL_GetTick>
 800a7aa:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a7ac:	e009      	b.n	800a7c2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a7ae:	f7fe fc27 	bl	8009000 <HAL_GetTick>
 800a7b2:	4602      	mov	r2, r0
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	1ad3      	subs	r3, r2, r3
 800a7b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a7bc:	d901      	bls.n	800a7c2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800a7be:	2303      	movs	r3, #3
 800a7c0:	e022      	b.n	800a808 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a7c2:	4b14      	ldr	r3, [pc, #80]	; (800a814 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a7c4:	685b      	ldr	r3, [r3, #4]
 800a7c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a7ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7ce:	d1ee      	bne.n	800a7ae <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800a7d0:	4b10      	ldr	r3, [pc, #64]	; (800a814 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	4a0f      	ldr	r2, [pc, #60]	; (800a814 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a7d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a7da:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a7dc:	f7fe fc10 	bl	8009000 <HAL_GetTick>
 800a7e0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a7e2:	e009      	b.n	800a7f8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a7e4:	f7fe fc0c 	bl	8009000 <HAL_GetTick>
 800a7e8:	4602      	mov	r2, r0
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	1ad3      	subs	r3, r2, r3
 800a7ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a7f2:	d901      	bls.n	800a7f8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800a7f4:	2303      	movs	r3, #3
 800a7f6:	e007      	b.n	800a808 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a7f8:	4b06      	ldr	r3, [pc, #24]	; (800a814 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a7fa:	685b      	ldr	r3, [r3, #4]
 800a7fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a800:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a804:	d1ee      	bne.n	800a7e4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800a806:	2300      	movs	r3, #0
}
 800a808:	4618      	mov	r0, r3
 800a80a:	3708      	adds	r7, #8
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}
 800a810:	40023800 	.word	0x40023800
 800a814:	40007000 	.word	0x40007000

0800a818 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b086      	sub	sp, #24
 800a81c:	af02      	add	r7, sp, #8
 800a81e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800a820:	f7fe fbee 	bl	8009000 <HAL_GetTick>
 800a824:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d101      	bne.n	800a830 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800a82c:	2301      	movs	r3, #1
 800a82e:	e067      	b.n	800a900 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a836:	b2db      	uxtb	r3, r3
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d10b      	bne.n	800a854 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2200      	movs	r2, #0
 800a840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f7f8 ffdd 	bl	8003804 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800a84a:	f241 3188 	movw	r1, #5000	; 0x1388
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	f000 fa86 	bl	800ad60 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	689b      	ldr	r3, [r3, #8]
 800a862:	3b01      	subs	r3, #1
 800a864:	021a      	lsls	r2, r3, #8
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	430a      	orrs	r2, r1
 800a86c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a872:	9300      	str	r3, [sp, #0]
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	2200      	movs	r2, #0
 800a878:	2120      	movs	r1, #32
 800a87a:	6878      	ldr	r0, [r7, #4]
 800a87c:	f000 fa7e 	bl	800ad7c <QSPI_WaitFlagStateUntilTimeout>
 800a880:	4603      	mov	r3, r0
 800a882:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800a884:	7afb      	ldrb	r3, [r7, #11]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d135      	bne.n	800a8f6 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	681a      	ldr	r2, [r3, #0]
 800a890:	4b1d      	ldr	r3, [pc, #116]	; (800a908 <HAL_QSPI_Init+0xf0>)
 800a892:	4013      	ands	r3, r2
 800a894:	687a      	ldr	r2, [r7, #4]
 800a896:	6852      	ldr	r2, [r2, #4]
 800a898:	0611      	lsls	r1, r2, #24
 800a89a:	687a      	ldr	r2, [r7, #4]
 800a89c:	68d2      	ldr	r2, [r2, #12]
 800a89e:	4311      	orrs	r1, r2
 800a8a0:	687a      	ldr	r2, [r7, #4]
 800a8a2:	69d2      	ldr	r2, [r2, #28]
 800a8a4:	4311      	orrs	r1, r2
 800a8a6:	687a      	ldr	r2, [r7, #4]
 800a8a8:	6a12      	ldr	r2, [r2, #32]
 800a8aa:	4311      	orrs	r1, r2
 800a8ac:	687a      	ldr	r2, [r7, #4]
 800a8ae:	6812      	ldr	r2, [r2, #0]
 800a8b0:	430b      	orrs	r3, r1
 800a8b2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	685a      	ldr	r2, [r3, #4]
 800a8ba:	4b14      	ldr	r3, [pc, #80]	; (800a90c <HAL_QSPI_Init+0xf4>)
 800a8bc:	4013      	ands	r3, r2
 800a8be:	687a      	ldr	r2, [r7, #4]
 800a8c0:	6912      	ldr	r2, [r2, #16]
 800a8c2:	0411      	lsls	r1, r2, #16
 800a8c4:	687a      	ldr	r2, [r7, #4]
 800a8c6:	6952      	ldr	r2, [r2, #20]
 800a8c8:	4311      	orrs	r1, r2
 800a8ca:	687a      	ldr	r2, [r7, #4]
 800a8cc:	6992      	ldr	r2, [r2, #24]
 800a8ce:	4311      	orrs	r1, r2
 800a8d0:	687a      	ldr	r2, [r7, #4]
 800a8d2:	6812      	ldr	r2, [r2, #0]
 800a8d4:	430b      	orrs	r3, r1
 800a8d6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	681a      	ldr	r2, [r3, #0]
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f042 0201 	orr.w	r2, r2, #1
 800a8e6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2201      	movs	r2, #1
 800a8f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800a8fe:	7afb      	ldrb	r3, [r7, #11]
}
 800a900:	4618      	mov	r0, r3
 800a902:	3710      	adds	r7, #16
 800a904:	46bd      	mov	sp, r7
 800a906:	bd80      	pop	{r7, pc}
 800a908:	00ffff2f 	.word	0x00ffff2f
 800a90c:	ffe0f8fe 	.word	0xffe0f8fe

0800a910 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b082      	sub	sp, #8
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d101      	bne.n	800a922 <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800a91e:	2301      	movs	r3, #1
 800a920:	e016      	b.n	800a950 <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	681a      	ldr	r2, [r3, #0]
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	f022 0201 	bic.w	r2, r2, #1
 800a930:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f7f9 f816 	bl	8003964 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2200      	movs	r2, #0
 800a93c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2200      	movs	r2, #0
 800a942:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2200      	movs	r2, #0
 800a94a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a94e:	2300      	movs	r3, #0
}
 800a950:	4618      	mov	r0, r3
 800a952:	3708      	adds	r7, #8
 800a954:	46bd      	mov	sp, r7
 800a956:	bd80      	pop	{r7, pc}

0800a958 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b088      	sub	sp, #32
 800a95c:	af02      	add	r7, sp, #8
 800a95e:	60f8      	str	r0, [r7, #12]
 800a960:	60b9      	str	r1, [r7, #8]
 800a962:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800a964:	f7fe fb4c 	bl	8009000 <HAL_GetTick>
 800a968:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a970:	b2db      	uxtb	r3, r3
 800a972:	2b01      	cmp	r3, #1
 800a974:	d101      	bne.n	800a97a <HAL_QSPI_Command+0x22>
 800a976:	2302      	movs	r3, #2
 800a978:	e048      	b.n	800aa0c <HAL_QSPI_Command+0xb4>
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	2201      	movs	r2, #1
 800a97e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a988:	b2db      	uxtb	r3, r3
 800a98a:	2b01      	cmp	r3, #1
 800a98c:	d137      	bne.n	800a9fe <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	2200      	movs	r2, #0
 800a992:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	2202      	movs	r2, #2
 800a998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	9300      	str	r3, [sp, #0]
 800a9a0:	693b      	ldr	r3, [r7, #16]
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	2120      	movs	r1, #32
 800a9a6:	68f8      	ldr	r0, [r7, #12]
 800a9a8:	f000 f9e8 	bl	800ad7c <QSPI_WaitFlagStateUntilTimeout>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800a9b0:	7dfb      	ldrb	r3, [r7, #23]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d125      	bne.n	800aa02 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	68b9      	ldr	r1, [r7, #8]
 800a9ba:	68f8      	ldr	r0, [r7, #12]
 800a9bc:	f000 fa15 	bl	800adea <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800a9c0:	68bb      	ldr	r3, [r7, #8]
 800a9c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d115      	bne.n	800a9f4 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	9300      	str	r3, [sp, #0]
 800a9cc:	693b      	ldr	r3, [r7, #16]
 800a9ce:	2201      	movs	r2, #1
 800a9d0:	2102      	movs	r1, #2
 800a9d2:	68f8      	ldr	r0, [r7, #12]
 800a9d4:	f000 f9d2 	bl	800ad7c <QSPI_WaitFlagStateUntilTimeout>
 800a9d8:	4603      	mov	r3, r0
 800a9da:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800a9dc:	7dfb      	ldrb	r3, [r7, #23]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d10f      	bne.n	800aa02 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	2202      	movs	r2, #2
 800a9e8:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	2201      	movs	r2, #1
 800a9ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a9f2:	e006      	b.n	800aa02 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	2201      	movs	r2, #1
 800a9f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a9fc:	e001      	b.n	800aa02 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800a9fe:	2302      	movs	r3, #2
 800aa00:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	2200      	movs	r2, #0
 800aa06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800aa0a:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	3718      	adds	r7, #24
 800aa10:	46bd      	mov	sp, r7
 800aa12:	bd80      	pop	{r7, pc}

0800aa14 <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b08a      	sub	sp, #40	; 0x28
 800aa18:	af02      	add	r7, sp, #8
 800aa1a:	60f8      	str	r0, [r7, #12]
 800aa1c:	60b9      	str	r1, [r7, #8]
 800aa1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aa20:	2300      	movs	r3, #0
 800aa22:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800aa24:	f7fe faec 	bl	8009000 <HAL_GetTick>
 800aa28:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	3320      	adds	r3, #32
 800aa30:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aa38:	b2db      	uxtb	r3, r3
 800aa3a:	2b01      	cmp	r3, #1
 800aa3c:	d101      	bne.n	800aa42 <HAL_QSPI_Transmit+0x2e>
 800aa3e:	2302      	movs	r3, #2
 800aa40:	e076      	b.n	800ab30 <HAL_QSPI_Transmit+0x11c>
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	2201      	movs	r2, #1
 800aa46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aa50:	b2db      	uxtb	r3, r3
 800aa52:	2b01      	cmp	r3, #1
 800aa54:	d165      	bne.n	800ab22 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	2200      	movs	r2, #0
 800aa5a:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d056      	beq.n	800ab10 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	2212      	movs	r2, #18
 800aa66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	691b      	ldr	r3, [r3, #16]
 800aa70:	1c5a      	adds	r2, r3, #1
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	691b      	ldr	r3, [r3, #16]
 800aa7c:	1c5a      	adds	r2, r3, #1
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	68ba      	ldr	r2, [r7, #8]
 800aa86:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	695a      	ldr	r2, [r3, #20]
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800aa96:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800aa98:	e01b      	b.n	800aad2 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	9300      	str	r3, [sp, #0]
 800aa9e:	69bb      	ldr	r3, [r7, #24]
 800aaa0:	2201      	movs	r2, #1
 800aaa2:	2104      	movs	r1, #4
 800aaa4:	68f8      	ldr	r0, [r7, #12]
 800aaa6:	f000 f969 	bl	800ad7c <QSPI_WaitFlagStateUntilTimeout>
 800aaaa:	4603      	mov	r3, r0
 800aaac:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800aaae:	7ffb      	ldrb	r3, [r7, #31]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d113      	bne.n	800aadc <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aab8:	781a      	ldrb	r2, [r3, #0]
 800aaba:	697b      	ldr	r3, [r7, #20]
 800aabc:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aac2:	1c5a      	adds	r2, r3, #1
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aacc:	1e5a      	subs	r2, r3, #1
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d1df      	bne.n	800aa9a <HAL_QSPI_Transmit+0x86>
 800aada:	e000      	b.n	800aade <HAL_QSPI_Transmit+0xca>
          break;
 800aadc:	bf00      	nop
      }

      if (status == HAL_OK)
 800aade:	7ffb      	ldrb	r3, [r7, #31]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d110      	bne.n	800ab06 <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	9300      	str	r3, [sp, #0]
 800aae8:	69bb      	ldr	r3, [r7, #24]
 800aaea:	2201      	movs	r2, #1
 800aaec:	2102      	movs	r1, #2
 800aaee:	68f8      	ldr	r0, [r7, #12]
 800aaf0:	f000 f944 	bl	800ad7c <QSPI_WaitFlagStateUntilTimeout>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800aaf8:	7ffb      	ldrb	r3, [r7, #31]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d103      	bne.n	800ab06 <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	2202      	movs	r2, #2
 800ab04:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	2201      	movs	r2, #1
 800ab0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ab0e:	e00a      	b.n	800ab26 <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab14:	f043 0208 	orr.w	r2, r3, #8
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	77fb      	strb	r3, [r7, #31]
 800ab20:	e001      	b.n	800ab26 <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 800ab22:	2302      	movs	r3, #2
 800ab24:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	2200      	movs	r2, #0
 800ab2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800ab2e:	7ffb      	ldrb	r3, [r7, #31]
}
 800ab30:	4618      	mov	r0, r3
 800ab32:	3720      	adds	r7, #32
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bd80      	pop	{r7, pc}

0800ab38 <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b08a      	sub	sp, #40	; 0x28
 800ab3c:	af02      	add	r7, sp, #8
 800ab3e:	60f8      	str	r0, [r7, #12]
 800ab40:	60b9      	str	r1, [r7, #8]
 800ab42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ab44:	2300      	movs	r3, #0
 800ab46:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800ab48:	f7fe fa5a 	bl	8009000 <HAL_GetTick>
 800ab4c:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	699b      	ldr	r3, [r3, #24]
 800ab54:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	3320      	adds	r3, #32
 800ab5c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ab64:	b2db      	uxtb	r3, r3
 800ab66:	2b01      	cmp	r3, #1
 800ab68:	d101      	bne.n	800ab6e <HAL_QSPI_Receive+0x36>
 800ab6a:	2302      	movs	r3, #2
 800ab6c:	e07d      	b.n	800ac6a <HAL_QSPI_Receive+0x132>
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	2201      	movs	r2, #1
 800ab72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab7c:	b2db      	uxtb	r3, r3
 800ab7e:	2b01      	cmp	r3, #1
 800ab80:	d16c      	bne.n	800ac5c <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	2200      	movs	r2, #0
 800ab86:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d05d      	beq.n	800ac4a <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	2222      	movs	r2, #34	; 0x22
 800ab92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	691b      	ldr	r3, [r3, #16]
 800ab9c:	1c5a      	adds	r2, r3, #1
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	691b      	ldr	r3, [r3, #16]
 800aba8:	1c5a      	adds	r2, r3, #1
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	68ba      	ldr	r2, [r7, #8]
 800abb2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	695b      	ldr	r3, [r3, #20]
 800abba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800abc6:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	697a      	ldr	r2, [r7, #20]
 800abce:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800abd0:	e01c      	b.n	800ac0c <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	9300      	str	r3, [sp, #0]
 800abd6:	69bb      	ldr	r3, [r7, #24]
 800abd8:	2201      	movs	r2, #1
 800abda:	2106      	movs	r1, #6
 800abdc:	68f8      	ldr	r0, [r7, #12]
 800abde:	f000 f8cd 	bl	800ad7c <QSPI_WaitFlagStateUntilTimeout>
 800abe2:	4603      	mov	r3, r0
 800abe4:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800abe6:	7ffb      	ldrb	r3, [r7, #31]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d114      	bne.n	800ac16 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abf0:	693a      	ldr	r2, [r7, #16]
 800abf2:	7812      	ldrb	r2, [r2, #0]
 800abf4:	b2d2      	uxtb	r2, r2
 800abf6:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abfc:	1c5a      	adds	r2, r3, #1
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac06:	1e5a      	subs	r2, r3, #1
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d1de      	bne.n	800abd2 <HAL_QSPI_Receive+0x9a>
 800ac14:	e000      	b.n	800ac18 <HAL_QSPI_Receive+0xe0>
          break;
 800ac16:	bf00      	nop
      }

      if (status == HAL_OK)
 800ac18:	7ffb      	ldrb	r3, [r7, #31]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d110      	bne.n	800ac40 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	9300      	str	r3, [sp, #0]
 800ac22:	69bb      	ldr	r3, [r7, #24]
 800ac24:	2201      	movs	r2, #1
 800ac26:	2102      	movs	r1, #2
 800ac28:	68f8      	ldr	r0, [r7, #12]
 800ac2a:	f000 f8a7 	bl	800ad7c <QSPI_WaitFlagStateUntilTimeout>
 800ac2e:	4603      	mov	r3, r0
 800ac30:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800ac32:	7ffb      	ldrb	r3, [r7, #31]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d103      	bne.n	800ac40 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	2202      	movs	r2, #2
 800ac3e:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	2201      	movs	r2, #1
 800ac44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ac48:	e00a      	b.n	800ac60 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac4e:	f043 0208 	orr.w	r2, r3, #8
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800ac56:	2301      	movs	r3, #1
 800ac58:	77fb      	strb	r3, [r7, #31]
 800ac5a:	e001      	b.n	800ac60 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 800ac5c:	2302      	movs	r3, #2
 800ac5e:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	2200      	movs	r2, #0
 800ac64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800ac68:	7ffb      	ldrb	r3, [r7, #31]
}
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	3720      	adds	r7, #32
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	bd80      	pop	{r7, pc}

0800ac72 <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800ac72:	b580      	push	{r7, lr}
 800ac74:	b088      	sub	sp, #32
 800ac76:	af02      	add	r7, sp, #8
 800ac78:	60f8      	str	r0, [r7, #12]
 800ac7a:	60b9      	str	r1, [r7, #8]
 800ac7c:	607a      	str	r2, [r7, #4]
 800ac7e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800ac80:	f7fe f9be 	bl	8009000 <HAL_GetTick>
 800ac84:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ac8c:	b2db      	uxtb	r3, r3
 800ac8e:	2b01      	cmp	r3, #1
 800ac90:	d101      	bne.n	800ac96 <HAL_QSPI_AutoPolling+0x24>
 800ac92:	2302      	movs	r3, #2
 800ac94:	e060      	b.n	800ad58 <HAL_QSPI_AutoPolling+0xe6>
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	2201      	movs	r2, #1
 800ac9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aca4:	b2db      	uxtb	r3, r3
 800aca6:	2b01      	cmp	r3, #1
 800aca8:	d14f      	bne.n	800ad4a <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	2200      	movs	r2, #0
 800acae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	2242      	movs	r2, #66	; 0x42
 800acb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	9300      	str	r3, [sp, #0]
 800acbc:	693b      	ldr	r3, [r7, #16]
 800acbe:	2200      	movs	r2, #0
 800acc0:	2120      	movs	r1, #32
 800acc2:	68f8      	ldr	r0, [r7, #12]
 800acc4:	f000 f85a 	bl	800ad7c <QSPI_WaitFlagStateUntilTimeout>
 800acc8:	4603      	mov	r3, r0
 800acca:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800accc:	7dfb      	ldrb	r3, [r7, #23]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d13d      	bne.n	800ad4e <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	687a      	ldr	r2, [r7, #4]
 800acd8:	6812      	ldr	r2, [r2, #0]
 800acda:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	687a      	ldr	r2, [r7, #4]
 800ace2:	6852      	ldr	r2, [r2, #4]
 800ace4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	687a      	ldr	r2, [r7, #4]
 800acec:	6892      	ldr	r2, [r2, #8]
 800acee:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	691b      	ldr	r3, [r3, #16]
 800acfe:	431a      	orrs	r2, r3
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800ad08:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	68da      	ldr	r2, [r3, #12]
 800ad0e:	68bb      	ldr	r3, [r7, #8]
 800ad10:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800ad12:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ad16:	68b9      	ldr	r1, [r7, #8]
 800ad18:	68f8      	ldr	r0, [r7, #12]
 800ad1a:	f000 f866 	bl	800adea <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	9300      	str	r3, [sp, #0]
 800ad22:	693b      	ldr	r3, [r7, #16]
 800ad24:	2201      	movs	r2, #1
 800ad26:	2108      	movs	r1, #8
 800ad28:	68f8      	ldr	r0, [r7, #12]
 800ad2a:	f000 f827 	bl	800ad7c <QSPI_WaitFlagStateUntilTimeout>
 800ad2e:	4603      	mov	r3, r0
 800ad30:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800ad32:	7dfb      	ldrb	r3, [r7, #23]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d10a      	bne.n	800ad4e <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	2208      	movs	r2, #8
 800ad3e:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	2201      	movs	r2, #1
 800ad44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ad48:	e001      	b.n	800ad4e <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800ad4a:	2302      	movs	r3, #2
 800ad4c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	2200      	movs	r2, #0
 800ad52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800ad56:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad58:	4618      	mov	r0, r3
 800ad5a:	3718      	adds	r7, #24
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}

0800ad60 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800ad60:	b480      	push	{r7}
 800ad62:	b083      	sub	sp, #12
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
 800ad68:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	683a      	ldr	r2, [r7, #0]
 800ad6e:	649a      	str	r2, [r3, #72]	; 0x48
}
 800ad70:	bf00      	nop
 800ad72:	370c      	adds	r7, #12
 800ad74:	46bd      	mov	sp, r7
 800ad76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7a:	4770      	bx	lr

0800ad7c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b084      	sub	sp, #16
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	60f8      	str	r0, [r7, #12]
 800ad84:	60b9      	str	r1, [r7, #8]
 800ad86:	603b      	str	r3, [r7, #0]
 800ad88:	4613      	mov	r3, r2
 800ad8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800ad8c:	e01a      	b.n	800adc4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ad8e:	69bb      	ldr	r3, [r7, #24]
 800ad90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad94:	d016      	beq.n	800adc4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad96:	f7fe f933 	bl	8009000 <HAL_GetTick>
 800ad9a:	4602      	mov	r2, r0
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	1ad3      	subs	r3, r2, r3
 800ada0:	69ba      	ldr	r2, [r7, #24]
 800ada2:	429a      	cmp	r2, r3
 800ada4:	d302      	bcc.n	800adac <QSPI_WaitFlagStateUntilTimeout+0x30>
 800ada6:	69bb      	ldr	r3, [r7, #24]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d10b      	bne.n	800adc4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	2204      	movs	r2, #4
 800adb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adb8:	f043 0201 	orr.w	r2, r3, #1
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800adc0:	2301      	movs	r3, #1
 800adc2:	e00e      	b.n	800ade2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	689a      	ldr	r2, [r3, #8]
 800adca:	68bb      	ldr	r3, [r7, #8]
 800adcc:	4013      	ands	r3, r2
 800adce:	2b00      	cmp	r3, #0
 800add0:	bf14      	ite	ne
 800add2:	2301      	movne	r3, #1
 800add4:	2300      	moveq	r3, #0
 800add6:	b2db      	uxtb	r3, r3
 800add8:	461a      	mov	r2, r3
 800adda:	79fb      	ldrb	r3, [r7, #7]
 800addc:	429a      	cmp	r2, r3
 800adde:	d1d6      	bne.n	800ad8e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ade0:	2300      	movs	r3, #0
}
 800ade2:	4618      	mov	r0, r3
 800ade4:	3710      	adds	r7, #16
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}

0800adea <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800adea:	b480      	push	{r7}
 800adec:	b085      	sub	sp, #20
 800adee:	af00      	add	r7, sp, #0
 800adf0:	60f8      	str	r0, [r7, #12]
 800adf2:	60b9      	str	r1, [r7, #8]
 800adf4:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d009      	beq.n	800ae12 <QSPI_Config+0x28>
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800ae04:	d005      	beq.n	800ae12 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800ae06:	68bb      	ldr	r3, [r7, #8]
 800ae08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	3a01      	subs	r2, #1
 800ae10:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800ae12:	68bb      	ldr	r3, [r7, #8]
 800ae14:	699b      	ldr	r3, [r3, #24]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	f000 80b9 	beq.w	800af8e <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	6a1b      	ldr	r3, [r3, #32]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d05f      	beq.n	800aee4 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	68ba      	ldr	r2, [r7, #8]
 800ae2a:	6892      	ldr	r2, [r2, #8]
 800ae2c:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800ae2e:	68bb      	ldr	r3, [r7, #8]
 800ae30:	69db      	ldr	r3, [r3, #28]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d031      	beq.n	800ae9a <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae3a:	68bb      	ldr	r3, [r7, #8]
 800ae3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae3e:	431a      	orrs	r2, r3
 800ae40:	68bb      	ldr	r3, [r7, #8]
 800ae42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae44:	431a      	orrs	r2, r3
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae4a:	431a      	orrs	r2, r3
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	695b      	ldr	r3, [r3, #20]
 800ae50:	049b      	lsls	r3, r3, #18
 800ae52:	431a      	orrs	r2, r3
 800ae54:	68bb      	ldr	r3, [r7, #8]
 800ae56:	691b      	ldr	r3, [r3, #16]
 800ae58:	431a      	orrs	r2, r3
 800ae5a:	68bb      	ldr	r3, [r7, #8]
 800ae5c:	6a1b      	ldr	r3, [r3, #32]
 800ae5e:	431a      	orrs	r2, r3
 800ae60:	68bb      	ldr	r3, [r7, #8]
 800ae62:	68db      	ldr	r3, [r3, #12]
 800ae64:	431a      	orrs	r2, r3
 800ae66:	68bb      	ldr	r3, [r7, #8]
 800ae68:	69db      	ldr	r3, [r3, #28]
 800ae6a:	431a      	orrs	r2, r3
 800ae6c:	68bb      	ldr	r3, [r7, #8]
 800ae6e:	699b      	ldr	r3, [r3, #24]
 800ae70:	431a      	orrs	r2, r3
 800ae72:	68bb      	ldr	r3, [r7, #8]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	ea42 0103 	orr.w	r1, r2, r3
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	687a      	ldr	r2, [r7, #4]
 800ae80:	430a      	orrs	r2, r1
 800ae82:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800ae8a:	f000 812e 	beq.w	800b0ea <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	68ba      	ldr	r2, [r7, #8]
 800ae94:	6852      	ldr	r2, [r2, #4]
 800ae96:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800ae98:	e127      	b.n	800b0ea <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ae9a:	68bb      	ldr	r3, [r7, #8]
 800ae9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae9e:	68bb      	ldr	r3, [r7, #8]
 800aea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aea2:	431a      	orrs	r2, r3
 800aea4:	68bb      	ldr	r3, [r7, #8]
 800aea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aea8:	431a      	orrs	r2, r3
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeae:	431a      	orrs	r2, r3
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	695b      	ldr	r3, [r3, #20]
 800aeb4:	049b      	lsls	r3, r3, #18
 800aeb6:	431a      	orrs	r2, r3
 800aeb8:	68bb      	ldr	r3, [r7, #8]
 800aeba:	691b      	ldr	r3, [r3, #16]
 800aebc:	431a      	orrs	r2, r3
 800aebe:	68bb      	ldr	r3, [r7, #8]
 800aec0:	6a1b      	ldr	r3, [r3, #32]
 800aec2:	431a      	orrs	r2, r3
 800aec4:	68bb      	ldr	r3, [r7, #8]
 800aec6:	69db      	ldr	r3, [r3, #28]
 800aec8:	431a      	orrs	r2, r3
 800aeca:	68bb      	ldr	r3, [r7, #8]
 800aecc:	699b      	ldr	r3, [r3, #24]
 800aece:	431a      	orrs	r2, r3
 800aed0:	68bb      	ldr	r3, [r7, #8]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	ea42 0103 	orr.w	r1, r2, r3
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	687a      	ldr	r2, [r7, #4]
 800aede:	430a      	orrs	r2, r1
 800aee0:	615a      	str	r2, [r3, #20]
}
 800aee2:	e102      	b.n	800b0ea <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	69db      	ldr	r3, [r3, #28]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d02e      	beq.n	800af4a <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800aeec:	68bb      	ldr	r3, [r7, #8]
 800aeee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aef0:	68bb      	ldr	r3, [r7, #8]
 800aef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aef4:	431a      	orrs	r2, r3
 800aef6:	68bb      	ldr	r3, [r7, #8]
 800aef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aefa:	431a      	orrs	r2, r3
 800aefc:	68bb      	ldr	r3, [r7, #8]
 800aefe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af00:	431a      	orrs	r2, r3
 800af02:	68bb      	ldr	r3, [r7, #8]
 800af04:	695b      	ldr	r3, [r3, #20]
 800af06:	049b      	lsls	r3, r3, #18
 800af08:	431a      	orrs	r2, r3
 800af0a:	68bb      	ldr	r3, [r7, #8]
 800af0c:	6a1b      	ldr	r3, [r3, #32]
 800af0e:	431a      	orrs	r2, r3
 800af10:	68bb      	ldr	r3, [r7, #8]
 800af12:	68db      	ldr	r3, [r3, #12]
 800af14:	431a      	orrs	r2, r3
 800af16:	68bb      	ldr	r3, [r7, #8]
 800af18:	69db      	ldr	r3, [r3, #28]
 800af1a:	431a      	orrs	r2, r3
 800af1c:	68bb      	ldr	r3, [r7, #8]
 800af1e:	699b      	ldr	r3, [r3, #24]
 800af20:	431a      	orrs	r2, r3
 800af22:	68bb      	ldr	r3, [r7, #8]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	ea42 0103 	orr.w	r1, r2, r3
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	687a      	ldr	r2, [r7, #4]
 800af30:	430a      	orrs	r2, r1
 800af32:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800af3a:	f000 80d6 	beq.w	800b0ea <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	68ba      	ldr	r2, [r7, #8]
 800af44:	6852      	ldr	r2, [r2, #4]
 800af46:	619a      	str	r2, [r3, #24]
}
 800af48:	e0cf      	b.n	800b0ea <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800af4a:	68bb      	ldr	r3, [r7, #8]
 800af4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af4e:	68bb      	ldr	r3, [r7, #8]
 800af50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af52:	431a      	orrs	r2, r3
 800af54:	68bb      	ldr	r3, [r7, #8]
 800af56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af58:	431a      	orrs	r2, r3
 800af5a:	68bb      	ldr	r3, [r7, #8]
 800af5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af5e:	431a      	orrs	r2, r3
 800af60:	68bb      	ldr	r3, [r7, #8]
 800af62:	695b      	ldr	r3, [r3, #20]
 800af64:	049b      	lsls	r3, r3, #18
 800af66:	431a      	orrs	r2, r3
 800af68:	68bb      	ldr	r3, [r7, #8]
 800af6a:	6a1b      	ldr	r3, [r3, #32]
 800af6c:	431a      	orrs	r2, r3
 800af6e:	68bb      	ldr	r3, [r7, #8]
 800af70:	69db      	ldr	r3, [r3, #28]
 800af72:	431a      	orrs	r2, r3
 800af74:	68bb      	ldr	r3, [r7, #8]
 800af76:	699b      	ldr	r3, [r3, #24]
 800af78:	431a      	orrs	r2, r3
 800af7a:	68bb      	ldr	r3, [r7, #8]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	ea42 0103 	orr.w	r1, r2, r3
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	687a      	ldr	r2, [r7, #4]
 800af88:	430a      	orrs	r2, r1
 800af8a:	615a      	str	r2, [r3, #20]
}
 800af8c:	e0ad      	b.n	800b0ea <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800af8e:	68bb      	ldr	r3, [r7, #8]
 800af90:	6a1b      	ldr	r3, [r3, #32]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d058      	beq.n	800b048 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	68ba      	ldr	r2, [r7, #8]
 800af9c:	6892      	ldr	r2, [r2, #8]
 800af9e:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800afa0:	68bb      	ldr	r3, [r7, #8]
 800afa2:	69db      	ldr	r3, [r3, #28]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d02d      	beq.n	800b004 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800afa8:	68bb      	ldr	r3, [r7, #8]
 800afaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afb0:	431a      	orrs	r2, r3
 800afb2:	68bb      	ldr	r3, [r7, #8]
 800afb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afb6:	431a      	orrs	r2, r3
 800afb8:	68bb      	ldr	r3, [r7, #8]
 800afba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afbc:	431a      	orrs	r2, r3
 800afbe:	68bb      	ldr	r3, [r7, #8]
 800afc0:	695b      	ldr	r3, [r3, #20]
 800afc2:	049b      	lsls	r3, r3, #18
 800afc4:	431a      	orrs	r2, r3
 800afc6:	68bb      	ldr	r3, [r7, #8]
 800afc8:	691b      	ldr	r3, [r3, #16]
 800afca:	431a      	orrs	r2, r3
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	6a1b      	ldr	r3, [r3, #32]
 800afd0:	431a      	orrs	r2, r3
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	68db      	ldr	r3, [r3, #12]
 800afd6:	431a      	orrs	r2, r3
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	69db      	ldr	r3, [r3, #28]
 800afdc:	431a      	orrs	r2, r3
 800afde:	68bb      	ldr	r3, [r7, #8]
 800afe0:	699b      	ldr	r3, [r3, #24]
 800afe2:	ea42 0103 	orr.w	r1, r2, r3
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	687a      	ldr	r2, [r7, #4]
 800afec:	430a      	orrs	r2, r1
 800afee:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800aff6:	d078      	beq.n	800b0ea <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	68ba      	ldr	r2, [r7, #8]
 800affe:	6852      	ldr	r2, [r2, #4]
 800b000:	619a      	str	r2, [r3, #24]
}
 800b002:	e072      	b.n	800b0ea <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b004:	68bb      	ldr	r3, [r7, #8]
 800b006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b00c:	431a      	orrs	r2, r3
 800b00e:	68bb      	ldr	r3, [r7, #8]
 800b010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b012:	431a      	orrs	r2, r3
 800b014:	68bb      	ldr	r3, [r7, #8]
 800b016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b018:	431a      	orrs	r2, r3
 800b01a:	68bb      	ldr	r3, [r7, #8]
 800b01c:	695b      	ldr	r3, [r3, #20]
 800b01e:	049b      	lsls	r3, r3, #18
 800b020:	431a      	orrs	r2, r3
 800b022:	68bb      	ldr	r3, [r7, #8]
 800b024:	691b      	ldr	r3, [r3, #16]
 800b026:	431a      	orrs	r2, r3
 800b028:	68bb      	ldr	r3, [r7, #8]
 800b02a:	6a1b      	ldr	r3, [r3, #32]
 800b02c:	431a      	orrs	r2, r3
 800b02e:	68bb      	ldr	r3, [r7, #8]
 800b030:	69db      	ldr	r3, [r3, #28]
 800b032:	431a      	orrs	r2, r3
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	699b      	ldr	r3, [r3, #24]
 800b038:	ea42 0103 	orr.w	r1, r2, r3
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	687a      	ldr	r2, [r7, #4]
 800b042:	430a      	orrs	r2, r1
 800b044:	615a      	str	r2, [r3, #20]
}
 800b046:	e050      	b.n	800b0ea <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800b048:	68bb      	ldr	r3, [r7, #8]
 800b04a:	69db      	ldr	r3, [r3, #28]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d02a      	beq.n	800b0a6 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b050:	68bb      	ldr	r3, [r7, #8]
 800b052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b054:	68bb      	ldr	r3, [r7, #8]
 800b056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b058:	431a      	orrs	r2, r3
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b05e:	431a      	orrs	r2, r3
 800b060:	68bb      	ldr	r3, [r7, #8]
 800b062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b064:	431a      	orrs	r2, r3
 800b066:	68bb      	ldr	r3, [r7, #8]
 800b068:	695b      	ldr	r3, [r3, #20]
 800b06a:	049b      	lsls	r3, r3, #18
 800b06c:	431a      	orrs	r2, r3
 800b06e:	68bb      	ldr	r3, [r7, #8]
 800b070:	6a1b      	ldr	r3, [r3, #32]
 800b072:	431a      	orrs	r2, r3
 800b074:	68bb      	ldr	r3, [r7, #8]
 800b076:	68db      	ldr	r3, [r3, #12]
 800b078:	431a      	orrs	r2, r3
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	69db      	ldr	r3, [r3, #28]
 800b07e:	431a      	orrs	r2, r3
 800b080:	68bb      	ldr	r3, [r7, #8]
 800b082:	699b      	ldr	r3, [r3, #24]
 800b084:	ea42 0103 	orr.w	r1, r2, r3
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	687a      	ldr	r2, [r7, #4]
 800b08e:	430a      	orrs	r2, r1
 800b090:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b098:	d027      	beq.n	800b0ea <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	68ba      	ldr	r2, [r7, #8]
 800b0a0:	6852      	ldr	r2, [r2, #4]
 800b0a2:	619a      	str	r2, [r3, #24]
}
 800b0a4:	e021      	b.n	800b0ea <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d01d      	beq.n	800b0ea <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b0ae:	68bb      	ldr	r3, [r7, #8]
 800b0b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0b6:	431a      	orrs	r2, r3
 800b0b8:	68bb      	ldr	r3, [r7, #8]
 800b0ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0bc:	431a      	orrs	r2, r3
 800b0be:	68bb      	ldr	r3, [r7, #8]
 800b0c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0c2:	431a      	orrs	r2, r3
 800b0c4:	68bb      	ldr	r3, [r7, #8]
 800b0c6:	695b      	ldr	r3, [r3, #20]
 800b0c8:	049b      	lsls	r3, r3, #18
 800b0ca:	431a      	orrs	r2, r3
 800b0cc:	68bb      	ldr	r3, [r7, #8]
 800b0ce:	6a1b      	ldr	r3, [r3, #32]
 800b0d0:	431a      	orrs	r2, r3
 800b0d2:	68bb      	ldr	r3, [r7, #8]
 800b0d4:	69db      	ldr	r3, [r3, #28]
 800b0d6:	431a      	orrs	r2, r3
 800b0d8:	68bb      	ldr	r3, [r7, #8]
 800b0da:	699b      	ldr	r3, [r3, #24]
 800b0dc:	ea42 0103 	orr.w	r1, r2, r3
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	687a      	ldr	r2, [r7, #4]
 800b0e6:	430a      	orrs	r2, r1
 800b0e8:	615a      	str	r2, [r3, #20]
}
 800b0ea:	bf00      	nop
 800b0ec:	3714      	adds	r7, #20
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f4:	4770      	bx	lr
	...

0800b0f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b086      	sub	sp, #24
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800b100:	2300      	movs	r3, #0
 800b102:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d101      	bne.n	800b10e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800b10a:	2301      	movs	r3, #1
 800b10c:	e29b      	b.n	800b646 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	f003 0301 	and.w	r3, r3, #1
 800b116:	2b00      	cmp	r3, #0
 800b118:	f000 8087 	beq.w	800b22a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b11c:	4b96      	ldr	r3, [pc, #600]	; (800b378 <HAL_RCC_OscConfig+0x280>)
 800b11e:	689b      	ldr	r3, [r3, #8]
 800b120:	f003 030c 	and.w	r3, r3, #12
 800b124:	2b04      	cmp	r3, #4
 800b126:	d00c      	beq.n	800b142 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b128:	4b93      	ldr	r3, [pc, #588]	; (800b378 <HAL_RCC_OscConfig+0x280>)
 800b12a:	689b      	ldr	r3, [r3, #8]
 800b12c:	f003 030c 	and.w	r3, r3, #12
 800b130:	2b08      	cmp	r3, #8
 800b132:	d112      	bne.n	800b15a <HAL_RCC_OscConfig+0x62>
 800b134:	4b90      	ldr	r3, [pc, #576]	; (800b378 <HAL_RCC_OscConfig+0x280>)
 800b136:	685b      	ldr	r3, [r3, #4]
 800b138:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b13c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b140:	d10b      	bne.n	800b15a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b142:	4b8d      	ldr	r3, [pc, #564]	; (800b378 <HAL_RCC_OscConfig+0x280>)
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d06c      	beq.n	800b228 <HAL_RCC_OscConfig+0x130>
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	685b      	ldr	r3, [r3, #4]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d168      	bne.n	800b228 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800b156:	2301      	movs	r3, #1
 800b158:	e275      	b.n	800b646 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	685b      	ldr	r3, [r3, #4]
 800b15e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b162:	d106      	bne.n	800b172 <HAL_RCC_OscConfig+0x7a>
 800b164:	4b84      	ldr	r3, [pc, #528]	; (800b378 <HAL_RCC_OscConfig+0x280>)
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	4a83      	ldr	r2, [pc, #524]	; (800b378 <HAL_RCC_OscConfig+0x280>)
 800b16a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b16e:	6013      	str	r3, [r2, #0]
 800b170:	e02e      	b.n	800b1d0 <HAL_RCC_OscConfig+0xd8>
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	685b      	ldr	r3, [r3, #4]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d10c      	bne.n	800b194 <HAL_RCC_OscConfig+0x9c>
 800b17a:	4b7f      	ldr	r3, [pc, #508]	; (800b378 <HAL_RCC_OscConfig+0x280>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	4a7e      	ldr	r2, [pc, #504]	; (800b378 <HAL_RCC_OscConfig+0x280>)
 800b180:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b184:	6013      	str	r3, [r2, #0]
 800b186:	4b7c      	ldr	r3, [pc, #496]	; (800b378 <HAL_RCC_OscConfig+0x280>)
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	4a7b      	ldr	r2, [pc, #492]	; (800b378 <HAL_RCC_OscConfig+0x280>)
 800b18c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b190:	6013      	str	r3, [r2, #0]
 800b192:	e01d      	b.n	800b1d0 <HAL_RCC_OscConfig+0xd8>
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	685b      	ldr	r3, [r3, #4]
 800b198:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b19c:	d10c      	bne.n	800b1b8 <HAL_RCC_OscConfig+0xc0>
 800b19e:	4b76      	ldr	r3, [pc, #472]	; (800b378 <HAL_RCC_OscConfig+0x280>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	4a75      	ldr	r2, [pc, #468]	; (800b378 <HAL_RCC_OscConfig+0x280>)
 800b1a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b1a8:	6013      	str	r3, [r2, #0]
 800b1aa:	4b73      	ldr	r3, [pc, #460]	; (800b378 <HAL_RCC_OscConfig+0x280>)
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	4a72      	ldr	r2, [pc, #456]	; (800b378 <HAL_RCC_OscConfig+0x280>)
 800b1b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b1b4:	6013      	str	r3, [r2, #0]
 800b1b6:	e00b      	b.n	800b1d0 <HAL_RCC_OscConfig+0xd8>
 800b1b8:	4b6f      	ldr	r3, [pc, #444]	; (800b378 <HAL_RCC_OscConfig+0x280>)
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	4a6e      	ldr	r2, [pc, #440]	; (800b378 <HAL_RCC_OscConfig+0x280>)
 800b1be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b1c2:	6013      	str	r3, [r2, #0]
 800b1c4:	4b6c      	ldr	r3, [pc, #432]	; (800b378 <HAL_RCC_OscConfig+0x280>)
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	4a6b      	ldr	r2, [pc, #428]	; (800b378 <HAL_RCC_OscConfig+0x280>)
 800b1ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b1ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	685b      	ldr	r3, [r3, #4]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d013      	beq.n	800b200 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b1d8:	f7fd ff12 	bl	8009000 <HAL_GetTick>
 800b1dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b1de:	e008      	b.n	800b1f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b1e0:	f7fd ff0e 	bl	8009000 <HAL_GetTick>
 800b1e4:	4602      	mov	r2, r0
 800b1e6:	693b      	ldr	r3, [r7, #16]
 800b1e8:	1ad3      	subs	r3, r2, r3
 800b1ea:	2b64      	cmp	r3, #100	; 0x64
 800b1ec:	d901      	bls.n	800b1f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b1ee:	2303      	movs	r3, #3
 800b1f0:	e229      	b.n	800b646 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b1f2:	4b61      	ldr	r3, [pc, #388]	; (800b378 <HAL_RCC_OscConfig+0x280>)
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d0f0      	beq.n	800b1e0 <HAL_RCC_OscConfig+0xe8>
 800b1fe:	e014      	b.n	800b22a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b200:	f7fd fefe 	bl	8009000 <HAL_GetTick>
 800b204:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b206:	e008      	b.n	800b21a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b208:	f7fd fefa 	bl	8009000 <HAL_GetTick>
 800b20c:	4602      	mov	r2, r0
 800b20e:	693b      	ldr	r3, [r7, #16]
 800b210:	1ad3      	subs	r3, r2, r3
 800b212:	2b64      	cmp	r3, #100	; 0x64
 800b214:	d901      	bls.n	800b21a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800b216:	2303      	movs	r3, #3
 800b218:	e215      	b.n	800b646 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b21a:	4b57      	ldr	r3, [pc, #348]	; (800b378 <HAL_RCC_OscConfig+0x280>)
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b222:	2b00      	cmp	r3, #0
 800b224:	d1f0      	bne.n	800b208 <HAL_RCC_OscConfig+0x110>
 800b226:	e000      	b.n	800b22a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b228:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	f003 0302 	and.w	r3, r3, #2
 800b232:	2b00      	cmp	r3, #0
 800b234:	d069      	beq.n	800b30a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b236:	4b50      	ldr	r3, [pc, #320]	; (800b378 <HAL_RCC_OscConfig+0x280>)
 800b238:	689b      	ldr	r3, [r3, #8]
 800b23a:	f003 030c 	and.w	r3, r3, #12
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d00b      	beq.n	800b25a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b242:	4b4d      	ldr	r3, [pc, #308]	; (800b378 <HAL_RCC_OscConfig+0x280>)
 800b244:	689b      	ldr	r3, [r3, #8]
 800b246:	f003 030c 	and.w	r3, r3, #12
 800b24a:	2b08      	cmp	r3, #8
 800b24c:	d11c      	bne.n	800b288 <HAL_RCC_OscConfig+0x190>
 800b24e:	4b4a      	ldr	r3, [pc, #296]	; (800b378 <HAL_RCC_OscConfig+0x280>)
 800b250:	685b      	ldr	r3, [r3, #4]
 800b252:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b256:	2b00      	cmp	r3, #0
 800b258:	d116      	bne.n	800b288 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b25a:	4b47      	ldr	r3, [pc, #284]	; (800b378 <HAL_RCC_OscConfig+0x280>)
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	f003 0302 	and.w	r3, r3, #2
 800b262:	2b00      	cmp	r3, #0
 800b264:	d005      	beq.n	800b272 <HAL_RCC_OscConfig+0x17a>
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	68db      	ldr	r3, [r3, #12]
 800b26a:	2b01      	cmp	r3, #1
 800b26c:	d001      	beq.n	800b272 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800b26e:	2301      	movs	r3, #1
 800b270:	e1e9      	b.n	800b646 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b272:	4b41      	ldr	r3, [pc, #260]	; (800b378 <HAL_RCC_OscConfig+0x280>)
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	691b      	ldr	r3, [r3, #16]
 800b27e:	00db      	lsls	r3, r3, #3
 800b280:	493d      	ldr	r1, [pc, #244]	; (800b378 <HAL_RCC_OscConfig+0x280>)
 800b282:	4313      	orrs	r3, r2
 800b284:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b286:	e040      	b.n	800b30a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	68db      	ldr	r3, [r3, #12]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d023      	beq.n	800b2d8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b290:	4b39      	ldr	r3, [pc, #228]	; (800b378 <HAL_RCC_OscConfig+0x280>)
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	4a38      	ldr	r2, [pc, #224]	; (800b378 <HAL_RCC_OscConfig+0x280>)
 800b296:	f043 0301 	orr.w	r3, r3, #1
 800b29a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b29c:	f7fd feb0 	bl	8009000 <HAL_GetTick>
 800b2a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b2a2:	e008      	b.n	800b2b6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b2a4:	f7fd feac 	bl	8009000 <HAL_GetTick>
 800b2a8:	4602      	mov	r2, r0
 800b2aa:	693b      	ldr	r3, [r7, #16]
 800b2ac:	1ad3      	subs	r3, r2, r3
 800b2ae:	2b02      	cmp	r3, #2
 800b2b0:	d901      	bls.n	800b2b6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800b2b2:	2303      	movs	r3, #3
 800b2b4:	e1c7      	b.n	800b646 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b2b6:	4b30      	ldr	r3, [pc, #192]	; (800b378 <HAL_RCC_OscConfig+0x280>)
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	f003 0302 	and.w	r3, r3, #2
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d0f0      	beq.n	800b2a4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b2c2:	4b2d      	ldr	r3, [pc, #180]	; (800b378 <HAL_RCC_OscConfig+0x280>)
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	691b      	ldr	r3, [r3, #16]
 800b2ce:	00db      	lsls	r3, r3, #3
 800b2d0:	4929      	ldr	r1, [pc, #164]	; (800b378 <HAL_RCC_OscConfig+0x280>)
 800b2d2:	4313      	orrs	r3, r2
 800b2d4:	600b      	str	r3, [r1, #0]
 800b2d6:	e018      	b.n	800b30a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b2d8:	4b27      	ldr	r3, [pc, #156]	; (800b378 <HAL_RCC_OscConfig+0x280>)
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	4a26      	ldr	r2, [pc, #152]	; (800b378 <HAL_RCC_OscConfig+0x280>)
 800b2de:	f023 0301 	bic.w	r3, r3, #1
 800b2e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b2e4:	f7fd fe8c 	bl	8009000 <HAL_GetTick>
 800b2e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b2ea:	e008      	b.n	800b2fe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b2ec:	f7fd fe88 	bl	8009000 <HAL_GetTick>
 800b2f0:	4602      	mov	r2, r0
 800b2f2:	693b      	ldr	r3, [r7, #16]
 800b2f4:	1ad3      	subs	r3, r2, r3
 800b2f6:	2b02      	cmp	r3, #2
 800b2f8:	d901      	bls.n	800b2fe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800b2fa:	2303      	movs	r3, #3
 800b2fc:	e1a3      	b.n	800b646 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b2fe:	4b1e      	ldr	r3, [pc, #120]	; (800b378 <HAL_RCC_OscConfig+0x280>)
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	f003 0302 	and.w	r3, r3, #2
 800b306:	2b00      	cmp	r3, #0
 800b308:	d1f0      	bne.n	800b2ec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	f003 0308 	and.w	r3, r3, #8
 800b312:	2b00      	cmp	r3, #0
 800b314:	d038      	beq.n	800b388 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	695b      	ldr	r3, [r3, #20]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d019      	beq.n	800b352 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b31e:	4b16      	ldr	r3, [pc, #88]	; (800b378 <HAL_RCC_OscConfig+0x280>)
 800b320:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b322:	4a15      	ldr	r2, [pc, #84]	; (800b378 <HAL_RCC_OscConfig+0x280>)
 800b324:	f043 0301 	orr.w	r3, r3, #1
 800b328:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b32a:	f7fd fe69 	bl	8009000 <HAL_GetTick>
 800b32e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b330:	e008      	b.n	800b344 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b332:	f7fd fe65 	bl	8009000 <HAL_GetTick>
 800b336:	4602      	mov	r2, r0
 800b338:	693b      	ldr	r3, [r7, #16]
 800b33a:	1ad3      	subs	r3, r2, r3
 800b33c:	2b02      	cmp	r3, #2
 800b33e:	d901      	bls.n	800b344 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800b340:	2303      	movs	r3, #3
 800b342:	e180      	b.n	800b646 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b344:	4b0c      	ldr	r3, [pc, #48]	; (800b378 <HAL_RCC_OscConfig+0x280>)
 800b346:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b348:	f003 0302 	and.w	r3, r3, #2
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d0f0      	beq.n	800b332 <HAL_RCC_OscConfig+0x23a>
 800b350:	e01a      	b.n	800b388 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b352:	4b09      	ldr	r3, [pc, #36]	; (800b378 <HAL_RCC_OscConfig+0x280>)
 800b354:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b356:	4a08      	ldr	r2, [pc, #32]	; (800b378 <HAL_RCC_OscConfig+0x280>)
 800b358:	f023 0301 	bic.w	r3, r3, #1
 800b35c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b35e:	f7fd fe4f 	bl	8009000 <HAL_GetTick>
 800b362:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b364:	e00a      	b.n	800b37c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b366:	f7fd fe4b 	bl	8009000 <HAL_GetTick>
 800b36a:	4602      	mov	r2, r0
 800b36c:	693b      	ldr	r3, [r7, #16]
 800b36e:	1ad3      	subs	r3, r2, r3
 800b370:	2b02      	cmp	r3, #2
 800b372:	d903      	bls.n	800b37c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800b374:	2303      	movs	r3, #3
 800b376:	e166      	b.n	800b646 <HAL_RCC_OscConfig+0x54e>
 800b378:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b37c:	4b92      	ldr	r3, [pc, #584]	; (800b5c8 <HAL_RCC_OscConfig+0x4d0>)
 800b37e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b380:	f003 0302 	and.w	r3, r3, #2
 800b384:	2b00      	cmp	r3, #0
 800b386:	d1ee      	bne.n	800b366 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	f003 0304 	and.w	r3, r3, #4
 800b390:	2b00      	cmp	r3, #0
 800b392:	f000 80a4 	beq.w	800b4de <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b396:	4b8c      	ldr	r3, [pc, #560]	; (800b5c8 <HAL_RCC_OscConfig+0x4d0>)
 800b398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b39a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d10d      	bne.n	800b3be <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800b3a2:	4b89      	ldr	r3, [pc, #548]	; (800b5c8 <HAL_RCC_OscConfig+0x4d0>)
 800b3a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3a6:	4a88      	ldr	r2, [pc, #544]	; (800b5c8 <HAL_RCC_OscConfig+0x4d0>)
 800b3a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b3ac:	6413      	str	r3, [r2, #64]	; 0x40
 800b3ae:	4b86      	ldr	r3, [pc, #536]	; (800b5c8 <HAL_RCC_OscConfig+0x4d0>)
 800b3b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b3b6:	60bb      	str	r3, [r7, #8]
 800b3b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b3ba:	2301      	movs	r3, #1
 800b3bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b3be:	4b83      	ldr	r3, [pc, #524]	; (800b5cc <HAL_RCC_OscConfig+0x4d4>)
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d118      	bne.n	800b3fc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800b3ca:	4b80      	ldr	r3, [pc, #512]	; (800b5cc <HAL_RCC_OscConfig+0x4d4>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	4a7f      	ldr	r2, [pc, #508]	; (800b5cc <HAL_RCC_OscConfig+0x4d4>)
 800b3d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b3d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b3d6:	f7fd fe13 	bl	8009000 <HAL_GetTick>
 800b3da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b3dc:	e008      	b.n	800b3f0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b3de:	f7fd fe0f 	bl	8009000 <HAL_GetTick>
 800b3e2:	4602      	mov	r2, r0
 800b3e4:	693b      	ldr	r3, [r7, #16]
 800b3e6:	1ad3      	subs	r3, r2, r3
 800b3e8:	2b64      	cmp	r3, #100	; 0x64
 800b3ea:	d901      	bls.n	800b3f0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800b3ec:	2303      	movs	r3, #3
 800b3ee:	e12a      	b.n	800b646 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b3f0:	4b76      	ldr	r3, [pc, #472]	; (800b5cc <HAL_RCC_OscConfig+0x4d4>)
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d0f0      	beq.n	800b3de <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	689b      	ldr	r3, [r3, #8]
 800b400:	2b01      	cmp	r3, #1
 800b402:	d106      	bne.n	800b412 <HAL_RCC_OscConfig+0x31a>
 800b404:	4b70      	ldr	r3, [pc, #448]	; (800b5c8 <HAL_RCC_OscConfig+0x4d0>)
 800b406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b408:	4a6f      	ldr	r2, [pc, #444]	; (800b5c8 <HAL_RCC_OscConfig+0x4d0>)
 800b40a:	f043 0301 	orr.w	r3, r3, #1
 800b40e:	6713      	str	r3, [r2, #112]	; 0x70
 800b410:	e02d      	b.n	800b46e <HAL_RCC_OscConfig+0x376>
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	689b      	ldr	r3, [r3, #8]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d10c      	bne.n	800b434 <HAL_RCC_OscConfig+0x33c>
 800b41a:	4b6b      	ldr	r3, [pc, #428]	; (800b5c8 <HAL_RCC_OscConfig+0x4d0>)
 800b41c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b41e:	4a6a      	ldr	r2, [pc, #424]	; (800b5c8 <HAL_RCC_OscConfig+0x4d0>)
 800b420:	f023 0301 	bic.w	r3, r3, #1
 800b424:	6713      	str	r3, [r2, #112]	; 0x70
 800b426:	4b68      	ldr	r3, [pc, #416]	; (800b5c8 <HAL_RCC_OscConfig+0x4d0>)
 800b428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b42a:	4a67      	ldr	r2, [pc, #412]	; (800b5c8 <HAL_RCC_OscConfig+0x4d0>)
 800b42c:	f023 0304 	bic.w	r3, r3, #4
 800b430:	6713      	str	r3, [r2, #112]	; 0x70
 800b432:	e01c      	b.n	800b46e <HAL_RCC_OscConfig+0x376>
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	689b      	ldr	r3, [r3, #8]
 800b438:	2b05      	cmp	r3, #5
 800b43a:	d10c      	bne.n	800b456 <HAL_RCC_OscConfig+0x35e>
 800b43c:	4b62      	ldr	r3, [pc, #392]	; (800b5c8 <HAL_RCC_OscConfig+0x4d0>)
 800b43e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b440:	4a61      	ldr	r2, [pc, #388]	; (800b5c8 <HAL_RCC_OscConfig+0x4d0>)
 800b442:	f043 0304 	orr.w	r3, r3, #4
 800b446:	6713      	str	r3, [r2, #112]	; 0x70
 800b448:	4b5f      	ldr	r3, [pc, #380]	; (800b5c8 <HAL_RCC_OscConfig+0x4d0>)
 800b44a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b44c:	4a5e      	ldr	r2, [pc, #376]	; (800b5c8 <HAL_RCC_OscConfig+0x4d0>)
 800b44e:	f043 0301 	orr.w	r3, r3, #1
 800b452:	6713      	str	r3, [r2, #112]	; 0x70
 800b454:	e00b      	b.n	800b46e <HAL_RCC_OscConfig+0x376>
 800b456:	4b5c      	ldr	r3, [pc, #368]	; (800b5c8 <HAL_RCC_OscConfig+0x4d0>)
 800b458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b45a:	4a5b      	ldr	r2, [pc, #364]	; (800b5c8 <HAL_RCC_OscConfig+0x4d0>)
 800b45c:	f023 0301 	bic.w	r3, r3, #1
 800b460:	6713      	str	r3, [r2, #112]	; 0x70
 800b462:	4b59      	ldr	r3, [pc, #356]	; (800b5c8 <HAL_RCC_OscConfig+0x4d0>)
 800b464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b466:	4a58      	ldr	r2, [pc, #352]	; (800b5c8 <HAL_RCC_OscConfig+0x4d0>)
 800b468:	f023 0304 	bic.w	r3, r3, #4
 800b46c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	689b      	ldr	r3, [r3, #8]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d015      	beq.n	800b4a2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b476:	f7fd fdc3 	bl	8009000 <HAL_GetTick>
 800b47a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b47c:	e00a      	b.n	800b494 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b47e:	f7fd fdbf 	bl	8009000 <HAL_GetTick>
 800b482:	4602      	mov	r2, r0
 800b484:	693b      	ldr	r3, [r7, #16]
 800b486:	1ad3      	subs	r3, r2, r3
 800b488:	f241 3288 	movw	r2, #5000	; 0x1388
 800b48c:	4293      	cmp	r3, r2
 800b48e:	d901      	bls.n	800b494 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800b490:	2303      	movs	r3, #3
 800b492:	e0d8      	b.n	800b646 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b494:	4b4c      	ldr	r3, [pc, #304]	; (800b5c8 <HAL_RCC_OscConfig+0x4d0>)
 800b496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b498:	f003 0302 	and.w	r3, r3, #2
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d0ee      	beq.n	800b47e <HAL_RCC_OscConfig+0x386>
 800b4a0:	e014      	b.n	800b4cc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b4a2:	f7fd fdad 	bl	8009000 <HAL_GetTick>
 800b4a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b4a8:	e00a      	b.n	800b4c0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b4aa:	f7fd fda9 	bl	8009000 <HAL_GetTick>
 800b4ae:	4602      	mov	r2, r0
 800b4b0:	693b      	ldr	r3, [r7, #16]
 800b4b2:	1ad3      	subs	r3, r2, r3
 800b4b4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4b8:	4293      	cmp	r3, r2
 800b4ba:	d901      	bls.n	800b4c0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800b4bc:	2303      	movs	r3, #3
 800b4be:	e0c2      	b.n	800b646 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b4c0:	4b41      	ldr	r3, [pc, #260]	; (800b5c8 <HAL_RCC_OscConfig+0x4d0>)
 800b4c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4c4:	f003 0302 	and.w	r3, r3, #2
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d1ee      	bne.n	800b4aa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b4cc:	7dfb      	ldrb	r3, [r7, #23]
 800b4ce:	2b01      	cmp	r3, #1
 800b4d0:	d105      	bne.n	800b4de <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b4d2:	4b3d      	ldr	r3, [pc, #244]	; (800b5c8 <HAL_RCC_OscConfig+0x4d0>)
 800b4d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4d6:	4a3c      	ldr	r2, [pc, #240]	; (800b5c8 <HAL_RCC_OscConfig+0x4d0>)
 800b4d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b4dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	699b      	ldr	r3, [r3, #24]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	f000 80ae 	beq.w	800b644 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b4e8:	4b37      	ldr	r3, [pc, #220]	; (800b5c8 <HAL_RCC_OscConfig+0x4d0>)
 800b4ea:	689b      	ldr	r3, [r3, #8]
 800b4ec:	f003 030c 	and.w	r3, r3, #12
 800b4f0:	2b08      	cmp	r3, #8
 800b4f2:	d06d      	beq.n	800b5d0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	699b      	ldr	r3, [r3, #24]
 800b4f8:	2b02      	cmp	r3, #2
 800b4fa:	d14b      	bne.n	800b594 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b4fc:	4b32      	ldr	r3, [pc, #200]	; (800b5c8 <HAL_RCC_OscConfig+0x4d0>)
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	4a31      	ldr	r2, [pc, #196]	; (800b5c8 <HAL_RCC_OscConfig+0x4d0>)
 800b502:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b506:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b508:	f7fd fd7a 	bl	8009000 <HAL_GetTick>
 800b50c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b50e:	e008      	b.n	800b522 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b510:	f7fd fd76 	bl	8009000 <HAL_GetTick>
 800b514:	4602      	mov	r2, r0
 800b516:	693b      	ldr	r3, [r7, #16]
 800b518:	1ad3      	subs	r3, r2, r3
 800b51a:	2b02      	cmp	r3, #2
 800b51c:	d901      	bls.n	800b522 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800b51e:	2303      	movs	r3, #3
 800b520:	e091      	b.n	800b646 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b522:	4b29      	ldr	r3, [pc, #164]	; (800b5c8 <HAL_RCC_OscConfig+0x4d0>)
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d1f0      	bne.n	800b510 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	69da      	ldr	r2, [r3, #28]
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	6a1b      	ldr	r3, [r3, #32]
 800b536:	431a      	orrs	r2, r3
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b53c:	019b      	lsls	r3, r3, #6
 800b53e:	431a      	orrs	r2, r3
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b544:	085b      	lsrs	r3, r3, #1
 800b546:	3b01      	subs	r3, #1
 800b548:	041b      	lsls	r3, r3, #16
 800b54a:	431a      	orrs	r2, r3
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b550:	061b      	lsls	r3, r3, #24
 800b552:	431a      	orrs	r2, r3
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b558:	071b      	lsls	r3, r3, #28
 800b55a:	491b      	ldr	r1, [pc, #108]	; (800b5c8 <HAL_RCC_OscConfig+0x4d0>)
 800b55c:	4313      	orrs	r3, r2
 800b55e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b560:	4b19      	ldr	r3, [pc, #100]	; (800b5c8 <HAL_RCC_OscConfig+0x4d0>)
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	4a18      	ldr	r2, [pc, #96]	; (800b5c8 <HAL_RCC_OscConfig+0x4d0>)
 800b566:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b56a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b56c:	f7fd fd48 	bl	8009000 <HAL_GetTick>
 800b570:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b572:	e008      	b.n	800b586 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b574:	f7fd fd44 	bl	8009000 <HAL_GetTick>
 800b578:	4602      	mov	r2, r0
 800b57a:	693b      	ldr	r3, [r7, #16]
 800b57c:	1ad3      	subs	r3, r2, r3
 800b57e:	2b02      	cmp	r3, #2
 800b580:	d901      	bls.n	800b586 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800b582:	2303      	movs	r3, #3
 800b584:	e05f      	b.n	800b646 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b586:	4b10      	ldr	r3, [pc, #64]	; (800b5c8 <HAL_RCC_OscConfig+0x4d0>)
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d0f0      	beq.n	800b574 <HAL_RCC_OscConfig+0x47c>
 800b592:	e057      	b.n	800b644 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b594:	4b0c      	ldr	r3, [pc, #48]	; (800b5c8 <HAL_RCC_OscConfig+0x4d0>)
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	4a0b      	ldr	r2, [pc, #44]	; (800b5c8 <HAL_RCC_OscConfig+0x4d0>)
 800b59a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b59e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b5a0:	f7fd fd2e 	bl	8009000 <HAL_GetTick>
 800b5a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b5a6:	e008      	b.n	800b5ba <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b5a8:	f7fd fd2a 	bl	8009000 <HAL_GetTick>
 800b5ac:	4602      	mov	r2, r0
 800b5ae:	693b      	ldr	r3, [r7, #16]
 800b5b0:	1ad3      	subs	r3, r2, r3
 800b5b2:	2b02      	cmp	r3, #2
 800b5b4:	d901      	bls.n	800b5ba <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800b5b6:	2303      	movs	r3, #3
 800b5b8:	e045      	b.n	800b646 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b5ba:	4b03      	ldr	r3, [pc, #12]	; (800b5c8 <HAL_RCC_OscConfig+0x4d0>)
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d1f0      	bne.n	800b5a8 <HAL_RCC_OscConfig+0x4b0>
 800b5c6:	e03d      	b.n	800b644 <HAL_RCC_OscConfig+0x54c>
 800b5c8:	40023800 	.word	0x40023800
 800b5cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800b5d0:	4b1f      	ldr	r3, [pc, #124]	; (800b650 <HAL_RCC_OscConfig+0x558>)
 800b5d2:	685b      	ldr	r3, [r3, #4]
 800b5d4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	699b      	ldr	r3, [r3, #24]
 800b5da:	2b01      	cmp	r3, #1
 800b5dc:	d030      	beq.n	800b640 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b5e8:	429a      	cmp	r2, r3
 800b5ea:	d129      	bne.n	800b640 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b5f6:	429a      	cmp	r2, r3
 800b5f8:	d122      	bne.n	800b640 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b5fa:	68fa      	ldr	r2, [r7, #12]
 800b5fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b600:	4013      	ands	r3, r2
 800b602:	687a      	ldr	r2, [r7, #4]
 800b604:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b606:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b608:	4293      	cmp	r3, r2
 800b60a:	d119      	bne.n	800b640 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b616:	085b      	lsrs	r3, r3, #1
 800b618:	3b01      	subs	r3, #1
 800b61a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b61c:	429a      	cmp	r2, r3
 800b61e:	d10f      	bne.n	800b640 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b62a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800b62c:	429a      	cmp	r2, r3
 800b62e:	d107      	bne.n	800b640 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b63a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b63c:	429a      	cmp	r2, r3
 800b63e:	d001      	beq.n	800b644 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800b640:	2301      	movs	r3, #1
 800b642:	e000      	b.n	800b646 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800b644:	2300      	movs	r3, #0
}
 800b646:	4618      	mov	r0, r3
 800b648:	3718      	adds	r7, #24
 800b64a:	46bd      	mov	sp, r7
 800b64c:	bd80      	pop	{r7, pc}
 800b64e:	bf00      	nop
 800b650:	40023800 	.word	0x40023800

0800b654 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b084      	sub	sp, #16
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
 800b65c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800b65e:	2300      	movs	r3, #0
 800b660:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d101      	bne.n	800b66c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800b668:	2301      	movs	r3, #1
 800b66a:	e0d0      	b.n	800b80e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b66c:	4b6a      	ldr	r3, [pc, #424]	; (800b818 <HAL_RCC_ClockConfig+0x1c4>)
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	f003 030f 	and.w	r3, r3, #15
 800b674:	683a      	ldr	r2, [r7, #0]
 800b676:	429a      	cmp	r2, r3
 800b678:	d910      	bls.n	800b69c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b67a:	4b67      	ldr	r3, [pc, #412]	; (800b818 <HAL_RCC_ClockConfig+0x1c4>)
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	f023 020f 	bic.w	r2, r3, #15
 800b682:	4965      	ldr	r1, [pc, #404]	; (800b818 <HAL_RCC_ClockConfig+0x1c4>)
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	4313      	orrs	r3, r2
 800b688:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b68a:	4b63      	ldr	r3, [pc, #396]	; (800b818 <HAL_RCC_ClockConfig+0x1c4>)
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	f003 030f 	and.w	r3, r3, #15
 800b692:	683a      	ldr	r2, [r7, #0]
 800b694:	429a      	cmp	r2, r3
 800b696:	d001      	beq.n	800b69c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800b698:	2301      	movs	r3, #1
 800b69a:	e0b8      	b.n	800b80e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	f003 0302 	and.w	r3, r3, #2
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d020      	beq.n	800b6ea <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	f003 0304 	and.w	r3, r3, #4
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d005      	beq.n	800b6c0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b6b4:	4b59      	ldr	r3, [pc, #356]	; (800b81c <HAL_RCC_ClockConfig+0x1c8>)
 800b6b6:	689b      	ldr	r3, [r3, #8]
 800b6b8:	4a58      	ldr	r2, [pc, #352]	; (800b81c <HAL_RCC_ClockConfig+0x1c8>)
 800b6ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b6be:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	f003 0308 	and.w	r3, r3, #8
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d005      	beq.n	800b6d8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b6cc:	4b53      	ldr	r3, [pc, #332]	; (800b81c <HAL_RCC_ClockConfig+0x1c8>)
 800b6ce:	689b      	ldr	r3, [r3, #8]
 800b6d0:	4a52      	ldr	r2, [pc, #328]	; (800b81c <HAL_RCC_ClockConfig+0x1c8>)
 800b6d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b6d6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b6d8:	4b50      	ldr	r3, [pc, #320]	; (800b81c <HAL_RCC_ClockConfig+0x1c8>)
 800b6da:	689b      	ldr	r3, [r3, #8]
 800b6dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	689b      	ldr	r3, [r3, #8]
 800b6e4:	494d      	ldr	r1, [pc, #308]	; (800b81c <HAL_RCC_ClockConfig+0x1c8>)
 800b6e6:	4313      	orrs	r3, r2
 800b6e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	f003 0301 	and.w	r3, r3, #1
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d040      	beq.n	800b778 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	685b      	ldr	r3, [r3, #4]
 800b6fa:	2b01      	cmp	r3, #1
 800b6fc:	d107      	bne.n	800b70e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b6fe:	4b47      	ldr	r3, [pc, #284]	; (800b81c <HAL_RCC_ClockConfig+0x1c8>)
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b706:	2b00      	cmp	r3, #0
 800b708:	d115      	bne.n	800b736 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b70a:	2301      	movs	r3, #1
 800b70c:	e07f      	b.n	800b80e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	685b      	ldr	r3, [r3, #4]
 800b712:	2b02      	cmp	r3, #2
 800b714:	d107      	bne.n	800b726 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b716:	4b41      	ldr	r3, [pc, #260]	; (800b81c <HAL_RCC_ClockConfig+0x1c8>)
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d109      	bne.n	800b736 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b722:	2301      	movs	r3, #1
 800b724:	e073      	b.n	800b80e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b726:	4b3d      	ldr	r3, [pc, #244]	; (800b81c <HAL_RCC_ClockConfig+0x1c8>)
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	f003 0302 	and.w	r3, r3, #2
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d101      	bne.n	800b736 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b732:	2301      	movs	r3, #1
 800b734:	e06b      	b.n	800b80e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b736:	4b39      	ldr	r3, [pc, #228]	; (800b81c <HAL_RCC_ClockConfig+0x1c8>)
 800b738:	689b      	ldr	r3, [r3, #8]
 800b73a:	f023 0203 	bic.w	r2, r3, #3
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	685b      	ldr	r3, [r3, #4]
 800b742:	4936      	ldr	r1, [pc, #216]	; (800b81c <HAL_RCC_ClockConfig+0x1c8>)
 800b744:	4313      	orrs	r3, r2
 800b746:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b748:	f7fd fc5a 	bl	8009000 <HAL_GetTick>
 800b74c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b74e:	e00a      	b.n	800b766 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b750:	f7fd fc56 	bl	8009000 <HAL_GetTick>
 800b754:	4602      	mov	r2, r0
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	1ad3      	subs	r3, r2, r3
 800b75a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b75e:	4293      	cmp	r3, r2
 800b760:	d901      	bls.n	800b766 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800b762:	2303      	movs	r3, #3
 800b764:	e053      	b.n	800b80e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b766:	4b2d      	ldr	r3, [pc, #180]	; (800b81c <HAL_RCC_ClockConfig+0x1c8>)
 800b768:	689b      	ldr	r3, [r3, #8]
 800b76a:	f003 020c 	and.w	r2, r3, #12
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	685b      	ldr	r3, [r3, #4]
 800b772:	009b      	lsls	r3, r3, #2
 800b774:	429a      	cmp	r2, r3
 800b776:	d1eb      	bne.n	800b750 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b778:	4b27      	ldr	r3, [pc, #156]	; (800b818 <HAL_RCC_ClockConfig+0x1c4>)
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	f003 030f 	and.w	r3, r3, #15
 800b780:	683a      	ldr	r2, [r7, #0]
 800b782:	429a      	cmp	r2, r3
 800b784:	d210      	bcs.n	800b7a8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b786:	4b24      	ldr	r3, [pc, #144]	; (800b818 <HAL_RCC_ClockConfig+0x1c4>)
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	f023 020f 	bic.w	r2, r3, #15
 800b78e:	4922      	ldr	r1, [pc, #136]	; (800b818 <HAL_RCC_ClockConfig+0x1c4>)
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	4313      	orrs	r3, r2
 800b794:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b796:	4b20      	ldr	r3, [pc, #128]	; (800b818 <HAL_RCC_ClockConfig+0x1c4>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	f003 030f 	and.w	r3, r3, #15
 800b79e:	683a      	ldr	r2, [r7, #0]
 800b7a0:	429a      	cmp	r2, r3
 800b7a2:	d001      	beq.n	800b7a8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	e032      	b.n	800b80e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	f003 0304 	and.w	r3, r3, #4
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d008      	beq.n	800b7c6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b7b4:	4b19      	ldr	r3, [pc, #100]	; (800b81c <HAL_RCC_ClockConfig+0x1c8>)
 800b7b6:	689b      	ldr	r3, [r3, #8]
 800b7b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	68db      	ldr	r3, [r3, #12]
 800b7c0:	4916      	ldr	r1, [pc, #88]	; (800b81c <HAL_RCC_ClockConfig+0x1c8>)
 800b7c2:	4313      	orrs	r3, r2
 800b7c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	f003 0308 	and.w	r3, r3, #8
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d009      	beq.n	800b7e6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b7d2:	4b12      	ldr	r3, [pc, #72]	; (800b81c <HAL_RCC_ClockConfig+0x1c8>)
 800b7d4:	689b      	ldr	r3, [r3, #8]
 800b7d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	691b      	ldr	r3, [r3, #16]
 800b7de:	00db      	lsls	r3, r3, #3
 800b7e0:	490e      	ldr	r1, [pc, #56]	; (800b81c <HAL_RCC_ClockConfig+0x1c8>)
 800b7e2:	4313      	orrs	r3, r2
 800b7e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b7e6:	f000 f821 	bl	800b82c <HAL_RCC_GetSysClockFreq>
 800b7ea:	4602      	mov	r2, r0
 800b7ec:	4b0b      	ldr	r3, [pc, #44]	; (800b81c <HAL_RCC_ClockConfig+0x1c8>)
 800b7ee:	689b      	ldr	r3, [r3, #8]
 800b7f0:	091b      	lsrs	r3, r3, #4
 800b7f2:	f003 030f 	and.w	r3, r3, #15
 800b7f6:	490a      	ldr	r1, [pc, #40]	; (800b820 <HAL_RCC_ClockConfig+0x1cc>)
 800b7f8:	5ccb      	ldrb	r3, [r1, r3]
 800b7fa:	fa22 f303 	lsr.w	r3, r2, r3
 800b7fe:	4a09      	ldr	r2, [pc, #36]	; (800b824 <HAL_RCC_ClockConfig+0x1d0>)
 800b800:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800b802:	4b09      	ldr	r3, [pc, #36]	; (800b828 <HAL_RCC_ClockConfig+0x1d4>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	4618      	mov	r0, r3
 800b808:	f7f8 f9b4 	bl	8003b74 <HAL_InitTick>

  return HAL_OK;
 800b80c:	2300      	movs	r3, #0
}
 800b80e:	4618      	mov	r0, r3
 800b810:	3710      	adds	r7, #16
 800b812:	46bd      	mov	sp, r7
 800b814:	bd80      	pop	{r7, pc}
 800b816:	bf00      	nop
 800b818:	40023c00 	.word	0x40023c00
 800b81c:	40023800 	.word	0x40023800
 800b820:	08015a04 	.word	0x08015a04
 800b824:	20000008 	.word	0x20000008
 800b828:	2000000c 	.word	0x2000000c

0800b82c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b82c:	b5b0      	push	{r4, r5, r7, lr}
 800b82e:	b084      	sub	sp, #16
 800b830:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800b832:	2100      	movs	r1, #0
 800b834:	6079      	str	r1, [r7, #4]
 800b836:	2100      	movs	r1, #0
 800b838:	60f9      	str	r1, [r7, #12]
 800b83a:	2100      	movs	r1, #0
 800b83c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800b83e:	2100      	movs	r1, #0
 800b840:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b842:	4952      	ldr	r1, [pc, #328]	; (800b98c <HAL_RCC_GetSysClockFreq+0x160>)
 800b844:	6889      	ldr	r1, [r1, #8]
 800b846:	f001 010c 	and.w	r1, r1, #12
 800b84a:	2908      	cmp	r1, #8
 800b84c:	d00d      	beq.n	800b86a <HAL_RCC_GetSysClockFreq+0x3e>
 800b84e:	2908      	cmp	r1, #8
 800b850:	f200 8094 	bhi.w	800b97c <HAL_RCC_GetSysClockFreq+0x150>
 800b854:	2900      	cmp	r1, #0
 800b856:	d002      	beq.n	800b85e <HAL_RCC_GetSysClockFreq+0x32>
 800b858:	2904      	cmp	r1, #4
 800b85a:	d003      	beq.n	800b864 <HAL_RCC_GetSysClockFreq+0x38>
 800b85c:	e08e      	b.n	800b97c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b85e:	4b4c      	ldr	r3, [pc, #304]	; (800b990 <HAL_RCC_GetSysClockFreq+0x164>)
 800b860:	60bb      	str	r3, [r7, #8]
      break;
 800b862:	e08e      	b.n	800b982 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b864:	4b4b      	ldr	r3, [pc, #300]	; (800b994 <HAL_RCC_GetSysClockFreq+0x168>)
 800b866:	60bb      	str	r3, [r7, #8]
      break;
 800b868:	e08b      	b.n	800b982 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b86a:	4948      	ldr	r1, [pc, #288]	; (800b98c <HAL_RCC_GetSysClockFreq+0x160>)
 800b86c:	6849      	ldr	r1, [r1, #4]
 800b86e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800b872:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800b874:	4945      	ldr	r1, [pc, #276]	; (800b98c <HAL_RCC_GetSysClockFreq+0x160>)
 800b876:	6849      	ldr	r1, [r1, #4]
 800b878:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800b87c:	2900      	cmp	r1, #0
 800b87e:	d024      	beq.n	800b8ca <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b880:	4942      	ldr	r1, [pc, #264]	; (800b98c <HAL_RCC_GetSysClockFreq+0x160>)
 800b882:	6849      	ldr	r1, [r1, #4]
 800b884:	0989      	lsrs	r1, r1, #6
 800b886:	4608      	mov	r0, r1
 800b888:	f04f 0100 	mov.w	r1, #0
 800b88c:	f240 14ff 	movw	r4, #511	; 0x1ff
 800b890:	f04f 0500 	mov.w	r5, #0
 800b894:	ea00 0204 	and.w	r2, r0, r4
 800b898:	ea01 0305 	and.w	r3, r1, r5
 800b89c:	493d      	ldr	r1, [pc, #244]	; (800b994 <HAL_RCC_GetSysClockFreq+0x168>)
 800b89e:	fb01 f003 	mul.w	r0, r1, r3
 800b8a2:	2100      	movs	r1, #0
 800b8a4:	fb01 f102 	mul.w	r1, r1, r2
 800b8a8:	1844      	adds	r4, r0, r1
 800b8aa:	493a      	ldr	r1, [pc, #232]	; (800b994 <HAL_RCC_GetSysClockFreq+0x168>)
 800b8ac:	fba2 0101 	umull	r0, r1, r2, r1
 800b8b0:	1863      	adds	r3, r4, r1
 800b8b2:	4619      	mov	r1, r3
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	461a      	mov	r2, r3
 800b8b8:	f04f 0300 	mov.w	r3, #0
 800b8bc:	f7f4 fd78 	bl	80003b0 <__aeabi_uldivmod>
 800b8c0:	4602      	mov	r2, r0
 800b8c2:	460b      	mov	r3, r1
 800b8c4:	4613      	mov	r3, r2
 800b8c6:	60fb      	str	r3, [r7, #12]
 800b8c8:	e04a      	b.n	800b960 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b8ca:	4b30      	ldr	r3, [pc, #192]	; (800b98c <HAL_RCC_GetSysClockFreq+0x160>)
 800b8cc:	685b      	ldr	r3, [r3, #4]
 800b8ce:	099b      	lsrs	r3, r3, #6
 800b8d0:	461a      	mov	r2, r3
 800b8d2:	f04f 0300 	mov.w	r3, #0
 800b8d6:	f240 10ff 	movw	r0, #511	; 0x1ff
 800b8da:	f04f 0100 	mov.w	r1, #0
 800b8de:	ea02 0400 	and.w	r4, r2, r0
 800b8e2:	ea03 0501 	and.w	r5, r3, r1
 800b8e6:	4620      	mov	r0, r4
 800b8e8:	4629      	mov	r1, r5
 800b8ea:	f04f 0200 	mov.w	r2, #0
 800b8ee:	f04f 0300 	mov.w	r3, #0
 800b8f2:	014b      	lsls	r3, r1, #5
 800b8f4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800b8f8:	0142      	lsls	r2, r0, #5
 800b8fa:	4610      	mov	r0, r2
 800b8fc:	4619      	mov	r1, r3
 800b8fe:	1b00      	subs	r0, r0, r4
 800b900:	eb61 0105 	sbc.w	r1, r1, r5
 800b904:	f04f 0200 	mov.w	r2, #0
 800b908:	f04f 0300 	mov.w	r3, #0
 800b90c:	018b      	lsls	r3, r1, #6
 800b90e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800b912:	0182      	lsls	r2, r0, #6
 800b914:	1a12      	subs	r2, r2, r0
 800b916:	eb63 0301 	sbc.w	r3, r3, r1
 800b91a:	f04f 0000 	mov.w	r0, #0
 800b91e:	f04f 0100 	mov.w	r1, #0
 800b922:	00d9      	lsls	r1, r3, #3
 800b924:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b928:	00d0      	lsls	r0, r2, #3
 800b92a:	4602      	mov	r2, r0
 800b92c:	460b      	mov	r3, r1
 800b92e:	1912      	adds	r2, r2, r4
 800b930:	eb45 0303 	adc.w	r3, r5, r3
 800b934:	f04f 0000 	mov.w	r0, #0
 800b938:	f04f 0100 	mov.w	r1, #0
 800b93c:	0299      	lsls	r1, r3, #10
 800b93e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800b942:	0290      	lsls	r0, r2, #10
 800b944:	4602      	mov	r2, r0
 800b946:	460b      	mov	r3, r1
 800b948:	4610      	mov	r0, r2
 800b94a:	4619      	mov	r1, r3
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	461a      	mov	r2, r3
 800b950:	f04f 0300 	mov.w	r3, #0
 800b954:	f7f4 fd2c 	bl	80003b0 <__aeabi_uldivmod>
 800b958:	4602      	mov	r2, r0
 800b95a:	460b      	mov	r3, r1
 800b95c:	4613      	mov	r3, r2
 800b95e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800b960:	4b0a      	ldr	r3, [pc, #40]	; (800b98c <HAL_RCC_GetSysClockFreq+0x160>)
 800b962:	685b      	ldr	r3, [r3, #4]
 800b964:	0c1b      	lsrs	r3, r3, #16
 800b966:	f003 0303 	and.w	r3, r3, #3
 800b96a:	3301      	adds	r3, #1
 800b96c:	005b      	lsls	r3, r3, #1
 800b96e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800b970:	68fa      	ldr	r2, [r7, #12]
 800b972:	683b      	ldr	r3, [r7, #0]
 800b974:	fbb2 f3f3 	udiv	r3, r2, r3
 800b978:	60bb      	str	r3, [r7, #8]
      break;
 800b97a:	e002      	b.n	800b982 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b97c:	4b04      	ldr	r3, [pc, #16]	; (800b990 <HAL_RCC_GetSysClockFreq+0x164>)
 800b97e:	60bb      	str	r3, [r7, #8]
      break;
 800b980:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b982:	68bb      	ldr	r3, [r7, #8]
}
 800b984:	4618      	mov	r0, r3
 800b986:	3710      	adds	r7, #16
 800b988:	46bd      	mov	sp, r7
 800b98a:	bdb0      	pop	{r4, r5, r7, pc}
 800b98c:	40023800 	.word	0x40023800
 800b990:	00f42400 	.word	0x00f42400
 800b994:	017d7840 	.word	0x017d7840

0800b998 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b998:	b480      	push	{r7}
 800b99a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b99c:	4b03      	ldr	r3, [pc, #12]	; (800b9ac <HAL_RCC_GetHCLKFreq+0x14>)
 800b99e:	681b      	ldr	r3, [r3, #0]
}
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a8:	4770      	bx	lr
 800b9aa:	bf00      	nop
 800b9ac:	20000008 	.word	0x20000008

0800b9b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b9b4:	f7ff fff0 	bl	800b998 <HAL_RCC_GetHCLKFreq>
 800b9b8:	4602      	mov	r2, r0
 800b9ba:	4b05      	ldr	r3, [pc, #20]	; (800b9d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b9bc:	689b      	ldr	r3, [r3, #8]
 800b9be:	0a9b      	lsrs	r3, r3, #10
 800b9c0:	f003 0307 	and.w	r3, r3, #7
 800b9c4:	4903      	ldr	r1, [pc, #12]	; (800b9d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b9c6:	5ccb      	ldrb	r3, [r1, r3]
 800b9c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	bd80      	pop	{r7, pc}
 800b9d0:	40023800 	.word	0x40023800
 800b9d4:	08015a14 	.word	0x08015a14

0800b9d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b9dc:	f7ff ffdc 	bl	800b998 <HAL_RCC_GetHCLKFreq>
 800b9e0:	4602      	mov	r2, r0
 800b9e2:	4b05      	ldr	r3, [pc, #20]	; (800b9f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b9e4:	689b      	ldr	r3, [r3, #8]
 800b9e6:	0b5b      	lsrs	r3, r3, #13
 800b9e8:	f003 0307 	and.w	r3, r3, #7
 800b9ec:	4903      	ldr	r1, [pc, #12]	; (800b9fc <HAL_RCC_GetPCLK2Freq+0x24>)
 800b9ee:	5ccb      	ldrb	r3, [r1, r3]
 800b9f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	bd80      	pop	{r7, pc}
 800b9f8:	40023800 	.word	0x40023800
 800b9fc:	08015a14 	.word	0x08015a14

0800ba00 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800ba00:	b480      	push	{r7}
 800ba02:	b083      	sub	sp, #12
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
 800ba08:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	220f      	movs	r2, #15
 800ba0e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800ba10:	4b12      	ldr	r3, [pc, #72]	; (800ba5c <HAL_RCC_GetClockConfig+0x5c>)
 800ba12:	689b      	ldr	r3, [r3, #8]
 800ba14:	f003 0203 	and.w	r2, r3, #3
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800ba1c:	4b0f      	ldr	r3, [pc, #60]	; (800ba5c <HAL_RCC_GetClockConfig+0x5c>)
 800ba1e:	689b      	ldr	r3, [r3, #8]
 800ba20:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800ba28:	4b0c      	ldr	r3, [pc, #48]	; (800ba5c <HAL_RCC_GetClockConfig+0x5c>)
 800ba2a:	689b      	ldr	r3, [r3, #8]
 800ba2c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800ba34:	4b09      	ldr	r3, [pc, #36]	; (800ba5c <HAL_RCC_GetClockConfig+0x5c>)
 800ba36:	689b      	ldr	r3, [r3, #8]
 800ba38:	08db      	lsrs	r3, r3, #3
 800ba3a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800ba42:	4b07      	ldr	r3, [pc, #28]	; (800ba60 <HAL_RCC_GetClockConfig+0x60>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	f003 020f 	and.w	r2, r3, #15
 800ba4a:	683b      	ldr	r3, [r7, #0]
 800ba4c:	601a      	str	r2, [r3, #0]
}
 800ba4e:	bf00      	nop
 800ba50:	370c      	adds	r7, #12
 800ba52:	46bd      	mov	sp, r7
 800ba54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba58:	4770      	bx	lr
 800ba5a:	bf00      	nop
 800ba5c:	40023800 	.word	0x40023800
 800ba60:	40023c00 	.word	0x40023c00

0800ba64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b088      	sub	sp, #32
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800ba70:	2300      	movs	r3, #0
 800ba72:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800ba74:	2300      	movs	r3, #0
 800ba76:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800ba78:	2300      	movs	r3, #0
 800ba7a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	f003 0301 	and.w	r3, r3, #1
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d012      	beq.n	800bab2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800ba8c:	4b69      	ldr	r3, [pc, #420]	; (800bc34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ba8e:	689b      	ldr	r3, [r3, #8]
 800ba90:	4a68      	ldr	r2, [pc, #416]	; (800bc34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ba92:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800ba96:	6093      	str	r3, [r2, #8]
 800ba98:	4b66      	ldr	r3, [pc, #408]	; (800bc34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ba9a:	689a      	ldr	r2, [r3, #8]
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800baa0:	4964      	ldr	r1, [pc, #400]	; (800bc34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800baa2:	4313      	orrs	r3, r2
 800baa4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d101      	bne.n	800bab2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800baae:	2301      	movs	r3, #1
 800bab0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800baba:	2b00      	cmp	r3, #0
 800babc:	d017      	beq.n	800baee <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800babe:	4b5d      	ldr	r3, [pc, #372]	; (800bc34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bac0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bac4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bacc:	4959      	ldr	r1, [pc, #356]	; (800bc34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bace:	4313      	orrs	r3, r2
 800bad0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bad8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800badc:	d101      	bne.n	800bae2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800bade:	2301      	movs	r3, #1
 800bae0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d101      	bne.n	800baee <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800baea:	2301      	movs	r3, #1
 800baec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d017      	beq.n	800bb2a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800bafa:	4b4e      	ldr	r3, [pc, #312]	; (800bc34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bafc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb00:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb08:	494a      	ldr	r1, [pc, #296]	; (800bc34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bb0a:	4313      	orrs	r3, r2
 800bb0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bb18:	d101      	bne.n	800bb1e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800bb1a:	2301      	movs	r3, #1
 800bb1c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d101      	bne.n	800bb2a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800bb26:	2301      	movs	r3, #1
 800bb28:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d001      	beq.n	800bb3a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800bb36:	2301      	movs	r3, #1
 800bb38:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	f003 0320 	and.w	r3, r3, #32
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	f000 808b 	beq.w	800bc5e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800bb48:	4b3a      	ldr	r3, [pc, #232]	; (800bc34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bb4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb4c:	4a39      	ldr	r2, [pc, #228]	; (800bc34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bb4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bb52:	6413      	str	r3, [r2, #64]	; 0x40
 800bb54:	4b37      	ldr	r3, [pc, #220]	; (800bc34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bb56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bb5c:	60bb      	str	r3, [r7, #8]
 800bb5e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800bb60:	4b35      	ldr	r3, [pc, #212]	; (800bc38 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	4a34      	ldr	r2, [pc, #208]	; (800bc38 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800bb66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bb6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bb6c:	f7fd fa48 	bl	8009000 <HAL_GetTick>
 800bb70:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800bb72:	e008      	b.n	800bb86 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bb74:	f7fd fa44 	bl	8009000 <HAL_GetTick>
 800bb78:	4602      	mov	r2, r0
 800bb7a:	697b      	ldr	r3, [r7, #20]
 800bb7c:	1ad3      	subs	r3, r2, r3
 800bb7e:	2b64      	cmp	r3, #100	; 0x64
 800bb80:	d901      	bls.n	800bb86 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800bb82:	2303      	movs	r3, #3
 800bb84:	e38f      	b.n	800c2a6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800bb86:	4b2c      	ldr	r3, [pc, #176]	; (800bc38 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d0f0      	beq.n	800bb74 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800bb92:	4b28      	ldr	r3, [pc, #160]	; (800bc34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bb94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bb9a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800bb9c:	693b      	ldr	r3, [r7, #16]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d035      	beq.n	800bc0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bba6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bbaa:	693a      	ldr	r2, [r7, #16]
 800bbac:	429a      	cmp	r2, r3
 800bbae:	d02e      	beq.n	800bc0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bbb0:	4b20      	ldr	r3, [pc, #128]	; (800bc34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bbb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bbb8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800bbba:	4b1e      	ldr	r3, [pc, #120]	; (800bc34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bbbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbbe:	4a1d      	ldr	r2, [pc, #116]	; (800bc34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bbc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bbc4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800bbc6:	4b1b      	ldr	r3, [pc, #108]	; (800bc34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bbc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbca:	4a1a      	ldr	r2, [pc, #104]	; (800bc34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bbcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bbd0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800bbd2:	4a18      	ldr	r2, [pc, #96]	; (800bc34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bbd4:	693b      	ldr	r3, [r7, #16]
 800bbd6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800bbd8:	4b16      	ldr	r3, [pc, #88]	; (800bc34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bbda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbdc:	f003 0301 	and.w	r3, r3, #1
 800bbe0:	2b01      	cmp	r3, #1
 800bbe2:	d114      	bne.n	800bc0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bbe4:	f7fd fa0c 	bl	8009000 <HAL_GetTick>
 800bbe8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bbea:	e00a      	b.n	800bc02 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bbec:	f7fd fa08 	bl	8009000 <HAL_GetTick>
 800bbf0:	4602      	mov	r2, r0
 800bbf2:	697b      	ldr	r3, [r7, #20]
 800bbf4:	1ad3      	subs	r3, r2, r3
 800bbf6:	f241 3288 	movw	r2, #5000	; 0x1388
 800bbfa:	4293      	cmp	r3, r2
 800bbfc:	d901      	bls.n	800bc02 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800bbfe:	2303      	movs	r3, #3
 800bc00:	e351      	b.n	800c2a6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bc02:	4b0c      	ldr	r3, [pc, #48]	; (800bc34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bc04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc06:	f003 0302 	and.w	r3, r3, #2
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d0ee      	beq.n	800bbec <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bc16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bc1a:	d111      	bne.n	800bc40 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800bc1c:	4b05      	ldr	r3, [pc, #20]	; (800bc34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bc1e:	689b      	ldr	r3, [r3, #8]
 800bc20:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800bc28:	4b04      	ldr	r3, [pc, #16]	; (800bc3c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800bc2a:	400b      	ands	r3, r1
 800bc2c:	4901      	ldr	r1, [pc, #4]	; (800bc34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bc2e:	4313      	orrs	r3, r2
 800bc30:	608b      	str	r3, [r1, #8]
 800bc32:	e00b      	b.n	800bc4c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800bc34:	40023800 	.word	0x40023800
 800bc38:	40007000 	.word	0x40007000
 800bc3c:	0ffffcff 	.word	0x0ffffcff
 800bc40:	4bb3      	ldr	r3, [pc, #716]	; (800bf10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bc42:	689b      	ldr	r3, [r3, #8]
 800bc44:	4ab2      	ldr	r2, [pc, #712]	; (800bf10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bc46:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800bc4a:	6093      	str	r3, [r2, #8]
 800bc4c:	4bb0      	ldr	r3, [pc, #704]	; (800bf10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bc4e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bc58:	49ad      	ldr	r1, [pc, #692]	; (800bf10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bc5a:	4313      	orrs	r3, r2
 800bc5c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	f003 0310 	and.w	r3, r3, #16
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d010      	beq.n	800bc8c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bc6a:	4ba9      	ldr	r3, [pc, #676]	; (800bf10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bc6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc70:	4aa7      	ldr	r2, [pc, #668]	; (800bf10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bc72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bc76:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800bc7a:	4ba5      	ldr	r3, [pc, #660]	; (800bf10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bc7c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc84:	49a2      	ldr	r1, [pc, #648]	; (800bf10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bc86:	4313      	orrs	r3, r2
 800bc88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d00a      	beq.n	800bcae <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800bc98:	4b9d      	ldr	r3, [pc, #628]	; (800bf10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bc9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc9e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bca6:	499a      	ldr	r1, [pc, #616]	; (800bf10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bca8:	4313      	orrs	r3, r2
 800bcaa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d00a      	beq.n	800bcd0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800bcba:	4b95      	ldr	r3, [pc, #596]	; (800bf10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bcbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bcc0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bcc8:	4991      	ldr	r1, [pc, #580]	; (800bf10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bcca:	4313      	orrs	r3, r2
 800bccc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d00a      	beq.n	800bcf2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800bcdc:	4b8c      	ldr	r3, [pc, #560]	; (800bf10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bcde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bce2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bcea:	4989      	ldr	r1, [pc, #548]	; (800bf10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bcec:	4313      	orrs	r3, r2
 800bcee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d00a      	beq.n	800bd14 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bcfe:	4b84      	ldr	r3, [pc, #528]	; (800bf10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bd00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd04:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd0c:	4980      	ldr	r1, [pc, #512]	; (800bf10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bd0e:	4313      	orrs	r3, r2
 800bd10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d00a      	beq.n	800bd36 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800bd20:	4b7b      	ldr	r3, [pc, #492]	; (800bf10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bd22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd26:	f023 0203 	bic.w	r2, r3, #3
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd2e:	4978      	ldr	r1, [pc, #480]	; (800bf10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bd30:	4313      	orrs	r3, r2
 800bd32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d00a      	beq.n	800bd58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800bd42:	4b73      	ldr	r3, [pc, #460]	; (800bf10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bd44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd48:	f023 020c 	bic.w	r2, r3, #12
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd50:	496f      	ldr	r1, [pc, #444]	; (800bf10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bd52:	4313      	orrs	r3, r2
 800bd54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d00a      	beq.n	800bd7a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800bd64:	4b6a      	ldr	r3, [pc, #424]	; (800bf10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bd66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd6a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd72:	4967      	ldr	r1, [pc, #412]	; (800bf10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bd74:	4313      	orrs	r3, r2
 800bd76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d00a      	beq.n	800bd9c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800bd86:	4b62      	ldr	r3, [pc, #392]	; (800bf10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bd88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd8c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd94:	495e      	ldr	r1, [pc, #376]	; (800bf10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bd96:	4313      	orrs	r3, r2
 800bd98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d00a      	beq.n	800bdbe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800bda8:	4b59      	ldr	r3, [pc, #356]	; (800bf10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bdaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bdae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdb6:	4956      	ldr	r1, [pc, #344]	; (800bf10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bdb8:	4313      	orrs	r3, r2
 800bdba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d00a      	beq.n	800bde0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800bdca:	4b51      	ldr	r3, [pc, #324]	; (800bf10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bdcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bdd0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bdd8:	494d      	ldr	r1, [pc, #308]	; (800bf10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bdda:	4313      	orrs	r3, r2
 800bddc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d00a      	beq.n	800be02 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800bdec:	4b48      	ldr	r3, [pc, #288]	; (800bf10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bdee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bdf2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bdfa:	4945      	ldr	r1, [pc, #276]	; (800bf10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bdfc:	4313      	orrs	r3, r2
 800bdfe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d00a      	beq.n	800be24 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800be0e:	4b40      	ldr	r3, [pc, #256]	; (800bf10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800be10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be14:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800be1c:	493c      	ldr	r1, [pc, #240]	; (800bf10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800be1e:	4313      	orrs	r3, r2
 800be20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d00a      	beq.n	800be46 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800be30:	4b37      	ldr	r3, [pc, #220]	; (800bf10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800be32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be36:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800be3e:	4934      	ldr	r1, [pc, #208]	; (800bf10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800be40:	4313      	orrs	r3, r2
 800be42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d011      	beq.n	800be76 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800be52:	4b2f      	ldr	r3, [pc, #188]	; (800bf10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800be54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be58:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be60:	492b      	ldr	r1, [pc, #172]	; (800bf10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800be62:	4313      	orrs	r3, r2
 800be64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800be70:	d101      	bne.n	800be76 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800be72:	2301      	movs	r3, #1
 800be74:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	f003 0308 	and.w	r3, r3, #8
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d001      	beq.n	800be86 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800be82:	2301      	movs	r3, #1
 800be84:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d00a      	beq.n	800bea8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800be92:	4b1f      	ldr	r3, [pc, #124]	; (800bf10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800be94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be98:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bea0:	491b      	ldr	r1, [pc, #108]	; (800bf10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bea2:	4313      	orrs	r3, r2
 800bea4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d00b      	beq.n	800becc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800beb4:	4b16      	ldr	r3, [pc, #88]	; (800bf10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800beb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800beba:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bec4:	4912      	ldr	r1, [pc, #72]	; (800bf10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bec6:	4313      	orrs	r3, r2
 800bec8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d00b      	beq.n	800bef0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800bed8:	4b0d      	ldr	r3, [pc, #52]	; (800bf10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800beda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bede:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bee8:	4909      	ldr	r1, [pc, #36]	; (800bf10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800beea:	4313      	orrs	r3, r2
 800beec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d00f      	beq.n	800bf1c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800befc:	4b04      	ldr	r3, [pc, #16]	; (800bf10 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800befe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf02:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf0c:	e002      	b.n	800bf14 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800bf0e:	bf00      	nop
 800bf10:	40023800 	.word	0x40023800
 800bf14:	4986      	ldr	r1, [pc, #536]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800bf16:	4313      	orrs	r3, r2
 800bf18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d00b      	beq.n	800bf40 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800bf28:	4b81      	ldr	r3, [pc, #516]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800bf2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf2e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf38:	497d      	ldr	r1, [pc, #500]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800bf3a:	4313      	orrs	r3, r2
 800bf3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800bf40:	69fb      	ldr	r3, [r7, #28]
 800bf42:	2b01      	cmp	r3, #1
 800bf44:	d006      	beq.n	800bf54 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	f000 80d6 	beq.w	800c100 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800bf54:	4b76      	ldr	r3, [pc, #472]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	4a75      	ldr	r2, [pc, #468]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800bf5a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bf5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bf60:	f7fd f84e 	bl	8009000 <HAL_GetTick>
 800bf64:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800bf66:	e008      	b.n	800bf7a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800bf68:	f7fd f84a 	bl	8009000 <HAL_GetTick>
 800bf6c:	4602      	mov	r2, r0
 800bf6e:	697b      	ldr	r3, [r7, #20]
 800bf70:	1ad3      	subs	r3, r2, r3
 800bf72:	2b64      	cmp	r3, #100	; 0x64
 800bf74:	d901      	bls.n	800bf7a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bf76:	2303      	movs	r3, #3
 800bf78:	e195      	b.n	800c2a6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800bf7a:	4b6d      	ldr	r3, [pc, #436]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d1f0      	bne.n	800bf68 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	f003 0301 	and.w	r3, r3, #1
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d021      	beq.n	800bfd6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d11d      	bne.n	800bfd6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800bf9a:	4b65      	ldr	r3, [pc, #404]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800bf9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bfa0:	0c1b      	lsrs	r3, r3, #16
 800bfa2:	f003 0303 	and.w	r3, r3, #3
 800bfa6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800bfa8:	4b61      	ldr	r3, [pc, #388]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800bfaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bfae:	0e1b      	lsrs	r3, r3, #24
 800bfb0:	f003 030f 	and.w	r3, r3, #15
 800bfb4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	685b      	ldr	r3, [r3, #4]
 800bfba:	019a      	lsls	r2, r3, #6
 800bfbc:	693b      	ldr	r3, [r7, #16]
 800bfbe:	041b      	lsls	r3, r3, #16
 800bfc0:	431a      	orrs	r2, r3
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	061b      	lsls	r3, r3, #24
 800bfc6:	431a      	orrs	r2, r3
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	689b      	ldr	r3, [r3, #8]
 800bfcc:	071b      	lsls	r3, r3, #28
 800bfce:	4958      	ldr	r1, [pc, #352]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800bfd0:	4313      	orrs	r3, r2
 800bfd2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d004      	beq.n	800bfec <HAL_RCCEx_PeriphCLKConfig+0x588>
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfe6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bfea:	d00a      	beq.n	800c002 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d02e      	beq.n	800c056 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bffc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c000:	d129      	bne.n	800c056 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800c002:	4b4b      	ldr	r3, [pc, #300]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c004:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c008:	0c1b      	lsrs	r3, r3, #16
 800c00a:	f003 0303 	and.w	r3, r3, #3
 800c00e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c010:	4b47      	ldr	r3, [pc, #284]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c012:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c016:	0f1b      	lsrs	r3, r3, #28
 800c018:	f003 0307 	and.w	r3, r3, #7
 800c01c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	685b      	ldr	r3, [r3, #4]
 800c022:	019a      	lsls	r2, r3, #6
 800c024:	693b      	ldr	r3, [r7, #16]
 800c026:	041b      	lsls	r3, r3, #16
 800c028:	431a      	orrs	r2, r3
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	68db      	ldr	r3, [r3, #12]
 800c02e:	061b      	lsls	r3, r3, #24
 800c030:	431a      	orrs	r2, r3
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	071b      	lsls	r3, r3, #28
 800c036:	493e      	ldr	r1, [pc, #248]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c038:	4313      	orrs	r3, r2
 800c03a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800c03e:	4b3c      	ldr	r3, [pc, #240]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c040:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c044:	f023 021f 	bic.w	r2, r3, #31
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c04c:	3b01      	subs	r3, #1
 800c04e:	4938      	ldr	r1, [pc, #224]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c050:	4313      	orrs	r3, r2
 800c052:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d01d      	beq.n	800c09e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800c062:	4b33      	ldr	r3, [pc, #204]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c064:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c068:	0e1b      	lsrs	r3, r3, #24
 800c06a:	f003 030f 	and.w	r3, r3, #15
 800c06e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c070:	4b2f      	ldr	r3, [pc, #188]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c072:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c076:	0f1b      	lsrs	r3, r3, #28
 800c078:	f003 0307 	and.w	r3, r3, #7
 800c07c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	685b      	ldr	r3, [r3, #4]
 800c082:	019a      	lsls	r2, r3, #6
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	691b      	ldr	r3, [r3, #16]
 800c088:	041b      	lsls	r3, r3, #16
 800c08a:	431a      	orrs	r2, r3
 800c08c:	693b      	ldr	r3, [r7, #16]
 800c08e:	061b      	lsls	r3, r3, #24
 800c090:	431a      	orrs	r2, r3
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	071b      	lsls	r3, r3, #28
 800c096:	4926      	ldr	r1, [pc, #152]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c098:	4313      	orrs	r3, r2
 800c09a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d011      	beq.n	800c0ce <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	685b      	ldr	r3, [r3, #4]
 800c0ae:	019a      	lsls	r2, r3, #6
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	691b      	ldr	r3, [r3, #16]
 800c0b4:	041b      	lsls	r3, r3, #16
 800c0b6:	431a      	orrs	r2, r3
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	68db      	ldr	r3, [r3, #12]
 800c0bc:	061b      	lsls	r3, r3, #24
 800c0be:	431a      	orrs	r2, r3
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	689b      	ldr	r3, [r3, #8]
 800c0c4:	071b      	lsls	r3, r3, #28
 800c0c6:	491a      	ldr	r1, [pc, #104]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c0c8:	4313      	orrs	r3, r2
 800c0ca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c0ce:	4b18      	ldr	r3, [pc, #96]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	4a17      	ldr	r2, [pc, #92]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c0d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c0d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c0da:	f7fc ff91 	bl	8009000 <HAL_GetTick>
 800c0de:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c0e0:	e008      	b.n	800c0f4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800c0e2:	f7fc ff8d 	bl	8009000 <HAL_GetTick>
 800c0e6:	4602      	mov	r2, r0
 800c0e8:	697b      	ldr	r3, [r7, #20]
 800c0ea:	1ad3      	subs	r3, r2, r3
 800c0ec:	2b64      	cmp	r3, #100	; 0x64
 800c0ee:	d901      	bls.n	800c0f4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c0f0:	2303      	movs	r3, #3
 800c0f2:	e0d8      	b.n	800c2a6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c0f4:	4b0e      	ldr	r3, [pc, #56]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d0f0      	beq.n	800c0e2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800c100:	69bb      	ldr	r3, [r7, #24]
 800c102:	2b01      	cmp	r3, #1
 800c104:	f040 80ce 	bne.w	800c2a4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800c108:	4b09      	ldr	r3, [pc, #36]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	4a08      	ldr	r2, [pc, #32]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c10e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c112:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c114:	f7fc ff74 	bl	8009000 <HAL_GetTick>
 800c118:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c11a:	e00b      	b.n	800c134 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800c11c:	f7fc ff70 	bl	8009000 <HAL_GetTick>
 800c120:	4602      	mov	r2, r0
 800c122:	697b      	ldr	r3, [r7, #20]
 800c124:	1ad3      	subs	r3, r2, r3
 800c126:	2b64      	cmp	r3, #100	; 0x64
 800c128:	d904      	bls.n	800c134 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c12a:	2303      	movs	r3, #3
 800c12c:	e0bb      	b.n	800c2a6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800c12e:	bf00      	nop
 800c130:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c134:	4b5e      	ldr	r3, [pc, #376]	; (800c2b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c13c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c140:	d0ec      	beq.n	800c11c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d003      	beq.n	800c156 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c152:	2b00      	cmp	r3, #0
 800c154:	d009      	beq.n	800c16a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d02e      	beq.n	800c1c0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c166:	2b00      	cmp	r3, #0
 800c168:	d12a      	bne.n	800c1c0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800c16a:	4b51      	ldr	r3, [pc, #324]	; (800c2b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c16c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c170:	0c1b      	lsrs	r3, r3, #16
 800c172:	f003 0303 	and.w	r3, r3, #3
 800c176:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c178:	4b4d      	ldr	r3, [pc, #308]	; (800c2b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c17a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c17e:	0f1b      	lsrs	r3, r3, #28
 800c180:	f003 0307 	and.w	r3, r3, #7
 800c184:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	695b      	ldr	r3, [r3, #20]
 800c18a:	019a      	lsls	r2, r3, #6
 800c18c:	693b      	ldr	r3, [r7, #16]
 800c18e:	041b      	lsls	r3, r3, #16
 800c190:	431a      	orrs	r2, r3
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	699b      	ldr	r3, [r3, #24]
 800c196:	061b      	lsls	r3, r3, #24
 800c198:	431a      	orrs	r2, r3
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	071b      	lsls	r3, r3, #28
 800c19e:	4944      	ldr	r1, [pc, #272]	; (800c2b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c1a0:	4313      	orrs	r3, r2
 800c1a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800c1a6:	4b42      	ldr	r3, [pc, #264]	; (800c2b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c1a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c1ac:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1b4:	3b01      	subs	r3, #1
 800c1b6:	021b      	lsls	r3, r3, #8
 800c1b8:	493d      	ldr	r1, [pc, #244]	; (800c2b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c1ba:	4313      	orrs	r3, r2
 800c1bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d022      	beq.n	800c212 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c1d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c1d4:	d11d      	bne.n	800c212 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c1d6:	4b36      	ldr	r3, [pc, #216]	; (800c2b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c1d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c1dc:	0e1b      	lsrs	r3, r3, #24
 800c1de:	f003 030f 	and.w	r3, r3, #15
 800c1e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c1e4:	4b32      	ldr	r3, [pc, #200]	; (800c2b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c1e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c1ea:	0f1b      	lsrs	r3, r3, #28
 800c1ec:	f003 0307 	and.w	r3, r3, #7
 800c1f0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	695b      	ldr	r3, [r3, #20]
 800c1f6:	019a      	lsls	r2, r3, #6
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	6a1b      	ldr	r3, [r3, #32]
 800c1fc:	041b      	lsls	r3, r3, #16
 800c1fe:	431a      	orrs	r2, r3
 800c200:	693b      	ldr	r3, [r7, #16]
 800c202:	061b      	lsls	r3, r3, #24
 800c204:	431a      	orrs	r2, r3
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	071b      	lsls	r3, r3, #28
 800c20a:	4929      	ldr	r1, [pc, #164]	; (800c2b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c20c:	4313      	orrs	r3, r2
 800c20e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	f003 0308 	and.w	r3, r3, #8
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d028      	beq.n	800c270 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c21e:	4b24      	ldr	r3, [pc, #144]	; (800c2b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c224:	0e1b      	lsrs	r3, r3, #24
 800c226:	f003 030f 	and.w	r3, r3, #15
 800c22a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800c22c:	4b20      	ldr	r3, [pc, #128]	; (800c2b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c22e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c232:	0c1b      	lsrs	r3, r3, #16
 800c234:	f003 0303 	and.w	r3, r3, #3
 800c238:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	695b      	ldr	r3, [r3, #20]
 800c23e:	019a      	lsls	r2, r3, #6
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	041b      	lsls	r3, r3, #16
 800c244:	431a      	orrs	r2, r3
 800c246:	693b      	ldr	r3, [r7, #16]
 800c248:	061b      	lsls	r3, r3, #24
 800c24a:	431a      	orrs	r2, r3
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	69db      	ldr	r3, [r3, #28]
 800c250:	071b      	lsls	r3, r3, #28
 800c252:	4917      	ldr	r1, [pc, #92]	; (800c2b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c254:	4313      	orrs	r3, r2
 800c256:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800c25a:	4b15      	ldr	r3, [pc, #84]	; (800c2b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c25c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c260:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c268:	4911      	ldr	r1, [pc, #68]	; (800c2b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c26a:	4313      	orrs	r3, r2
 800c26c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800c270:	4b0f      	ldr	r3, [pc, #60]	; (800c2b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	4a0e      	ldr	r2, [pc, #56]	; (800c2b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c276:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c27a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c27c:	f7fc fec0 	bl	8009000 <HAL_GetTick>
 800c280:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c282:	e008      	b.n	800c296 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800c284:	f7fc febc 	bl	8009000 <HAL_GetTick>
 800c288:	4602      	mov	r2, r0
 800c28a:	697b      	ldr	r3, [r7, #20]
 800c28c:	1ad3      	subs	r3, r2, r3
 800c28e:	2b64      	cmp	r3, #100	; 0x64
 800c290:	d901      	bls.n	800c296 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c292:	2303      	movs	r3, #3
 800c294:	e007      	b.n	800c2a6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c296:	4b06      	ldr	r3, [pc, #24]	; (800c2b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c29e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c2a2:	d1ef      	bne.n	800c284 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800c2a4:	2300      	movs	r3, #0
}
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	3720      	adds	r7, #32
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	bd80      	pop	{r7, pc}
 800c2ae:	bf00      	nop
 800c2b0:	40023800 	.word	0x40023800

0800c2b4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800c2b4:	b480      	push	{r7}
 800c2b6:	b087      	sub	sp, #28
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800c2bc:	2300      	movs	r3, #0
 800c2be:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c2d2:	f040 80a3 	bne.w	800c41c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
  {
    saiclocksource = RCC->DCKCFGR1;
 800c2d6:	4bac      	ldr	r3, [pc, #688]	; (800c588 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c2d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c2dc:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800c2de:	68bb      	ldr	r3, [r7, #8]
 800c2e0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800c2e4:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800c2e6:	68bb      	ldr	r3, [r7, #8]
 800c2e8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c2ec:	f000 808a 	beq.w	800c404 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 800c2f0:	68bb      	ldr	r3, [r7, #8]
 800c2f2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c2f6:	f200 8093 	bhi.w	800c420 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 800c2fa:	68bb      	ldr	r3, [r7, #8]
 800c2fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c300:	d07d      	beq.n	800c3fe <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800c302:	68bb      	ldr	r3, [r7, #8]
 800c304:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c308:	f200 808a 	bhi.w	800c420 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 800c30c:	68bb      	ldr	r3, [r7, #8]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d004      	beq.n	800c31c <HAL_RCCEx_GetPeriphCLKFreq+0x68>
 800c312:	68bb      	ldr	r3, [r7, #8]
 800c314:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c318:	d039      	beq.n	800c38e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800c31a:	e081      	b.n	800c420 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800c31c:	4b9a      	ldr	r3, [pc, #616]	; (800c588 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c31e:	685b      	ldr	r3, [r3, #4]
 800c320:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c324:	2b00      	cmp	r3, #0
 800c326:	d108      	bne.n	800c33a <HAL_RCCEx_GetPeriphCLKFreq+0x86>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c328:	4b97      	ldr	r3, [pc, #604]	; (800c588 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c32a:	685b      	ldr	r3, [r3, #4]
 800c32c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c330:	4a96      	ldr	r2, [pc, #600]	; (800c58c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800c332:	fbb2 f3f3 	udiv	r3, r2, r3
 800c336:	613b      	str	r3, [r7, #16]
 800c338:	e007      	b.n	800c34a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800c33a:	4b93      	ldr	r3, [pc, #588]	; (800c588 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c33c:	685b      	ldr	r3, [r3, #4]
 800c33e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c342:	4a93      	ldr	r2, [pc, #588]	; (800c590 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800c344:	fbb2 f3f3 	udiv	r3, r2, r3
 800c348:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800c34a:	4b8f      	ldr	r3, [pc, #572]	; (800c588 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c34c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c350:	0e1b      	lsrs	r3, r3, #24
 800c352:	f003 030f 	and.w	r3, r3, #15
 800c356:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800c358:	4b8b      	ldr	r3, [pc, #556]	; (800c588 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c35a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c35e:	099b      	lsrs	r3, r3, #6
 800c360:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c364:	693a      	ldr	r2, [r7, #16]
 800c366:	fb02 f203 	mul.w	r2, r2, r3
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c370:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800c372:	4b85      	ldr	r3, [pc, #532]	; (800c588 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c374:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c378:	0a1b      	lsrs	r3, r3, #8
 800c37a:	f003 031f 	and.w	r3, r3, #31
 800c37e:	3301      	adds	r3, #1
 800c380:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800c382:	697a      	ldr	r2, [r7, #20]
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	fbb2 f3f3 	udiv	r3, r2, r3
 800c38a:	617b      	str	r3, [r7, #20]
        break;
 800c38c:	e049      	b.n	800c422 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800c38e:	4b7e      	ldr	r3, [pc, #504]	; (800c588 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c390:	685b      	ldr	r3, [r3, #4]
 800c392:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c396:	2b00      	cmp	r3, #0
 800c398:	d108      	bne.n	800c3ac <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c39a:	4b7b      	ldr	r3, [pc, #492]	; (800c588 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c39c:	685b      	ldr	r3, [r3, #4]
 800c39e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c3a2:	4a7a      	ldr	r2, [pc, #488]	; (800c58c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800c3a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3a8:	613b      	str	r3, [r7, #16]
 800c3aa:	e007      	b.n	800c3bc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800c3ac:	4b76      	ldr	r3, [pc, #472]	; (800c588 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c3ae:	685b      	ldr	r3, [r3, #4]
 800c3b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c3b4:	4a76      	ldr	r2, [pc, #472]	; (800c590 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800c3b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3ba:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800c3bc:	4b72      	ldr	r3, [pc, #456]	; (800c588 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c3be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c3c2:	0e1b      	lsrs	r3, r3, #24
 800c3c4:	f003 030f 	and.w	r3, r3, #15
 800c3c8:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800c3ca:	4b6f      	ldr	r3, [pc, #444]	; (800c588 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c3cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c3d0:	099b      	lsrs	r3, r3, #6
 800c3d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3d6:	693a      	ldr	r2, [r7, #16]
 800c3d8:	fb02 f203 	mul.w	r2, r2, r3
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3e2:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800c3e4:	4b68      	ldr	r3, [pc, #416]	; (800c588 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c3e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c3ea:	f003 031f 	and.w	r3, r3, #31
 800c3ee:	3301      	adds	r3, #1
 800c3f0:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800c3f2:	697a      	ldr	r2, [r7, #20]
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3fa:	617b      	str	r3, [r7, #20]
        break;
 800c3fc:	e011      	b.n	800c422 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        frequency = EXTERNAL_CLOCK_VALUE;
 800c3fe:	4b65      	ldr	r3, [pc, #404]	; (800c594 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800c400:	617b      	str	r3, [r7, #20]
        break;
 800c402:	e00e      	b.n	800c422 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800c404:	4b60      	ldr	r3, [pc, #384]	; (800c588 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c406:	685b      	ldr	r3, [r3, #4]
 800c408:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d102      	bne.n	800c416 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = HSI_VALUE;
 800c410:	4b5e      	ldr	r3, [pc, #376]	; (800c58c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800c412:	617b      	str	r3, [r7, #20]
        break;
 800c414:	e005      	b.n	800c422 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
          frequency = HSE_VALUE;
 800c416:	4b5e      	ldr	r3, [pc, #376]	; (800c590 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800c418:	617b      	str	r3, [r7, #20]
        break;
 800c41a:	e002      	b.n	800c422 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
      }
    }
  }
 800c41c:	bf00      	nop
 800c41e:	e000      	b.n	800c422 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        break;
 800c420:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c428:	f040 80a3 	bne.w	800c572 <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
  {
    saiclocksource = RCC->DCKCFGR1;
 800c42c:	4b56      	ldr	r3, [pc, #344]	; (800c588 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c42e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c432:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800c434:	68bb      	ldr	r3, [r7, #8]
 800c436:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800c43a:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800c43c:	68bb      	ldr	r3, [r7, #8]
 800c43e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800c442:	f000 808a 	beq.w	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 800c446:	68bb      	ldr	r3, [r7, #8]
 800c448:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800c44c:	f200 8093 	bhi.w	800c576 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
 800c450:	68bb      	ldr	r3, [r7, #8]
 800c452:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c456:	d07d      	beq.n	800c554 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 800c458:	68bb      	ldr	r3, [r7, #8]
 800c45a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c45e:	f200 808a 	bhi.w	800c576 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
 800c462:	68bb      	ldr	r3, [r7, #8]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d004      	beq.n	800c472 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800c468:	68bb      	ldr	r3, [r7, #8]
 800c46a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c46e:	d039      	beq.n	800c4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800c470:	e081      	b.n	800c576 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800c472:	4b45      	ldr	r3, [pc, #276]	; (800c588 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c474:	685b      	ldr	r3, [r3, #4]
 800c476:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d108      	bne.n	800c490 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c47e:	4b42      	ldr	r3, [pc, #264]	; (800c588 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c480:	685b      	ldr	r3, [r3, #4]
 800c482:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c486:	4a41      	ldr	r2, [pc, #260]	; (800c58c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800c488:	fbb2 f3f3 	udiv	r3, r2, r3
 800c48c:	613b      	str	r3, [r7, #16]
 800c48e:	e007      	b.n	800c4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800c490:	4b3d      	ldr	r3, [pc, #244]	; (800c588 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c492:	685b      	ldr	r3, [r3, #4]
 800c494:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c498:	4a3d      	ldr	r2, [pc, #244]	; (800c590 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800c49a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c49e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800c4a0:	4b39      	ldr	r3, [pc, #228]	; (800c588 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c4a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c4a6:	0e1b      	lsrs	r3, r3, #24
 800c4a8:	f003 030f 	and.w	r3, r3, #15
 800c4ac:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800c4ae:	4b36      	ldr	r3, [pc, #216]	; (800c588 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c4b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c4b4:	099b      	lsrs	r3, r3, #6
 800c4b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4ba:	693a      	ldr	r2, [r7, #16]
 800c4bc:	fb02 f203 	mul.w	r2, r2, r3
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c4c6:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800c4c8:	4b2f      	ldr	r3, [pc, #188]	; (800c588 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c4ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c4ce:	0a1b      	lsrs	r3, r3, #8
 800c4d0:	f003 031f 	and.w	r3, r3, #31
 800c4d4:	3301      	adds	r3, #1
 800c4d6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800c4d8:	697a      	ldr	r2, [r7, #20]
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800c4e0:	617b      	str	r3, [r7, #20]
        break;
 800c4e2:	e049      	b.n	800c578 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800c4e4:	4b28      	ldr	r3, [pc, #160]	; (800c588 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c4e6:	685b      	ldr	r3, [r3, #4]
 800c4e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d108      	bne.n	800c502 <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c4f0:	4b25      	ldr	r3, [pc, #148]	; (800c588 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c4f2:	685b      	ldr	r3, [r3, #4]
 800c4f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c4f8:	4a24      	ldr	r2, [pc, #144]	; (800c58c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800c4fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800c4fe:	613b      	str	r3, [r7, #16]
 800c500:	e007      	b.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800c502:	4b21      	ldr	r3, [pc, #132]	; (800c588 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c504:	685b      	ldr	r3, [r3, #4]
 800c506:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c50a:	4a21      	ldr	r2, [pc, #132]	; (800c590 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800c50c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c510:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800c512:	4b1d      	ldr	r3, [pc, #116]	; (800c588 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c514:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c518:	0e1b      	lsrs	r3, r3, #24
 800c51a:	f003 030f 	and.w	r3, r3, #15
 800c51e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800c520:	4b19      	ldr	r3, [pc, #100]	; (800c588 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c522:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c526:	099b      	lsrs	r3, r3, #6
 800c528:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c52c:	693a      	ldr	r2, [r7, #16]
 800c52e:	fb02 f203 	mul.w	r2, r2, r3
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	fbb2 f3f3 	udiv	r3, r2, r3
 800c538:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800c53a:	4b13      	ldr	r3, [pc, #76]	; (800c588 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c53c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c540:	f003 031f 	and.w	r3, r3, #31
 800c544:	3301      	adds	r3, #1
 800c546:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800c548:	697a      	ldr	r2, [r7, #20]
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c550:	617b      	str	r3, [r7, #20]
        break;
 800c552:	e011      	b.n	800c578 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
        frequency = EXTERNAL_CLOCK_VALUE;
 800c554:	4b0f      	ldr	r3, [pc, #60]	; (800c594 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800c556:	617b      	str	r3, [r7, #20]
        break;
 800c558:	e00e      	b.n	800c578 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800c55a:	4b0b      	ldr	r3, [pc, #44]	; (800c588 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c55c:	685b      	ldr	r3, [r3, #4]
 800c55e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c562:	2b00      	cmp	r3, #0
 800c564:	d102      	bne.n	800c56c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
          frequency = HSI_VALUE;
 800c566:	4b09      	ldr	r3, [pc, #36]	; (800c58c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800c568:	617b      	str	r3, [r7, #20]
        break;
 800c56a:	e005      	b.n	800c578 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
          frequency = HSE_VALUE;
 800c56c:	4b08      	ldr	r3, [pc, #32]	; (800c590 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800c56e:	617b      	str	r3, [r7, #20]
        break;
 800c570:	e002      	b.n	800c578 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
      }
    }
  }
 800c572:	bf00      	nop
 800c574:	e000      	b.n	800c578 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
        break;
 800c576:	bf00      	nop

  return frequency;
 800c578:	697b      	ldr	r3, [r7, #20]
}
 800c57a:	4618      	mov	r0, r3
 800c57c:	371c      	adds	r7, #28
 800c57e:	46bd      	mov	sp, r7
 800c580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c584:	4770      	bx	lr
 800c586:	bf00      	nop
 800c588:	40023800 	.word	0x40023800
 800c58c:	00f42400 	.word	0x00f42400
 800c590:	017d7840 	.word	0x017d7840
 800c594:	00bb8000 	.word	0x00bb8000

0800c598 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b086      	sub	sp, #24
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	60f8      	str	r0, [r7, #12]
 800c5a0:	60b9      	str	r1, [r7, #8]
 800c5a2:	607a      	str	r2, [r7, #4]
 800c5a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800c5aa:	68bb      	ldr	r3, [r7, #8]
 800c5ac:	2b02      	cmp	r3, #2
 800c5ae:	d904      	bls.n	800c5ba <HAL_SAI_InitProtocol+0x22>
 800c5b0:	68bb      	ldr	r3, [r7, #8]
 800c5b2:	3b03      	subs	r3, #3
 800c5b4:	2b01      	cmp	r3, #1
 800c5b6:	d812      	bhi.n	800c5de <HAL_SAI_InitProtocol+0x46>
 800c5b8:	e008      	b.n	800c5cc <HAL_SAI_InitProtocol+0x34>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	687a      	ldr	r2, [r7, #4]
 800c5be:	68b9      	ldr	r1, [r7, #8]
 800c5c0:	68f8      	ldr	r0, [r7, #12]
 800c5c2:	f000 fac9 	bl	800cb58 <SAI_InitI2S>
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	75fb      	strb	r3, [r7, #23]
      break;
 800c5ca:	e00b      	b.n	800c5e4 <HAL_SAI_InitProtocol+0x4c>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800c5cc:	683b      	ldr	r3, [r7, #0]
 800c5ce:	687a      	ldr	r2, [r7, #4]
 800c5d0:	68b9      	ldr	r1, [r7, #8]
 800c5d2:	68f8      	ldr	r0, [r7, #12]
 800c5d4:	f000 fb6e 	bl	800ccb4 <SAI_InitPCM>
 800c5d8:	4603      	mov	r3, r0
 800c5da:	75fb      	strb	r3, [r7, #23]
      break;
 800c5dc:	e002      	b.n	800c5e4 <HAL_SAI_InitProtocol+0x4c>
    default :
      status = HAL_ERROR;
 800c5de:	2301      	movs	r3, #1
 800c5e0:	75fb      	strb	r3, [r7, #23]
      break;
 800c5e2:	bf00      	nop
  }

  if (status == HAL_OK)
 800c5e4:	7dfb      	ldrb	r3, [r7, #23]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d104      	bne.n	800c5f4 <HAL_SAI_InitProtocol+0x5c>
  {
    status = HAL_SAI_Init(hsai);
 800c5ea:	68f8      	ldr	r0, [r7, #12]
 800c5ec:	f000 f808 	bl	800c600 <HAL_SAI_Init>
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800c5f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	3718      	adds	r7, #24
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	bd80      	pop	{r7, pc}
	...

0800c600 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b088      	sub	sp, #32
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800c608:	2300      	movs	r3, #0
 800c60a:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800c60c:	2300      	movs	r3, #0
 800c60e:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800c610:	2300      	movs	r3, #0
 800c612:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d101      	bne.n	800c61e <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800c61a:	2301      	movs	r3, #1
 800c61c:	e156      	b.n	800c8cc <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800c624:	b2db      	uxtb	r3, r3
 800c626:	2b00      	cmp	r3, #0
 800c628:	d106      	bne.n	800c638 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	2200      	movs	r2, #0
 800c62e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800c632:	6878      	ldr	r0, [r7, #4]
 800c634:	f7f7 fa2a 	bl	8003a8c <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	2202      	movs	r2, #2
 800c63c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800c640:	6878      	ldr	r0, [r7, #4]
 800c642:	f000 fbed 	bl	800ce20 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	68db      	ldr	r3, [r3, #12]
 800c64a:	2b02      	cmp	r3, #2
 800c64c:	d00c      	beq.n	800c668 <HAL_SAI_Init+0x68>
 800c64e:	2b02      	cmp	r3, #2
 800c650:	d80d      	bhi.n	800c66e <HAL_SAI_Init+0x6e>
 800c652:	2b00      	cmp	r3, #0
 800c654:	d002      	beq.n	800c65c <HAL_SAI_Init+0x5c>
 800c656:	2b01      	cmp	r3, #1
 800c658:	d003      	beq.n	800c662 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800c65a:	e008      	b.n	800c66e <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800c65c:	2300      	movs	r3, #0
 800c65e:	61fb      	str	r3, [r7, #28]
      break;
 800c660:	e006      	b.n	800c670 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800c662:	2310      	movs	r3, #16
 800c664:	61fb      	str	r3, [r7, #28]
      break;
 800c666:	e003      	b.n	800c670 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800c668:	2320      	movs	r3, #32
 800c66a:	61fb      	str	r3, [r7, #28]
      break;
 800c66c:	e000      	b.n	800c670 <HAL_SAI_Init+0x70>
      break;
 800c66e:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	689b      	ldr	r3, [r3, #8]
 800c674:	2b03      	cmp	r3, #3
 800c676:	d81e      	bhi.n	800c6b6 <HAL_SAI_Init+0xb6>
 800c678:	a201      	add	r2, pc, #4	; (adr r2, 800c680 <HAL_SAI_Init+0x80>)
 800c67a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c67e:	bf00      	nop
 800c680:	0800c691 	.word	0x0800c691
 800c684:	0800c697 	.word	0x0800c697
 800c688:	0800c69f 	.word	0x0800c69f
 800c68c:	0800c6a7 	.word	0x0800c6a7
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800c690:	2300      	movs	r3, #0
 800c692:	617b      	str	r3, [r7, #20]
    }
    break;
 800c694:	e010      	b.n	800c6b8 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800c696:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c69a:	617b      	str	r3, [r7, #20]
    }
    break;
 800c69c:	e00c      	b.n	800c6b8 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800c69e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c6a2:	617b      	str	r3, [r7, #20]
    }
    break;
 800c6a4:	e008      	b.n	800c6b8 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800c6a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c6aa:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800c6ac:	69fb      	ldr	r3, [r7, #28]
 800c6ae:	f043 0301 	orr.w	r3, r3, #1
 800c6b2:	61fb      	str	r3, [r7, #28]
    }
    break;
 800c6b4:	e000      	b.n	800c6b8 <HAL_SAI_Init+0xb8>
    default:
      break;
 800c6b6:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	4a85      	ldr	r2, [pc, #532]	; (800c8d4 <HAL_SAI_Init+0x2d4>)
 800c6be:	4293      	cmp	r3, r2
 800c6c0:	d004      	beq.n	800c6cc <HAL_SAI_Init+0xcc>
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	4a84      	ldr	r2, [pc, #528]	; (800c8d8 <HAL_SAI_Init+0x2d8>)
 800c6c8:	4293      	cmp	r3, r2
 800c6ca:	d103      	bne.n	800c6d4 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800c6cc:	4a83      	ldr	r2, [pc, #524]	; (800c8dc <HAL_SAI_Init+0x2dc>)
 800c6ce:	69fb      	ldr	r3, [r7, #28]
 800c6d0:	6013      	str	r3, [r2, #0]
 800c6d2:	e002      	b.n	800c6da <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800c6d4:	4a82      	ldr	r2, [pc, #520]	; (800c8e0 <HAL_SAI_Init+0x2e0>)
 800c6d6:	69fb      	ldr	r3, [r7, #28]
 800c6d8:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	69db      	ldr	r3, [r3, #28]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d04c      	beq.n	800c77c <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800c6e2:	2300      	movs	r3, #0
 800c6e4:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	4a7a      	ldr	r2, [pc, #488]	; (800c8d4 <HAL_SAI_Init+0x2d4>)
 800c6ec:	4293      	cmp	r3, r2
 800c6ee:	d004      	beq.n	800c6fa <HAL_SAI_Init+0xfa>
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	4a78      	ldr	r2, [pc, #480]	; (800c8d8 <HAL_SAI_Init+0x2d8>)
 800c6f6:	4293      	cmp	r3, r2
 800c6f8:	d104      	bne.n	800c704 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800c6fa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800c6fe:	f7ff fdd9 	bl	800c2b4 <HAL_RCCEx_GetPeriphCLKFreq>
 800c702:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	4a76      	ldr	r2, [pc, #472]	; (800c8e4 <HAL_SAI_Init+0x2e4>)
 800c70a:	4293      	cmp	r3, r2
 800c70c:	d004      	beq.n	800c718 <HAL_SAI_Init+0x118>
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	4a75      	ldr	r2, [pc, #468]	; (800c8e8 <HAL_SAI_Init+0x2e8>)
 800c714:	4293      	cmp	r3, r2
 800c716:	d104      	bne.n	800c722 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800c718:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800c71c:	f7ff fdca 	bl	800c2b4 <HAL_RCCEx_GetPeriphCLKFreq>
 800c720:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800c722:	693a      	ldr	r2, [r7, #16]
 800c724:	4613      	mov	r3, r2
 800c726:	009b      	lsls	r3, r3, #2
 800c728:	4413      	add	r3, r2
 800c72a:	005b      	lsls	r3, r3, #1
 800c72c:	461a      	mov	r2, r3
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	69db      	ldr	r3, [r3, #28]
 800c732:	025b      	lsls	r3, r3, #9
 800c734:	fbb2 f3f3 	udiv	r3, r2, r3
 800c738:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	4a6b      	ldr	r2, [pc, #428]	; (800c8ec <HAL_SAI_Init+0x2ec>)
 800c73e:	fba2 2303 	umull	r2, r3, r2, r3
 800c742:	08da      	lsrs	r2, r3, #3
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800c748:	68f9      	ldr	r1, [r7, #12]
 800c74a:	4b68      	ldr	r3, [pc, #416]	; (800c8ec <HAL_SAI_Init+0x2ec>)
 800c74c:	fba3 2301 	umull	r2, r3, r3, r1
 800c750:	08da      	lsrs	r2, r3, #3
 800c752:	4613      	mov	r3, r2
 800c754:	009b      	lsls	r3, r3, #2
 800c756:	4413      	add	r3, r2
 800c758:	005b      	lsls	r3, r3, #1
 800c75a:	1aca      	subs	r2, r1, r3
 800c75c:	2a08      	cmp	r2, #8
 800c75e:	d904      	bls.n	800c76a <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	6a1b      	ldr	r3, [r3, #32]
 800c764:	1c5a      	adds	r2, r3, #1
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c76e:	2b04      	cmp	r3, #4
 800c770:	d104      	bne.n	800c77c <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	6a1b      	ldr	r3, [r3, #32]
 800c776:	085a      	lsrs	r2, r3, #1
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	685b      	ldr	r3, [r3, #4]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d003      	beq.n	800c78c <HAL_SAI_Init+0x18c>
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	685b      	ldr	r3, [r3, #4]
 800c788:	2b02      	cmp	r3, #2
 800c78a:	d109      	bne.n	800c7a0 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c790:	2b01      	cmp	r3, #1
 800c792:	d101      	bne.n	800c798 <HAL_SAI_Init+0x198>
 800c794:	2300      	movs	r3, #0
 800c796:	e001      	b.n	800c79c <HAL_SAI_Init+0x19c>
 800c798:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c79c:	61bb      	str	r3, [r7, #24]
 800c79e:	e008      	b.n	800c7b2 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7a4:	2b01      	cmp	r3, #1
 800c7a6:	d102      	bne.n	800c7ae <HAL_SAI_Init+0x1ae>
 800c7a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c7ac:	e000      	b.n	800c7b0 <HAL_SAI_Init+0x1b0>
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	6819      	ldr	r1, [r3, #0]
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681a      	ldr	r2, [r3, #0]
 800c7bc:	4b4c      	ldr	r3, [pc, #304]	; (800c8f0 <HAL_SAI_Init+0x2f0>)
 800c7be:	400b      	ands	r3, r1
 800c7c0:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	6819      	ldr	r1, [r3, #0]
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	685a      	ldr	r2, [r3, #4]
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7d0:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c7d6:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7dc:	431a      	orrs	r2, r3
 800c7de:	69bb      	ldr	r3, [r7, #24]
 800c7e0:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800c7e2:	697b      	ldr	r3, [r7, #20]
 800c7e4:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 800c7ea:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	691b      	ldr	r3, [r3, #16]
 800c7f0:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c7f6:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	6a1b      	ldr	r3, [r3, #32]
 800c7fc:	051b      	lsls	r3, r3, #20
 800c7fe:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	430a      	orrs	r2, r1
 800c806:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	6859      	ldr	r1, [r3, #4]
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681a      	ldr	r2, [r3, #0]
 800c812:	4b38      	ldr	r3, [pc, #224]	; (800c8f4 <HAL_SAI_Init+0x2f4>)
 800c814:	400b      	ands	r3, r1
 800c816:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	6859      	ldr	r1, [r3, #4]
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	699a      	ldr	r2, [r3, #24]
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c826:	431a      	orrs	r2, r3
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c82c:	431a      	orrs	r2, r3
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	430a      	orrs	r2, r1
 800c834:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	6899      	ldr	r1, [r3, #8]
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	681a      	ldr	r2, [r3, #0]
 800c840:	4b2d      	ldr	r3, [pc, #180]	; (800c8f8 <HAL_SAI_Init+0x2f8>)
 800c842:	400b      	ands	r3, r1
 800c844:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	6899      	ldr	r1, [r3, #8]
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c850:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800c856:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800c85c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 800c862:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c868:	3b01      	subs	r3, #1
 800c86a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800c86c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	430a      	orrs	r2, r1
 800c874:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	68d9      	ldr	r1, [r3, #12]
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681a      	ldr	r2, [r3, #0]
 800c880:	f24f 0320 	movw	r3, #61472	; 0xf020
 800c884:	400b      	ands	r3, r1
 800c886:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	68d9      	ldr	r1, [r3, #12]
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c896:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c89c:	041b      	lsls	r3, r3, #16
 800c89e:	431a      	orrs	r2, r3
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c8a4:	3b01      	subs	r3, #1
 800c8a6:	021b      	lsls	r3, r3, #8
 800c8a8:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	430a      	orrs	r2, r1
 800c8b0:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	2201      	movs	r2, #1
 800c8be:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c8ca:	2300      	movs	r3, #0
}
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	3720      	adds	r7, #32
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	bd80      	pop	{r7, pc}
 800c8d4:	40015804 	.word	0x40015804
 800c8d8:	40015824 	.word	0x40015824
 800c8dc:	40015800 	.word	0x40015800
 800c8e0:	40015c00 	.word	0x40015c00
 800c8e4:	40015c04 	.word	0x40015c04
 800c8e8:	40015c24 	.word	0x40015c24
 800c8ec:	cccccccd 	.word	0xcccccccd
 800c8f0:	ff05c010 	.word	0xff05c010
 800c8f4:	ffff1ff0 	.word	0xffff1ff0
 800c8f8:	fff88000 	.word	0xfff88000

0800c8fc <HAL_SAI_DMAStop>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAStop(SAI_HandleTypeDef *hsai)
{
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	b084      	sub	sp, #16
 800c900:	af00      	add	r7, sp, #0
 800c902:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c904:	2300      	movs	r3, #0
 800c906:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c90e:	2b01      	cmp	r3, #1
 800c910:	d101      	bne.n	800c916 <HAL_SAI_DMAStop+0x1a>
 800c912:	2302      	movs	r3, #2
 800c914:	e061      	b.n	800c9da <HAL_SAI_DMAStop+0xde>
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	2201      	movs	r2, #1
 800c91a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	681a      	ldr	r2, [r3, #0]
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800c92c:	601a      	str	r2, [r3, #0]

  /* Abort the SAI Tx DMA Stream */
  if ((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c932:	2b00      	cmp	r3, #0
 800c934:	d01c      	beq.n	800c970 <HAL_SAI_DMAStop+0x74>
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800c93c:	b2db      	uxtb	r3, r3
 800c93e:	2b12      	cmp	r3, #18
 800c940:	d116      	bne.n	800c970 <HAL_SAI_DMAStop+0x74>
  {
    if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c946:	4618      	mov	r0, r3
 800c948:	f7fd f930 	bl	8009bac <HAL_DMA_Abort>
 800c94c:	4603      	mov	r3, r0
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d00e      	beq.n	800c970 <HAL_SAI_DMAStop+0x74>
    {
      /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
      if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c958:	2b80      	cmp	r3, #128	; 0x80
 800c95a:	d009      	beq.n	800c970 <HAL_SAI_DMAStop+0x74>
      {
        status = HAL_ERROR;
 800c95c:	2301      	movs	r3, #1
 800c95e:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c966:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
  }

  /* Abort the SAI Rx DMA Stream */
  if ((hsai->hdmarx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_RX))
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c974:	2b00      	cmp	r3, #0
 800c976:	d01c      	beq.n	800c9b2 <HAL_SAI_DMAStop+0xb6>
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800c97e:	b2db      	uxtb	r3, r3
 800c980:	2b22      	cmp	r3, #34	; 0x22
 800c982:	d116      	bne.n	800c9b2 <HAL_SAI_DMAStop+0xb6>
  {
    if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c988:	4618      	mov	r0, r3
 800c98a:	f7fd f90f 	bl	8009bac <HAL_DMA_Abort>
 800c98e:	4603      	mov	r3, r0
 800c990:	2b00      	cmp	r3, #0
 800c992:	d00e      	beq.n	800c9b2 <HAL_SAI_DMAStop+0xb6>
    {
      /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
      if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c99a:	2b80      	cmp	r3, #128	; 0x80
 800c99c:	d009      	beq.n	800c9b2 <HAL_SAI_DMAStop+0xb6>
      {
        status = HAL_ERROR;
 800c99e:	2301      	movs	r3, #1
 800c9a0:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c9a8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
  }

  /* Disable SAI peripheral */
  SAI_Disable(hsai);
 800c9b2:	6878      	ldr	r0, [r7, #4]
 800c9b4:	f000 fa34 	bl	800ce20 <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	685a      	ldr	r2, [r3, #4]
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	f042 0208 	orr.w	r2, r2, #8
 800c9c6:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	2201      	movs	r2, #1
 800c9cc:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return status;
 800c9d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9da:	4618      	mov	r0, r3
 800c9dc:	3710      	adds	r7, #16
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	bd80      	pop	{r7, pc}
	...

0800c9e4 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b086      	sub	sp, #24
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	60f8      	str	r0, [r7, #12]
 800c9ec:	60b9      	str	r1, [r7, #8]
 800c9ee:	4613      	mov	r3, r2
 800c9f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800c9f2:	f7fc fb05 	bl	8009000 <HAL_GetTick>
 800c9f6:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 800c9f8:	68bb      	ldr	r3, [r7, #8]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d002      	beq.n	800ca04 <HAL_SAI_Transmit_DMA+0x20>
 800c9fe:	88fb      	ldrh	r3, [r7, #6]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d101      	bne.n	800ca08 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800ca04:	2301      	movs	r3, #1
 800ca06:	e093      	b.n	800cb30 <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800ca0e:	b2db      	uxtb	r3, r3
 800ca10:	2b01      	cmp	r3, #1
 800ca12:	f040 808c 	bne.w	800cb2e <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ca1c:	2b01      	cmp	r3, #1
 800ca1e:	d101      	bne.n	800ca24 <HAL_SAI_Transmit_DMA+0x40>
 800ca20:	2302      	movs	r3, #2
 800ca22:	e085      	b.n	800cb30 <HAL_SAI_Transmit_DMA+0x14c>
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	2201      	movs	r2, #1
 800ca28:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	68ba      	ldr	r2, [r7, #8]
 800ca30:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	88fa      	ldrh	r2, [r7, #6]
 800ca36:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	88fa      	ldrh	r2, [r7, #6]
 800ca3e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	2200      	movs	r2, #0
 800ca46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	2212      	movs	r2, #18
 800ca4e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca56:	4a38      	ldr	r2, [pc, #224]	; (800cb38 <HAL_SAI_Transmit_DMA+0x154>)
 800ca58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca5e:	4a37      	ldr	r2, [pc, #220]	; (800cb3c <HAL_SAI_Transmit_DMA+0x158>)
 800ca60:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca66:	4a36      	ldr	r2, [pc, #216]	; (800cb40 <HAL_SAI_Transmit_DMA+0x15c>)
 800ca68:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca6e:	2200      	movs	r2, #0
 800ca70:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ca7a:	4619      	mov	r1, r3
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	331c      	adds	r3, #28
 800ca82:	461a      	mov	r2, r3
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ca8a:	f7fd f82f 	bl	8009aec <HAL_DMA_Start_IT>
 800ca8e:	4603      	mov	r3, r0
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d005      	beq.n	800caa0 <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	2200      	movs	r2, #0
 800ca98:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 800ca9c:	2301      	movs	r3, #1
 800ca9e:	e047      	b.n	800cb30 <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800caa0:	2100      	movs	r1, #0
 800caa2:	68f8      	ldr	r0, [r7, #12]
 800caa4:	f000 f986 	bl	800cdb4 <SAI_InterruptFlag>
 800caa8:	4601      	mov	r1, r0
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	691a      	ldr	r2, [r3, #16]
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	430a      	orrs	r2, r1
 800cab6:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	681a      	ldr	r2, [r3, #0]
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800cac6:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800cac8:	e015      	b.n	800caf6 <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800caca:	f7fc fa99 	bl	8009000 <HAL_GetTick>
 800cace:	4602      	mov	r2, r0
 800cad0:	697b      	ldr	r3, [r7, #20]
 800cad2:	1ad3      	subs	r3, r2, r3
 800cad4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cad8:	d90d      	bls.n	800caf6 <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cae0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	2200      	movs	r2, #0
 800caee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800caf2:	2303      	movs	r3, #3
 800caf4:	e01c      	b.n	800cb30 <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	695b      	ldr	r3, [r3, #20]
 800cafc:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d0e2      	beq.n	800caca <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d107      	bne.n	800cb22 <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	681a      	ldr	r2, [r3, #0]
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800cb20:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	2200      	movs	r2, #0
 800cb26:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	e000      	b.n	800cb30 <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 800cb2e:	2302      	movs	r3, #2
  }
}
 800cb30:	4618      	mov	r0, r3
 800cb32:	3718      	adds	r7, #24
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd80      	pop	{r7, pc}
 800cb38:	0800cef1 	.word	0x0800cef1
 800cb3c:	0800ce91 	.word	0x0800ce91
 800cb40:	0800cf0d 	.word	0x0800cf0d

0800cb44 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800cb44:	b480      	push	{r7}
 800cb46:	b083      	sub	sp, #12
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 800cb4c:	bf00      	nop
 800cb4e:	370c      	adds	r7, #12
 800cb50:	46bd      	mov	sp, r7
 800cb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb56:	4770      	bx	lr

0800cb58 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *                    the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800cb58:	b480      	push	{r7}
 800cb5a:	b085      	sub	sp, #20
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	60f8      	str	r0, [r7, #12]
 800cb60:	60b9      	str	r1, [r7, #8]
 800cb62:	607a      	str	r2, [r7, #4]
 800cb64:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	2200      	movs	r2, #0
 800cb6a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	2200      	movs	r2, #0
 800cb70:	639a      	str	r2, [r3, #56]	; 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	685b      	ldr	r3, [r3, #4]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d003      	beq.n	800cb82 <SAI_InitI2S+0x2a>
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	685b      	ldr	r3, [r3, #4]
 800cb7e:	2b02      	cmp	r3, #2
 800cb80:	d103      	bne.n	800cb8a <SAI_InitI2S+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	2200      	movs	r2, #0
 800cb86:	63da      	str	r2, [r3, #60]	; 0x3c
 800cb88:	e002      	b.n	800cb90 <SAI_InitI2S+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	2201      	movs	r2, #1
 800cb8e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800cb96:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cb9e:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	2200      	movs	r2, #0
 800cba4:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	683a      	ldr	r2, [r7, #0]
 800cbaa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1) != 0)
 800cbac:	683b      	ldr	r3, [r7, #0]
 800cbae:	f003 0301 	and.w	r3, r3, #1
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d001      	beq.n	800cbba <SAI_InitI2S+0x62>
  {
    return HAL_ERROR;
 800cbb6:	2301      	movs	r3, #1
 800cbb8:	e076      	b.n	800cca8 <SAI_InitI2S+0x150>
  }

  if (protocol == SAI_I2S_STANDARD)
 800cbba:	68bb      	ldr	r3, [r7, #8]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d107      	bne.n	800cbd0 <SAI_InitI2S+0x78>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800cbcc:	651a      	str	r2, [r3, #80]	; 0x50
 800cbce:	e006      	b.n	800cbde <SAI_InitI2S+0x86>
  }
  else
  {
    /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800cbd6:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	2200      	movs	r2, #0
 800cbdc:	651a      	str	r2, [r3, #80]	; 0x50
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	2b03      	cmp	r3, #3
 800cbe2:	d84f      	bhi.n	800cc84 <SAI_InitI2S+0x12c>
 800cbe4:	a201      	add	r2, pc, #4	; (adr r2, 800cbec <SAI_InitI2S+0x94>)
 800cbe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbea:	bf00      	nop
 800cbec:	0800cbfd 	.word	0x0800cbfd
 800cbf0:	0800cc1f 	.word	0x0800cc1f
 800cbf4:	0800cc41 	.word	0x0800cc41
 800cbf8:	0800cc63 	.word	0x0800cc63

  /* Frame definition */
  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	2280      	movs	r2, #128	; 0x80
 800cc00:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32 * (nbslot / 2);
 800cc02:	683b      	ldr	r3, [r7, #0]
 800cc04:	085b      	lsrs	r3, r3, #1
 800cc06:	015a      	lsls	r2, r3, #5
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 16 * (nbslot / 2);
 800cc0c:	683b      	ldr	r3, [r7, #0]
 800cc0e:	085b      	lsrs	r3, r3, #1
 800cc10:	011a      	lsls	r2, r3, #4
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	2240      	movs	r2, #64	; 0x40
 800cc1a:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800cc1c:	e034      	b.n	800cc88 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	2280      	movs	r2, #128	; 0x80
 800cc22:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 800cc24:	683b      	ldr	r3, [r7, #0]
 800cc26:	085b      	lsrs	r3, r3, #1
 800cc28:	019a      	lsls	r2, r3, #6
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 800cc2e:	683b      	ldr	r3, [r7, #0]
 800cc30:	085b      	lsrs	r3, r3, #1
 800cc32:	015a      	lsls	r2, r3, #5
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	2280      	movs	r2, #128	; 0x80
 800cc3c:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800cc3e:	e023      	b.n	800cc88 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	22c0      	movs	r2, #192	; 0xc0
 800cc44:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 800cc46:	683b      	ldr	r3, [r7, #0]
 800cc48:	085b      	lsrs	r3, r3, #1
 800cc4a:	019a      	lsls	r2, r3, #6
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 800cc50:	683b      	ldr	r3, [r7, #0]
 800cc52:	085b      	lsrs	r3, r3, #1
 800cc54:	015a      	lsls	r2, r3, #5
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	2280      	movs	r2, #128	; 0x80
 800cc5e:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800cc60:	e012      	b.n	800cc88 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	22e0      	movs	r2, #224	; 0xe0
 800cc66:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 64 * (nbslot / 2);
 800cc68:	683b      	ldr	r3, [r7, #0]
 800cc6a:	085b      	lsrs	r3, r3, #1
 800cc6c:	019a      	lsls	r2, r3, #6
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->FrameInit.ActiveFrameLength = 32 * (nbslot / 2);
 800cc72:	683b      	ldr	r3, [r7, #0]
 800cc74:	085b      	lsrs	r3, r3, #1
 800cc76:	015a      	lsls	r2, r3, #5
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	2280      	movs	r2, #128	; 0x80
 800cc80:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800cc82:	e001      	b.n	800cc88 <SAI_InitI2S+0x130>
    default :
      return HAL_ERROR;
 800cc84:	2301      	movs	r3, #1
 800cc86:	e00f      	b.n	800cca8 <SAI_InitI2S+0x150>
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800cc88:	68bb      	ldr	r3, [r7, #8]
 800cc8a:	2b02      	cmp	r3, #2
 800cc8c:	d10b      	bne.n	800cca6 <SAI_InitI2S+0x14e>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	2b01      	cmp	r3, #1
 800cc92:	d102      	bne.n	800cc9a <SAI_InitI2S+0x142>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	2210      	movs	r2, #16
 800cc98:	655a      	str	r2, [r3, #84]	; 0x54
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	2b02      	cmp	r3, #2
 800cc9e:	d102      	bne.n	800cca6 <SAI_InitI2S+0x14e>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	2208      	movs	r2, #8
 800cca4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  return HAL_OK;
 800cca6:	2300      	movs	r3, #0
}
 800cca8:	4618      	mov	r0, r3
 800ccaa:	3714      	adds	r7, #20
 800ccac:	46bd      	mov	sp, r7
 800ccae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb2:	4770      	bx	lr

0800ccb4 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800ccb4:	b480      	push	{r7}
 800ccb6:	b085      	sub	sp, #20
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	60f8      	str	r0, [r7, #12]
 800ccbc:	60b9      	str	r1, [r7, #8]
 800ccbe:	607a      	str	r2, [r7, #4]
 800ccc0:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	2200      	movs	r2, #0
 800cccc:	639a      	str	r2, [r3, #56]	; 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	685b      	ldr	r3, [r3, #4]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d003      	beq.n	800ccde <SAI_InitPCM+0x2a>
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	685b      	ldr	r3, [r3, #4]
 800ccda:	2b02      	cmp	r3, #2
 800ccdc:	d103      	bne.n	800cce6 <SAI_InitPCM+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	2201      	movs	r2, #1
 800cce2:	63da      	str	r2, [r3, #60]	; 0x3c
 800cce4:	e002      	b.n	800ccec <SAI_InitPCM+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	2200      	movs	r2, #0
 800ccea:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	2200      	movs	r2, #0
 800ccf0:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800ccf8:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800cd00:	651a      	str	r2, [r3, #80]	; 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	2200      	movs	r2, #0
 800cd06:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	683a      	ldr	r2, [r7, #0]
 800cd0c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cd14:	661a      	str	r2, [r3, #96]	; 0x60

  if (protocol == SAI_PCM_SHORT)
 800cd16:	68bb      	ldr	r3, [r7, #8]
 800cd18:	2b04      	cmp	r3, #4
 800cd1a:	d103      	bne.n	800cd24 <SAI_InitPCM+0x70>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	2201      	movs	r2, #1
 800cd20:	645a      	str	r2, [r3, #68]	; 0x44
 800cd22:	e002      	b.n	800cd2a <SAI_InitPCM+0x76>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	220d      	movs	r2, #13
 800cd28:	645a      	str	r2, [r3, #68]	; 0x44
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	2b03      	cmp	r3, #3
 800cd2e:	d837      	bhi.n	800cda0 <SAI_InitPCM+0xec>
 800cd30:	a201      	add	r2, pc, #4	; (adr r2, 800cd38 <SAI_InitPCM+0x84>)
 800cd32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd36:	bf00      	nop
 800cd38:	0800cd49 	.word	0x0800cd49
 800cd3c:	0800cd5f 	.word	0x0800cd5f
 800cd40:	0800cd75 	.word	0x0800cd75
 800cd44:	0800cd8b 	.word	0x0800cd8b
  }

  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	2280      	movs	r2, #128	; 0x80
 800cd4c:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 16 * nbslot;
 800cd4e:	683b      	ldr	r3, [r7, #0]
 800cd50:	011a      	lsls	r2, r3, #4
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	2240      	movs	r2, #64	; 0x40
 800cd5a:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800cd5c:	e022      	b.n	800cda4 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	2280      	movs	r2, #128	; 0x80
 800cd62:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32 * nbslot;
 800cd64:	683b      	ldr	r3, [r7, #0]
 800cd66:	015a      	lsls	r2, r3, #5
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	2280      	movs	r2, #128	; 0x80
 800cd70:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800cd72:	e017      	b.n	800cda4 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	22c0      	movs	r2, #192	; 0xc0
 800cd78:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32 * nbslot;
 800cd7a:	683b      	ldr	r3, [r7, #0]
 800cd7c:	015a      	lsls	r2, r3, #5
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	2280      	movs	r2, #128	; 0x80
 800cd86:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800cd88:	e00c      	b.n	800cda4 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	22e0      	movs	r2, #224	; 0xe0
 800cd8e:	635a      	str	r2, [r3, #52]	; 0x34
      hsai->FrameInit.FrameLength = 32 * nbslot;
 800cd90:	683b      	ldr	r3, [r7, #0]
 800cd92:	015a      	lsls	r2, r3, #5
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	641a      	str	r2, [r3, #64]	; 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	2280      	movs	r2, #128	; 0x80
 800cd9c:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 800cd9e:	e001      	b.n	800cda4 <SAI_InitPCM+0xf0>
    default :
      return HAL_ERROR;
 800cda0:	2301      	movs	r3, #1
 800cda2:	e000      	b.n	800cda6 <SAI_InitPCM+0xf2>
  }

  return HAL_OK;
 800cda4:	2300      	movs	r3, #0
}
 800cda6:	4618      	mov	r0, r3
 800cda8:	3714      	adds	r7, #20
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb0:	4770      	bx	lr
 800cdb2:	bf00      	nop

0800cdb4 <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
 800cdb4:	b480      	push	{r7}
 800cdb6:	b085      	sub	sp, #20
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	6078      	str	r0, [r7, #4]
 800cdbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800cdbe:	2301      	movs	r3, #1
 800cdc0:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800cdc2:	683b      	ldr	r3, [r7, #0]
 800cdc4:	2b01      	cmp	r3, #1
 800cdc6:	d103      	bne.n	800cdd0 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	f043 0308 	orr.w	r3, r3, #8
 800cdce:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdd4:	2b08      	cmp	r3, #8
 800cdd6:	d10b      	bne.n	800cdf0 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800cddc:	2b03      	cmp	r3, #3
 800cdde:	d003      	beq.n	800cde8 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	685b      	ldr	r3, [r3, #4]
 800cde4:	2b01      	cmp	r3, #1
 800cde6:	d103      	bne.n	800cdf0 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	f043 0310 	orr.w	r3, r3, #16
 800cdee:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	685b      	ldr	r3, [r3, #4]
 800cdf4:	2b03      	cmp	r3, #3
 800cdf6:	d003      	beq.n	800ce00 <SAI_InterruptFlag+0x4c>
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	685b      	ldr	r3, [r3, #4]
 800cdfc:	2b02      	cmp	r3, #2
 800cdfe:	d104      	bne.n	800ce0a <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800ce06:	60fb      	str	r3, [r7, #12]
 800ce08:	e003      	b.n	800ce12 <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	f043 0304 	orr.w	r3, r3, #4
 800ce10:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800ce12:	68fb      	ldr	r3, [r7, #12]
}
 800ce14:	4618      	mov	r0, r3
 800ce16:	3714      	adds	r7, #20
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1e:	4770      	bx	lr

0800ce20 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800ce20:	b480      	push	{r7}
 800ce22:	b085      	sub	sp, #20
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800ce28:	4b17      	ldr	r3, [pc, #92]	; (800ce88 <SAI_Disable+0x68>)
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	4a17      	ldr	r2, [pc, #92]	; (800ce8c <SAI_Disable+0x6c>)
 800ce2e:	fba2 2303 	umull	r2, r3, r2, r3
 800ce32:	0b1b      	lsrs	r3, r3, #12
 800ce34:	009b      	lsls	r3, r3, #2
 800ce36:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800ce38:	2300      	movs	r3, #0
 800ce3a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	681a      	ldr	r2, [r3, #0]
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800ce4a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	1e5a      	subs	r2, r3, #1
 800ce50:	60fa      	str	r2, [r7, #12]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d10a      	bne.n	800ce6c <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ce5c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800ce66:	2303      	movs	r3, #3
 800ce68:	72fb      	strb	r3, [r7, #11]
      break;
 800ce6a:	e006      	b.n	800ce7a <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d1e8      	bne.n	800ce4c <SAI_Disable+0x2c>

  return status;
 800ce7a:	7afb      	ldrb	r3, [r7, #11]
}
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	3714      	adds	r7, #20
 800ce80:	46bd      	mov	sp, r7
 800ce82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce86:	4770      	bx	lr
 800ce88:	20000008 	.word	0x20000008
 800ce8c:	95cbec1b 	.word	0x95cbec1b

0800ce90 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b084      	sub	sp, #16
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce9c:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	69db      	ldr	r3, [r3, #28]
 800cea2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cea6:	d01c      	beq.n	800cee2 <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	2200      	movs	r2, #0
 800ceac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	681a      	ldr	r2, [r3, #0]
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800cebe:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800cec0:	2100      	movs	r1, #0
 800cec2:	68f8      	ldr	r0, [r7, #12]
 800cec4:	f7ff ff76 	bl	800cdb4 <SAI_InterruptFlag>
 800cec8:	4603      	mov	r3, r0
 800ceca:	43d9      	mvns	r1, r3
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	691a      	ldr	r2, [r3, #16]
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	400a      	ands	r2, r1
 800ced8:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	2201      	movs	r2, #1
 800cede:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800cee2:	68f8      	ldr	r0, [r7, #12]
 800cee4:	f7f5 fc26 	bl	8002734 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800cee8:	bf00      	nop
 800ceea:	3710      	adds	r7, #16
 800ceec:	46bd      	mov	sp, r7
 800ceee:	bd80      	pop	{r7, pc}

0800cef0 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b084      	sub	sp, #16
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cefc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800cefe:	68f8      	ldr	r0, [r7, #12]
 800cf00:	f7f5 fbde 	bl	80026c0 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800cf04:	bf00      	nop
 800cf06:	3710      	adds	r7, #16
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	bd80      	pop	{r7, pc}

0800cf0c <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b084      	sub	sp, #16
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf18:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cf20:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf30:	2b01      	cmp	r3, #1
 800cf32:	d004      	beq.n	800cf3e <SAI_DMAError+0x32>
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf3a:	2b01      	cmp	r3, #1
 800cf3c:	d112      	bne.n	800cf64 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	681a      	ldr	r2, [r3, #0]
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800cf4c:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 800cf4e:	68f8      	ldr	r0, [r7, #12]
 800cf50:	f7ff ff66 	bl	800ce20 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	2201      	movs	r2, #1
 800cf58:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	2200      	movs	r2, #0
 800cf60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800cf64:	68f8      	ldr	r0, [r7, #12]
 800cf66:	f7ff fded 	bl	800cb44 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800cf6a:	bf00      	nop
 800cf6c:	3710      	adds	r7, #16
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	bd80      	pop	{r7, pc}

0800cf72 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cf72:	b580      	push	{r7, lr}
 800cf74:	b082      	sub	sp, #8
 800cf76:	af00      	add	r7, sp, #0
 800cf78:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d101      	bne.n	800cf84 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cf80:	2301      	movs	r3, #1
 800cf82:	e049      	b.n	800d018 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cf8a:	b2db      	uxtb	r3, r3
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d106      	bne.n	800cf9e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	2200      	movs	r2, #0
 800cf94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cf98:	6878      	ldr	r0, [r7, #4]
 800cf9a:	f000 f841 	bl	800d020 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	2202      	movs	r2, #2
 800cfa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	681a      	ldr	r2, [r3, #0]
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	3304      	adds	r3, #4
 800cfae:	4619      	mov	r1, r3
 800cfb0:	4610      	mov	r0, r2
 800cfb2:	f000 f9ff 	bl	800d3b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	2201      	movs	r2, #1
 800cfba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	2201      	movs	r2, #1
 800cfc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	2201      	movs	r2, #1
 800cfca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	2201      	movs	r2, #1
 800cfd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	2201      	movs	r2, #1
 800cfda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	2201      	movs	r2, #1
 800cfe2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	2201      	movs	r2, #1
 800cfea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	2201      	movs	r2, #1
 800cff2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	2201      	movs	r2, #1
 800cffa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	2201      	movs	r2, #1
 800d002:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	2201      	movs	r2, #1
 800d00a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	2201      	movs	r2, #1
 800d012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d016:	2300      	movs	r3, #0
}
 800d018:	4618      	mov	r0, r3
 800d01a:	3708      	adds	r7, #8
 800d01c:	46bd      	mov	sp, r7
 800d01e:	bd80      	pop	{r7, pc}

0800d020 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800d020:	b480      	push	{r7}
 800d022:	b083      	sub	sp, #12
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800d028:	bf00      	nop
 800d02a:	370c      	adds	r7, #12
 800d02c:	46bd      	mov	sp, r7
 800d02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d032:	4770      	bx	lr

0800d034 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d034:	b480      	push	{r7}
 800d036:	b085      	sub	sp, #20
 800d038:	af00      	add	r7, sp, #0
 800d03a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d042:	b2db      	uxtb	r3, r3
 800d044:	2b01      	cmp	r3, #1
 800d046:	d001      	beq.n	800d04c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d048:	2301      	movs	r3, #1
 800d04a:	e054      	b.n	800d0f6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	2202      	movs	r2, #2
 800d050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	68da      	ldr	r2, [r3, #12]
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	f042 0201 	orr.w	r2, r2, #1
 800d062:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	4a26      	ldr	r2, [pc, #152]	; (800d104 <HAL_TIM_Base_Start_IT+0xd0>)
 800d06a:	4293      	cmp	r3, r2
 800d06c:	d022      	beq.n	800d0b4 <HAL_TIM_Base_Start_IT+0x80>
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d076:	d01d      	beq.n	800d0b4 <HAL_TIM_Base_Start_IT+0x80>
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	4a22      	ldr	r2, [pc, #136]	; (800d108 <HAL_TIM_Base_Start_IT+0xd4>)
 800d07e:	4293      	cmp	r3, r2
 800d080:	d018      	beq.n	800d0b4 <HAL_TIM_Base_Start_IT+0x80>
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	4a21      	ldr	r2, [pc, #132]	; (800d10c <HAL_TIM_Base_Start_IT+0xd8>)
 800d088:	4293      	cmp	r3, r2
 800d08a:	d013      	beq.n	800d0b4 <HAL_TIM_Base_Start_IT+0x80>
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	4a1f      	ldr	r2, [pc, #124]	; (800d110 <HAL_TIM_Base_Start_IT+0xdc>)
 800d092:	4293      	cmp	r3, r2
 800d094:	d00e      	beq.n	800d0b4 <HAL_TIM_Base_Start_IT+0x80>
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	4a1e      	ldr	r2, [pc, #120]	; (800d114 <HAL_TIM_Base_Start_IT+0xe0>)
 800d09c:	4293      	cmp	r3, r2
 800d09e:	d009      	beq.n	800d0b4 <HAL_TIM_Base_Start_IT+0x80>
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	4a1c      	ldr	r2, [pc, #112]	; (800d118 <HAL_TIM_Base_Start_IT+0xe4>)
 800d0a6:	4293      	cmp	r3, r2
 800d0a8:	d004      	beq.n	800d0b4 <HAL_TIM_Base_Start_IT+0x80>
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	4a1b      	ldr	r2, [pc, #108]	; (800d11c <HAL_TIM_Base_Start_IT+0xe8>)
 800d0b0:	4293      	cmp	r3, r2
 800d0b2:	d115      	bne.n	800d0e0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	689a      	ldr	r2, [r3, #8]
 800d0ba:	4b19      	ldr	r3, [pc, #100]	; (800d120 <HAL_TIM_Base_Start_IT+0xec>)
 800d0bc:	4013      	ands	r3, r2
 800d0be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	2b06      	cmp	r3, #6
 800d0c4:	d015      	beq.n	800d0f2 <HAL_TIM_Base_Start_IT+0xbe>
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d0cc:	d011      	beq.n	800d0f2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	681a      	ldr	r2, [r3, #0]
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	f042 0201 	orr.w	r2, r2, #1
 800d0dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d0de:	e008      	b.n	800d0f2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	681a      	ldr	r2, [r3, #0]
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	f042 0201 	orr.w	r2, r2, #1
 800d0ee:	601a      	str	r2, [r3, #0]
 800d0f0:	e000      	b.n	800d0f4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d0f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d0f4:	2300      	movs	r3, #0
}
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	3714      	adds	r7, #20
 800d0fa:	46bd      	mov	sp, r7
 800d0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d100:	4770      	bx	lr
 800d102:	bf00      	nop
 800d104:	40010000 	.word	0x40010000
 800d108:	40000400 	.word	0x40000400
 800d10c:	40000800 	.word	0x40000800
 800d110:	40000c00 	.word	0x40000c00
 800d114:	40010400 	.word	0x40010400
 800d118:	40014000 	.word	0x40014000
 800d11c:	40001800 	.word	0x40001800
 800d120:	00010007 	.word	0x00010007

0800d124 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d124:	b580      	push	{r7, lr}
 800d126:	b082      	sub	sp, #8
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	691b      	ldr	r3, [r3, #16]
 800d132:	f003 0302 	and.w	r3, r3, #2
 800d136:	2b02      	cmp	r3, #2
 800d138:	d122      	bne.n	800d180 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	68db      	ldr	r3, [r3, #12]
 800d140:	f003 0302 	and.w	r3, r3, #2
 800d144:	2b02      	cmp	r3, #2
 800d146:	d11b      	bne.n	800d180 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	f06f 0202 	mvn.w	r2, #2
 800d150:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	2201      	movs	r2, #1
 800d156:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	699b      	ldr	r3, [r3, #24]
 800d15e:	f003 0303 	and.w	r3, r3, #3
 800d162:	2b00      	cmp	r3, #0
 800d164:	d003      	beq.n	800d16e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d166:	6878      	ldr	r0, [r7, #4]
 800d168:	f000 f905 	bl	800d376 <HAL_TIM_IC_CaptureCallback>
 800d16c:	e005      	b.n	800d17a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d16e:	6878      	ldr	r0, [r7, #4]
 800d170:	f000 f8f7 	bl	800d362 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d174:	6878      	ldr	r0, [r7, #4]
 800d176:	f000 f908 	bl	800d38a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	2200      	movs	r2, #0
 800d17e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	691b      	ldr	r3, [r3, #16]
 800d186:	f003 0304 	and.w	r3, r3, #4
 800d18a:	2b04      	cmp	r3, #4
 800d18c:	d122      	bne.n	800d1d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	68db      	ldr	r3, [r3, #12]
 800d194:	f003 0304 	and.w	r3, r3, #4
 800d198:	2b04      	cmp	r3, #4
 800d19a:	d11b      	bne.n	800d1d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	f06f 0204 	mvn.w	r2, #4
 800d1a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	2202      	movs	r2, #2
 800d1aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	699b      	ldr	r3, [r3, #24]
 800d1b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d003      	beq.n	800d1c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d1ba:	6878      	ldr	r0, [r7, #4]
 800d1bc:	f000 f8db 	bl	800d376 <HAL_TIM_IC_CaptureCallback>
 800d1c0:	e005      	b.n	800d1ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d1c2:	6878      	ldr	r0, [r7, #4]
 800d1c4:	f000 f8cd 	bl	800d362 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d1c8:	6878      	ldr	r0, [r7, #4]
 800d1ca:	f000 f8de 	bl	800d38a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	2200      	movs	r2, #0
 800d1d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	691b      	ldr	r3, [r3, #16]
 800d1da:	f003 0308 	and.w	r3, r3, #8
 800d1de:	2b08      	cmp	r3, #8
 800d1e0:	d122      	bne.n	800d228 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	68db      	ldr	r3, [r3, #12]
 800d1e8:	f003 0308 	and.w	r3, r3, #8
 800d1ec:	2b08      	cmp	r3, #8
 800d1ee:	d11b      	bne.n	800d228 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	f06f 0208 	mvn.w	r2, #8
 800d1f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	2204      	movs	r2, #4
 800d1fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	69db      	ldr	r3, [r3, #28]
 800d206:	f003 0303 	and.w	r3, r3, #3
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d003      	beq.n	800d216 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d20e:	6878      	ldr	r0, [r7, #4]
 800d210:	f000 f8b1 	bl	800d376 <HAL_TIM_IC_CaptureCallback>
 800d214:	e005      	b.n	800d222 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d216:	6878      	ldr	r0, [r7, #4]
 800d218:	f000 f8a3 	bl	800d362 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d21c:	6878      	ldr	r0, [r7, #4]
 800d21e:	f000 f8b4 	bl	800d38a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	2200      	movs	r2, #0
 800d226:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	691b      	ldr	r3, [r3, #16]
 800d22e:	f003 0310 	and.w	r3, r3, #16
 800d232:	2b10      	cmp	r3, #16
 800d234:	d122      	bne.n	800d27c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	68db      	ldr	r3, [r3, #12]
 800d23c:	f003 0310 	and.w	r3, r3, #16
 800d240:	2b10      	cmp	r3, #16
 800d242:	d11b      	bne.n	800d27c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	f06f 0210 	mvn.w	r2, #16
 800d24c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	2208      	movs	r2, #8
 800d252:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	69db      	ldr	r3, [r3, #28]
 800d25a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d003      	beq.n	800d26a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d262:	6878      	ldr	r0, [r7, #4]
 800d264:	f000 f887 	bl	800d376 <HAL_TIM_IC_CaptureCallback>
 800d268:	e005      	b.n	800d276 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d26a:	6878      	ldr	r0, [r7, #4]
 800d26c:	f000 f879 	bl	800d362 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d270:	6878      	ldr	r0, [r7, #4]
 800d272:	f000 f88a 	bl	800d38a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	2200      	movs	r2, #0
 800d27a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	691b      	ldr	r3, [r3, #16]
 800d282:	f003 0301 	and.w	r3, r3, #1
 800d286:	2b01      	cmp	r3, #1
 800d288:	d10e      	bne.n	800d2a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	68db      	ldr	r3, [r3, #12]
 800d290:	f003 0301 	and.w	r3, r3, #1
 800d294:	2b01      	cmp	r3, #1
 800d296:	d107      	bne.n	800d2a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	f06f 0201 	mvn.w	r2, #1
 800d2a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d2a2:	6878      	ldr	r0, [r7, #4]
 800d2a4:	f7f5 fafc 	bl	80028a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	691b      	ldr	r3, [r3, #16]
 800d2ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d2b2:	2b80      	cmp	r3, #128	; 0x80
 800d2b4:	d10e      	bne.n	800d2d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	68db      	ldr	r3, [r3, #12]
 800d2bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d2c0:	2b80      	cmp	r3, #128	; 0x80
 800d2c2:	d107      	bne.n	800d2d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d2cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d2ce:	6878      	ldr	r0, [r7, #4]
 800d2d0:	f000 f91a 	bl	800d508 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	691b      	ldr	r3, [r3, #16]
 800d2da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d2de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d2e2:	d10e      	bne.n	800d302 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	68db      	ldr	r3, [r3, #12]
 800d2ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d2ee:	2b80      	cmp	r3, #128	; 0x80
 800d2f0:	d107      	bne.n	800d302 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d2fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d2fc:	6878      	ldr	r0, [r7, #4]
 800d2fe:	f000 f90d 	bl	800d51c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	691b      	ldr	r3, [r3, #16]
 800d308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d30c:	2b40      	cmp	r3, #64	; 0x40
 800d30e:	d10e      	bne.n	800d32e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	68db      	ldr	r3, [r3, #12]
 800d316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d31a:	2b40      	cmp	r3, #64	; 0x40
 800d31c:	d107      	bne.n	800d32e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d326:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d328:	6878      	ldr	r0, [r7, #4]
 800d32a:	f000 f838 	bl	800d39e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	691b      	ldr	r3, [r3, #16]
 800d334:	f003 0320 	and.w	r3, r3, #32
 800d338:	2b20      	cmp	r3, #32
 800d33a:	d10e      	bne.n	800d35a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	68db      	ldr	r3, [r3, #12]
 800d342:	f003 0320 	and.w	r3, r3, #32
 800d346:	2b20      	cmp	r3, #32
 800d348:	d107      	bne.n	800d35a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	f06f 0220 	mvn.w	r2, #32
 800d352:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d354:	6878      	ldr	r0, [r7, #4]
 800d356:	f000 f8cd 	bl	800d4f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d35a:	bf00      	nop
 800d35c:	3708      	adds	r7, #8
 800d35e:	46bd      	mov	sp, r7
 800d360:	bd80      	pop	{r7, pc}

0800d362 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d362:	b480      	push	{r7}
 800d364:	b083      	sub	sp, #12
 800d366:	af00      	add	r7, sp, #0
 800d368:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d36a:	bf00      	nop
 800d36c:	370c      	adds	r7, #12
 800d36e:	46bd      	mov	sp, r7
 800d370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d374:	4770      	bx	lr

0800d376 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d376:	b480      	push	{r7}
 800d378:	b083      	sub	sp, #12
 800d37a:	af00      	add	r7, sp, #0
 800d37c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d37e:	bf00      	nop
 800d380:	370c      	adds	r7, #12
 800d382:	46bd      	mov	sp, r7
 800d384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d388:	4770      	bx	lr

0800d38a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d38a:	b480      	push	{r7}
 800d38c:	b083      	sub	sp, #12
 800d38e:	af00      	add	r7, sp, #0
 800d390:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d392:	bf00      	nop
 800d394:	370c      	adds	r7, #12
 800d396:	46bd      	mov	sp, r7
 800d398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39c:	4770      	bx	lr

0800d39e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d39e:	b480      	push	{r7}
 800d3a0:	b083      	sub	sp, #12
 800d3a2:	af00      	add	r7, sp, #0
 800d3a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d3a6:	bf00      	nop
 800d3a8:	370c      	adds	r7, #12
 800d3aa:	46bd      	mov	sp, r7
 800d3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b0:	4770      	bx	lr
	...

0800d3b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d3b4:	b480      	push	{r7}
 800d3b6:	b085      	sub	sp, #20
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	6078      	str	r0, [r7, #4]
 800d3bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	4a40      	ldr	r2, [pc, #256]	; (800d4c8 <TIM_Base_SetConfig+0x114>)
 800d3c8:	4293      	cmp	r3, r2
 800d3ca:	d013      	beq.n	800d3f4 <TIM_Base_SetConfig+0x40>
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d3d2:	d00f      	beq.n	800d3f4 <TIM_Base_SetConfig+0x40>
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	4a3d      	ldr	r2, [pc, #244]	; (800d4cc <TIM_Base_SetConfig+0x118>)
 800d3d8:	4293      	cmp	r3, r2
 800d3da:	d00b      	beq.n	800d3f4 <TIM_Base_SetConfig+0x40>
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	4a3c      	ldr	r2, [pc, #240]	; (800d4d0 <TIM_Base_SetConfig+0x11c>)
 800d3e0:	4293      	cmp	r3, r2
 800d3e2:	d007      	beq.n	800d3f4 <TIM_Base_SetConfig+0x40>
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	4a3b      	ldr	r2, [pc, #236]	; (800d4d4 <TIM_Base_SetConfig+0x120>)
 800d3e8:	4293      	cmp	r3, r2
 800d3ea:	d003      	beq.n	800d3f4 <TIM_Base_SetConfig+0x40>
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	4a3a      	ldr	r2, [pc, #232]	; (800d4d8 <TIM_Base_SetConfig+0x124>)
 800d3f0:	4293      	cmp	r3, r2
 800d3f2:	d108      	bne.n	800d406 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d3fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d3fc:	683b      	ldr	r3, [r7, #0]
 800d3fe:	685b      	ldr	r3, [r3, #4]
 800d400:	68fa      	ldr	r2, [r7, #12]
 800d402:	4313      	orrs	r3, r2
 800d404:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	4a2f      	ldr	r2, [pc, #188]	; (800d4c8 <TIM_Base_SetConfig+0x114>)
 800d40a:	4293      	cmp	r3, r2
 800d40c:	d02b      	beq.n	800d466 <TIM_Base_SetConfig+0xb2>
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d414:	d027      	beq.n	800d466 <TIM_Base_SetConfig+0xb2>
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	4a2c      	ldr	r2, [pc, #176]	; (800d4cc <TIM_Base_SetConfig+0x118>)
 800d41a:	4293      	cmp	r3, r2
 800d41c:	d023      	beq.n	800d466 <TIM_Base_SetConfig+0xb2>
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	4a2b      	ldr	r2, [pc, #172]	; (800d4d0 <TIM_Base_SetConfig+0x11c>)
 800d422:	4293      	cmp	r3, r2
 800d424:	d01f      	beq.n	800d466 <TIM_Base_SetConfig+0xb2>
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	4a2a      	ldr	r2, [pc, #168]	; (800d4d4 <TIM_Base_SetConfig+0x120>)
 800d42a:	4293      	cmp	r3, r2
 800d42c:	d01b      	beq.n	800d466 <TIM_Base_SetConfig+0xb2>
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	4a29      	ldr	r2, [pc, #164]	; (800d4d8 <TIM_Base_SetConfig+0x124>)
 800d432:	4293      	cmp	r3, r2
 800d434:	d017      	beq.n	800d466 <TIM_Base_SetConfig+0xb2>
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	4a28      	ldr	r2, [pc, #160]	; (800d4dc <TIM_Base_SetConfig+0x128>)
 800d43a:	4293      	cmp	r3, r2
 800d43c:	d013      	beq.n	800d466 <TIM_Base_SetConfig+0xb2>
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	4a27      	ldr	r2, [pc, #156]	; (800d4e0 <TIM_Base_SetConfig+0x12c>)
 800d442:	4293      	cmp	r3, r2
 800d444:	d00f      	beq.n	800d466 <TIM_Base_SetConfig+0xb2>
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	4a26      	ldr	r2, [pc, #152]	; (800d4e4 <TIM_Base_SetConfig+0x130>)
 800d44a:	4293      	cmp	r3, r2
 800d44c:	d00b      	beq.n	800d466 <TIM_Base_SetConfig+0xb2>
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	4a25      	ldr	r2, [pc, #148]	; (800d4e8 <TIM_Base_SetConfig+0x134>)
 800d452:	4293      	cmp	r3, r2
 800d454:	d007      	beq.n	800d466 <TIM_Base_SetConfig+0xb2>
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	4a24      	ldr	r2, [pc, #144]	; (800d4ec <TIM_Base_SetConfig+0x138>)
 800d45a:	4293      	cmp	r3, r2
 800d45c:	d003      	beq.n	800d466 <TIM_Base_SetConfig+0xb2>
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	4a23      	ldr	r2, [pc, #140]	; (800d4f0 <TIM_Base_SetConfig+0x13c>)
 800d462:	4293      	cmp	r3, r2
 800d464:	d108      	bne.n	800d478 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d46c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d46e:	683b      	ldr	r3, [r7, #0]
 800d470:	68db      	ldr	r3, [r3, #12]
 800d472:	68fa      	ldr	r2, [r7, #12]
 800d474:	4313      	orrs	r3, r2
 800d476:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d47e:	683b      	ldr	r3, [r7, #0]
 800d480:	695b      	ldr	r3, [r3, #20]
 800d482:	4313      	orrs	r3, r2
 800d484:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	68fa      	ldr	r2, [r7, #12]
 800d48a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d48c:	683b      	ldr	r3, [r7, #0]
 800d48e:	689a      	ldr	r2, [r3, #8]
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d494:	683b      	ldr	r3, [r7, #0]
 800d496:	681a      	ldr	r2, [r3, #0]
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	4a0a      	ldr	r2, [pc, #40]	; (800d4c8 <TIM_Base_SetConfig+0x114>)
 800d4a0:	4293      	cmp	r3, r2
 800d4a2:	d003      	beq.n	800d4ac <TIM_Base_SetConfig+0xf8>
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	4a0c      	ldr	r2, [pc, #48]	; (800d4d8 <TIM_Base_SetConfig+0x124>)
 800d4a8:	4293      	cmp	r3, r2
 800d4aa:	d103      	bne.n	800d4b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d4ac:	683b      	ldr	r3, [r7, #0]
 800d4ae:	691a      	ldr	r2, [r3, #16]
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	2201      	movs	r2, #1
 800d4b8:	615a      	str	r2, [r3, #20]
}
 800d4ba:	bf00      	nop
 800d4bc:	3714      	adds	r7, #20
 800d4be:	46bd      	mov	sp, r7
 800d4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c4:	4770      	bx	lr
 800d4c6:	bf00      	nop
 800d4c8:	40010000 	.word	0x40010000
 800d4cc:	40000400 	.word	0x40000400
 800d4d0:	40000800 	.word	0x40000800
 800d4d4:	40000c00 	.word	0x40000c00
 800d4d8:	40010400 	.word	0x40010400
 800d4dc:	40014000 	.word	0x40014000
 800d4e0:	40014400 	.word	0x40014400
 800d4e4:	40014800 	.word	0x40014800
 800d4e8:	40001800 	.word	0x40001800
 800d4ec:	40001c00 	.word	0x40001c00
 800d4f0:	40002000 	.word	0x40002000

0800d4f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d4f4:	b480      	push	{r7}
 800d4f6:	b083      	sub	sp, #12
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d4fc:	bf00      	nop
 800d4fe:	370c      	adds	r7, #12
 800d500:	46bd      	mov	sp, r7
 800d502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d506:	4770      	bx	lr

0800d508 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d508:	b480      	push	{r7}
 800d50a:	b083      	sub	sp, #12
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d510:	bf00      	nop
 800d512:	370c      	adds	r7, #12
 800d514:	46bd      	mov	sp, r7
 800d516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51a:	4770      	bx	lr

0800d51c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d51c:	b480      	push	{r7}
 800d51e:	b083      	sub	sp, #12
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d524:	bf00      	nop
 800d526:	370c      	adds	r7, #12
 800d528:	46bd      	mov	sp, r7
 800d52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52e:	4770      	bx	lr

0800d530 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d530:	b580      	push	{r7, lr}
 800d532:	b082      	sub	sp, #8
 800d534:	af00      	add	r7, sp, #0
 800d536:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d101      	bne.n	800d542 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d53e:	2301      	movs	r3, #1
 800d540:	e040      	b.n	800d5c4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d546:	2b00      	cmp	r3, #0
 800d548:	d106      	bne.n	800d558 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	2200      	movs	r2, #0
 800d54e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d552:	6878      	ldr	r0, [r7, #4]
 800d554:	f7f6 fa38 	bl	80039c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	2224      	movs	r2, #36	; 0x24
 800d55c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	681a      	ldr	r2, [r3, #0]
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	f022 0201 	bic.w	r2, r2, #1
 800d56c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d56e:	6878      	ldr	r0, [r7, #4]
 800d570:	f000 f8c0 	bl	800d6f4 <UART_SetConfig>
 800d574:	4603      	mov	r3, r0
 800d576:	2b01      	cmp	r3, #1
 800d578:	d101      	bne.n	800d57e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800d57a:	2301      	movs	r3, #1
 800d57c:	e022      	b.n	800d5c4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d582:	2b00      	cmp	r3, #0
 800d584:	d002      	beq.n	800d58c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800d586:	6878      	ldr	r0, [r7, #4]
 800d588:	f000 fb16 	bl	800dbb8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	685a      	ldr	r2, [r3, #4]
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d59a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	689a      	ldr	r2, [r3, #8]
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d5aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	681a      	ldr	r2, [r3, #0]
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	f042 0201 	orr.w	r2, r2, #1
 800d5ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d5bc:	6878      	ldr	r0, [r7, #4]
 800d5be:	f000 fb9d 	bl	800dcfc <UART_CheckIdleState>
 800d5c2:	4603      	mov	r3, r0
}
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	3708      	adds	r7, #8
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	bd80      	pop	{r7, pc}

0800d5cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b08a      	sub	sp, #40	; 0x28
 800d5d0:	af02      	add	r7, sp, #8
 800d5d2:	60f8      	str	r0, [r7, #12]
 800d5d4:	60b9      	str	r1, [r7, #8]
 800d5d6:	603b      	str	r3, [r7, #0]
 800d5d8:	4613      	mov	r3, r2
 800d5da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d5e0:	2b20      	cmp	r3, #32
 800d5e2:	f040 8081 	bne.w	800d6e8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800d5e6:	68bb      	ldr	r3, [r7, #8]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d002      	beq.n	800d5f2 <HAL_UART_Transmit+0x26>
 800d5ec:	88fb      	ldrh	r3, [r7, #6]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d101      	bne.n	800d5f6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800d5f2:	2301      	movs	r3, #1
 800d5f4:	e079      	b.n	800d6ea <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800d5fc:	2b01      	cmp	r3, #1
 800d5fe:	d101      	bne.n	800d604 <HAL_UART_Transmit+0x38>
 800d600:	2302      	movs	r3, #2
 800d602:	e072      	b.n	800d6ea <HAL_UART_Transmit+0x11e>
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	2201      	movs	r2, #1
 800d608:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	2200      	movs	r2, #0
 800d610:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	2221      	movs	r2, #33	; 0x21
 800d618:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d61a:	f7fb fcf1 	bl	8009000 <HAL_GetTick>
 800d61e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	88fa      	ldrh	r2, [r7, #6]
 800d624:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	88fa      	ldrh	r2, [r7, #6]
 800d62c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	689b      	ldr	r3, [r3, #8]
 800d634:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d638:	d108      	bne.n	800d64c <HAL_UART_Transmit+0x80>
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	691b      	ldr	r3, [r3, #16]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d104      	bne.n	800d64c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800d642:	2300      	movs	r3, #0
 800d644:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d646:	68bb      	ldr	r3, [r7, #8]
 800d648:	61bb      	str	r3, [r7, #24]
 800d64a:	e003      	b.n	800d654 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800d64c:	68bb      	ldr	r3, [r7, #8]
 800d64e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d650:	2300      	movs	r3, #0
 800d652:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	2200      	movs	r2, #0
 800d658:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800d65c:	e02c      	b.n	800d6b8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d65e:	683b      	ldr	r3, [r7, #0]
 800d660:	9300      	str	r3, [sp, #0]
 800d662:	697b      	ldr	r3, [r7, #20]
 800d664:	2200      	movs	r2, #0
 800d666:	2180      	movs	r1, #128	; 0x80
 800d668:	68f8      	ldr	r0, [r7, #12]
 800d66a:	f000 fb90 	bl	800dd8e <UART_WaitOnFlagUntilTimeout>
 800d66e:	4603      	mov	r3, r0
 800d670:	2b00      	cmp	r3, #0
 800d672:	d001      	beq.n	800d678 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800d674:	2303      	movs	r3, #3
 800d676:	e038      	b.n	800d6ea <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800d678:	69fb      	ldr	r3, [r7, #28]
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d10b      	bne.n	800d696 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d67e:	69bb      	ldr	r3, [r7, #24]
 800d680:	881b      	ldrh	r3, [r3, #0]
 800d682:	461a      	mov	r2, r3
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d68c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d68e:	69bb      	ldr	r3, [r7, #24]
 800d690:	3302      	adds	r3, #2
 800d692:	61bb      	str	r3, [r7, #24]
 800d694:	e007      	b.n	800d6a6 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d696:	69fb      	ldr	r3, [r7, #28]
 800d698:	781a      	ldrb	r2, [r3, #0]
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d6a0:	69fb      	ldr	r3, [r7, #28]
 800d6a2:	3301      	adds	r3, #1
 800d6a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d6ac:	b29b      	uxth	r3, r3
 800d6ae:	3b01      	subs	r3, #1
 800d6b0:	b29a      	uxth	r2, r3
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d6be:	b29b      	uxth	r3, r3
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d1cc      	bne.n	800d65e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d6c4:	683b      	ldr	r3, [r7, #0]
 800d6c6:	9300      	str	r3, [sp, #0]
 800d6c8:	697b      	ldr	r3, [r7, #20]
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	2140      	movs	r1, #64	; 0x40
 800d6ce:	68f8      	ldr	r0, [r7, #12]
 800d6d0:	f000 fb5d 	bl	800dd8e <UART_WaitOnFlagUntilTimeout>
 800d6d4:	4603      	mov	r3, r0
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d001      	beq.n	800d6de <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800d6da:	2303      	movs	r3, #3
 800d6dc:	e005      	b.n	800d6ea <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	2220      	movs	r2, #32
 800d6e2:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	e000      	b.n	800d6ea <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800d6e8:	2302      	movs	r3, #2
  }
}
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	3720      	adds	r7, #32
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	bd80      	pop	{r7, pc}
	...

0800d6f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b088      	sub	sp, #32
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	689a      	ldr	r2, [r3, #8]
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	691b      	ldr	r3, [r3, #16]
 800d708:	431a      	orrs	r2, r3
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	695b      	ldr	r3, [r3, #20]
 800d70e:	431a      	orrs	r2, r3
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	69db      	ldr	r3, [r3, #28]
 800d714:	4313      	orrs	r3, r2
 800d716:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	681a      	ldr	r2, [r3, #0]
 800d71e:	4ba7      	ldr	r3, [pc, #668]	; (800d9bc <UART_SetConfig+0x2c8>)
 800d720:	4013      	ands	r3, r2
 800d722:	687a      	ldr	r2, [r7, #4]
 800d724:	6812      	ldr	r2, [r2, #0]
 800d726:	6979      	ldr	r1, [r7, #20]
 800d728:	430b      	orrs	r3, r1
 800d72a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	685b      	ldr	r3, [r3, #4]
 800d732:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	68da      	ldr	r2, [r3, #12]
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	430a      	orrs	r2, r1
 800d740:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	699b      	ldr	r3, [r3, #24]
 800d746:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	6a1b      	ldr	r3, [r3, #32]
 800d74c:	697a      	ldr	r2, [r7, #20]
 800d74e:	4313      	orrs	r3, r2
 800d750:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	689b      	ldr	r3, [r3, #8]
 800d758:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	697a      	ldr	r2, [r7, #20]
 800d762:	430a      	orrs	r2, r1
 800d764:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	4a95      	ldr	r2, [pc, #596]	; (800d9c0 <UART_SetConfig+0x2cc>)
 800d76c:	4293      	cmp	r3, r2
 800d76e:	d120      	bne.n	800d7b2 <UART_SetConfig+0xbe>
 800d770:	4b94      	ldr	r3, [pc, #592]	; (800d9c4 <UART_SetConfig+0x2d0>)
 800d772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d776:	f003 0303 	and.w	r3, r3, #3
 800d77a:	2b03      	cmp	r3, #3
 800d77c:	d816      	bhi.n	800d7ac <UART_SetConfig+0xb8>
 800d77e:	a201      	add	r2, pc, #4	; (adr r2, 800d784 <UART_SetConfig+0x90>)
 800d780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d784:	0800d795 	.word	0x0800d795
 800d788:	0800d7a1 	.word	0x0800d7a1
 800d78c:	0800d79b 	.word	0x0800d79b
 800d790:	0800d7a7 	.word	0x0800d7a7
 800d794:	2301      	movs	r3, #1
 800d796:	77fb      	strb	r3, [r7, #31]
 800d798:	e14f      	b.n	800da3a <UART_SetConfig+0x346>
 800d79a:	2302      	movs	r3, #2
 800d79c:	77fb      	strb	r3, [r7, #31]
 800d79e:	e14c      	b.n	800da3a <UART_SetConfig+0x346>
 800d7a0:	2304      	movs	r3, #4
 800d7a2:	77fb      	strb	r3, [r7, #31]
 800d7a4:	e149      	b.n	800da3a <UART_SetConfig+0x346>
 800d7a6:	2308      	movs	r3, #8
 800d7a8:	77fb      	strb	r3, [r7, #31]
 800d7aa:	e146      	b.n	800da3a <UART_SetConfig+0x346>
 800d7ac:	2310      	movs	r3, #16
 800d7ae:	77fb      	strb	r3, [r7, #31]
 800d7b0:	e143      	b.n	800da3a <UART_SetConfig+0x346>
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	4a84      	ldr	r2, [pc, #528]	; (800d9c8 <UART_SetConfig+0x2d4>)
 800d7b8:	4293      	cmp	r3, r2
 800d7ba:	d132      	bne.n	800d822 <UART_SetConfig+0x12e>
 800d7bc:	4b81      	ldr	r3, [pc, #516]	; (800d9c4 <UART_SetConfig+0x2d0>)
 800d7be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d7c2:	f003 030c 	and.w	r3, r3, #12
 800d7c6:	2b0c      	cmp	r3, #12
 800d7c8:	d828      	bhi.n	800d81c <UART_SetConfig+0x128>
 800d7ca:	a201      	add	r2, pc, #4	; (adr r2, 800d7d0 <UART_SetConfig+0xdc>)
 800d7cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7d0:	0800d805 	.word	0x0800d805
 800d7d4:	0800d81d 	.word	0x0800d81d
 800d7d8:	0800d81d 	.word	0x0800d81d
 800d7dc:	0800d81d 	.word	0x0800d81d
 800d7e0:	0800d811 	.word	0x0800d811
 800d7e4:	0800d81d 	.word	0x0800d81d
 800d7e8:	0800d81d 	.word	0x0800d81d
 800d7ec:	0800d81d 	.word	0x0800d81d
 800d7f0:	0800d80b 	.word	0x0800d80b
 800d7f4:	0800d81d 	.word	0x0800d81d
 800d7f8:	0800d81d 	.word	0x0800d81d
 800d7fc:	0800d81d 	.word	0x0800d81d
 800d800:	0800d817 	.word	0x0800d817
 800d804:	2300      	movs	r3, #0
 800d806:	77fb      	strb	r3, [r7, #31]
 800d808:	e117      	b.n	800da3a <UART_SetConfig+0x346>
 800d80a:	2302      	movs	r3, #2
 800d80c:	77fb      	strb	r3, [r7, #31]
 800d80e:	e114      	b.n	800da3a <UART_SetConfig+0x346>
 800d810:	2304      	movs	r3, #4
 800d812:	77fb      	strb	r3, [r7, #31]
 800d814:	e111      	b.n	800da3a <UART_SetConfig+0x346>
 800d816:	2308      	movs	r3, #8
 800d818:	77fb      	strb	r3, [r7, #31]
 800d81a:	e10e      	b.n	800da3a <UART_SetConfig+0x346>
 800d81c:	2310      	movs	r3, #16
 800d81e:	77fb      	strb	r3, [r7, #31]
 800d820:	e10b      	b.n	800da3a <UART_SetConfig+0x346>
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	4a69      	ldr	r2, [pc, #420]	; (800d9cc <UART_SetConfig+0x2d8>)
 800d828:	4293      	cmp	r3, r2
 800d82a:	d120      	bne.n	800d86e <UART_SetConfig+0x17a>
 800d82c:	4b65      	ldr	r3, [pc, #404]	; (800d9c4 <UART_SetConfig+0x2d0>)
 800d82e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d832:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800d836:	2b30      	cmp	r3, #48	; 0x30
 800d838:	d013      	beq.n	800d862 <UART_SetConfig+0x16e>
 800d83a:	2b30      	cmp	r3, #48	; 0x30
 800d83c:	d814      	bhi.n	800d868 <UART_SetConfig+0x174>
 800d83e:	2b20      	cmp	r3, #32
 800d840:	d009      	beq.n	800d856 <UART_SetConfig+0x162>
 800d842:	2b20      	cmp	r3, #32
 800d844:	d810      	bhi.n	800d868 <UART_SetConfig+0x174>
 800d846:	2b00      	cmp	r3, #0
 800d848:	d002      	beq.n	800d850 <UART_SetConfig+0x15c>
 800d84a:	2b10      	cmp	r3, #16
 800d84c:	d006      	beq.n	800d85c <UART_SetConfig+0x168>
 800d84e:	e00b      	b.n	800d868 <UART_SetConfig+0x174>
 800d850:	2300      	movs	r3, #0
 800d852:	77fb      	strb	r3, [r7, #31]
 800d854:	e0f1      	b.n	800da3a <UART_SetConfig+0x346>
 800d856:	2302      	movs	r3, #2
 800d858:	77fb      	strb	r3, [r7, #31]
 800d85a:	e0ee      	b.n	800da3a <UART_SetConfig+0x346>
 800d85c:	2304      	movs	r3, #4
 800d85e:	77fb      	strb	r3, [r7, #31]
 800d860:	e0eb      	b.n	800da3a <UART_SetConfig+0x346>
 800d862:	2308      	movs	r3, #8
 800d864:	77fb      	strb	r3, [r7, #31]
 800d866:	e0e8      	b.n	800da3a <UART_SetConfig+0x346>
 800d868:	2310      	movs	r3, #16
 800d86a:	77fb      	strb	r3, [r7, #31]
 800d86c:	e0e5      	b.n	800da3a <UART_SetConfig+0x346>
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	4a57      	ldr	r2, [pc, #348]	; (800d9d0 <UART_SetConfig+0x2dc>)
 800d874:	4293      	cmp	r3, r2
 800d876:	d120      	bne.n	800d8ba <UART_SetConfig+0x1c6>
 800d878:	4b52      	ldr	r3, [pc, #328]	; (800d9c4 <UART_SetConfig+0x2d0>)
 800d87a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d87e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800d882:	2bc0      	cmp	r3, #192	; 0xc0
 800d884:	d013      	beq.n	800d8ae <UART_SetConfig+0x1ba>
 800d886:	2bc0      	cmp	r3, #192	; 0xc0
 800d888:	d814      	bhi.n	800d8b4 <UART_SetConfig+0x1c0>
 800d88a:	2b80      	cmp	r3, #128	; 0x80
 800d88c:	d009      	beq.n	800d8a2 <UART_SetConfig+0x1ae>
 800d88e:	2b80      	cmp	r3, #128	; 0x80
 800d890:	d810      	bhi.n	800d8b4 <UART_SetConfig+0x1c0>
 800d892:	2b00      	cmp	r3, #0
 800d894:	d002      	beq.n	800d89c <UART_SetConfig+0x1a8>
 800d896:	2b40      	cmp	r3, #64	; 0x40
 800d898:	d006      	beq.n	800d8a8 <UART_SetConfig+0x1b4>
 800d89a:	e00b      	b.n	800d8b4 <UART_SetConfig+0x1c0>
 800d89c:	2300      	movs	r3, #0
 800d89e:	77fb      	strb	r3, [r7, #31]
 800d8a0:	e0cb      	b.n	800da3a <UART_SetConfig+0x346>
 800d8a2:	2302      	movs	r3, #2
 800d8a4:	77fb      	strb	r3, [r7, #31]
 800d8a6:	e0c8      	b.n	800da3a <UART_SetConfig+0x346>
 800d8a8:	2304      	movs	r3, #4
 800d8aa:	77fb      	strb	r3, [r7, #31]
 800d8ac:	e0c5      	b.n	800da3a <UART_SetConfig+0x346>
 800d8ae:	2308      	movs	r3, #8
 800d8b0:	77fb      	strb	r3, [r7, #31]
 800d8b2:	e0c2      	b.n	800da3a <UART_SetConfig+0x346>
 800d8b4:	2310      	movs	r3, #16
 800d8b6:	77fb      	strb	r3, [r7, #31]
 800d8b8:	e0bf      	b.n	800da3a <UART_SetConfig+0x346>
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	4a45      	ldr	r2, [pc, #276]	; (800d9d4 <UART_SetConfig+0x2e0>)
 800d8c0:	4293      	cmp	r3, r2
 800d8c2:	d125      	bne.n	800d910 <UART_SetConfig+0x21c>
 800d8c4:	4b3f      	ldr	r3, [pc, #252]	; (800d9c4 <UART_SetConfig+0x2d0>)
 800d8c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d8ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d8ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d8d2:	d017      	beq.n	800d904 <UART_SetConfig+0x210>
 800d8d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d8d8:	d817      	bhi.n	800d90a <UART_SetConfig+0x216>
 800d8da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d8de:	d00b      	beq.n	800d8f8 <UART_SetConfig+0x204>
 800d8e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d8e4:	d811      	bhi.n	800d90a <UART_SetConfig+0x216>
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d003      	beq.n	800d8f2 <UART_SetConfig+0x1fe>
 800d8ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d8ee:	d006      	beq.n	800d8fe <UART_SetConfig+0x20a>
 800d8f0:	e00b      	b.n	800d90a <UART_SetConfig+0x216>
 800d8f2:	2300      	movs	r3, #0
 800d8f4:	77fb      	strb	r3, [r7, #31]
 800d8f6:	e0a0      	b.n	800da3a <UART_SetConfig+0x346>
 800d8f8:	2302      	movs	r3, #2
 800d8fa:	77fb      	strb	r3, [r7, #31]
 800d8fc:	e09d      	b.n	800da3a <UART_SetConfig+0x346>
 800d8fe:	2304      	movs	r3, #4
 800d900:	77fb      	strb	r3, [r7, #31]
 800d902:	e09a      	b.n	800da3a <UART_SetConfig+0x346>
 800d904:	2308      	movs	r3, #8
 800d906:	77fb      	strb	r3, [r7, #31]
 800d908:	e097      	b.n	800da3a <UART_SetConfig+0x346>
 800d90a:	2310      	movs	r3, #16
 800d90c:	77fb      	strb	r3, [r7, #31]
 800d90e:	e094      	b.n	800da3a <UART_SetConfig+0x346>
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	4a30      	ldr	r2, [pc, #192]	; (800d9d8 <UART_SetConfig+0x2e4>)
 800d916:	4293      	cmp	r3, r2
 800d918:	d125      	bne.n	800d966 <UART_SetConfig+0x272>
 800d91a:	4b2a      	ldr	r3, [pc, #168]	; (800d9c4 <UART_SetConfig+0x2d0>)
 800d91c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d920:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800d924:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d928:	d017      	beq.n	800d95a <UART_SetConfig+0x266>
 800d92a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d92e:	d817      	bhi.n	800d960 <UART_SetConfig+0x26c>
 800d930:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d934:	d00b      	beq.n	800d94e <UART_SetConfig+0x25a>
 800d936:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d93a:	d811      	bhi.n	800d960 <UART_SetConfig+0x26c>
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d003      	beq.n	800d948 <UART_SetConfig+0x254>
 800d940:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d944:	d006      	beq.n	800d954 <UART_SetConfig+0x260>
 800d946:	e00b      	b.n	800d960 <UART_SetConfig+0x26c>
 800d948:	2301      	movs	r3, #1
 800d94a:	77fb      	strb	r3, [r7, #31]
 800d94c:	e075      	b.n	800da3a <UART_SetConfig+0x346>
 800d94e:	2302      	movs	r3, #2
 800d950:	77fb      	strb	r3, [r7, #31]
 800d952:	e072      	b.n	800da3a <UART_SetConfig+0x346>
 800d954:	2304      	movs	r3, #4
 800d956:	77fb      	strb	r3, [r7, #31]
 800d958:	e06f      	b.n	800da3a <UART_SetConfig+0x346>
 800d95a:	2308      	movs	r3, #8
 800d95c:	77fb      	strb	r3, [r7, #31]
 800d95e:	e06c      	b.n	800da3a <UART_SetConfig+0x346>
 800d960:	2310      	movs	r3, #16
 800d962:	77fb      	strb	r3, [r7, #31]
 800d964:	e069      	b.n	800da3a <UART_SetConfig+0x346>
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	4a1c      	ldr	r2, [pc, #112]	; (800d9dc <UART_SetConfig+0x2e8>)
 800d96c:	4293      	cmp	r3, r2
 800d96e:	d137      	bne.n	800d9e0 <UART_SetConfig+0x2ec>
 800d970:	4b14      	ldr	r3, [pc, #80]	; (800d9c4 <UART_SetConfig+0x2d0>)
 800d972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d976:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800d97a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d97e:	d017      	beq.n	800d9b0 <UART_SetConfig+0x2bc>
 800d980:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d984:	d817      	bhi.n	800d9b6 <UART_SetConfig+0x2c2>
 800d986:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d98a:	d00b      	beq.n	800d9a4 <UART_SetConfig+0x2b0>
 800d98c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d990:	d811      	bhi.n	800d9b6 <UART_SetConfig+0x2c2>
 800d992:	2b00      	cmp	r3, #0
 800d994:	d003      	beq.n	800d99e <UART_SetConfig+0x2aa>
 800d996:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d99a:	d006      	beq.n	800d9aa <UART_SetConfig+0x2b6>
 800d99c:	e00b      	b.n	800d9b6 <UART_SetConfig+0x2c2>
 800d99e:	2300      	movs	r3, #0
 800d9a0:	77fb      	strb	r3, [r7, #31]
 800d9a2:	e04a      	b.n	800da3a <UART_SetConfig+0x346>
 800d9a4:	2302      	movs	r3, #2
 800d9a6:	77fb      	strb	r3, [r7, #31]
 800d9a8:	e047      	b.n	800da3a <UART_SetConfig+0x346>
 800d9aa:	2304      	movs	r3, #4
 800d9ac:	77fb      	strb	r3, [r7, #31]
 800d9ae:	e044      	b.n	800da3a <UART_SetConfig+0x346>
 800d9b0:	2308      	movs	r3, #8
 800d9b2:	77fb      	strb	r3, [r7, #31]
 800d9b4:	e041      	b.n	800da3a <UART_SetConfig+0x346>
 800d9b6:	2310      	movs	r3, #16
 800d9b8:	77fb      	strb	r3, [r7, #31]
 800d9ba:	e03e      	b.n	800da3a <UART_SetConfig+0x346>
 800d9bc:	efff69f3 	.word	0xefff69f3
 800d9c0:	40011000 	.word	0x40011000
 800d9c4:	40023800 	.word	0x40023800
 800d9c8:	40004400 	.word	0x40004400
 800d9cc:	40004800 	.word	0x40004800
 800d9d0:	40004c00 	.word	0x40004c00
 800d9d4:	40005000 	.word	0x40005000
 800d9d8:	40011400 	.word	0x40011400
 800d9dc:	40007800 	.word	0x40007800
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	4a71      	ldr	r2, [pc, #452]	; (800dbac <UART_SetConfig+0x4b8>)
 800d9e6:	4293      	cmp	r3, r2
 800d9e8:	d125      	bne.n	800da36 <UART_SetConfig+0x342>
 800d9ea:	4b71      	ldr	r3, [pc, #452]	; (800dbb0 <UART_SetConfig+0x4bc>)
 800d9ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d9f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800d9f4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800d9f8:	d017      	beq.n	800da2a <UART_SetConfig+0x336>
 800d9fa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800d9fe:	d817      	bhi.n	800da30 <UART_SetConfig+0x33c>
 800da00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800da04:	d00b      	beq.n	800da1e <UART_SetConfig+0x32a>
 800da06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800da0a:	d811      	bhi.n	800da30 <UART_SetConfig+0x33c>
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d003      	beq.n	800da18 <UART_SetConfig+0x324>
 800da10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800da14:	d006      	beq.n	800da24 <UART_SetConfig+0x330>
 800da16:	e00b      	b.n	800da30 <UART_SetConfig+0x33c>
 800da18:	2300      	movs	r3, #0
 800da1a:	77fb      	strb	r3, [r7, #31]
 800da1c:	e00d      	b.n	800da3a <UART_SetConfig+0x346>
 800da1e:	2302      	movs	r3, #2
 800da20:	77fb      	strb	r3, [r7, #31]
 800da22:	e00a      	b.n	800da3a <UART_SetConfig+0x346>
 800da24:	2304      	movs	r3, #4
 800da26:	77fb      	strb	r3, [r7, #31]
 800da28:	e007      	b.n	800da3a <UART_SetConfig+0x346>
 800da2a:	2308      	movs	r3, #8
 800da2c:	77fb      	strb	r3, [r7, #31]
 800da2e:	e004      	b.n	800da3a <UART_SetConfig+0x346>
 800da30:	2310      	movs	r3, #16
 800da32:	77fb      	strb	r3, [r7, #31]
 800da34:	e001      	b.n	800da3a <UART_SetConfig+0x346>
 800da36:	2310      	movs	r3, #16
 800da38:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	69db      	ldr	r3, [r3, #28]
 800da3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800da42:	d15a      	bne.n	800dafa <UART_SetConfig+0x406>
  {
    switch (clocksource)
 800da44:	7ffb      	ldrb	r3, [r7, #31]
 800da46:	2b08      	cmp	r3, #8
 800da48:	d827      	bhi.n	800da9a <UART_SetConfig+0x3a6>
 800da4a:	a201      	add	r2, pc, #4	; (adr r2, 800da50 <UART_SetConfig+0x35c>)
 800da4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da50:	0800da75 	.word	0x0800da75
 800da54:	0800da7d 	.word	0x0800da7d
 800da58:	0800da85 	.word	0x0800da85
 800da5c:	0800da9b 	.word	0x0800da9b
 800da60:	0800da8b 	.word	0x0800da8b
 800da64:	0800da9b 	.word	0x0800da9b
 800da68:	0800da9b 	.word	0x0800da9b
 800da6c:	0800da9b 	.word	0x0800da9b
 800da70:	0800da93 	.word	0x0800da93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800da74:	f7fd ff9c 	bl	800b9b0 <HAL_RCC_GetPCLK1Freq>
 800da78:	61b8      	str	r0, [r7, #24]
        break;
 800da7a:	e013      	b.n	800daa4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800da7c:	f7fd ffac 	bl	800b9d8 <HAL_RCC_GetPCLK2Freq>
 800da80:	61b8      	str	r0, [r7, #24]
        break;
 800da82:	e00f      	b.n	800daa4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800da84:	4b4b      	ldr	r3, [pc, #300]	; (800dbb4 <UART_SetConfig+0x4c0>)
 800da86:	61bb      	str	r3, [r7, #24]
        break;
 800da88:	e00c      	b.n	800daa4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800da8a:	f7fd fecf 	bl	800b82c <HAL_RCC_GetSysClockFreq>
 800da8e:	61b8      	str	r0, [r7, #24]
        break;
 800da90:	e008      	b.n	800daa4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800da92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800da96:	61bb      	str	r3, [r7, #24]
        break;
 800da98:	e004      	b.n	800daa4 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800da9a:	2300      	movs	r3, #0
 800da9c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800da9e:	2301      	movs	r3, #1
 800daa0:	77bb      	strb	r3, [r7, #30]
        break;
 800daa2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800daa4:	69bb      	ldr	r3, [r7, #24]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d074      	beq.n	800db94 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800daaa:	69bb      	ldr	r3, [r7, #24]
 800daac:	005a      	lsls	r2, r3, #1
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	685b      	ldr	r3, [r3, #4]
 800dab2:	085b      	lsrs	r3, r3, #1
 800dab4:	441a      	add	r2, r3
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	685b      	ldr	r3, [r3, #4]
 800daba:	fbb2 f3f3 	udiv	r3, r2, r3
 800dabe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dac0:	693b      	ldr	r3, [r7, #16]
 800dac2:	2b0f      	cmp	r3, #15
 800dac4:	d916      	bls.n	800daf4 <UART_SetConfig+0x400>
 800dac6:	693b      	ldr	r3, [r7, #16]
 800dac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dacc:	d212      	bcs.n	800daf4 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800dace:	693b      	ldr	r3, [r7, #16]
 800dad0:	b29b      	uxth	r3, r3
 800dad2:	f023 030f 	bic.w	r3, r3, #15
 800dad6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800dad8:	693b      	ldr	r3, [r7, #16]
 800dada:	085b      	lsrs	r3, r3, #1
 800dadc:	b29b      	uxth	r3, r3
 800dade:	f003 0307 	and.w	r3, r3, #7
 800dae2:	b29a      	uxth	r2, r3
 800dae4:	89fb      	ldrh	r3, [r7, #14]
 800dae6:	4313      	orrs	r3, r2
 800dae8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	89fa      	ldrh	r2, [r7, #14]
 800daf0:	60da      	str	r2, [r3, #12]
 800daf2:	e04f      	b.n	800db94 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800daf4:	2301      	movs	r3, #1
 800daf6:	77bb      	strb	r3, [r7, #30]
 800daf8:	e04c      	b.n	800db94 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800dafa:	7ffb      	ldrb	r3, [r7, #31]
 800dafc:	2b08      	cmp	r3, #8
 800dafe:	d828      	bhi.n	800db52 <UART_SetConfig+0x45e>
 800db00:	a201      	add	r2, pc, #4	; (adr r2, 800db08 <UART_SetConfig+0x414>)
 800db02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db06:	bf00      	nop
 800db08:	0800db2d 	.word	0x0800db2d
 800db0c:	0800db35 	.word	0x0800db35
 800db10:	0800db3d 	.word	0x0800db3d
 800db14:	0800db53 	.word	0x0800db53
 800db18:	0800db43 	.word	0x0800db43
 800db1c:	0800db53 	.word	0x0800db53
 800db20:	0800db53 	.word	0x0800db53
 800db24:	0800db53 	.word	0x0800db53
 800db28:	0800db4b 	.word	0x0800db4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800db2c:	f7fd ff40 	bl	800b9b0 <HAL_RCC_GetPCLK1Freq>
 800db30:	61b8      	str	r0, [r7, #24]
        break;
 800db32:	e013      	b.n	800db5c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800db34:	f7fd ff50 	bl	800b9d8 <HAL_RCC_GetPCLK2Freq>
 800db38:	61b8      	str	r0, [r7, #24]
        break;
 800db3a:	e00f      	b.n	800db5c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800db3c:	4b1d      	ldr	r3, [pc, #116]	; (800dbb4 <UART_SetConfig+0x4c0>)
 800db3e:	61bb      	str	r3, [r7, #24]
        break;
 800db40:	e00c      	b.n	800db5c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800db42:	f7fd fe73 	bl	800b82c <HAL_RCC_GetSysClockFreq>
 800db46:	61b8      	str	r0, [r7, #24]
        break;
 800db48:	e008      	b.n	800db5c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800db4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800db4e:	61bb      	str	r3, [r7, #24]
        break;
 800db50:	e004      	b.n	800db5c <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800db52:	2300      	movs	r3, #0
 800db54:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800db56:	2301      	movs	r3, #1
 800db58:	77bb      	strb	r3, [r7, #30]
        break;
 800db5a:	bf00      	nop
    }

    if (pclk != 0U)
 800db5c:	69bb      	ldr	r3, [r7, #24]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d018      	beq.n	800db94 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	685b      	ldr	r3, [r3, #4]
 800db66:	085a      	lsrs	r2, r3, #1
 800db68:	69bb      	ldr	r3, [r7, #24]
 800db6a:	441a      	add	r2, r3
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	685b      	ldr	r3, [r3, #4]
 800db70:	fbb2 f3f3 	udiv	r3, r2, r3
 800db74:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800db76:	693b      	ldr	r3, [r7, #16]
 800db78:	2b0f      	cmp	r3, #15
 800db7a:	d909      	bls.n	800db90 <UART_SetConfig+0x49c>
 800db7c:	693b      	ldr	r3, [r7, #16]
 800db7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800db82:	d205      	bcs.n	800db90 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800db84:	693b      	ldr	r3, [r7, #16]
 800db86:	b29a      	uxth	r2, r3
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	60da      	str	r2, [r3, #12]
 800db8e:	e001      	b.n	800db94 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800db90:	2301      	movs	r3, #1
 800db92:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	2200      	movs	r2, #0
 800db98:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	2200      	movs	r2, #0
 800db9e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800dba0:	7fbb      	ldrb	r3, [r7, #30]
}
 800dba2:	4618      	mov	r0, r3
 800dba4:	3720      	adds	r7, #32
 800dba6:	46bd      	mov	sp, r7
 800dba8:	bd80      	pop	{r7, pc}
 800dbaa:	bf00      	nop
 800dbac:	40007c00 	.word	0x40007c00
 800dbb0:	40023800 	.word	0x40023800
 800dbb4:	00f42400 	.word	0x00f42400

0800dbb8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800dbb8:	b480      	push	{r7}
 800dbba:	b083      	sub	sp, #12
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbc4:	f003 0301 	and.w	r3, r3, #1
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d00a      	beq.n	800dbe2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	685b      	ldr	r3, [r3, #4]
 800dbd2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	430a      	orrs	r2, r1
 800dbe0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbe6:	f003 0302 	and.w	r3, r3, #2
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d00a      	beq.n	800dc04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	685b      	ldr	r3, [r3, #4]
 800dbf4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	430a      	orrs	r2, r1
 800dc02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc08:	f003 0304 	and.w	r3, r3, #4
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d00a      	beq.n	800dc26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	685b      	ldr	r3, [r3, #4]
 800dc16:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	430a      	orrs	r2, r1
 800dc24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc2a:	f003 0308 	and.w	r3, r3, #8
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d00a      	beq.n	800dc48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	685b      	ldr	r3, [r3, #4]
 800dc38:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	430a      	orrs	r2, r1
 800dc46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc4c:	f003 0310 	and.w	r3, r3, #16
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d00a      	beq.n	800dc6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	689b      	ldr	r3, [r3, #8]
 800dc5a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	430a      	orrs	r2, r1
 800dc68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc6e:	f003 0320 	and.w	r3, r3, #32
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d00a      	beq.n	800dc8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	689b      	ldr	r3, [r3, #8]
 800dc7c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	430a      	orrs	r2, r1
 800dc8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d01a      	beq.n	800dcce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	685b      	ldr	r3, [r3, #4]
 800dc9e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	430a      	orrs	r2, r1
 800dcac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dcb6:	d10a      	bne.n	800dcce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	685b      	ldr	r3, [r3, #4]
 800dcbe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	430a      	orrs	r2, r1
 800dccc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d00a      	beq.n	800dcf0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	685b      	ldr	r3, [r3, #4]
 800dce0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	430a      	orrs	r2, r1
 800dcee:	605a      	str	r2, [r3, #4]
  }
}
 800dcf0:	bf00      	nop
 800dcf2:	370c      	adds	r7, #12
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcfa:	4770      	bx	lr

0800dcfc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	b086      	sub	sp, #24
 800dd00:	af02      	add	r7, sp, #8
 800dd02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	2200      	movs	r2, #0
 800dd08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800dd0c:	f7fb f978 	bl	8009000 <HAL_GetTick>
 800dd10:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	f003 0308 	and.w	r3, r3, #8
 800dd1c:	2b08      	cmp	r3, #8
 800dd1e:	d10e      	bne.n	800dd3e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dd20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800dd24:	9300      	str	r3, [sp, #0]
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	2200      	movs	r2, #0
 800dd2a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800dd2e:	6878      	ldr	r0, [r7, #4]
 800dd30:	f000 f82d 	bl	800dd8e <UART_WaitOnFlagUntilTimeout>
 800dd34:	4603      	mov	r3, r0
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d001      	beq.n	800dd3e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dd3a:	2303      	movs	r3, #3
 800dd3c:	e023      	b.n	800dd86 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	f003 0304 	and.w	r3, r3, #4
 800dd48:	2b04      	cmp	r3, #4
 800dd4a:	d10e      	bne.n	800dd6a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dd4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800dd50:	9300      	str	r3, [sp, #0]
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	2200      	movs	r2, #0
 800dd56:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800dd5a:	6878      	ldr	r0, [r7, #4]
 800dd5c:	f000 f817 	bl	800dd8e <UART_WaitOnFlagUntilTimeout>
 800dd60:	4603      	mov	r3, r0
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d001      	beq.n	800dd6a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dd66:	2303      	movs	r3, #3
 800dd68:	e00d      	b.n	800dd86 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	2220      	movs	r2, #32
 800dd6e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	2220      	movs	r2, #32
 800dd74:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	2200      	movs	r2, #0
 800dd7a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	2200      	movs	r2, #0
 800dd80:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800dd84:	2300      	movs	r3, #0
}
 800dd86:	4618      	mov	r0, r3
 800dd88:	3710      	adds	r7, #16
 800dd8a:	46bd      	mov	sp, r7
 800dd8c:	bd80      	pop	{r7, pc}

0800dd8e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800dd8e:	b580      	push	{r7, lr}
 800dd90:	b09c      	sub	sp, #112	; 0x70
 800dd92:	af00      	add	r7, sp, #0
 800dd94:	60f8      	str	r0, [r7, #12]
 800dd96:	60b9      	str	r1, [r7, #8]
 800dd98:	603b      	str	r3, [r7, #0]
 800dd9a:	4613      	mov	r3, r2
 800dd9c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dd9e:	e0a5      	b.n	800deec <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dda0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dda2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dda6:	f000 80a1 	beq.w	800deec <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ddaa:	f7fb f929 	bl	8009000 <HAL_GetTick>
 800ddae:	4602      	mov	r2, r0
 800ddb0:	683b      	ldr	r3, [r7, #0]
 800ddb2:	1ad3      	subs	r3, r2, r3
 800ddb4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ddb6:	429a      	cmp	r2, r3
 800ddb8:	d302      	bcc.n	800ddc0 <UART_WaitOnFlagUntilTimeout+0x32>
 800ddba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d13e      	bne.n	800de3e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ddc8:	e853 3f00 	ldrex	r3, [r3]
 800ddcc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ddce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ddd0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ddd4:	667b      	str	r3, [r7, #100]	; 0x64
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	461a      	mov	r2, r3
 800dddc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ddde:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dde0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dde2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800dde4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800dde6:	e841 2300 	strex	r3, r2, [r1]
 800ddea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ddec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d1e6      	bne.n	800ddc0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	3308      	adds	r3, #8
 800ddf8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddfc:	e853 3f00 	ldrex	r3, [r3]
 800de00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800de02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de04:	f023 0301 	bic.w	r3, r3, #1
 800de08:	663b      	str	r3, [r7, #96]	; 0x60
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	3308      	adds	r3, #8
 800de10:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800de12:	64ba      	str	r2, [r7, #72]	; 0x48
 800de14:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de16:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800de18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800de1a:	e841 2300 	strex	r3, r2, [r1]
 800de1e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800de20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de22:	2b00      	cmp	r3, #0
 800de24:	d1e5      	bne.n	800ddf2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	2220      	movs	r2, #32
 800de2a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	2220      	movs	r2, #32
 800de30:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	2200      	movs	r2, #0
 800de36:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800de3a:	2303      	movs	r3, #3
 800de3c:	e067      	b.n	800df0e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	f003 0304 	and.w	r3, r3, #4
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d04f      	beq.n	800deec <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	69db      	ldr	r3, [r3, #28]
 800de52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800de56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800de5a:	d147      	bne.n	800deec <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800de64:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de6e:	e853 3f00 	ldrex	r3, [r3]
 800de72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800de74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de76:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800de7a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	461a      	mov	r2, r3
 800de82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800de84:	637b      	str	r3, [r7, #52]	; 0x34
 800de86:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800de8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800de8c:	e841 2300 	strex	r3, r2, [r1]
 800de90:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800de92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de94:	2b00      	cmp	r3, #0
 800de96:	d1e6      	bne.n	800de66 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	3308      	adds	r3, #8
 800de9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dea0:	697b      	ldr	r3, [r7, #20]
 800dea2:	e853 3f00 	ldrex	r3, [r3]
 800dea6:	613b      	str	r3, [r7, #16]
   return(result);
 800dea8:	693b      	ldr	r3, [r7, #16]
 800deaa:	f023 0301 	bic.w	r3, r3, #1
 800deae:	66bb      	str	r3, [r7, #104]	; 0x68
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	3308      	adds	r3, #8
 800deb6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800deb8:	623a      	str	r2, [r7, #32]
 800deba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800debc:	69f9      	ldr	r1, [r7, #28]
 800debe:	6a3a      	ldr	r2, [r7, #32]
 800dec0:	e841 2300 	strex	r3, r2, [r1]
 800dec4:	61bb      	str	r3, [r7, #24]
   return(result);
 800dec6:	69bb      	ldr	r3, [r7, #24]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d1e5      	bne.n	800de98 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	2220      	movs	r2, #32
 800ded0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	2220      	movs	r2, #32
 800ded6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	2220      	movs	r2, #32
 800dedc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	2200      	movs	r2, #0
 800dee4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800dee8:	2303      	movs	r3, #3
 800deea:	e010      	b.n	800df0e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	69da      	ldr	r2, [r3, #28]
 800def2:	68bb      	ldr	r3, [r7, #8]
 800def4:	4013      	ands	r3, r2
 800def6:	68ba      	ldr	r2, [r7, #8]
 800def8:	429a      	cmp	r2, r3
 800defa:	bf0c      	ite	eq
 800defc:	2301      	moveq	r3, #1
 800defe:	2300      	movne	r3, #0
 800df00:	b2db      	uxtb	r3, r3
 800df02:	461a      	mov	r2, r3
 800df04:	79fb      	ldrb	r3, [r7, #7]
 800df06:	429a      	cmp	r2, r3
 800df08:	f43f af4a 	beq.w	800dda0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800df0c:	2300      	movs	r3, #0
}
 800df0e:	4618      	mov	r0, r3
 800df10:	3770      	adds	r7, #112	; 0x70
 800df12:	46bd      	mov	sp, r7
 800df14:	bd80      	pop	{r7, pc}

0800df16 <_ZdlPvj>:
 800df16:	f000 b818 	b.w	800df4a <_ZdlPv>

0800df1a <_ZdaPv>:
 800df1a:	f000 b816 	b.w	800df4a <_ZdlPv>

0800df1e <_Znwj>:
 800df1e:	2801      	cmp	r0, #1
 800df20:	bf38      	it	cc
 800df22:	2001      	movcc	r0, #1
 800df24:	b510      	push	{r4, lr}
 800df26:	4604      	mov	r4, r0
 800df28:	4620      	mov	r0, r4
 800df2a:	f001 fbfd 	bl	800f728 <malloc>
 800df2e:	b930      	cbnz	r0, 800df3e <_Znwj+0x20>
 800df30:	f000 f820 	bl	800df74 <_ZSt15get_new_handlerv>
 800df34:	b908      	cbnz	r0, 800df3a <_Znwj+0x1c>
 800df36:	f001 fbbd 	bl	800f6b4 <abort>
 800df3a:	4780      	blx	r0
 800df3c:	e7f4      	b.n	800df28 <_Znwj+0xa>
 800df3e:	bd10      	pop	{r4, pc}

0800df40 <_Znaj>:
 800df40:	f7ff bfed 	b.w	800df1e <_Znwj>

0800df44 <__cxa_pure_virtual>:
 800df44:	b508      	push	{r3, lr}
 800df46:	f000 f80f 	bl	800df68 <_ZSt9terminatev>

0800df4a <_ZdlPv>:
 800df4a:	f001 bbf5 	b.w	800f738 <free>

0800df4e <_ZN10__cxxabiv111__terminateEPFvvE>:
 800df4e:	b508      	push	{r3, lr}
 800df50:	4780      	blx	r0
 800df52:	f001 fbaf 	bl	800f6b4 <abort>
	...

0800df58 <_ZSt13get_terminatev>:
 800df58:	4b02      	ldr	r3, [pc, #8]	; (800df64 <_ZSt13get_terminatev+0xc>)
 800df5a:	6818      	ldr	r0, [r3, #0]
 800df5c:	f3bf 8f5b 	dmb	ish
 800df60:	4770      	bx	lr
 800df62:	bf00      	nop
 800df64:	20000014 	.word	0x20000014

0800df68 <_ZSt9terminatev>:
 800df68:	b508      	push	{r3, lr}
 800df6a:	f7ff fff5 	bl	800df58 <_ZSt13get_terminatev>
 800df6e:	f7ff ffee 	bl	800df4e <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800df74 <_ZSt15get_new_handlerv>:
 800df74:	4b02      	ldr	r3, [pc, #8]	; (800df80 <_ZSt15get_new_handlerv+0xc>)
 800df76:	6818      	ldr	r0, [r3, #0]
 800df78:	f3bf 8f5b 	dmb	ish
 800df7c:	4770      	bx	lr
 800df7e:	bf00      	nop
 800df80:	200003e8 	.word	0x200003e8
 800df84:	00000000 	.word	0x00000000

0800df88 <log>:
 800df88:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800df8c:	ed2d 8b02 	vpush	{d8}
 800df90:	b082      	sub	sp, #8
 800df92:	ed8d 0b00 	vstr	d0, [sp]
 800df96:	e9dd 2300 	ldrd	r2, r3, [sp]
 800df9a:	2600      	movs	r6, #0
 800df9c:	1994      	adds	r4, r2, r6
 800df9e:	4e80      	ldr	r6, [pc, #512]	; (800e1a0 <log+0x218>)
 800dfa0:	4f80      	ldr	r7, [pc, #512]	; (800e1a4 <log+0x21c>)
 800dfa2:	eb43 0506 	adc.w	r5, r3, r6
 800dfa6:	42af      	cmp	r7, r5
 800dfa8:	f04f 36ff 	mov.w	r6, #4294967295
 800dfac:	bf08      	it	eq
 800dfae:	42a6      	cmpeq	r6, r4
 800dfb0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800dfb4:	d363      	bcc.n	800e07e <log+0xf6>
 800dfb6:	497c      	ldr	r1, [pc, #496]	; (800e1a8 <log+0x220>)
 800dfb8:	2000      	movs	r0, #0
 800dfba:	428b      	cmp	r3, r1
 800dfbc:	bf08      	it	eq
 800dfbe:	4282      	cmpeq	r2, r0
 800dfc0:	f000 80de 	beq.w	800e180 <log+0x1f8>
 800dfc4:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800dfc8:	ee30 7b47 	vsub.f64	d7, d0, d7
 800dfcc:	4b77      	ldr	r3, [pc, #476]	; (800e1ac <log+0x224>)
 800dfce:	ee27 1b07 	vmul.f64	d1, d7, d7
 800dfd2:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 800dfd6:	ee27 3b01 	vmul.f64	d3, d7, d1
 800dfda:	ed93 4b10 	vldr	d4, [r3, #64]	; 0x40
 800dfde:	eea6 4b07 	vfma.f64	d4, d6, d7
 800dfe2:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 800dfe6:	ed93 5b18 	vldr	d5, [r3, #96]	; 0x60
 800dfea:	eea6 4b01 	vfma.f64	d4, d6, d1
 800dfee:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 800dff2:	eea5 6b07 	vfma.f64	d6, d5, d7
 800dff6:	ed93 5b1a 	vldr	d5, [r3, #104]	; 0x68
 800dffa:	eea5 6b01 	vfma.f64	d6, d5, d1
 800dffe:	ed93 5b1e 	vldr	d5, [r3, #120]	; 0x78
 800e002:	eeb0 2b46 	vmov.f64	d2, d6
 800e006:	ed93 6b1c 	vldr	d6, [r3, #112]	; 0x70
 800e00a:	eea5 6b07 	vfma.f64	d6, d5, d7
 800e00e:	ed93 5b20 	vldr	d5, [r3, #128]	; 0x80
 800e012:	eea5 6b01 	vfma.f64	d6, d5, d1
 800e016:	ed93 5b22 	vldr	d5, [r3, #136]	; 0x88
 800e01a:	ed93 1b0e 	vldr	d1, [r3, #56]	; 0x38
 800e01e:	eea5 6b03 	vfma.f64	d6, d5, d3
 800e022:	eea6 2b03 	vfma.f64	d2, d6, d3
 800e026:	ed9f 6b58 	vldr	d6, [pc, #352]	; 800e188 <log+0x200>
 800e02a:	eea2 4b03 	vfma.f64	d4, d2, d3
 800e02e:	eeb0 2b47 	vmov.f64	d2, d7
 800e032:	eea7 2b06 	vfma.f64	d2, d7, d6
 800e036:	eea7 2b46 	vfms.f64	d2, d7, d6
 800e03a:	eeb0 6b47 	vmov.f64	d6, d7
 800e03e:	ee37 8b42 	vsub.f64	d8, d7, d2
 800e042:	ee22 0b02 	vmul.f64	d0, d2, d2
 800e046:	eea0 6b01 	vfma.f64	d6, d0, d1
 800e04a:	ee37 5b46 	vsub.f64	d5, d7, d6
 800e04e:	ee37 7b02 	vadd.f64	d7, d7, d2
 800e052:	eea0 5b01 	vfma.f64	d5, d0, d1
 800e056:	ee21 1b08 	vmul.f64	d1, d1, d8
 800e05a:	eea1 5b07 	vfma.f64	d5, d1, d7
 800e05e:	eeb0 7b45 	vmov.f64	d7, d5
 800e062:	eea4 7b03 	vfma.f64	d7, d4, d3
 800e066:	ee36 7b07 	vadd.f64	d7, d6, d7
 800e06a:	ed8d 7b00 	vstr	d7, [sp]
 800e06e:	ed9d 0b00 	vldr	d0, [sp]
 800e072:	b002      	add	sp, #8
 800e074:	ecbd 8b02 	vpop	{d8}
 800e078:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800e07c:	4770      	bx	lr
 800e07e:	f1ac 0510 	sub.w	r5, ip, #16
 800e082:	f647 74df 	movw	r4, #32735	; 0x7fdf
 800e086:	42a5      	cmp	r5, r4
 800e088:	d930      	bls.n	800e0ec <log+0x164>
 800e08a:	1890      	adds	r0, r2, r2
 800e08c:	eb43 0103 	adc.w	r1, r3, r3
 800e090:	4301      	orrs	r1, r0
 800e092:	d107      	bne.n	800e0a4 <log+0x11c>
 800e094:	2001      	movs	r0, #1
 800e096:	b002      	add	sp, #8
 800e098:	ecbd 8b02 	vpop	{d8}
 800e09c:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800e0a0:	f000 b8ba 	b.w	800e218 <__math_divzero>
 800e0a4:	4942      	ldr	r1, [pc, #264]	; (800e1b0 <log+0x228>)
 800e0a6:	2000      	movs	r0, #0
 800e0a8:	428b      	cmp	r3, r1
 800e0aa:	bf08      	it	eq
 800e0ac:	4282      	cmpeq	r2, r0
 800e0ae:	d0de      	beq.n	800e06e <log+0xe6>
 800e0b0:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
 800e0b4:	d104      	bne.n	800e0c0 <log+0x138>
 800e0b6:	f647 71f0 	movw	r1, #32752	; 0x7ff0
 800e0ba:	ea31 010c 	bics.w	r1, r1, ip
 800e0be:	d108      	bne.n	800e0d2 <log+0x14a>
 800e0c0:	ed9d 0b00 	vldr	d0, [sp]
 800e0c4:	b002      	add	sp, #8
 800e0c6:	ecbd 8b02 	vpop	{d8}
 800e0ca:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800e0ce:	f000 b8bb 	b.w	800e248 <__math_invalid>
 800e0d2:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800e190 <log+0x208>
 800e0d6:	ed9d 6b00 	vldr	d6, [sp]
 800e0da:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e0de:	ec56 5b17 	vmov	r5, r6, d7
 800e0e2:	4834      	ldr	r0, [pc, #208]	; (800e1b4 <log+0x22c>)
 800e0e4:	2400      	movs	r4, #0
 800e0e6:	192a      	adds	r2, r5, r4
 800e0e8:	eb46 0300 	adc.w	r3, r6, r0
 800e0ec:	2100      	movs	r1, #0
 800e0ee:	1851      	adds	r1, r2, r1
 800e0f0:	4931      	ldr	r1, [pc, #196]	; (800e1b8 <log+0x230>)
 800e0f2:	eebf 4b00 	vmov.f64	d4, #240	; 0xbf800000 -1.0
 800e0f6:	eb43 0101 	adc.w	r1, r3, r1
 800e0fa:	0d0c      	lsrs	r4, r1, #20
 800e0fc:	2500      	movs	r5, #0
 800e0fe:	ebb2 0805 	subs.w	r8, r2, r5
 800e102:	ea4f 5404 	mov.w	r4, r4, lsl #20
 800e106:	eb63 0904 	sbc.w	r9, r3, r4
 800e10a:	4b28      	ldr	r3, [pc, #160]	; (800e1ac <log+0x224>)
 800e10c:	f3c1 3046 	ubfx	r0, r1, #13, #7
 800e110:	eb03 1200 	add.w	r2, r3, r0, lsl #4
 800e114:	ed92 7b24 	vldr	d7, [r2, #144]	; 0x90
 800e118:	ec49 8b16 	vmov	d6, r8, r9
 800e11c:	1509      	asrs	r1, r1, #20
 800e11e:	eea6 4b07 	vfma.f64	d4, d6, d7
 800e122:	ee07 1a90 	vmov	s15, r1
 800e126:	ee24 1b04 	vmul.f64	d1, d4, d4
 800e12a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800e12e:	ed93 5b00 	vldr	d5, [r3]
 800e132:	ee24 0b01 	vmul.f64	d0, d4, d1
 800e136:	ed93 3b02 	vldr	d3, [r3, #8]
 800e13a:	ed92 7b26 	vldr	d7, [r2, #152]	; 0x98
 800e13e:	eea5 7b06 	vfma.f64	d7, d5, d6
 800e142:	ee34 5b07 	vadd.f64	d5, d4, d7
 800e146:	ee37 7b45 	vsub.f64	d7, d7, d5
 800e14a:	ee37 7b04 	vadd.f64	d7, d7, d4
 800e14e:	eea3 7b06 	vfma.f64	d7, d3, d6
 800e152:	ed93 6b04 	vldr	d6, [r3, #16]
 800e156:	ed93 3b08 	vldr	d3, [r3, #32]
 800e15a:	eea6 7b01 	vfma.f64	d7, d6, d1
 800e15e:	ed93 6b06 	vldr	d6, [r3, #24]
 800e162:	ed93 2b0c 	vldr	d2, [r3, #48]	; 0x30
 800e166:	eea3 6b04 	vfma.f64	d6, d3, d4
 800e16a:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
 800e16e:	eea2 3b04 	vfma.f64	d3, d2, d4
 800e172:	eea3 6b01 	vfma.f64	d6, d3, d1
 800e176:	eea0 7b06 	vfma.f64	d7, d0, d6
 800e17a:	ee37 7b05 	vadd.f64	d7, d7, d5
 800e17e:	e774      	b.n	800e06a <log+0xe2>
 800e180:	ed9f 7b05 	vldr	d7, [pc, #20]	; 800e198 <log+0x210>
 800e184:	e771      	b.n	800e06a <log+0xe2>
 800e186:	bf00      	nop
 800e188:	00000000 	.word	0x00000000
 800e18c:	41a00000 	.word	0x41a00000
 800e190:	00000000 	.word	0x00000000
 800e194:	43300000 	.word	0x43300000
	...
 800e1a0:	c0120000 	.word	0xc0120000
 800e1a4:	000308ff 	.word	0x000308ff
 800e1a8:	3ff00000 	.word	0x3ff00000
 800e1ac:	08028e80 	.word	0x08028e80
 800e1b0:	7ff00000 	.word	0x7ff00000
 800e1b4:	fcc00000 	.word	0xfcc00000
 800e1b8:	c01a0000 	.word	0xc01a0000

0800e1bc <with_errno>:
 800e1bc:	b513      	push	{r0, r1, r4, lr}
 800e1be:	4604      	mov	r4, r0
 800e1c0:	ed8d 0b00 	vstr	d0, [sp]
 800e1c4:	f001 fa86 	bl	800f6d4 <__errno>
 800e1c8:	ed9d 0b00 	vldr	d0, [sp]
 800e1cc:	6004      	str	r4, [r0, #0]
 800e1ce:	b002      	add	sp, #8
 800e1d0:	bd10      	pop	{r4, pc}

0800e1d2 <xflow>:
 800e1d2:	b082      	sub	sp, #8
 800e1d4:	b158      	cbz	r0, 800e1ee <xflow+0x1c>
 800e1d6:	eeb1 7b40 	vneg.f64	d7, d0
 800e1da:	ed8d 7b00 	vstr	d7, [sp]
 800e1de:	ed9d 7b00 	vldr	d7, [sp]
 800e1e2:	2022      	movs	r0, #34	; 0x22
 800e1e4:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e1e8:	b002      	add	sp, #8
 800e1ea:	f7ff bfe7 	b.w	800e1bc <with_errno>
 800e1ee:	eeb0 7b40 	vmov.f64	d7, d0
 800e1f2:	e7f2      	b.n	800e1da <xflow+0x8>
 800e1f4:	0000      	movs	r0, r0
	...

0800e1f8 <__math_uflow>:
 800e1f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e200 <__math_uflow+0x8>
 800e1fc:	f7ff bfe9 	b.w	800e1d2 <xflow>
 800e200:	00000000 	.word	0x00000000
 800e204:	10000000 	.word	0x10000000

0800e208 <__math_oflow>:
 800e208:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e210 <__math_oflow+0x8>
 800e20c:	f7ff bfe1 	b.w	800e1d2 <xflow>
 800e210:	00000000 	.word	0x00000000
 800e214:	70000000 	.word	0x70000000

0800e218 <__math_divzero>:
 800e218:	b082      	sub	sp, #8
 800e21a:	2800      	cmp	r0, #0
 800e21c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800e220:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 800e224:	fe06 7b07 	vseleq.f64	d7, d6, d7
 800e228:	ed8d 7b00 	vstr	d7, [sp]
 800e22c:	ed9d 0b00 	vldr	d0, [sp]
 800e230:	ed9f 7b03 	vldr	d7, [pc, #12]	; 800e240 <__math_divzero+0x28>
 800e234:	2022      	movs	r0, #34	; 0x22
 800e236:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800e23a:	b002      	add	sp, #8
 800e23c:	f7ff bfbe 	b.w	800e1bc <with_errno>
	...

0800e248 <__math_invalid>:
 800e248:	eeb0 7b40 	vmov.f64	d7, d0
 800e24c:	eeb4 7b47 	vcmp.f64	d7, d7
 800e250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e254:	ee30 6b40 	vsub.f64	d6, d0, d0
 800e258:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800e25c:	d602      	bvs.n	800e264 <__math_invalid+0x1c>
 800e25e:	2021      	movs	r0, #33	; 0x21
 800e260:	f7ff bfac 	b.w	800e1bc <with_errno>
 800e264:	4770      	bx	lr

0800e266 <__math_check_uflow>:
 800e266:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800e26a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e26e:	d102      	bne.n	800e276 <__math_check_uflow+0x10>
 800e270:	2022      	movs	r0, #34	; 0x22
 800e272:	f7ff bfa3 	b.w	800e1bc <with_errno>
 800e276:	4770      	bx	lr

0800e278 <__math_check_oflow>:
 800e278:	ed9f 6b07 	vldr	d6, [pc, #28]	; 800e298 <__math_check_oflow+0x20>
 800e27c:	eeb0 7bc0 	vabs.f64	d7, d0
 800e280:	eeb4 7b46 	vcmp.f64	d7, d6
 800e284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e288:	dd02      	ble.n	800e290 <__math_check_oflow+0x18>
 800e28a:	2022      	movs	r0, #34	; 0x22
 800e28c:	f7ff bf96 	b.w	800e1bc <with_errno>
 800e290:	4770      	bx	lr
 800e292:	bf00      	nop
 800e294:	f3af 8000 	nop.w
 800e298:	ffffffff 	.word	0xffffffff
 800e29c:	7fefffff 	.word	0x7fefffff

0800e2a0 <checkint>:
 800e2a0:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e2a4:	f240 33fe 	movw	r3, #1022	; 0x3fe
 800e2a8:	429a      	cmp	r2, r3
 800e2aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e2ac:	dd2b      	ble.n	800e306 <checkint+0x66>
 800e2ae:	f240 4333 	movw	r3, #1075	; 0x433
 800e2b2:	429a      	cmp	r2, r3
 800e2b4:	dc25      	bgt.n	800e302 <checkint+0x62>
 800e2b6:	1a9b      	subs	r3, r3, r2
 800e2b8:	f1a3 0620 	sub.w	r6, r3, #32
 800e2bc:	f04f 32ff 	mov.w	r2, #4294967295
 800e2c0:	fa02 f606 	lsl.w	r6, r2, r6
 800e2c4:	fa02 f403 	lsl.w	r4, r2, r3
 800e2c8:	f1c3 0520 	rsb	r5, r3, #32
 800e2cc:	4334      	orrs	r4, r6
 800e2ce:	fa22 f505 	lsr.w	r5, r2, r5
 800e2d2:	432c      	orrs	r4, r5
 800e2d4:	409a      	lsls	r2, r3
 800e2d6:	ea20 0602 	bic.w	r6, r0, r2
 800e2da:	ea21 0704 	bic.w	r7, r1, r4
 800e2de:	ea56 0207 	orrs.w	r2, r6, r7
 800e2e2:	f1a3 0420 	sub.w	r4, r3, #32
 800e2e6:	f1c3 0220 	rsb	r2, r3, #32
 800e2ea:	d10c      	bne.n	800e306 <checkint+0x66>
 800e2ec:	40d8      	lsrs	r0, r3
 800e2ee:	fa01 f302 	lsl.w	r3, r1, r2
 800e2f2:	4318      	orrs	r0, r3
 800e2f4:	40e1      	lsrs	r1, r4
 800e2f6:	4308      	orrs	r0, r1
 800e2f8:	f000 0301 	and.w	r3, r0, #1
 800e2fc:	f1c3 0002 	rsb	r0, r3, #2
 800e300:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e302:	2002      	movs	r0, #2
 800e304:	e7fc      	b.n	800e300 <checkint+0x60>
 800e306:	2000      	movs	r0, #0
 800e308:	e7fa      	b.n	800e300 <checkint+0x60>
 800e30a:	0000      	movs	r0, r0
 800e30c:	0000      	movs	r0, r0
	...

0800e310 <pow>:
 800e310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e314:	ed2d 8b0a 	vpush	{d8-d12}
 800e318:	b09b      	sub	sp, #108	; 0x6c
 800e31a:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e31e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e322:	ed8d 1b00 	vstr	d1, [sp]
 800e326:	ea4f 5915 	mov.w	r9, r5, lsr #20
 800e32a:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e32e:	f109 30ff 	add.w	r0, r9, #4294967295
 800e332:	f240 71fd 	movw	r1, #2045	; 0x7fd
 800e336:	4288      	cmp	r0, r1
 800e338:	46cc      	mov	ip, r9
 800e33a:	ea4f 5817 	mov.w	r8, r7, lsr #20
 800e33e:	d806      	bhi.n	800e34e <pow+0x3e>
 800e340:	f3c8 010a 	ubfx	r1, r8, #0, #11
 800e344:	f2a1 31be 	subw	r1, r1, #958	; 0x3be
 800e348:	297f      	cmp	r1, #127	; 0x7f
 800e34a:	f240 81ab 	bls.w	800e6a4 <pow+0x394>
 800e34e:	19b1      	adds	r1, r6, r6
 800e350:	9104      	str	r1, [sp, #16]
 800e352:	eb47 0107 	adc.w	r1, r7, r7
 800e356:	9105      	str	r1, [sp, #20]
 800e358:	9904      	ldr	r1, [sp, #16]
 800e35a:	f111 31ff 	adds.w	r1, r1, #4294967295
 800e35e:	460a      	mov	r2, r1
 800e360:	9905      	ldr	r1, [sp, #20]
 800e362:	f141 31ff 	adc.w	r1, r1, #4294967295
 800e366:	460b      	mov	r3, r1
 800e368:	f46f 1100 	mvn.w	r1, #2097152	; 0x200000
 800e36c:	f06f 0001 	mvn.w	r0, #1
 800e370:	4299      	cmp	r1, r3
 800e372:	bf08      	it	eq
 800e374:	4290      	cmpeq	r0, r2
 800e376:	d260      	bcs.n	800e43a <pow+0x12a>
 800e378:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e37c:	4313      	orrs	r3, r2
 800e37e:	d11a      	bne.n	800e3b6 <pow+0xa6>
 800e380:	f485 2200 	eor.w	r2, r5, #524288	; 0x80000
 800e384:	1923      	adds	r3, r4, r4
 800e386:	930c      	str	r3, [sp, #48]	; 0x30
 800e388:	eb42 0302 	adc.w	r3, r2, r2
 800e38c:	930d      	str	r3, [sp, #52]	; 0x34
 800e38e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e392:	4bcf      	ldr	r3, [pc, #828]	; (800e6d0 <pow+0x3c0>)
 800e394:	2200      	movs	r2, #0
 800e396:	428b      	cmp	r3, r1
 800e398:	bf08      	it	eq
 800e39a:	4282      	cmpeq	r2, r0
 800e39c:	f080 8265 	bcs.w	800e86a <pow+0x55a>
 800e3a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e3a4:	ed9d 6b00 	vldr	d6, [sp]
 800e3a8:	ee37 0b06 	vadd.f64	d0, d7, d6
 800e3ac:	b01b      	add	sp, #108	; 0x6c
 800e3ae:	ecbd 8b0a 	vpop	{d8-d12}
 800e3b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3b6:	49c7      	ldr	r1, [pc, #796]	; (800e6d4 <pow+0x3c4>)
 800e3b8:	2000      	movs	r0, #0
 800e3ba:	428d      	cmp	r5, r1
 800e3bc:	bf08      	it	eq
 800e3be:	4284      	cmpeq	r4, r0
 800e3c0:	d10b      	bne.n	800e3da <pow+0xca>
 800e3c2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800e3c6:	19b3      	adds	r3, r6, r6
 800e3c8:	930e      	str	r3, [sp, #56]	; 0x38
 800e3ca:	eb42 0302 	adc.w	r3, r2, r2
 800e3ce:	930f      	str	r3, [sp, #60]	; 0x3c
 800e3d0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800e3d4:	4bbe      	ldr	r3, [pc, #760]	; (800e6d0 <pow+0x3c0>)
 800e3d6:	2200      	movs	r2, #0
 800e3d8:	e7dd      	b.n	800e396 <pow+0x86>
 800e3da:	1921      	adds	r1, r4, r4
 800e3dc:	9106      	str	r1, [sp, #24]
 800e3de:	eb45 0105 	adc.w	r1, r5, r5
 800e3e2:	9107      	str	r1, [sp, #28]
 800e3e4:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800e3e8:	49bb      	ldr	r1, [pc, #748]	; (800e6d8 <pow+0x3c8>)
 800e3ea:	2000      	movs	r0, #0
 800e3ec:	42a1      	cmp	r1, r4
 800e3ee:	bf08      	it	eq
 800e3f0:	4298      	cmpeq	r0, r3
 800e3f2:	d3d5      	bcc.n	800e3a0 <pow+0x90>
 800e3f4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800e3f8:	428c      	cmp	r4, r1
 800e3fa:	bf08      	it	eq
 800e3fc:	4283      	cmpeq	r3, r0
 800e3fe:	d1cf      	bne.n	800e3a0 <pow+0x90>
 800e400:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800e404:	49b5      	ldr	r1, [pc, #724]	; (800e6dc <pow+0x3cc>)
 800e406:	2000      	movs	r0, #0
 800e408:	428c      	cmp	r4, r1
 800e40a:	bf08      	it	eq
 800e40c:	4283      	cmpeq	r3, r0
 800e40e:	f000 822c 	beq.w	800e86a <pow+0x55a>
 800e412:	49b3      	ldr	r1, [pc, #716]	; (800e6e0 <pow+0x3d0>)
 800e414:	f04f 30ff 	mov.w	r0, #4294967295
 800e418:	42a1      	cmp	r1, r4
 800e41a:	bf08      	it	eq
 800e41c:	4298      	cmpeq	r0, r3
 800e41e:	ea6f 0307 	mvn.w	r3, r7
 800e422:	bf34      	ite	cc
 800e424:	2201      	movcc	r2, #1
 800e426:	2200      	movcs	r2, #0
 800e428:	0fdb      	lsrs	r3, r3, #31
 800e42a:	429a      	cmp	r2, r3
 800e42c:	f040 821a 	bne.w	800e864 <pow+0x554>
 800e430:	ed9d 7b00 	vldr	d7, [sp]
 800e434:	ee27 0b07 	vmul.f64	d0, d7, d7
 800e438:	e7b8      	b.n	800e3ac <pow+0x9c>
 800e43a:	1923      	adds	r3, r4, r4
 800e43c:	9308      	str	r3, [sp, #32]
 800e43e:	eb45 0305 	adc.w	r3, r5, r5
 800e442:	9309      	str	r3, [sp, #36]	; 0x24
 800e444:	9b08      	ldr	r3, [sp, #32]
 800e446:	f113 33ff 	adds.w	r3, r3, #4294967295
 800e44a:	9310      	str	r3, [sp, #64]	; 0x40
 800e44c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e44e:	f143 33ff 	adc.w	r3, r3, #4294967295
 800e452:	9311      	str	r3, [sp, #68]	; 0x44
 800e454:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e458:	4299      	cmp	r1, r3
 800e45a:	bf08      	it	eq
 800e45c:	4290      	cmpeq	r0, r2
 800e45e:	d22d      	bcs.n	800e4bc <pow+0x1ac>
 800e460:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e464:	2c00      	cmp	r4, #0
 800e466:	f175 0300 	sbcs.w	r3, r5, #0
 800e46a:	ee27 0b07 	vmul.f64	d0, d7, d7
 800e46e:	da16      	bge.n	800e49e <pow+0x18e>
 800e470:	4630      	mov	r0, r6
 800e472:	4639      	mov	r1, r7
 800e474:	f7ff ff14 	bl	800e2a0 <checkint>
 800e478:	2801      	cmp	r0, #1
 800e47a:	d110      	bne.n	800e49e <pow+0x18e>
 800e47c:	eeb1 0b40 	vneg.f64	d0, d0
 800e480:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 800e484:	4323      	orrs	r3, r4
 800e486:	d10c      	bne.n	800e4a2 <pow+0x192>
 800e488:	2e00      	cmp	r6, #0
 800e48a:	f177 0300 	sbcs.w	r3, r7, #0
 800e48e:	da8d      	bge.n	800e3ac <pow+0x9c>
 800e490:	b01b      	add	sp, #108	; 0x6c
 800e492:	ecbd 8b0a 	vpop	{d8-d12}
 800e496:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e49a:	f7ff bebd 	b.w	800e218 <__math_divzero>
 800e49e:	2000      	movs	r0, #0
 800e4a0:	e7ee      	b.n	800e480 <pow+0x170>
 800e4a2:	2e00      	cmp	r6, #0
 800e4a4:	f177 0300 	sbcs.w	r3, r7, #0
 800e4a8:	da80      	bge.n	800e3ac <pow+0x9c>
 800e4aa:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800e4ae:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800e4b2:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 800e4b6:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 800e4ba:	e777      	b.n	800e3ac <pow+0x9c>
 800e4bc:	2c00      	cmp	r4, #0
 800e4be:	f175 0300 	sbcs.w	r3, r5, #0
 800e4c2:	da35      	bge.n	800e530 <pow+0x220>
 800e4c4:	4630      	mov	r0, r6
 800e4c6:	4639      	mov	r1, r7
 800e4c8:	f7ff feea 	bl	800e2a0 <checkint>
 800e4cc:	b940      	cbnz	r0, 800e4e0 <pow+0x1d0>
 800e4ce:	ed9d 0b02 	vldr	d0, [sp, #8]
 800e4d2:	b01b      	add	sp, #108	; 0x6c
 800e4d4:	ecbd 8b0a 	vpop	{d8-d12}
 800e4d8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4dc:	f7ff beb4 	b.w	800e248 <__math_invalid>
 800e4e0:	2801      	cmp	r0, #1
 800e4e2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e4e6:	bf14      	ite	ne
 800e4e8:	2000      	movne	r0, #0
 800e4ea:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 800e4ee:	461d      	mov	r5, r3
 800e4f0:	f3c9 0c0a 	ubfx	ip, r9, #0, #11
 800e4f4:	f3c8 030a 	ubfx	r3, r8, #0, #11
 800e4f8:	f2a3 32be 	subw	r2, r3, #958	; 0x3be
 800e4fc:	2a7f      	cmp	r2, #127	; 0x7f
 800e4fe:	d933      	bls.n	800e568 <pow+0x258>
 800e500:	4974      	ldr	r1, [pc, #464]	; (800e6d4 <pow+0x3c4>)
 800e502:	2000      	movs	r0, #0
 800e504:	428d      	cmp	r5, r1
 800e506:	bf08      	it	eq
 800e508:	4284      	cmpeq	r4, r0
 800e50a:	f000 81ae 	beq.w	800e86a <pow+0x55a>
 800e50e:	f240 32bd 	movw	r2, #957	; 0x3bd
 800e512:	4293      	cmp	r3, r2
 800e514:	d80e      	bhi.n	800e534 <pow+0x224>
 800e516:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800e51a:	ed9d 7b00 	vldr	d7, [sp]
 800e51e:	42a9      	cmp	r1, r5
 800e520:	bf08      	it	eq
 800e522:	42a0      	cmpeq	r0, r4
 800e524:	bf34      	ite	cc
 800e526:	ee37 0b00 	vaddcc.f64	d0, d7, d0
 800e52a:	ee30 0b47 	vsubcs.f64	d0, d0, d7
 800e52e:	e73d      	b.n	800e3ac <pow+0x9c>
 800e530:	2000      	movs	r0, #0
 800e532:	e7df      	b.n	800e4f4 <pow+0x1e4>
 800e534:	42a9      	cmp	r1, r5
 800e536:	bf08      	it	eq
 800e538:	42a0      	cmpeq	r0, r4
 800e53a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800e53e:	bf2c      	ite	cs
 800e540:	2301      	movcs	r3, #1
 800e542:	2300      	movcc	r3, #0
 800e544:	4590      	cmp	r8, r2
 800e546:	bf8c      	ite	hi
 800e548:	f04f 0800 	movhi.w	r8, #0
 800e54c:	f04f 0801 	movls.w	r8, #1
 800e550:	4543      	cmp	r3, r8
 800e552:	f04f 0000 	mov.w	r0, #0
 800e556:	f000 80af 	beq.w	800e6b8 <pow+0x3a8>
 800e55a:	b01b      	add	sp, #108	; 0x6c
 800e55c:	ecbd 8b0a 	vpop	{d8-d12}
 800e560:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e564:	f7ff be50 	b.w	800e208 <__math_oflow>
 800e568:	f1bc 0f00 	cmp.w	ip, #0
 800e56c:	d10e      	bne.n	800e58c <pow+0x27c>
 800e56e:	ed9f 7b56 	vldr	d7, [pc, #344]	; 800e6c8 <pow+0x3b8>
 800e572:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e576:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e57a:	ec57 6b17 	vmov	r6, r7, d7
 800e57e:	4b59      	ldr	r3, [pc, #356]	; (800e6e4 <pow+0x3d4>)
 800e580:	2100      	movs	r1, #0
 800e582:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800e586:	1874      	adds	r4, r6, r1
 800e588:	eb42 0503 	adc.w	r5, r2, r3
 800e58c:	2300      	movs	r3, #0
 800e58e:	18e3      	adds	r3, r4, r3
 800e590:	4b55      	ldr	r3, [pc, #340]	; (800e6e8 <pow+0x3d8>)
 800e592:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800e596:	eb45 0303 	adc.w	r3, r5, r3
 800e59a:	1519      	asrs	r1, r3, #20
 800e59c:	ee03 1a10 	vmov	s6, r1
 800e5a0:	0d1e      	lsrs	r6, r3, #20
 800e5a2:	2100      	movs	r1, #0
 800e5a4:	f3c3 3246 	ubfx	r2, r3, #13, #7
 800e5a8:	0536      	lsls	r6, r6, #20
 800e5aa:	1a63      	subs	r3, r4, r1
 800e5ac:	9312      	str	r3, [sp, #72]	; 0x48
 800e5ae:	eb65 0306 	sbc.w	r3, r5, r6
 800e5b2:	9313      	str	r3, [sp, #76]	; 0x4c
 800e5b4:	4b4d      	ldr	r3, [pc, #308]	; (800e6ec <pow+0x3dc>)
 800e5b6:	eb03 1442 	add.w	r4, r3, r2, lsl #5
 800e5ba:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800e5be:	ed9d 5b12 	vldr	d5, [sp, #72]	; 0x48
 800e5c2:	eea5 6b07 	vfma.f64	d6, d5, d7
 800e5c6:	ed93 7b00 	vldr	d7, [r3]
 800e5ca:	ed94 5b16 	vldr	d5, [r4, #88]	; 0x58
 800e5ce:	ed93 4b02 	vldr	d4, [r3, #8]
 800e5d2:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 800e5d6:	eea3 5b07 	vfma.f64	d5, d3, d7
 800e5da:	ed94 7b18 	vldr	d7, [r4, #96]	; 0x60
 800e5de:	ee36 9b05 	vadd.f64	d9, d6, d5
 800e5e2:	ee35 5b49 	vsub.f64	d5, d5, d9
 800e5e6:	eea3 7b04 	vfma.f64	d7, d3, d4
 800e5ea:	ed93 4b04 	vldr	d4, [r3, #16]
 800e5ee:	ee35 5b06 	vadd.f64	d5, d5, d6
 800e5f2:	ee37 7b05 	vadd.f64	d7, d7, d5
 800e5f6:	ee26 4b04 	vmul.f64	d4, d6, d4
 800e5fa:	ed93 3b08 	vldr	d3, [r3, #32]
 800e5fe:	ee26 0b04 	vmul.f64	d0, d6, d4
 800e602:	eeb0 8b40 	vmov.f64	d8, d0
 800e606:	ee94 8b06 	vfnms.f64	d8, d4, d6
 800e60a:	ed93 4b06 	vldr	d4, [r3, #24]
 800e60e:	ee26 ab00 	vmul.f64	d10, d6, d0
 800e612:	ee39 1b00 	vadd.f64	d1, d9, d0
 800e616:	ed93 2b0c 	vldr	d2, [r3, #48]	; 0x30
 800e61a:	eea6 4b03 	vfma.f64	d4, d6, d3
 800e61e:	ee39 9b41 	vsub.f64	d9, d9, d1
 800e622:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
 800e626:	ee37 8b08 	vadd.f64	d8, d7, d8
 800e62a:	ee39 9b00 	vadd.f64	d9, d9, d0
 800e62e:	eea6 3b02 	vfma.f64	d3, d6, d2
 800e632:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 800e636:	ee38 9b09 	vadd.f64	d9, d8, d9
 800e63a:	ed93 2b0e 	vldr	d2, [r3, #56]	; 0x38
 800e63e:	eea6 2b0c 	vfma.f64	d2, d6, d12
 800e642:	ed9d 6b00 	vldr	d6, [sp]
 800e646:	eea0 3b02 	vfma.f64	d3, d0, d2
 800e64a:	eea0 4b03 	vfma.f64	d4, d0, d3
 800e64e:	eeaa 9b04 	vfma.f64	d9, d10, d4
 800e652:	ee31 7b09 	vadd.f64	d7, d1, d9
 800e656:	ee26 6b07 	vmul.f64	d6, d6, d7
 800e65a:	ed8d 6b02 	vstr	d6, [sp, #8]
 800e65e:	eeb0 3b46 	vmov.f64	d3, d6
 800e662:	ee31 1b47 	vsub.f64	d1, d1, d7
 800e666:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e66a:	ee31 9b09 	vadd.f64	d9, d1, d9
 800e66e:	ed9d 6b00 	vldr	d6, [sp]
 800e672:	f3c3 570a 	ubfx	r7, r3, #20, #11
 800e676:	f46f 7472 	mvn.w	r4, #968	; 0x3c8
 800e67a:	193c      	adds	r4, r7, r4
 800e67c:	2c3e      	cmp	r4, #62	; 0x3e
 800e67e:	ee96 3b07 	vfnms.f64	d3, d6, d7
 800e682:	eea6 3b09 	vfma.f64	d3, d6, d9
 800e686:	d934      	bls.n	800e6f2 <pow+0x3e2>
 800e688:	428c      	cmp	r4, r1
 800e68a:	da0d      	bge.n	800e6a8 <pow+0x398>
 800e68c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800e690:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e694:	ee37 0b00 	vadd.f64	d0, d7, d0
 800e698:	2800      	cmp	r0, #0
 800e69a:	f43f ae87 	beq.w	800e3ac <pow+0x9c>
 800e69e:	eeb1 0b40 	vneg.f64	d0, d0
 800e6a2:	e683      	b.n	800e3ac <pow+0x9c>
 800e6a4:	2000      	movs	r0, #0
 800e6a6:	e771      	b.n	800e58c <pow+0x27c>
 800e6a8:	f5b7 6f81 	cmp.w	r7, #1032	; 0x408
 800e6ac:	d920      	bls.n	800e6f0 <pow+0x3e0>
 800e6ae:	2a00      	cmp	r2, #0
 800e6b0:	f173 0300 	sbcs.w	r3, r3, #0
 800e6b4:	f6bf af51 	bge.w	800e55a <pow+0x24a>
 800e6b8:	b01b      	add	sp, #108	; 0x6c
 800e6ba:	ecbd 8b0a 	vpop	{d8-d12}
 800e6be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6c2:	f7ff bd99 	b.w	800e1f8 <__math_uflow>
 800e6c6:	bf00      	nop
 800e6c8:	00000000 	.word	0x00000000
 800e6cc:	43300000 	.word	0x43300000
 800e6d0:	fff00000 	.word	0xfff00000
 800e6d4:	3ff00000 	.word	0x3ff00000
 800e6d8:	ffe00000 	.word	0xffe00000
 800e6dc:	7fe00000 	.word	0x7fe00000
 800e6e0:	7fdfffff 	.word	0x7fdfffff
 800e6e4:	fcc00000 	.word	0xfcc00000
 800e6e8:	c0196aab 	.word	0xc0196aab
 800e6ec:	08029710 	.word	0x08029710
 800e6f0:	460f      	mov	r7, r1
 800e6f2:	4e65      	ldr	r6, [pc, #404]	; (800e888 <pow+0x578>)
 800e6f4:	ed9d 4b02 	vldr	d4, [sp, #8]
 800e6f8:	ed96 6b02 	vldr	d6, [r6, #8]
 800e6fc:	ed96 7b00 	vldr	d7, [r6]
 800e700:	eeb0 5b46 	vmov.f64	d5, d6
 800e704:	eea4 5b07 	vfma.f64	d5, d4, d7
 800e708:	ed8d 5b00 	vstr	d5, [sp]
 800e70c:	ee35 6b46 	vsub.f64	d6, d5, d6
 800e710:	eeb0 5b44 	vmov.f64	d5, d4
 800e714:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e718:	ed96 7b04 	vldr	d7, [r6, #16]
 800e71c:	f002 017f 	and.w	r1, r2, #127	; 0x7f
 800e720:	eea6 5b07 	vfma.f64	d5, d6, d7
 800e724:	eeb0 7b45 	vmov.f64	d7, d5
 800e728:	ed96 5b06 	vldr	d5, [r6, #24]
 800e72c:	1849      	adds	r1, r1, r1
 800e72e:	eb06 0cc1 	add.w	ip, r6, r1, lsl #3
 800e732:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 800e736:	eea6 7b05 	vfma.f64	d7, d6, d5
 800e73a:	ed96 4b0a 	vldr	d4, [r6, #40]	; 0x28
 800e73e:	ee33 3b07 	vadd.f64	d3, d3, d7
 800e742:	ee23 6b03 	vmul.f64	d6, d3, d3
 800e746:	ed91 7b1c 	vldr	d7, [r1, #112]	; 0x70
 800e74a:	ed96 5b08 	vldr	d5, [r6, #32]
 800e74e:	ee33 7b07 	vadd.f64	d7, d3, d7
 800e752:	1814      	adds	r4, r2, r0
 800e754:	0365      	lsls	r5, r4, #13
 800e756:	e9dc 4c1e 	ldrd	r4, ip, [ip, #120]	; 0x78
 800e75a:	eea3 5b04 	vfma.f64	d5, d3, d4
 800e75e:	eea6 7b05 	vfma.f64	d7, d6, d5
 800e762:	ed96 4b0e 	vldr	d4, [r6, #56]	; 0x38
 800e766:	ee26 6b06 	vmul.f64	d6, d6, d6
 800e76a:	ed96 5b0c 	vldr	d5, [r6, #48]	; 0x30
 800e76e:	2000      	movs	r0, #0
 800e770:	eb10 0a04 	adds.w	sl, r0, r4
 800e774:	eea3 5b04 	vfma.f64	d5, d3, d4
 800e778:	eb45 0b0c 	adc.w	fp, r5, ip
 800e77c:	eea6 7b05 	vfma.f64	d7, d6, d5
 800e780:	2f00      	cmp	r7, #0
 800e782:	d16a      	bne.n	800e85a <pow+0x54a>
 800e784:	f002 4000 	and.w	r0, r2, #2147483648	; 0x80000000
 800e788:	4639      	mov	r1, r7
 800e78a:	ea50 0301 	orrs.w	r3, r0, r1
 800e78e:	f04f 0300 	mov.w	r3, #0
 800e792:	d115      	bne.n	800e7c0 <pow+0x4b0>
 800e794:	eb1a 0303 	adds.w	r3, sl, r3
 800e798:	ee0b 3a10 	vmov	s22, r3
 800e79c:	4b3b      	ldr	r3, [pc, #236]	; (800e88c <pow+0x57c>)
 800e79e:	ed9f 0b34 	vldr	d0, [pc, #208]	; 800e870 <pow+0x560>
 800e7a2:	eb4b 0303 	adc.w	r3, fp, r3
 800e7a6:	ee0b 3a90 	vmov	s23, r3
 800e7aa:	eea7 bb0b 	vfma.f64	d11, d7, d11
 800e7ae:	ee2b 0b00 	vmul.f64	d0, d11, d0
 800e7b2:	b01b      	add	sp, #108	; 0x6c
 800e7b4:	ecbd 8b0a 	vpop	{d8-d12}
 800e7b8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7bc:	f7ff bd5c 	b.w	800e278 <__math_check_oflow>
 800e7c0:	eb1a 0303 	adds.w	r3, sl, r3
 800e7c4:	930a      	str	r3, [sp, #40]	; 0x28
 800e7c6:	4b32      	ldr	r3, [pc, #200]	; (800e890 <pow+0x580>)
 800e7c8:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800e7cc:	eb4b 0303 	adc.w	r3, fp, r3
 800e7d0:	930b      	str	r3, [sp, #44]	; 0x2c
 800e7d2:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800e7d6:	ee27 6b05 	vmul.f64	d6, d7, d5
 800e7da:	ee35 7b06 	vadd.f64	d7, d5, d6
 800e7de:	eeb0 3bc7 	vabs.f64	d3, d7
 800e7e2:	eeb4 3bc4 	vcmpe.f64	d3, d4
 800e7e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7ea:	ed9f 0b23 	vldr	d0, [pc, #140]	; 800e878 <pow+0x568>
 800e7ee:	d52b      	bpl.n	800e848 <pow+0x538>
 800e7f0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800e7f4:	ee35 5b47 	vsub.f64	d5, d5, d7
 800e7f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7fc:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 800e800:	ee35 6b06 	vadd.f64	d6, d5, d6
 800e804:	bf48      	it	mi
 800e806:	eeb0 4b43 	vmovmi.f64	d4, d3
 800e80a:	ee37 3b04 	vadd.f64	d3, d7, d4
 800e80e:	ee34 5b43 	vsub.f64	d5, d4, d3
 800e812:	ee35 7b07 	vadd.f64	d7, d5, d7
 800e816:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e81a:	ee37 7b03 	vadd.f64	d7, d7, d3
 800e81e:	ee37 7b44 	vsub.f64	d7, d7, d4
 800e822:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e82a:	d105      	bne.n	800e838 <pow+0x528>
 800e82c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e82e:	463a      	mov	r2, r7
 800e830:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800e834:	ec43 2b17 	vmov	d7, r2, r3
 800e838:	ed8d 0b16 	vstr	d0, [sp, #88]	; 0x58
 800e83c:	ed9d 6b16 	vldr	d6, [sp, #88]	; 0x58
 800e840:	ee26 6b00 	vmul.f64	d6, d6, d0
 800e844:	ed8d 6b18 	vstr	d6, [sp, #96]	; 0x60
 800e848:	ee27 0b00 	vmul.f64	d0, d7, d0
 800e84c:	b01b      	add	sp, #108	; 0x6c
 800e84e:	ecbd 8b0a 	vpop	{d8-d12}
 800e852:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e856:	f7ff bd06 	b.w	800e266 <__math_check_uflow>
 800e85a:	ec4b ab10 	vmov	d0, sl, fp
 800e85e:	eea7 0b00 	vfma.f64	d0, d7, d0
 800e862:	e5a3      	b.n	800e3ac <pow+0x9c>
 800e864:	ed9f 0b06 	vldr	d0, [pc, #24]	; 800e880 <pow+0x570>
 800e868:	e5a0      	b.n	800e3ac <pow+0x9c>
 800e86a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800e86e:	e59d      	b.n	800e3ac <pow+0x9c>
 800e870:	00000000 	.word	0x00000000
 800e874:	7f000000 	.word	0x7f000000
 800e878:	00000000 	.word	0x00000000
 800e87c:	00100000 	.word	0x00100000
	...
 800e888:	0802aa00 	.word	0x0802aa00
 800e88c:	c0f00000 	.word	0xc0f00000
 800e890:	3fe00000 	.word	0x3fe00000
 800e894:	00000000 	.word	0x00000000

0800e898 <ceil>:
 800e898:	ee10 1a90 	vmov	r1, s1
 800e89c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e8a0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800e8a4:	2b13      	cmp	r3, #19
 800e8a6:	b530      	push	{r4, r5, lr}
 800e8a8:	ee10 0a10 	vmov	r0, s0
 800e8ac:	ee10 5a10 	vmov	r5, s0
 800e8b0:	dc2f      	bgt.n	800e912 <ceil+0x7a>
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	da13      	bge.n	800e8de <ceil+0x46>
 800e8b6:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800e978 <ceil+0xe0>
 800e8ba:	ee30 0b07 	vadd.f64	d0, d0, d7
 800e8be:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e8c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8c6:	dd05      	ble.n	800e8d4 <ceil+0x3c>
 800e8c8:	2900      	cmp	r1, #0
 800e8ca:	db4c      	blt.n	800e966 <ceil+0xce>
 800e8cc:	4301      	orrs	r1, r0
 800e8ce:	d04e      	beq.n	800e96e <ceil+0xd6>
 800e8d0:	492b      	ldr	r1, [pc, #172]	; (800e980 <ceil+0xe8>)
 800e8d2:	2000      	movs	r0, #0
 800e8d4:	460b      	mov	r3, r1
 800e8d6:	4602      	mov	r2, r0
 800e8d8:	ec43 2b10 	vmov	d0, r2, r3
 800e8dc:	e020      	b.n	800e920 <ceil+0x88>
 800e8de:	4a29      	ldr	r2, [pc, #164]	; (800e984 <ceil+0xec>)
 800e8e0:	411a      	asrs	r2, r3
 800e8e2:	ea01 0402 	and.w	r4, r1, r2
 800e8e6:	4304      	orrs	r4, r0
 800e8e8:	d01a      	beq.n	800e920 <ceil+0x88>
 800e8ea:	ed9f 7b23 	vldr	d7, [pc, #140]	; 800e978 <ceil+0xe0>
 800e8ee:	ee30 0b07 	vadd.f64	d0, d0, d7
 800e8f2:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e8f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8fa:	ddeb      	ble.n	800e8d4 <ceil+0x3c>
 800e8fc:	2900      	cmp	r1, #0
 800e8fe:	bfc2      	ittt	gt
 800e900:	f44f 1080 	movgt.w	r0, #1048576	; 0x100000
 800e904:	fa40 f303 	asrgt.w	r3, r0, r3
 800e908:	18c9      	addgt	r1, r1, r3
 800e90a:	ea21 0102 	bic.w	r1, r1, r2
 800e90e:	2000      	movs	r0, #0
 800e910:	e7e0      	b.n	800e8d4 <ceil+0x3c>
 800e912:	2b33      	cmp	r3, #51	; 0x33
 800e914:	dd05      	ble.n	800e922 <ceil+0x8a>
 800e916:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e91a:	d101      	bne.n	800e920 <ceil+0x88>
 800e91c:	ee30 0b00 	vadd.f64	d0, d0, d0
 800e920:	bd30      	pop	{r4, r5, pc}
 800e922:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800e926:	f04f 32ff 	mov.w	r2, #4294967295
 800e92a:	40e2      	lsrs	r2, r4
 800e92c:	4202      	tst	r2, r0
 800e92e:	d0f7      	beq.n	800e920 <ceil+0x88>
 800e930:	ed9f 7b11 	vldr	d7, [pc, #68]	; 800e978 <ceil+0xe0>
 800e934:	ee30 0b07 	vadd.f64	d0, d0, d7
 800e938:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e93c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e940:	ddc8      	ble.n	800e8d4 <ceil+0x3c>
 800e942:	2900      	cmp	r1, #0
 800e944:	dd02      	ble.n	800e94c <ceil+0xb4>
 800e946:	2b14      	cmp	r3, #20
 800e948:	d103      	bne.n	800e952 <ceil+0xba>
 800e94a:	3101      	adds	r1, #1
 800e94c:	ea20 0002 	bic.w	r0, r0, r2
 800e950:	e7c0      	b.n	800e8d4 <ceil+0x3c>
 800e952:	2401      	movs	r4, #1
 800e954:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800e958:	fa04 f303 	lsl.w	r3, r4, r3
 800e95c:	4418      	add	r0, r3
 800e95e:	42a8      	cmp	r0, r5
 800e960:	bf38      	it	cc
 800e962:	1909      	addcc	r1, r1, r4
 800e964:	e7f2      	b.n	800e94c <ceil+0xb4>
 800e966:	2000      	movs	r0, #0
 800e968:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800e96c:	e7b2      	b.n	800e8d4 <ceil+0x3c>
 800e96e:	4608      	mov	r0, r1
 800e970:	e7b0      	b.n	800e8d4 <ceil+0x3c>
 800e972:	bf00      	nop
 800e974:	f3af 8000 	nop.w
 800e978:	8800759c 	.word	0x8800759c
 800e97c:	7e37e43c 	.word	0x7e37e43c
 800e980:	3ff00000 	.word	0x3ff00000
 800e984:	000fffff 	.word	0x000fffff

0800e988 <cos>:
 800e988:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e98a:	eeb0 7b40 	vmov.f64	d7, d0
 800e98e:	ee17 3a90 	vmov	r3, s15
 800e992:	4a1f      	ldr	r2, [pc, #124]	; (800ea10 <cos+0x88>)
 800e994:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e998:	4293      	cmp	r3, r2
 800e99a:	dc04      	bgt.n	800e9a6 <cos+0x1e>
 800e99c:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 800ea08 <cos+0x80>
 800e9a0:	f000 fa0a 	bl	800edb8 <__kernel_cos>
 800e9a4:	e004      	b.n	800e9b0 <cos+0x28>
 800e9a6:	4a1b      	ldr	r2, [pc, #108]	; (800ea14 <cos+0x8c>)
 800e9a8:	4293      	cmp	r3, r2
 800e9aa:	dd04      	ble.n	800e9b6 <cos+0x2e>
 800e9ac:	ee30 0b40 	vsub.f64	d0, d0, d0
 800e9b0:	b005      	add	sp, #20
 800e9b2:	f85d fb04 	ldr.w	pc, [sp], #4
 800e9b6:	4668      	mov	r0, sp
 800e9b8:	f000 f8ba 	bl	800eb30 <__ieee754_rem_pio2>
 800e9bc:	f000 0003 	and.w	r0, r0, #3
 800e9c0:	2801      	cmp	r0, #1
 800e9c2:	d007      	beq.n	800e9d4 <cos+0x4c>
 800e9c4:	2802      	cmp	r0, #2
 800e9c6:	d00e      	beq.n	800e9e6 <cos+0x5e>
 800e9c8:	b9a0      	cbnz	r0, 800e9f4 <cos+0x6c>
 800e9ca:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e9ce:	ed9d 0b00 	vldr	d0, [sp]
 800e9d2:	e7e5      	b.n	800e9a0 <cos+0x18>
 800e9d4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e9d8:	ed9d 0b00 	vldr	d0, [sp]
 800e9dc:	f000 fcd8 	bl	800f390 <__kernel_sin>
 800e9e0:	eeb1 0b40 	vneg.f64	d0, d0
 800e9e4:	e7e4      	b.n	800e9b0 <cos+0x28>
 800e9e6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e9ea:	ed9d 0b00 	vldr	d0, [sp]
 800e9ee:	f000 f9e3 	bl	800edb8 <__kernel_cos>
 800e9f2:	e7f5      	b.n	800e9e0 <cos+0x58>
 800e9f4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e9f8:	ed9d 0b00 	vldr	d0, [sp]
 800e9fc:	2001      	movs	r0, #1
 800e9fe:	f000 fcc7 	bl	800f390 <__kernel_sin>
 800ea02:	e7d5      	b.n	800e9b0 <cos+0x28>
 800ea04:	f3af 8000 	nop.w
	...
 800ea10:	3fe921fb 	.word	0x3fe921fb
 800ea14:	7fefffff 	.word	0x7fefffff

0800ea18 <logf>:
 800ea18:	ee10 3a10 	vmov	r3, s0
 800ea1c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800ea20:	b410      	push	{r4}
 800ea22:	d055      	beq.n	800ead0 <logf+0xb8>
 800ea24:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
 800ea28:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800ea2c:	d31a      	bcc.n	800ea64 <logf+0x4c>
 800ea2e:	005a      	lsls	r2, r3, #1
 800ea30:	d104      	bne.n	800ea3c <logf+0x24>
 800ea32:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ea36:	2001      	movs	r0, #1
 800ea38:	f000 bd0e 	b.w	800f458 <__math_divzerof>
 800ea3c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ea40:	d043      	beq.n	800eaca <logf+0xb2>
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	db02      	blt.n	800ea4c <logf+0x34>
 800ea46:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800ea4a:	d303      	bcc.n	800ea54 <logf+0x3c>
 800ea4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ea50:	f000 bd12 	b.w	800f478 <__math_invalidf>
 800ea54:	eddf 7a20 	vldr	s15, [pc, #128]	; 800ead8 <logf+0xc0>
 800ea58:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ea5c:	ee10 3a10 	vmov	r3, s0
 800ea60:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
 800ea64:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
 800ea68:	491c      	ldr	r1, [pc, #112]	; (800eadc <logf+0xc4>)
 800ea6a:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
 800ea6e:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 800ea72:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 800ea76:	0dd4      	lsrs	r4, r2, #23
 800ea78:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 800ea7c:	05e4      	lsls	r4, r4, #23
 800ea7e:	ed90 6b00 	vldr	d6, [r0]
 800ea82:	1b1b      	subs	r3, r3, r4
 800ea84:	ee07 3a90 	vmov	s15, r3
 800ea88:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
 800ea8c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800ea90:	15d2      	asrs	r2, r2, #23
 800ea92:	eea6 0b07 	vfma.f64	d0, d6, d7
 800ea96:	ed90 6b02 	vldr	d6, [r0, #8]
 800ea9a:	ee07 2a90 	vmov	s15, r2
 800ea9e:	ed91 4b44 	vldr	d4, [r1, #272]	; 0x110
 800eaa2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800eaa6:	eea7 6b05 	vfma.f64	d6, d7, d5
 800eaaa:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
 800eaae:	ee20 5b00 	vmul.f64	d5, d0, d0
 800eab2:	eea4 7b00 	vfma.f64	d7, d4, d0
 800eab6:	ed91 4b42 	vldr	d4, [r1, #264]	; 0x108
 800eaba:	ee30 0b06 	vadd.f64	d0, d0, d6
 800eabe:	eea4 7b05 	vfma.f64	d7, d4, d5
 800eac2:	eea5 0b07 	vfma.f64	d0, d5, d7
 800eac6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800eaca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eace:	4770      	bx	lr
 800ead0:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800eae0 <logf+0xc8>
 800ead4:	e7f9      	b.n	800eaca <logf+0xb2>
 800ead6:	bf00      	nop
 800ead8:	4b000000 	.word	0x4b000000
 800eadc:	0802a758 	.word	0x0802a758
 800eae0:	00000000 	.word	0x00000000

0800eae4 <sqrtf>:
 800eae4:	b508      	push	{r3, lr}
 800eae6:	ed2d 8b02 	vpush	{d8}
 800eaea:	eeb0 8a40 	vmov.f32	s16, s0
 800eaee:	f000 f95f 	bl	800edb0 <__ieee754_sqrtf>
 800eaf2:	4b0d      	ldr	r3, [pc, #52]	; (800eb28 <sqrtf+0x44>)
 800eaf4:	f993 3000 	ldrsb.w	r3, [r3]
 800eaf8:	3301      	adds	r3, #1
 800eafa:	d011      	beq.n	800eb20 <sqrtf+0x3c>
 800eafc:	eeb4 8a48 	vcmp.f32	s16, s16
 800eb00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb04:	d60c      	bvs.n	800eb20 <sqrtf+0x3c>
 800eb06:	eddf 8a09 	vldr	s17, [pc, #36]	; 800eb2c <sqrtf+0x48>
 800eb0a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800eb0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb12:	d505      	bpl.n	800eb20 <sqrtf+0x3c>
 800eb14:	f000 fdde 	bl	800f6d4 <__errno>
 800eb18:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800eb1c:	2321      	movs	r3, #33	; 0x21
 800eb1e:	6003      	str	r3, [r0, #0]
 800eb20:	ecbd 8b02 	vpop	{d8}
 800eb24:	bd08      	pop	{r3, pc}
 800eb26:	bf00      	nop
 800eb28:	20000018 	.word	0x20000018
 800eb2c:	00000000 	.word	0x00000000

0800eb30 <__ieee754_rem_pio2>:
 800eb30:	b570      	push	{r4, r5, r6, lr}
 800eb32:	eeb0 7b40 	vmov.f64	d7, d0
 800eb36:	ee17 5a90 	vmov	r5, s15
 800eb3a:	4b97      	ldr	r3, [pc, #604]	; (800ed98 <__ieee754_rem_pio2+0x268>)
 800eb3c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800eb40:	429e      	cmp	r6, r3
 800eb42:	b088      	sub	sp, #32
 800eb44:	4604      	mov	r4, r0
 800eb46:	dc07      	bgt.n	800eb58 <__ieee754_rem_pio2+0x28>
 800eb48:	2200      	movs	r2, #0
 800eb4a:	2300      	movs	r3, #0
 800eb4c:	ed84 0b00 	vstr	d0, [r4]
 800eb50:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800eb54:	2000      	movs	r0, #0
 800eb56:	e01b      	b.n	800eb90 <__ieee754_rem_pio2+0x60>
 800eb58:	4b90      	ldr	r3, [pc, #576]	; (800ed9c <__ieee754_rem_pio2+0x26c>)
 800eb5a:	429e      	cmp	r6, r3
 800eb5c:	dc3b      	bgt.n	800ebd6 <__ieee754_rem_pio2+0xa6>
 800eb5e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800eb62:	2d00      	cmp	r5, #0
 800eb64:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 800ed58 <__ieee754_rem_pio2+0x228>
 800eb68:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800eb6c:	dd19      	ble.n	800eba2 <__ieee754_rem_pio2+0x72>
 800eb6e:	ee30 7b46 	vsub.f64	d7, d0, d6
 800eb72:	429e      	cmp	r6, r3
 800eb74:	d00e      	beq.n	800eb94 <__ieee754_rem_pio2+0x64>
 800eb76:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 800ed60 <__ieee754_rem_pio2+0x230>
 800eb7a:	ee37 5b46 	vsub.f64	d5, d7, d6
 800eb7e:	ee37 7b45 	vsub.f64	d7, d7, d5
 800eb82:	ed84 5b00 	vstr	d5, [r4]
 800eb86:	ee37 7b46 	vsub.f64	d7, d7, d6
 800eb8a:	ed84 7b02 	vstr	d7, [r4, #8]
 800eb8e:	2001      	movs	r0, #1
 800eb90:	b008      	add	sp, #32
 800eb92:	bd70      	pop	{r4, r5, r6, pc}
 800eb94:	ed9f 6b74 	vldr	d6, [pc, #464]	; 800ed68 <__ieee754_rem_pio2+0x238>
 800eb98:	ee37 7b46 	vsub.f64	d7, d7, d6
 800eb9c:	ed9f 6b74 	vldr	d6, [pc, #464]	; 800ed70 <__ieee754_rem_pio2+0x240>
 800eba0:	e7eb      	b.n	800eb7a <__ieee754_rem_pio2+0x4a>
 800eba2:	429e      	cmp	r6, r3
 800eba4:	ee30 7b06 	vadd.f64	d7, d0, d6
 800eba8:	d00e      	beq.n	800ebc8 <__ieee754_rem_pio2+0x98>
 800ebaa:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 800ed60 <__ieee754_rem_pio2+0x230>
 800ebae:	ee37 5b06 	vadd.f64	d5, d7, d6
 800ebb2:	ee37 7b45 	vsub.f64	d7, d7, d5
 800ebb6:	ed84 5b00 	vstr	d5, [r4]
 800ebba:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ebbe:	f04f 30ff 	mov.w	r0, #4294967295
 800ebc2:	ed84 7b02 	vstr	d7, [r4, #8]
 800ebc6:	e7e3      	b.n	800eb90 <__ieee754_rem_pio2+0x60>
 800ebc8:	ed9f 6b67 	vldr	d6, [pc, #412]	; 800ed68 <__ieee754_rem_pio2+0x238>
 800ebcc:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ebd0:	ed9f 6b67 	vldr	d6, [pc, #412]	; 800ed70 <__ieee754_rem_pio2+0x240>
 800ebd4:	e7eb      	b.n	800ebae <__ieee754_rem_pio2+0x7e>
 800ebd6:	4b72      	ldr	r3, [pc, #456]	; (800eda0 <__ieee754_rem_pio2+0x270>)
 800ebd8:	429e      	cmp	r6, r3
 800ebda:	dc6e      	bgt.n	800ecba <__ieee754_rem_pio2+0x18a>
 800ebdc:	f000 fc5b 	bl	800f496 <fabs>
 800ebe0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800ebe4:	ed9f 6b64 	vldr	d6, [pc, #400]	; 800ed78 <__ieee754_rem_pio2+0x248>
 800ebe8:	eea0 7b06 	vfma.f64	d7, d0, d6
 800ebec:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800ebf0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800ebf4:	ee17 0a90 	vmov	r0, s15
 800ebf8:	eeb1 4b45 	vneg.f64	d4, d5
 800ebfc:	ed9f 7b56 	vldr	d7, [pc, #344]	; 800ed58 <__ieee754_rem_pio2+0x228>
 800ec00:	eea5 0b47 	vfms.f64	d0, d5, d7
 800ec04:	ed9f 7b56 	vldr	d7, [pc, #344]	; 800ed60 <__ieee754_rem_pio2+0x230>
 800ec08:	281f      	cmp	r0, #31
 800ec0a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800ec0e:	ee30 6b47 	vsub.f64	d6, d0, d7
 800ec12:	dc08      	bgt.n	800ec26 <__ieee754_rem_pio2+0xf6>
 800ec14:	4b63      	ldr	r3, [pc, #396]	; (800eda4 <__ieee754_rem_pio2+0x274>)
 800ec16:	1e42      	subs	r2, r0, #1
 800ec18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec1c:	42b3      	cmp	r3, r6
 800ec1e:	d002      	beq.n	800ec26 <__ieee754_rem_pio2+0xf6>
 800ec20:	ed84 6b00 	vstr	d6, [r4]
 800ec24:	e024      	b.n	800ec70 <__ieee754_rem_pio2+0x140>
 800ec26:	ee16 3a90 	vmov	r3, s13
 800ec2a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800ec2e:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800ec32:	2b10      	cmp	r3, #16
 800ec34:	ea4f 5226 	mov.w	r2, r6, asr #20
 800ec38:	ddf2      	ble.n	800ec20 <__ieee754_rem_pio2+0xf0>
 800ec3a:	eeb0 6b40 	vmov.f64	d6, d0
 800ec3e:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 800ed68 <__ieee754_rem_pio2+0x238>
 800ec42:	eea4 6b03 	vfma.f64	d6, d4, d3
 800ec46:	ee30 7b46 	vsub.f64	d7, d0, d6
 800ec4a:	eea4 7b03 	vfma.f64	d7, d4, d3
 800ec4e:	ed9f 3b48 	vldr	d3, [pc, #288]	; 800ed70 <__ieee754_rem_pio2+0x240>
 800ec52:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800ec56:	ee36 3b47 	vsub.f64	d3, d6, d7
 800ec5a:	ee13 3a90 	vmov	r3, s7
 800ec5e:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800ec62:	1ad3      	subs	r3, r2, r3
 800ec64:	2b31      	cmp	r3, #49	; 0x31
 800ec66:	dc17      	bgt.n	800ec98 <__ieee754_rem_pio2+0x168>
 800ec68:	eeb0 0b46 	vmov.f64	d0, d6
 800ec6c:	ed84 3b00 	vstr	d3, [r4]
 800ec70:	ed94 6b00 	vldr	d6, [r4]
 800ec74:	2d00      	cmp	r5, #0
 800ec76:	ee30 0b46 	vsub.f64	d0, d0, d6
 800ec7a:	ee30 7b47 	vsub.f64	d7, d0, d7
 800ec7e:	ed84 7b02 	vstr	d7, [r4, #8]
 800ec82:	da85      	bge.n	800eb90 <__ieee754_rem_pio2+0x60>
 800ec84:	eeb1 6b46 	vneg.f64	d6, d6
 800ec88:	ed84 6b00 	vstr	d6, [r4]
 800ec8c:	eeb1 7b47 	vneg.f64	d7, d7
 800ec90:	4240      	negs	r0, r0
 800ec92:	ed84 7b02 	vstr	d7, [r4, #8]
 800ec96:	e77b      	b.n	800eb90 <__ieee754_rem_pio2+0x60>
 800ec98:	ed9f 3b39 	vldr	d3, [pc, #228]	; 800ed80 <__ieee754_rem_pio2+0x250>
 800ec9c:	eeb0 0b46 	vmov.f64	d0, d6
 800eca0:	eea4 0b03 	vfma.f64	d0, d4, d3
 800eca4:	ee36 7b40 	vsub.f64	d7, d6, d0
 800eca8:	ed9f 6b37 	vldr	d6, [pc, #220]	; 800ed88 <__ieee754_rem_pio2+0x258>
 800ecac:	eea4 7b03 	vfma.f64	d7, d4, d3
 800ecb0:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800ecb4:	ee30 6b47 	vsub.f64	d6, d0, d7
 800ecb8:	e7b2      	b.n	800ec20 <__ieee754_rem_pio2+0xf0>
 800ecba:	4b3b      	ldr	r3, [pc, #236]	; (800eda8 <__ieee754_rem_pio2+0x278>)
 800ecbc:	429e      	cmp	r6, r3
 800ecbe:	dd06      	ble.n	800ecce <__ieee754_rem_pio2+0x19e>
 800ecc0:	ee30 7b40 	vsub.f64	d7, d0, d0
 800ecc4:	ed80 7b02 	vstr	d7, [r0, #8]
 800ecc8:	ed80 7b00 	vstr	d7, [r0]
 800eccc:	e742      	b.n	800eb54 <__ieee754_rem_pio2+0x24>
 800ecce:	1532      	asrs	r2, r6, #20
 800ecd0:	ee10 0a10 	vmov	r0, s0
 800ecd4:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800ecd8:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800ecdc:	ec41 0b17 	vmov	d7, r0, r1
 800ece0:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800ece4:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 800ed90 <__ieee754_rem_pio2+0x260>
 800ece8:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800ecec:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ecf0:	ed8d 6b02 	vstr	d6, [sp, #8]
 800ecf4:	ee27 7b05 	vmul.f64	d7, d7, d5
 800ecf8:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800ecfc:	a902      	add	r1, sp, #8
 800ecfe:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800ed02:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ed06:	ed8d 6b04 	vstr	d6, [sp, #16]
 800ed0a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800ed0e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ed12:	2603      	movs	r6, #3
 800ed14:	4608      	mov	r0, r1
 800ed16:	ed91 7b04 	vldr	d7, [r1, #16]
 800ed1a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ed1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed22:	4633      	mov	r3, r6
 800ed24:	f1a1 0108 	sub.w	r1, r1, #8
 800ed28:	f106 36ff 	add.w	r6, r6, #4294967295
 800ed2c:	d0f3      	beq.n	800ed16 <__ieee754_rem_pio2+0x1e6>
 800ed2e:	491f      	ldr	r1, [pc, #124]	; (800edac <__ieee754_rem_pio2+0x27c>)
 800ed30:	9101      	str	r1, [sp, #4]
 800ed32:	2102      	movs	r1, #2
 800ed34:	9100      	str	r1, [sp, #0]
 800ed36:	4621      	mov	r1, r4
 800ed38:	f000 f8aa 	bl	800ee90 <__kernel_rem_pio2>
 800ed3c:	2d00      	cmp	r5, #0
 800ed3e:	f6bf af27 	bge.w	800eb90 <__ieee754_rem_pio2+0x60>
 800ed42:	ed94 7b00 	vldr	d7, [r4]
 800ed46:	eeb1 7b47 	vneg.f64	d7, d7
 800ed4a:	ed84 7b00 	vstr	d7, [r4]
 800ed4e:	ed94 7b02 	vldr	d7, [r4, #8]
 800ed52:	e79b      	b.n	800ec8c <__ieee754_rem_pio2+0x15c>
 800ed54:	f3af 8000 	nop.w
 800ed58:	54400000 	.word	0x54400000
 800ed5c:	3ff921fb 	.word	0x3ff921fb
 800ed60:	1a626331 	.word	0x1a626331
 800ed64:	3dd0b461 	.word	0x3dd0b461
 800ed68:	1a600000 	.word	0x1a600000
 800ed6c:	3dd0b461 	.word	0x3dd0b461
 800ed70:	2e037073 	.word	0x2e037073
 800ed74:	3ba3198a 	.word	0x3ba3198a
 800ed78:	6dc9c883 	.word	0x6dc9c883
 800ed7c:	3fe45f30 	.word	0x3fe45f30
 800ed80:	2e000000 	.word	0x2e000000
 800ed84:	3ba3198a 	.word	0x3ba3198a
 800ed88:	252049c1 	.word	0x252049c1
 800ed8c:	397b839a 	.word	0x397b839a
 800ed90:	00000000 	.word	0x00000000
 800ed94:	41700000 	.word	0x41700000
 800ed98:	3fe921fb 	.word	0x3fe921fb
 800ed9c:	4002d97b 	.word	0x4002d97b
 800eda0:	413921fb 	.word	0x413921fb
 800eda4:	0802a878 	.word	0x0802a878
 800eda8:	7fefffff 	.word	0x7fefffff
 800edac:	0802a8f8 	.word	0x0802a8f8

0800edb0 <__ieee754_sqrtf>:
 800edb0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800edb4:	4770      	bx	lr
	...

0800edb8 <__kernel_cos>:
 800edb8:	ee10 1a90 	vmov	r1, s1
 800edbc:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800edc0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800edc4:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 800edc8:	da05      	bge.n	800edd6 <__kernel_cos+0x1e>
 800edca:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800edce:	ee17 3a90 	vmov	r3, s15
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d03d      	beq.n	800ee52 <__kernel_cos+0x9a>
 800edd6:	ee20 3b00 	vmul.f64	d3, d0, d0
 800edda:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800ee58 <__kernel_cos+0xa0>
 800edde:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800ee60 <__kernel_cos+0xa8>
 800ede2:	eea3 6b07 	vfma.f64	d6, d3, d7
 800ede6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800ee68 <__kernel_cos+0xb0>
 800edea:	eea6 7b03 	vfma.f64	d7, d6, d3
 800edee:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800ee70 <__kernel_cos+0xb8>
 800edf2:	eea7 6b03 	vfma.f64	d6, d7, d3
 800edf6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800ee78 <__kernel_cos+0xc0>
 800edfa:	4b23      	ldr	r3, [pc, #140]	; (800ee88 <__kernel_cos+0xd0>)
 800edfc:	eea6 7b03 	vfma.f64	d7, d6, d3
 800ee00:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 800ee80 <__kernel_cos+0xc8>
 800ee04:	4299      	cmp	r1, r3
 800ee06:	eea7 6b03 	vfma.f64	d6, d7, d3
 800ee0a:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800ee0e:	ee26 5b03 	vmul.f64	d5, d6, d3
 800ee12:	ee23 7b07 	vmul.f64	d7, d3, d7
 800ee16:	ee21 6b40 	vnmul.f64	d6, d1, d0
 800ee1a:	eea3 6b05 	vfma.f64	d6, d3, d5
 800ee1e:	dc04      	bgt.n	800ee2a <__kernel_cos+0x72>
 800ee20:	ee37 6b46 	vsub.f64	d6, d7, d6
 800ee24:	ee34 0b46 	vsub.f64	d0, d4, d6
 800ee28:	4770      	bx	lr
 800ee2a:	4b18      	ldr	r3, [pc, #96]	; (800ee8c <__kernel_cos+0xd4>)
 800ee2c:	4299      	cmp	r1, r3
 800ee2e:	dc0d      	bgt.n	800ee4c <__kernel_cos+0x94>
 800ee30:	2200      	movs	r2, #0
 800ee32:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800ee36:	ec43 2b15 	vmov	d5, r2, r3
 800ee3a:	ee34 0b45 	vsub.f64	d0, d4, d5
 800ee3e:	ee37 7b45 	vsub.f64	d7, d7, d5
 800ee42:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ee46:	ee30 0b47 	vsub.f64	d0, d0, d7
 800ee4a:	4770      	bx	lr
 800ee4c:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 800ee50:	e7f3      	b.n	800ee3a <__kernel_cos+0x82>
 800ee52:	eeb0 0b44 	vmov.f64	d0, d4
 800ee56:	4770      	bx	lr
 800ee58:	be8838d4 	.word	0xbe8838d4
 800ee5c:	bda8fae9 	.word	0xbda8fae9
 800ee60:	bdb4b1c4 	.word	0xbdb4b1c4
 800ee64:	3e21ee9e 	.word	0x3e21ee9e
 800ee68:	809c52ad 	.word	0x809c52ad
 800ee6c:	be927e4f 	.word	0xbe927e4f
 800ee70:	19cb1590 	.word	0x19cb1590
 800ee74:	3efa01a0 	.word	0x3efa01a0
 800ee78:	16c15177 	.word	0x16c15177
 800ee7c:	bf56c16c 	.word	0xbf56c16c
 800ee80:	5555554c 	.word	0x5555554c
 800ee84:	3fa55555 	.word	0x3fa55555
 800ee88:	3fd33332 	.word	0x3fd33332
 800ee8c:	3fe90000 	.word	0x3fe90000

0800ee90 <__kernel_rem_pio2>:
 800ee90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee94:	ed2d 8b06 	vpush	{d8-d10}
 800ee98:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 800ee9c:	469b      	mov	fp, r3
 800ee9e:	460f      	mov	r7, r1
 800eea0:	4bcf      	ldr	r3, [pc, #828]	; (800f1e0 <__kernel_rem_pio2+0x350>)
 800eea2:	99a0      	ldr	r1, [sp, #640]	; 0x280
 800eea4:	f8dd c284 	ldr.w	ip, [sp, #644]	; 0x284
 800eea8:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800eeac:	9000      	str	r0, [sp, #0]
 800eeae:	f112 0f14 	cmn.w	r2, #20
 800eeb2:	bfa8      	it	ge
 800eeb4:	2318      	movge	r3, #24
 800eeb6:	f10b 31ff 	add.w	r1, fp, #4294967295
 800eeba:	bfb8      	it	lt
 800eebc:	2300      	movlt	r3, #0
 800eebe:	f06f 0417 	mvn.w	r4, #23
 800eec2:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 800f1c8 <__kernel_rem_pio2+0x338>
 800eec6:	bfa4      	itt	ge
 800eec8:	f1a2 0a03 	subge.w	sl, r2, #3
 800eecc:	fb9a f3f3 	sdivge	r3, sl, r3
 800eed0:	fb03 4404 	mla	r4, r3, r4, r4
 800eed4:	1a5d      	subs	r5, r3, r1
 800eed6:	4414      	add	r4, r2
 800eed8:	eb09 0601 	add.w	r6, r9, r1
 800eedc:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 800eee0:	eb0c 0e85 	add.w	lr, ip, r5, lsl #2
 800eee4:	2200      	movs	r2, #0
 800eee6:	42b2      	cmp	r2, r6
 800eee8:	dd12      	ble.n	800ef10 <__kernel_rem_pio2+0x80>
 800eeea:	aa18      	add	r2, sp, #96	; 0x60
 800eeec:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 800eef0:	460e      	mov	r6, r1
 800eef2:	f50d 78d0 	add.w	r8, sp, #416	; 0x1a0
 800eef6:	f1cb 0a01 	rsb	sl, fp, #1
 800eefa:	eb0a 0006 	add.w	r0, sl, r6
 800eefe:	4581      	cmp	r9, r0
 800ef00:	db25      	blt.n	800ef4e <__kernel_rem_pio2+0xbe>
 800ef02:	ed9f 7bb1 	vldr	d7, [pc, #708]	; 800f1c8 <__kernel_rem_pio2+0x338>
 800ef06:	f8dd e000 	ldr.w	lr, [sp]
 800ef0a:	4615      	mov	r5, r2
 800ef0c:	2000      	movs	r0, #0
 800ef0e:	e015      	b.n	800ef3c <__kernel_rem_pio2+0xac>
 800ef10:	42d5      	cmn	r5, r2
 800ef12:	d409      	bmi.n	800ef28 <__kernel_rem_pio2+0x98>
 800ef14:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 800ef18:	ee07 0a90 	vmov	s15, r0
 800ef1c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ef20:	eca8 7b02 	vstmia	r8!, {d7}
 800ef24:	3201      	adds	r2, #1
 800ef26:	e7de      	b.n	800eee6 <__kernel_rem_pio2+0x56>
 800ef28:	eeb0 7b46 	vmov.f64	d7, d6
 800ef2c:	e7f8      	b.n	800ef20 <__kernel_rem_pio2+0x90>
 800ef2e:	ecbe 5b02 	vldmia	lr!, {d5}
 800ef32:	ed95 6b00 	vldr	d6, [r5]
 800ef36:	3001      	adds	r0, #1
 800ef38:	eea5 7b06 	vfma.f64	d7, d5, d6
 800ef3c:	4288      	cmp	r0, r1
 800ef3e:	f1a5 0508 	sub.w	r5, r5, #8
 800ef42:	ddf4      	ble.n	800ef2e <__kernel_rem_pio2+0x9e>
 800ef44:	eca8 7b02 	vstmia	r8!, {d7}
 800ef48:	3208      	adds	r2, #8
 800ef4a:	3601      	adds	r6, #1
 800ef4c:	e7d5      	b.n	800eefa <__kernel_rem_pio2+0x6a>
 800ef4e:	aa04      	add	r2, sp, #16
 800ef50:	ed9f 9b9f 	vldr	d9, [pc, #636]	; 800f1d0 <__kernel_rem_pio2+0x340>
 800ef54:	ed9f aba0 	vldr	d10, [pc, #640]	; 800f1d8 <__kernel_rem_pio2+0x348>
 800ef58:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 800ef5c:	9201      	str	r2, [sp, #4]
 800ef5e:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
 800ef62:	464e      	mov	r6, r9
 800ef64:	ab90      	add	r3, sp, #576	; 0x240
 800ef66:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ef6a:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 800ef6e:	ab04      	add	r3, sp, #16
 800ef70:	4618      	mov	r0, r3
 800ef72:	4632      	mov	r2, r6
 800ef74:	2a00      	cmp	r2, #0
 800ef76:	dc4e      	bgt.n	800f016 <__kernel_rem_pio2+0x186>
 800ef78:	4620      	mov	r0, r4
 800ef7a:	e9cd 1302 	strd	r1, r3, [sp, #8]
 800ef7e:	f000 fb07 	bl	800f590 <scalbn>
 800ef82:	eeb0 8b40 	vmov.f64	d8, d0
 800ef86:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800ef8a:	ee28 0b00 	vmul.f64	d0, d8, d0
 800ef8e:	f000 fa8b 	bl	800f4a8 <floor>
 800ef92:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800ef96:	eea0 8b47 	vfms.f64	d8, d0, d7
 800ef9a:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800ef9e:	2c00      	cmp	r4, #0
 800efa0:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 800efa4:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 800efa8:	ee38 8b40 	vsub.f64	d8, d8, d0
 800efac:	ee17 8a90 	vmov	r8, s15
 800efb0:	dd46      	ble.n	800f040 <__kernel_rem_pio2+0x1b0>
 800efb2:	1e70      	subs	r0, r6, #1
 800efb4:	aa04      	add	r2, sp, #16
 800efb6:	f1c4 0c18 	rsb	ip, r4, #24
 800efba:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 800efbe:	fa45 f20c 	asr.w	r2, r5, ip
 800efc2:	4490      	add	r8, r2
 800efc4:	fa02 f20c 	lsl.w	r2, r2, ip
 800efc8:	1aad      	subs	r5, r5, r2
 800efca:	aa04      	add	r2, sp, #16
 800efcc:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 800efd0:	f1c4 0217 	rsb	r2, r4, #23
 800efd4:	4115      	asrs	r5, r2
 800efd6:	2d00      	cmp	r5, #0
 800efd8:	dd41      	ble.n	800f05e <__kernel_rem_pio2+0x1ce>
 800efda:	f04f 0c00 	mov.w	ip, #0
 800efde:	f108 0801 	add.w	r8, r8, #1
 800efe2:	4660      	mov	r0, ip
 800efe4:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 800efe8:	4566      	cmp	r6, ip
 800efea:	dc69      	bgt.n	800f0c0 <__kernel_rem_pio2+0x230>
 800efec:	2c00      	cmp	r4, #0
 800efee:	dd03      	ble.n	800eff8 <__kernel_rem_pio2+0x168>
 800eff0:	2c01      	cmp	r4, #1
 800eff2:	d076      	beq.n	800f0e2 <__kernel_rem_pio2+0x252>
 800eff4:	2c02      	cmp	r4, #2
 800eff6:	d07f      	beq.n	800f0f8 <__kernel_rem_pio2+0x268>
 800eff8:	2d02      	cmp	r5, #2
 800effa:	d130      	bne.n	800f05e <__kernel_rem_pio2+0x1ce>
 800effc:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800f000:	ee30 8b48 	vsub.f64	d8, d0, d8
 800f004:	b358      	cbz	r0, 800f05e <__kernel_rem_pio2+0x1ce>
 800f006:	4620      	mov	r0, r4
 800f008:	9102      	str	r1, [sp, #8]
 800f00a:	f000 fac1 	bl	800f590 <scalbn>
 800f00e:	9902      	ldr	r1, [sp, #8]
 800f010:	ee38 8b40 	vsub.f64	d8, d8, d0
 800f014:	e023      	b.n	800f05e <__kernel_rem_pio2+0x1ce>
 800f016:	ee20 7b09 	vmul.f64	d7, d0, d9
 800f01a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800f01e:	3a01      	subs	r2, #1
 800f020:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800f024:	ad68      	add	r5, sp, #416	; 0x1a0
 800f026:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800f02a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800f02e:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 800f032:	eca0 0a01 	vstmia	r0!, {s0}
 800f036:	ed95 0b00 	vldr	d0, [r5]
 800f03a:	ee37 0b00 	vadd.f64	d0, d7, d0
 800f03e:	e799      	b.n	800ef74 <__kernel_rem_pio2+0xe4>
 800f040:	d105      	bne.n	800f04e <__kernel_rem_pio2+0x1be>
 800f042:	1e72      	subs	r2, r6, #1
 800f044:	a804      	add	r0, sp, #16
 800f046:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 800f04a:	15ed      	asrs	r5, r5, #23
 800f04c:	e7c3      	b.n	800efd6 <__kernel_rem_pio2+0x146>
 800f04e:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800f052:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800f056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f05a:	da2f      	bge.n	800f0bc <__kernel_rem_pio2+0x22c>
 800f05c:	2500      	movs	r5, #0
 800f05e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f066:	f040 8087 	bne.w	800f178 <__kernel_rem_pio2+0x2e8>
 800f06a:	1e73      	subs	r3, r6, #1
 800f06c:	4618      	mov	r0, r3
 800f06e:	f04f 0c00 	mov.w	ip, #0
 800f072:	4548      	cmp	r0, r9
 800f074:	da47      	bge.n	800f106 <__kernel_rem_pio2+0x276>
 800f076:	f1bc 0f00 	cmp.w	ip, #0
 800f07a:	d070      	beq.n	800f15e <__kernel_rem_pio2+0x2ce>
 800f07c:	aa04      	add	r2, sp, #16
 800f07e:	3c18      	subs	r4, #24
 800f080:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f084:	2a00      	cmp	r2, #0
 800f086:	d075      	beq.n	800f174 <__kernel_rem_pio2+0x2e4>
 800f088:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800f08c:	4620      	mov	r0, r4
 800f08e:	9300      	str	r3, [sp, #0]
 800f090:	f000 fa7e 	bl	800f590 <scalbn>
 800f094:	9b00      	ldr	r3, [sp, #0]
 800f096:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 800f1d0 <__kernel_rem_pio2+0x340>
 800f09a:	461a      	mov	r2, r3
 800f09c:	2a00      	cmp	r2, #0
 800f09e:	f280 80ac 	bge.w	800f1fa <__kernel_rem_pio2+0x36a>
 800f0a2:	4619      	mov	r1, r3
 800f0a4:	2000      	movs	r0, #0
 800f0a6:	2900      	cmp	r1, #0
 800f0a8:	f2c0 80cd 	blt.w	800f246 <__kernel_rem_pio2+0x3b6>
 800f0ac:	aa68      	add	r2, sp, #416	; 0x1a0
 800f0ae:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
 800f0b2:	ed9f 7b45 	vldr	d7, [pc, #276]	; 800f1c8 <__kernel_rem_pio2+0x338>
 800f0b6:	4e4b      	ldr	r6, [pc, #300]	; (800f1e4 <__kernel_rem_pio2+0x354>)
 800f0b8:	2200      	movs	r2, #0
 800f0ba:	e0b8      	b.n	800f22e <__kernel_rem_pio2+0x39e>
 800f0bc:	2502      	movs	r5, #2
 800f0be:	e78c      	b.n	800efda <__kernel_rem_pio2+0x14a>
 800f0c0:	681a      	ldr	r2, [r3, #0]
 800f0c2:	b948      	cbnz	r0, 800f0d8 <__kernel_rem_pio2+0x248>
 800f0c4:	b11a      	cbz	r2, 800f0ce <__kernel_rem_pio2+0x23e>
 800f0c6:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 800f0ca:	601a      	str	r2, [r3, #0]
 800f0cc:	2201      	movs	r2, #1
 800f0ce:	f10c 0c01 	add.w	ip, ip, #1
 800f0d2:	3304      	adds	r3, #4
 800f0d4:	4610      	mov	r0, r2
 800f0d6:	e787      	b.n	800efe8 <__kernel_rem_pio2+0x158>
 800f0d8:	ebae 0202 	sub.w	r2, lr, r2
 800f0dc:	601a      	str	r2, [r3, #0]
 800f0de:	4602      	mov	r2, r0
 800f0e0:	e7f5      	b.n	800f0ce <__kernel_rem_pio2+0x23e>
 800f0e2:	1e72      	subs	r2, r6, #1
 800f0e4:	ab04      	add	r3, sp, #16
 800f0e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f0ea:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f0ee:	f10d 0c10 	add.w	ip, sp, #16
 800f0f2:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
 800f0f6:	e77f      	b.n	800eff8 <__kernel_rem_pio2+0x168>
 800f0f8:	1e72      	subs	r2, r6, #1
 800f0fa:	ab04      	add	r3, sp, #16
 800f0fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f100:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800f104:	e7f3      	b.n	800f0ee <__kernel_rem_pio2+0x25e>
 800f106:	aa04      	add	r2, sp, #16
 800f108:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 800f10c:	3801      	subs	r0, #1
 800f10e:	ea4c 0c02 	orr.w	ip, ip, r2
 800f112:	e7ae      	b.n	800f072 <__kernel_rem_pio2+0x1e2>
 800f114:	3001      	adds	r0, #1
 800f116:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800f11a:	2a00      	cmp	r2, #0
 800f11c:	d0fa      	beq.n	800f114 <__kernel_rem_pio2+0x284>
 800f11e:	eb06 020b 	add.w	r2, r6, fp
 800f122:	ad18      	add	r5, sp, #96	; 0x60
 800f124:	1c73      	adds	r3, r6, #1
 800f126:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800f12a:	4406      	add	r6, r0
 800f12c:	429e      	cmp	r6, r3
 800f12e:	f6ff af19 	blt.w	800ef64 <__kernel_rem_pio2+0xd4>
 800f132:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 800f136:	9d00      	ldr	r5, [sp, #0]
 800f138:	ee07 0a90 	vmov	s15, r0
 800f13c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f140:	2000      	movs	r0, #0
 800f142:	eca2 7b02 	vstmia	r2!, {d7}
 800f146:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800f1c8 <__kernel_rem_pio2+0x338>
 800f14a:	4694      	mov	ip, r2
 800f14c:	4288      	cmp	r0, r1
 800f14e:	dd09      	ble.n	800f164 <__kernel_rem_pio2+0x2d4>
 800f150:	a868      	add	r0, sp, #416	; 0x1a0
 800f152:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 800f156:	ed80 7b00 	vstr	d7, [r0]
 800f15a:	3301      	adds	r3, #1
 800f15c:	e7e6      	b.n	800f12c <__kernel_rem_pio2+0x29c>
 800f15e:	9b01      	ldr	r3, [sp, #4]
 800f160:	2001      	movs	r0, #1
 800f162:	e7d8      	b.n	800f116 <__kernel_rem_pio2+0x286>
 800f164:	ecb5 5b02 	vldmia	r5!, {d5}
 800f168:	ed3c 6b02 	vldmdb	ip!, {d6}
 800f16c:	3001      	adds	r0, #1
 800f16e:	eea5 7b06 	vfma.f64	d7, d5, d6
 800f172:	e7eb      	b.n	800f14c <__kernel_rem_pio2+0x2bc>
 800f174:	3b01      	subs	r3, #1
 800f176:	e781      	b.n	800f07c <__kernel_rem_pio2+0x1ec>
 800f178:	4260      	negs	r0, r4
 800f17a:	eeb0 0b48 	vmov.f64	d0, d8
 800f17e:	f000 fa07 	bl	800f590 <scalbn>
 800f182:	ed9f 6b15 	vldr	d6, [pc, #84]	; 800f1d8 <__kernel_rem_pio2+0x348>
 800f186:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800f18a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f18e:	db2b      	blt.n	800f1e8 <__kernel_rem_pio2+0x358>
 800f190:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 800f1d0 <__kernel_rem_pio2+0x340>
 800f194:	ee20 7b07 	vmul.f64	d7, d0, d7
 800f198:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800f19c:	aa04      	add	r2, sp, #16
 800f19e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800f1a2:	eea5 0b46 	vfms.f64	d0, d5, d6
 800f1a6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800f1aa:	a904      	add	r1, sp, #16
 800f1ac:	ee10 3a10 	vmov	r3, s0
 800f1b0:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800f1b4:	ee17 2a10 	vmov	r2, s14
 800f1b8:	1c73      	adds	r3, r6, #1
 800f1ba:	3418      	adds	r4, #24
 800f1bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800f1c0:	e762      	b.n	800f088 <__kernel_rem_pio2+0x1f8>
 800f1c2:	bf00      	nop
 800f1c4:	f3af 8000 	nop.w
	...
 800f1d4:	3e700000 	.word	0x3e700000
 800f1d8:	00000000 	.word	0x00000000
 800f1dc:	41700000 	.word	0x41700000
 800f1e0:	0802b2b0 	.word	0x0802b2b0
 800f1e4:	0802b270 	.word	0x0802b270
 800f1e8:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800f1ec:	aa04      	add	r2, sp, #16
 800f1ee:	ee10 3a10 	vmov	r3, s0
 800f1f2:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800f1f6:	4633      	mov	r3, r6
 800f1f8:	e746      	b.n	800f088 <__kernel_rem_pio2+0x1f8>
 800f1fa:	a804      	add	r0, sp, #16
 800f1fc:	a968      	add	r1, sp, #416	; 0x1a0
 800f1fe:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800f202:	9000      	str	r0, [sp, #0]
 800f204:	ee07 0a90 	vmov	s15, r0
 800f208:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800f20c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f210:	3a01      	subs	r2, #1
 800f212:	ee27 7b00 	vmul.f64	d7, d7, d0
 800f216:	ee20 0b06 	vmul.f64	d0, d0, d6
 800f21a:	ed81 7b00 	vstr	d7, [r1]
 800f21e:	e73d      	b.n	800f09c <__kernel_rem_pio2+0x20c>
 800f220:	ecb6 5b02 	vldmia	r6!, {d5}
 800f224:	ecb4 6b02 	vldmia	r4!, {d6}
 800f228:	3201      	adds	r2, #1
 800f22a:	eea5 7b06 	vfma.f64	d7, d5, d6
 800f22e:	454a      	cmp	r2, r9
 800f230:	dc01      	bgt.n	800f236 <__kernel_rem_pio2+0x3a6>
 800f232:	4290      	cmp	r0, r2
 800f234:	daf4      	bge.n	800f220 <__kernel_rem_pio2+0x390>
 800f236:	aa40      	add	r2, sp, #256	; 0x100
 800f238:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800f23c:	ed82 7b00 	vstr	d7, [r2]
 800f240:	3901      	subs	r1, #1
 800f242:	3001      	adds	r0, #1
 800f244:	e72f      	b.n	800f0a6 <__kernel_rem_pio2+0x216>
 800f246:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 800f248:	2a02      	cmp	r2, #2
 800f24a:	dc0a      	bgt.n	800f262 <__kernel_rem_pio2+0x3d2>
 800f24c:	2a00      	cmp	r2, #0
 800f24e:	dc5a      	bgt.n	800f306 <__kernel_rem_pio2+0x476>
 800f250:	d039      	beq.n	800f2c6 <__kernel_rem_pio2+0x436>
 800f252:	f008 0007 	and.w	r0, r8, #7
 800f256:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 800f25a:	ecbd 8b06 	vpop	{d8-d10}
 800f25e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f262:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 800f264:	2a03      	cmp	r2, #3
 800f266:	d1f4      	bne.n	800f252 <__kernel_rem_pio2+0x3c2>
 800f268:	aa40      	add	r2, sp, #256	; 0x100
 800f26a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800f26e:	4611      	mov	r1, r2
 800f270:	4618      	mov	r0, r3
 800f272:	2800      	cmp	r0, #0
 800f274:	f1a1 0108 	sub.w	r1, r1, #8
 800f278:	dc52      	bgt.n	800f320 <__kernel_rem_pio2+0x490>
 800f27a:	4619      	mov	r1, r3
 800f27c:	2901      	cmp	r1, #1
 800f27e:	f1a2 0208 	sub.w	r2, r2, #8
 800f282:	dc5d      	bgt.n	800f340 <__kernel_rem_pio2+0x4b0>
 800f284:	ed9f 7b40 	vldr	d7, [pc, #256]	; 800f388 <__kernel_rem_pio2+0x4f8>
 800f288:	2b01      	cmp	r3, #1
 800f28a:	dc69      	bgt.n	800f360 <__kernel_rem_pio2+0x4d0>
 800f28c:	ed9d 5b40 	vldr	d5, [sp, #256]	; 0x100
 800f290:	ed9d 6b42 	vldr	d6, [sp, #264]	; 0x108
 800f294:	2d00      	cmp	r5, #0
 800f296:	d16c      	bne.n	800f372 <__kernel_rem_pio2+0x4e2>
 800f298:	ed87 5b00 	vstr	d5, [r7]
 800f29c:	ed87 6b02 	vstr	d6, [r7, #8]
 800f2a0:	ed87 7b04 	vstr	d7, [r7, #16]
 800f2a4:	e7d5      	b.n	800f252 <__kernel_rem_pio2+0x3c2>
 800f2a6:	aa40      	add	r2, sp, #256	; 0x100
 800f2a8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800f2ac:	ed92 6b00 	vldr	d6, [r2]
 800f2b0:	3b01      	subs	r3, #1
 800f2b2:	ee37 7b06 	vadd.f64	d7, d7, d6
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	daf5      	bge.n	800f2a6 <__kernel_rem_pio2+0x416>
 800f2ba:	b10d      	cbz	r5, 800f2c0 <__kernel_rem_pio2+0x430>
 800f2bc:	eeb1 7b47 	vneg.f64	d7, d7
 800f2c0:	ed87 7b00 	vstr	d7, [r7]
 800f2c4:	e7c5      	b.n	800f252 <__kernel_rem_pio2+0x3c2>
 800f2c6:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800f388 <__kernel_rem_pio2+0x4f8>
 800f2ca:	e7f4      	b.n	800f2b6 <__kernel_rem_pio2+0x426>
 800f2cc:	a940      	add	r1, sp, #256	; 0x100
 800f2ce:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800f2d2:	ed91 7b00 	vldr	d7, [r1]
 800f2d6:	3a01      	subs	r2, #1
 800f2d8:	ee36 6b07 	vadd.f64	d6, d6, d7
 800f2dc:	2a00      	cmp	r2, #0
 800f2de:	daf5      	bge.n	800f2cc <__kernel_rem_pio2+0x43c>
 800f2e0:	b1ad      	cbz	r5, 800f30e <__kernel_rem_pio2+0x47e>
 800f2e2:	eeb1 7b46 	vneg.f64	d7, d6
 800f2e6:	ed87 7b00 	vstr	d7, [r7]
 800f2ea:	ed9d 7b40 	vldr	d7, [sp, #256]	; 0x100
 800f2ee:	a942      	add	r1, sp, #264	; 0x108
 800f2f0:	2201      	movs	r2, #1
 800f2f2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f2f6:	4293      	cmp	r3, r2
 800f2f8:	da0c      	bge.n	800f314 <__kernel_rem_pio2+0x484>
 800f2fa:	b10d      	cbz	r5, 800f300 <__kernel_rem_pio2+0x470>
 800f2fc:	eeb1 7b47 	vneg.f64	d7, d7
 800f300:	ed87 7b02 	vstr	d7, [r7, #8]
 800f304:	e7a5      	b.n	800f252 <__kernel_rem_pio2+0x3c2>
 800f306:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800f388 <__kernel_rem_pio2+0x4f8>
 800f30a:	461a      	mov	r2, r3
 800f30c:	e7e6      	b.n	800f2dc <__kernel_rem_pio2+0x44c>
 800f30e:	eeb0 7b46 	vmov.f64	d7, d6
 800f312:	e7e8      	b.n	800f2e6 <__kernel_rem_pio2+0x456>
 800f314:	ecb1 6b02 	vldmia	r1!, {d6}
 800f318:	3201      	adds	r2, #1
 800f31a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800f31e:	e7ea      	b.n	800f2f6 <__kernel_rem_pio2+0x466>
 800f320:	ed91 7b00 	vldr	d7, [r1]
 800f324:	ed91 5b02 	vldr	d5, [r1, #8]
 800f328:	3801      	subs	r0, #1
 800f32a:	ee37 6b05 	vadd.f64	d6, d7, d5
 800f32e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f332:	ed81 6b00 	vstr	d6, [r1]
 800f336:	ee37 7b05 	vadd.f64	d7, d7, d5
 800f33a:	ed81 7b02 	vstr	d7, [r1, #8]
 800f33e:	e798      	b.n	800f272 <__kernel_rem_pio2+0x3e2>
 800f340:	ed92 7b00 	vldr	d7, [r2]
 800f344:	ed92 5b02 	vldr	d5, [r2, #8]
 800f348:	3901      	subs	r1, #1
 800f34a:	ee37 6b05 	vadd.f64	d6, d7, d5
 800f34e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f352:	ed82 6b00 	vstr	d6, [r2]
 800f356:	ee37 7b05 	vadd.f64	d7, d7, d5
 800f35a:	ed82 7b02 	vstr	d7, [r2, #8]
 800f35e:	e78d      	b.n	800f27c <__kernel_rem_pio2+0x3ec>
 800f360:	aa40      	add	r2, sp, #256	; 0x100
 800f362:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800f366:	ed92 6b00 	vldr	d6, [r2]
 800f36a:	3b01      	subs	r3, #1
 800f36c:	ee37 7b06 	vadd.f64	d7, d7, d6
 800f370:	e78a      	b.n	800f288 <__kernel_rem_pio2+0x3f8>
 800f372:	eeb1 5b45 	vneg.f64	d5, d5
 800f376:	eeb1 6b46 	vneg.f64	d6, d6
 800f37a:	ed87 5b00 	vstr	d5, [r7]
 800f37e:	eeb1 7b47 	vneg.f64	d7, d7
 800f382:	ed87 6b02 	vstr	d6, [r7, #8]
 800f386:	e78b      	b.n	800f2a0 <__kernel_rem_pio2+0x410>
	...

0800f390 <__kernel_sin>:
 800f390:	ee10 3a90 	vmov	r3, s1
 800f394:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f398:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800f39c:	da04      	bge.n	800f3a8 <__kernel_sin+0x18>
 800f39e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800f3a2:	ee17 3a90 	vmov	r3, s15
 800f3a6:	b35b      	cbz	r3, 800f400 <__kernel_sin+0x70>
 800f3a8:	ee20 6b00 	vmul.f64	d6, d0, d0
 800f3ac:	ee20 5b06 	vmul.f64	d5, d0, d6
 800f3b0:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800f408 <__kernel_sin+0x78>
 800f3b4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800f410 <__kernel_sin+0x80>
 800f3b8:	eea6 4b07 	vfma.f64	d4, d6, d7
 800f3bc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800f418 <__kernel_sin+0x88>
 800f3c0:	eea4 7b06 	vfma.f64	d7, d4, d6
 800f3c4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800f420 <__kernel_sin+0x90>
 800f3c8:	eea7 4b06 	vfma.f64	d4, d7, d6
 800f3cc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800f428 <__kernel_sin+0x98>
 800f3d0:	eea4 7b06 	vfma.f64	d7, d4, d6
 800f3d4:	b930      	cbnz	r0, 800f3e4 <__kernel_sin+0x54>
 800f3d6:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800f430 <__kernel_sin+0xa0>
 800f3da:	eea6 4b07 	vfma.f64	d4, d6, d7
 800f3de:	eea4 0b05 	vfma.f64	d0, d4, d5
 800f3e2:	4770      	bx	lr
 800f3e4:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800f3e8:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800f3ec:	eea1 7b04 	vfma.f64	d7, d1, d4
 800f3f0:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800f3f4:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800f438 <__kernel_sin+0xa8>
 800f3f8:	eea5 1b07 	vfma.f64	d1, d5, d7
 800f3fc:	ee30 0b41 	vsub.f64	d0, d0, d1
 800f400:	4770      	bx	lr
 800f402:	bf00      	nop
 800f404:	f3af 8000 	nop.w
 800f408:	5acfd57c 	.word	0x5acfd57c
 800f40c:	3de5d93a 	.word	0x3de5d93a
 800f410:	8a2b9ceb 	.word	0x8a2b9ceb
 800f414:	be5ae5e6 	.word	0xbe5ae5e6
 800f418:	57b1fe7d 	.word	0x57b1fe7d
 800f41c:	3ec71de3 	.word	0x3ec71de3
 800f420:	19c161d5 	.word	0x19c161d5
 800f424:	bf2a01a0 	.word	0xbf2a01a0
 800f428:	1110f8a6 	.word	0x1110f8a6
 800f42c:	3f811111 	.word	0x3f811111
 800f430:	55555549 	.word	0x55555549
 800f434:	bfc55555 	.word	0xbfc55555
 800f438:	55555549 	.word	0x55555549
 800f43c:	3fc55555 	.word	0x3fc55555

0800f440 <with_errnof>:
 800f440:	b513      	push	{r0, r1, r4, lr}
 800f442:	4604      	mov	r4, r0
 800f444:	ed8d 0a01 	vstr	s0, [sp, #4]
 800f448:	f000 f944 	bl	800f6d4 <__errno>
 800f44c:	ed9d 0a01 	vldr	s0, [sp, #4]
 800f450:	6004      	str	r4, [r0, #0]
 800f452:	b002      	add	sp, #8
 800f454:	bd10      	pop	{r4, pc}
	...

0800f458 <__math_divzerof>:
 800f458:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800f45c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800f460:	2800      	cmp	r0, #0
 800f462:	fe40 7a27 	vseleq.f32	s15, s0, s15
 800f466:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800f474 <__math_divzerof+0x1c>
 800f46a:	2022      	movs	r0, #34	; 0x22
 800f46c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800f470:	f7ff bfe6 	b.w	800f440 <with_errnof>
 800f474:	00000000 	.word	0x00000000

0800f478 <__math_invalidf>:
 800f478:	eef0 7a40 	vmov.f32	s15, s0
 800f47c:	ee30 7a40 	vsub.f32	s14, s0, s0
 800f480:	eef4 7a67 	vcmp.f32	s15, s15
 800f484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f488:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800f48c:	d602      	bvs.n	800f494 <__math_invalidf+0x1c>
 800f48e:	2021      	movs	r0, #33	; 0x21
 800f490:	f7ff bfd6 	b.w	800f440 <with_errnof>
 800f494:	4770      	bx	lr

0800f496 <fabs>:
 800f496:	ec51 0b10 	vmov	r0, r1, d0
 800f49a:	ee10 2a10 	vmov	r2, s0
 800f49e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f4a2:	ec43 2b10 	vmov	d0, r2, r3
 800f4a6:	4770      	bx	lr

0800f4a8 <floor>:
 800f4a8:	ee10 1a90 	vmov	r1, s1
 800f4ac:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f4b0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800f4b4:	2b13      	cmp	r3, #19
 800f4b6:	b530      	push	{r4, r5, lr}
 800f4b8:	ee10 0a10 	vmov	r0, s0
 800f4bc:	ee10 5a10 	vmov	r5, s0
 800f4c0:	dc31      	bgt.n	800f526 <floor+0x7e>
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	da15      	bge.n	800f4f2 <floor+0x4a>
 800f4c6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800f580 <floor+0xd8>
 800f4ca:	ee30 0b07 	vadd.f64	d0, d0, d7
 800f4ce:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f4d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4d6:	dd07      	ble.n	800f4e8 <floor+0x40>
 800f4d8:	2900      	cmp	r1, #0
 800f4da:	da4e      	bge.n	800f57a <floor+0xd2>
 800f4dc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f4e0:	4318      	orrs	r0, r3
 800f4e2:	d001      	beq.n	800f4e8 <floor+0x40>
 800f4e4:	4928      	ldr	r1, [pc, #160]	; (800f588 <floor+0xe0>)
 800f4e6:	2000      	movs	r0, #0
 800f4e8:	460b      	mov	r3, r1
 800f4ea:	4602      	mov	r2, r0
 800f4ec:	ec43 2b10 	vmov	d0, r2, r3
 800f4f0:	e020      	b.n	800f534 <floor+0x8c>
 800f4f2:	4a26      	ldr	r2, [pc, #152]	; (800f58c <floor+0xe4>)
 800f4f4:	411a      	asrs	r2, r3
 800f4f6:	ea01 0402 	and.w	r4, r1, r2
 800f4fa:	4304      	orrs	r4, r0
 800f4fc:	d01a      	beq.n	800f534 <floor+0x8c>
 800f4fe:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800f580 <floor+0xd8>
 800f502:	ee30 0b07 	vadd.f64	d0, d0, d7
 800f506:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f50a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f50e:	ddeb      	ble.n	800f4e8 <floor+0x40>
 800f510:	2900      	cmp	r1, #0
 800f512:	bfbe      	ittt	lt
 800f514:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800f518:	fa40 f303 	asrlt.w	r3, r0, r3
 800f51c:	18c9      	addlt	r1, r1, r3
 800f51e:	ea21 0102 	bic.w	r1, r1, r2
 800f522:	2000      	movs	r0, #0
 800f524:	e7e0      	b.n	800f4e8 <floor+0x40>
 800f526:	2b33      	cmp	r3, #51	; 0x33
 800f528:	dd05      	ble.n	800f536 <floor+0x8e>
 800f52a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f52e:	d101      	bne.n	800f534 <floor+0x8c>
 800f530:	ee30 0b00 	vadd.f64	d0, d0, d0
 800f534:	bd30      	pop	{r4, r5, pc}
 800f536:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800f53a:	f04f 32ff 	mov.w	r2, #4294967295
 800f53e:	40e2      	lsrs	r2, r4
 800f540:	4202      	tst	r2, r0
 800f542:	d0f7      	beq.n	800f534 <floor+0x8c>
 800f544:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800f580 <floor+0xd8>
 800f548:	ee30 0b07 	vadd.f64	d0, d0, d7
 800f54c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f554:	ddc8      	ble.n	800f4e8 <floor+0x40>
 800f556:	2900      	cmp	r1, #0
 800f558:	da02      	bge.n	800f560 <floor+0xb8>
 800f55a:	2b14      	cmp	r3, #20
 800f55c:	d103      	bne.n	800f566 <floor+0xbe>
 800f55e:	3101      	adds	r1, #1
 800f560:	ea20 0002 	bic.w	r0, r0, r2
 800f564:	e7c0      	b.n	800f4e8 <floor+0x40>
 800f566:	2401      	movs	r4, #1
 800f568:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800f56c:	fa04 f303 	lsl.w	r3, r4, r3
 800f570:	4418      	add	r0, r3
 800f572:	42a8      	cmp	r0, r5
 800f574:	bf38      	it	cc
 800f576:	1909      	addcc	r1, r1, r4
 800f578:	e7f2      	b.n	800f560 <floor+0xb8>
 800f57a:	2000      	movs	r0, #0
 800f57c:	4601      	mov	r1, r0
 800f57e:	e7b3      	b.n	800f4e8 <floor+0x40>
 800f580:	8800759c 	.word	0x8800759c
 800f584:	7e37e43c 	.word	0x7e37e43c
 800f588:	bff00000 	.word	0xbff00000
 800f58c:	000fffff 	.word	0x000fffff

0800f590 <scalbn>:
 800f590:	b082      	sub	sp, #8
 800f592:	ed8d 0b00 	vstr	d0, [sp]
 800f596:	9b01      	ldr	r3, [sp, #4]
 800f598:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800f59c:	b9a2      	cbnz	r2, 800f5c8 <scalbn+0x38>
 800f59e:	9a00      	ldr	r2, [sp, #0]
 800f5a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f5a4:	4313      	orrs	r3, r2
 800f5a6:	d03a      	beq.n	800f61e <scalbn+0x8e>
 800f5a8:	ed9f 7b35 	vldr	d7, [pc, #212]	; 800f680 <scalbn+0xf0>
 800f5ac:	4b40      	ldr	r3, [pc, #256]	; (800f6b0 <scalbn+0x120>)
 800f5ae:	ee20 7b07 	vmul.f64	d7, d0, d7
 800f5b2:	4298      	cmp	r0, r3
 800f5b4:	ed8d 7b00 	vstr	d7, [sp]
 800f5b8:	da11      	bge.n	800f5de <scalbn+0x4e>
 800f5ba:	ed9f 7b33 	vldr	d7, [pc, #204]	; 800f688 <scalbn+0xf8>
 800f5be:	ed9d 6b00 	vldr	d6, [sp]
 800f5c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f5c6:	e007      	b.n	800f5d8 <scalbn+0x48>
 800f5c8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800f5cc:	428a      	cmp	r2, r1
 800f5ce:	d10a      	bne.n	800f5e6 <scalbn+0x56>
 800f5d0:	ed9d 7b00 	vldr	d7, [sp]
 800f5d4:	ee37 7b07 	vadd.f64	d7, d7, d7
 800f5d8:	ed8d 7b00 	vstr	d7, [sp]
 800f5dc:	e01f      	b.n	800f61e <scalbn+0x8e>
 800f5de:	9b01      	ldr	r3, [sp, #4]
 800f5e0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800f5e4:	3a36      	subs	r2, #54	; 0x36
 800f5e6:	4402      	add	r2, r0
 800f5e8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f5ec:	428a      	cmp	r2, r1
 800f5ee:	dd0a      	ble.n	800f606 <scalbn+0x76>
 800f5f0:	ed9f 7b27 	vldr	d7, [pc, #156]	; 800f690 <scalbn+0x100>
 800f5f4:	ed9f 5b28 	vldr	d5, [pc, #160]	; 800f698 <scalbn+0x108>
 800f5f8:	eeb0 6b47 	vmov.f64	d6, d7
 800f5fc:	9b01      	ldr	r3, [sp, #4]
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	fe27 7b05 	vselge.f64	d7, d7, d5
 800f604:	e7dd      	b.n	800f5c2 <scalbn+0x32>
 800f606:	2a00      	cmp	r2, #0
 800f608:	dd0d      	ble.n	800f626 <scalbn+0x96>
 800f60a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f60e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f612:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f616:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f61a:	e9cd 0100 	strd	r0, r1, [sp]
 800f61e:	ed9d 0b00 	vldr	d0, [sp]
 800f622:	b002      	add	sp, #8
 800f624:	4770      	bx	lr
 800f626:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f62a:	da18      	bge.n	800f65e <scalbn+0xce>
 800f62c:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f630:	4298      	cmp	r0, r3
 800f632:	9b01      	ldr	r3, [sp, #4]
 800f634:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f638:	dd09      	ble.n	800f64e <scalbn+0xbe>
 800f63a:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800f690 <scalbn+0x100>
 800f63e:	ed9f 5b16 	vldr	d5, [pc, #88]	; 800f698 <scalbn+0x108>
 800f642:	eeb0 6b47 	vmov.f64	d6, d7
 800f646:	2b00      	cmp	r3, #0
 800f648:	fe07 7b05 	vseleq.f64	d7, d7, d5
 800f64c:	e7b9      	b.n	800f5c2 <scalbn+0x32>
 800f64e:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800f688 <scalbn+0xf8>
 800f652:	ed9f 5b13 	vldr	d5, [pc, #76]	; 800f6a0 <scalbn+0x110>
 800f656:	eeb0 6b47 	vmov.f64	d6, d7
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	e7f4      	b.n	800f648 <scalbn+0xb8>
 800f65e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f662:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f666:	3236      	adds	r2, #54	; 0x36
 800f668:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f66c:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f670:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 800f6a8 <scalbn+0x118>
 800f674:	ec41 0b17 	vmov	d7, r0, r1
 800f678:	e7a3      	b.n	800f5c2 <scalbn+0x32>
 800f67a:	bf00      	nop
 800f67c:	f3af 8000 	nop.w
 800f680:	00000000 	.word	0x00000000
 800f684:	43500000 	.word	0x43500000
 800f688:	c2f8f359 	.word	0xc2f8f359
 800f68c:	01a56e1f 	.word	0x01a56e1f
 800f690:	8800759c 	.word	0x8800759c
 800f694:	7e37e43c 	.word	0x7e37e43c
 800f698:	8800759c 	.word	0x8800759c
 800f69c:	fe37e43c 	.word	0xfe37e43c
 800f6a0:	c2f8f359 	.word	0xc2f8f359
 800f6a4:	81a56e1f 	.word	0x81a56e1f
 800f6a8:	00000000 	.word	0x00000000
 800f6ac:	3c900000 	.word	0x3c900000
 800f6b0:	ffff3cb0 	.word	0xffff3cb0

0800f6b4 <abort>:
 800f6b4:	b508      	push	{r3, lr}
 800f6b6:	2006      	movs	r0, #6
 800f6b8:	f000 f968 	bl	800f98c <raise>
 800f6bc:	2001      	movs	r0, #1
 800f6be:	f7f4 fb3d 	bl	8003d3c <_exit>
	...

0800f6c4 <calloc>:
 800f6c4:	4b02      	ldr	r3, [pc, #8]	; (800f6d0 <calloc+0xc>)
 800f6c6:	460a      	mov	r2, r1
 800f6c8:	4601      	mov	r1, r0
 800f6ca:	6818      	ldr	r0, [r3, #0]
 800f6cc:	f000 b86c 	b.w	800f7a8 <_calloc_r>
 800f6d0:	2000001c 	.word	0x2000001c

0800f6d4 <__errno>:
 800f6d4:	4b01      	ldr	r3, [pc, #4]	; (800f6dc <__errno+0x8>)
 800f6d6:	6818      	ldr	r0, [r3, #0]
 800f6d8:	4770      	bx	lr
 800f6da:	bf00      	nop
 800f6dc:	2000001c 	.word	0x2000001c

0800f6e0 <__libc_init_array>:
 800f6e0:	b570      	push	{r4, r5, r6, lr}
 800f6e2:	4d0d      	ldr	r5, [pc, #52]	; (800f718 <__libc_init_array+0x38>)
 800f6e4:	4c0d      	ldr	r4, [pc, #52]	; (800f71c <__libc_init_array+0x3c>)
 800f6e6:	1b64      	subs	r4, r4, r5
 800f6e8:	10a4      	asrs	r4, r4, #2
 800f6ea:	2600      	movs	r6, #0
 800f6ec:	42a6      	cmp	r6, r4
 800f6ee:	d109      	bne.n	800f704 <__libc_init_array+0x24>
 800f6f0:	4d0b      	ldr	r5, [pc, #44]	; (800f720 <__libc_init_array+0x40>)
 800f6f2:	4c0c      	ldr	r4, [pc, #48]	; (800f724 <__libc_init_array+0x44>)
 800f6f4:	f000 fcba 	bl	801006c <_init>
 800f6f8:	1b64      	subs	r4, r4, r5
 800f6fa:	10a4      	asrs	r4, r4, #2
 800f6fc:	2600      	movs	r6, #0
 800f6fe:	42a6      	cmp	r6, r4
 800f700:	d105      	bne.n	800f70e <__libc_init_array+0x2e>
 800f702:	bd70      	pop	{r4, r5, r6, pc}
 800f704:	f855 3b04 	ldr.w	r3, [r5], #4
 800f708:	4798      	blx	r3
 800f70a:	3601      	adds	r6, #1
 800f70c:	e7ee      	b.n	800f6ec <__libc_init_array+0xc>
 800f70e:	f855 3b04 	ldr.w	r3, [r5], #4
 800f712:	4798      	blx	r3
 800f714:	3601      	adds	r6, #1
 800f716:	e7f2      	b.n	800f6fe <__libc_init_array+0x1e>
 800f718:	0802b2fc 	.word	0x0802b2fc
 800f71c:	0802b2fc 	.word	0x0802b2fc
 800f720:	0802b2fc 	.word	0x0802b2fc
 800f724:	0802b300 	.word	0x0802b300

0800f728 <malloc>:
 800f728:	4b02      	ldr	r3, [pc, #8]	; (800f734 <malloc+0xc>)
 800f72a:	4601      	mov	r1, r0
 800f72c:	6818      	ldr	r0, [r3, #0]
 800f72e:	f000 b89b 	b.w	800f868 <_malloc_r>
 800f732:	bf00      	nop
 800f734:	2000001c 	.word	0x2000001c

0800f738 <free>:
 800f738:	4b02      	ldr	r3, [pc, #8]	; (800f744 <free+0xc>)
 800f73a:	4601      	mov	r1, r0
 800f73c:	6818      	ldr	r0, [r3, #0]
 800f73e:	f000 b843 	b.w	800f7c8 <_free_r>
 800f742:	bf00      	nop
 800f744:	2000001c 	.word	0x2000001c

0800f748 <memcpy>:
 800f748:	440a      	add	r2, r1
 800f74a:	4291      	cmp	r1, r2
 800f74c:	f100 33ff 	add.w	r3, r0, #4294967295
 800f750:	d100      	bne.n	800f754 <memcpy+0xc>
 800f752:	4770      	bx	lr
 800f754:	b510      	push	{r4, lr}
 800f756:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f75a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f75e:	4291      	cmp	r1, r2
 800f760:	d1f9      	bne.n	800f756 <memcpy+0xe>
 800f762:	bd10      	pop	{r4, pc}

0800f764 <memmove>:
 800f764:	4288      	cmp	r0, r1
 800f766:	b510      	push	{r4, lr}
 800f768:	eb01 0402 	add.w	r4, r1, r2
 800f76c:	d902      	bls.n	800f774 <memmove+0x10>
 800f76e:	4284      	cmp	r4, r0
 800f770:	4623      	mov	r3, r4
 800f772:	d807      	bhi.n	800f784 <memmove+0x20>
 800f774:	1e43      	subs	r3, r0, #1
 800f776:	42a1      	cmp	r1, r4
 800f778:	d008      	beq.n	800f78c <memmove+0x28>
 800f77a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f77e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f782:	e7f8      	b.n	800f776 <memmove+0x12>
 800f784:	4402      	add	r2, r0
 800f786:	4601      	mov	r1, r0
 800f788:	428a      	cmp	r2, r1
 800f78a:	d100      	bne.n	800f78e <memmove+0x2a>
 800f78c:	bd10      	pop	{r4, pc}
 800f78e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f792:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f796:	e7f7      	b.n	800f788 <memmove+0x24>

0800f798 <memset>:
 800f798:	4402      	add	r2, r0
 800f79a:	4603      	mov	r3, r0
 800f79c:	4293      	cmp	r3, r2
 800f79e:	d100      	bne.n	800f7a2 <memset+0xa>
 800f7a0:	4770      	bx	lr
 800f7a2:	f803 1b01 	strb.w	r1, [r3], #1
 800f7a6:	e7f9      	b.n	800f79c <memset+0x4>

0800f7a8 <_calloc_r>:
 800f7a8:	b513      	push	{r0, r1, r4, lr}
 800f7aa:	434a      	muls	r2, r1
 800f7ac:	4611      	mov	r1, r2
 800f7ae:	9201      	str	r2, [sp, #4]
 800f7b0:	f000 f85a 	bl	800f868 <_malloc_r>
 800f7b4:	4604      	mov	r4, r0
 800f7b6:	b118      	cbz	r0, 800f7c0 <_calloc_r+0x18>
 800f7b8:	9a01      	ldr	r2, [sp, #4]
 800f7ba:	2100      	movs	r1, #0
 800f7bc:	f7ff ffec 	bl	800f798 <memset>
 800f7c0:	4620      	mov	r0, r4
 800f7c2:	b002      	add	sp, #8
 800f7c4:	bd10      	pop	{r4, pc}
	...

0800f7c8 <_free_r>:
 800f7c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f7ca:	2900      	cmp	r1, #0
 800f7cc:	d048      	beq.n	800f860 <_free_r+0x98>
 800f7ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f7d2:	9001      	str	r0, [sp, #4]
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	f1a1 0404 	sub.w	r4, r1, #4
 800f7da:	bfb8      	it	lt
 800f7dc:	18e4      	addlt	r4, r4, r3
 800f7de:	f000 f919 	bl	800fa14 <__malloc_lock>
 800f7e2:	4a20      	ldr	r2, [pc, #128]	; (800f864 <_free_r+0x9c>)
 800f7e4:	9801      	ldr	r0, [sp, #4]
 800f7e6:	6813      	ldr	r3, [r2, #0]
 800f7e8:	4615      	mov	r5, r2
 800f7ea:	b933      	cbnz	r3, 800f7fa <_free_r+0x32>
 800f7ec:	6063      	str	r3, [r4, #4]
 800f7ee:	6014      	str	r4, [r2, #0]
 800f7f0:	b003      	add	sp, #12
 800f7f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f7f6:	f000 b913 	b.w	800fa20 <__malloc_unlock>
 800f7fa:	42a3      	cmp	r3, r4
 800f7fc:	d90b      	bls.n	800f816 <_free_r+0x4e>
 800f7fe:	6821      	ldr	r1, [r4, #0]
 800f800:	1862      	adds	r2, r4, r1
 800f802:	4293      	cmp	r3, r2
 800f804:	bf04      	itt	eq
 800f806:	681a      	ldreq	r2, [r3, #0]
 800f808:	685b      	ldreq	r3, [r3, #4]
 800f80a:	6063      	str	r3, [r4, #4]
 800f80c:	bf04      	itt	eq
 800f80e:	1852      	addeq	r2, r2, r1
 800f810:	6022      	streq	r2, [r4, #0]
 800f812:	602c      	str	r4, [r5, #0]
 800f814:	e7ec      	b.n	800f7f0 <_free_r+0x28>
 800f816:	461a      	mov	r2, r3
 800f818:	685b      	ldr	r3, [r3, #4]
 800f81a:	b10b      	cbz	r3, 800f820 <_free_r+0x58>
 800f81c:	42a3      	cmp	r3, r4
 800f81e:	d9fa      	bls.n	800f816 <_free_r+0x4e>
 800f820:	6811      	ldr	r1, [r2, #0]
 800f822:	1855      	adds	r5, r2, r1
 800f824:	42a5      	cmp	r5, r4
 800f826:	d10b      	bne.n	800f840 <_free_r+0x78>
 800f828:	6824      	ldr	r4, [r4, #0]
 800f82a:	4421      	add	r1, r4
 800f82c:	1854      	adds	r4, r2, r1
 800f82e:	42a3      	cmp	r3, r4
 800f830:	6011      	str	r1, [r2, #0]
 800f832:	d1dd      	bne.n	800f7f0 <_free_r+0x28>
 800f834:	681c      	ldr	r4, [r3, #0]
 800f836:	685b      	ldr	r3, [r3, #4]
 800f838:	6053      	str	r3, [r2, #4]
 800f83a:	4421      	add	r1, r4
 800f83c:	6011      	str	r1, [r2, #0]
 800f83e:	e7d7      	b.n	800f7f0 <_free_r+0x28>
 800f840:	d902      	bls.n	800f848 <_free_r+0x80>
 800f842:	230c      	movs	r3, #12
 800f844:	6003      	str	r3, [r0, #0]
 800f846:	e7d3      	b.n	800f7f0 <_free_r+0x28>
 800f848:	6825      	ldr	r5, [r4, #0]
 800f84a:	1961      	adds	r1, r4, r5
 800f84c:	428b      	cmp	r3, r1
 800f84e:	bf04      	itt	eq
 800f850:	6819      	ldreq	r1, [r3, #0]
 800f852:	685b      	ldreq	r3, [r3, #4]
 800f854:	6063      	str	r3, [r4, #4]
 800f856:	bf04      	itt	eq
 800f858:	1949      	addeq	r1, r1, r5
 800f85a:	6021      	streq	r1, [r4, #0]
 800f85c:	6054      	str	r4, [r2, #4]
 800f85e:	e7c7      	b.n	800f7f0 <_free_r+0x28>
 800f860:	b003      	add	sp, #12
 800f862:	bd30      	pop	{r4, r5, pc}
 800f864:	200003ec 	.word	0x200003ec

0800f868 <_malloc_r>:
 800f868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f86a:	1ccd      	adds	r5, r1, #3
 800f86c:	f025 0503 	bic.w	r5, r5, #3
 800f870:	3508      	adds	r5, #8
 800f872:	2d0c      	cmp	r5, #12
 800f874:	bf38      	it	cc
 800f876:	250c      	movcc	r5, #12
 800f878:	2d00      	cmp	r5, #0
 800f87a:	4606      	mov	r6, r0
 800f87c:	db01      	blt.n	800f882 <_malloc_r+0x1a>
 800f87e:	42a9      	cmp	r1, r5
 800f880:	d903      	bls.n	800f88a <_malloc_r+0x22>
 800f882:	230c      	movs	r3, #12
 800f884:	6033      	str	r3, [r6, #0]
 800f886:	2000      	movs	r0, #0
 800f888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f88a:	f000 f8c3 	bl	800fa14 <__malloc_lock>
 800f88e:	4921      	ldr	r1, [pc, #132]	; (800f914 <_malloc_r+0xac>)
 800f890:	680a      	ldr	r2, [r1, #0]
 800f892:	4614      	mov	r4, r2
 800f894:	b99c      	cbnz	r4, 800f8be <_malloc_r+0x56>
 800f896:	4f20      	ldr	r7, [pc, #128]	; (800f918 <_malloc_r+0xb0>)
 800f898:	683b      	ldr	r3, [r7, #0]
 800f89a:	b923      	cbnz	r3, 800f8a6 <_malloc_r+0x3e>
 800f89c:	4621      	mov	r1, r4
 800f89e:	4630      	mov	r0, r6
 800f8a0:	f000 f83c 	bl	800f91c <_sbrk_r>
 800f8a4:	6038      	str	r0, [r7, #0]
 800f8a6:	4629      	mov	r1, r5
 800f8a8:	4630      	mov	r0, r6
 800f8aa:	f000 f837 	bl	800f91c <_sbrk_r>
 800f8ae:	1c43      	adds	r3, r0, #1
 800f8b0:	d123      	bne.n	800f8fa <_malloc_r+0x92>
 800f8b2:	230c      	movs	r3, #12
 800f8b4:	6033      	str	r3, [r6, #0]
 800f8b6:	4630      	mov	r0, r6
 800f8b8:	f000 f8b2 	bl	800fa20 <__malloc_unlock>
 800f8bc:	e7e3      	b.n	800f886 <_malloc_r+0x1e>
 800f8be:	6823      	ldr	r3, [r4, #0]
 800f8c0:	1b5b      	subs	r3, r3, r5
 800f8c2:	d417      	bmi.n	800f8f4 <_malloc_r+0x8c>
 800f8c4:	2b0b      	cmp	r3, #11
 800f8c6:	d903      	bls.n	800f8d0 <_malloc_r+0x68>
 800f8c8:	6023      	str	r3, [r4, #0]
 800f8ca:	441c      	add	r4, r3
 800f8cc:	6025      	str	r5, [r4, #0]
 800f8ce:	e004      	b.n	800f8da <_malloc_r+0x72>
 800f8d0:	6863      	ldr	r3, [r4, #4]
 800f8d2:	42a2      	cmp	r2, r4
 800f8d4:	bf0c      	ite	eq
 800f8d6:	600b      	streq	r3, [r1, #0]
 800f8d8:	6053      	strne	r3, [r2, #4]
 800f8da:	4630      	mov	r0, r6
 800f8dc:	f000 f8a0 	bl	800fa20 <__malloc_unlock>
 800f8e0:	f104 000b 	add.w	r0, r4, #11
 800f8e4:	1d23      	adds	r3, r4, #4
 800f8e6:	f020 0007 	bic.w	r0, r0, #7
 800f8ea:	1ac2      	subs	r2, r0, r3
 800f8ec:	d0cc      	beq.n	800f888 <_malloc_r+0x20>
 800f8ee:	1a1b      	subs	r3, r3, r0
 800f8f0:	50a3      	str	r3, [r4, r2]
 800f8f2:	e7c9      	b.n	800f888 <_malloc_r+0x20>
 800f8f4:	4622      	mov	r2, r4
 800f8f6:	6864      	ldr	r4, [r4, #4]
 800f8f8:	e7cc      	b.n	800f894 <_malloc_r+0x2c>
 800f8fa:	1cc4      	adds	r4, r0, #3
 800f8fc:	f024 0403 	bic.w	r4, r4, #3
 800f900:	42a0      	cmp	r0, r4
 800f902:	d0e3      	beq.n	800f8cc <_malloc_r+0x64>
 800f904:	1a21      	subs	r1, r4, r0
 800f906:	4630      	mov	r0, r6
 800f908:	f000 f808 	bl	800f91c <_sbrk_r>
 800f90c:	3001      	adds	r0, #1
 800f90e:	d1dd      	bne.n	800f8cc <_malloc_r+0x64>
 800f910:	e7cf      	b.n	800f8b2 <_malloc_r+0x4a>
 800f912:	bf00      	nop
 800f914:	200003ec 	.word	0x200003ec
 800f918:	200003f0 	.word	0x200003f0

0800f91c <_sbrk_r>:
 800f91c:	b538      	push	{r3, r4, r5, lr}
 800f91e:	4d06      	ldr	r5, [pc, #24]	; (800f938 <_sbrk_r+0x1c>)
 800f920:	2300      	movs	r3, #0
 800f922:	4604      	mov	r4, r0
 800f924:	4608      	mov	r0, r1
 800f926:	602b      	str	r3, [r5, #0]
 800f928:	f7f4 fa12 	bl	8003d50 <_sbrk>
 800f92c:	1c43      	adds	r3, r0, #1
 800f92e:	d102      	bne.n	800f936 <_sbrk_r+0x1a>
 800f930:	682b      	ldr	r3, [r5, #0]
 800f932:	b103      	cbz	r3, 800f936 <_sbrk_r+0x1a>
 800f934:	6023      	str	r3, [r4, #0]
 800f936:	bd38      	pop	{r3, r4, r5, pc}
 800f938:	20000490 	.word	0x20000490

0800f93c <_raise_r>:
 800f93c:	291f      	cmp	r1, #31
 800f93e:	b538      	push	{r3, r4, r5, lr}
 800f940:	4604      	mov	r4, r0
 800f942:	460d      	mov	r5, r1
 800f944:	d904      	bls.n	800f950 <_raise_r+0x14>
 800f946:	2316      	movs	r3, #22
 800f948:	6003      	str	r3, [r0, #0]
 800f94a:	f04f 30ff 	mov.w	r0, #4294967295
 800f94e:	bd38      	pop	{r3, r4, r5, pc}
 800f950:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f952:	b112      	cbz	r2, 800f95a <_raise_r+0x1e>
 800f954:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f958:	b94b      	cbnz	r3, 800f96e <_raise_r+0x32>
 800f95a:	4620      	mov	r0, r4
 800f95c:	f000 f830 	bl	800f9c0 <_getpid_r>
 800f960:	462a      	mov	r2, r5
 800f962:	4601      	mov	r1, r0
 800f964:	4620      	mov	r0, r4
 800f966:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f96a:	f000 b817 	b.w	800f99c <_kill_r>
 800f96e:	2b01      	cmp	r3, #1
 800f970:	d00a      	beq.n	800f988 <_raise_r+0x4c>
 800f972:	1c59      	adds	r1, r3, #1
 800f974:	d103      	bne.n	800f97e <_raise_r+0x42>
 800f976:	2316      	movs	r3, #22
 800f978:	6003      	str	r3, [r0, #0]
 800f97a:	2001      	movs	r0, #1
 800f97c:	e7e7      	b.n	800f94e <_raise_r+0x12>
 800f97e:	2400      	movs	r4, #0
 800f980:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f984:	4628      	mov	r0, r5
 800f986:	4798      	blx	r3
 800f988:	2000      	movs	r0, #0
 800f98a:	e7e0      	b.n	800f94e <_raise_r+0x12>

0800f98c <raise>:
 800f98c:	4b02      	ldr	r3, [pc, #8]	; (800f998 <raise+0xc>)
 800f98e:	4601      	mov	r1, r0
 800f990:	6818      	ldr	r0, [r3, #0]
 800f992:	f7ff bfd3 	b.w	800f93c <_raise_r>
 800f996:	bf00      	nop
 800f998:	2000001c 	.word	0x2000001c

0800f99c <_kill_r>:
 800f99c:	b538      	push	{r3, r4, r5, lr}
 800f99e:	4d07      	ldr	r5, [pc, #28]	; (800f9bc <_kill_r+0x20>)
 800f9a0:	2300      	movs	r3, #0
 800f9a2:	4604      	mov	r4, r0
 800f9a4:	4608      	mov	r0, r1
 800f9a6:	4611      	mov	r1, r2
 800f9a8:	602b      	str	r3, [r5, #0]
 800f9aa:	f7f4 f9b7 	bl	8003d1c <_kill>
 800f9ae:	1c43      	adds	r3, r0, #1
 800f9b0:	d102      	bne.n	800f9b8 <_kill_r+0x1c>
 800f9b2:	682b      	ldr	r3, [r5, #0]
 800f9b4:	b103      	cbz	r3, 800f9b8 <_kill_r+0x1c>
 800f9b6:	6023      	str	r3, [r4, #0]
 800f9b8:	bd38      	pop	{r3, r4, r5, pc}
 800f9ba:	bf00      	nop
 800f9bc:	20000490 	.word	0x20000490

0800f9c0 <_getpid_r>:
 800f9c0:	f7f4 b9a4 	b.w	8003d0c <_getpid>

0800f9c4 <siprintf>:
 800f9c4:	b40e      	push	{r1, r2, r3}
 800f9c6:	b500      	push	{lr}
 800f9c8:	b09c      	sub	sp, #112	; 0x70
 800f9ca:	ab1d      	add	r3, sp, #116	; 0x74
 800f9cc:	9002      	str	r0, [sp, #8]
 800f9ce:	9006      	str	r0, [sp, #24]
 800f9d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f9d4:	4809      	ldr	r0, [pc, #36]	; (800f9fc <siprintf+0x38>)
 800f9d6:	9107      	str	r1, [sp, #28]
 800f9d8:	9104      	str	r1, [sp, #16]
 800f9da:	4909      	ldr	r1, [pc, #36]	; (800fa00 <siprintf+0x3c>)
 800f9dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800f9e0:	9105      	str	r1, [sp, #20]
 800f9e2:	6800      	ldr	r0, [r0, #0]
 800f9e4:	9301      	str	r3, [sp, #4]
 800f9e6:	a902      	add	r1, sp, #8
 800f9e8:	f000 f87c 	bl	800fae4 <_svfiprintf_r>
 800f9ec:	9b02      	ldr	r3, [sp, #8]
 800f9ee:	2200      	movs	r2, #0
 800f9f0:	701a      	strb	r2, [r3, #0]
 800f9f2:	b01c      	add	sp, #112	; 0x70
 800f9f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800f9f8:	b003      	add	sp, #12
 800f9fa:	4770      	bx	lr
 800f9fc:	2000001c 	.word	0x2000001c
 800fa00:	ffff0208 	.word	0xffff0208

0800fa04 <strcpy>:
 800fa04:	4603      	mov	r3, r0
 800fa06:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fa0a:	f803 2b01 	strb.w	r2, [r3], #1
 800fa0e:	2a00      	cmp	r2, #0
 800fa10:	d1f9      	bne.n	800fa06 <strcpy+0x2>
 800fa12:	4770      	bx	lr

0800fa14 <__malloc_lock>:
 800fa14:	4801      	ldr	r0, [pc, #4]	; (800fa1c <__malloc_lock+0x8>)
 800fa16:	f000 baf9 	b.w	801000c <__retarget_lock_acquire_recursive>
 800fa1a:	bf00      	nop
 800fa1c:	20000498 	.word	0x20000498

0800fa20 <__malloc_unlock>:
 800fa20:	4801      	ldr	r0, [pc, #4]	; (800fa28 <__malloc_unlock+0x8>)
 800fa22:	f000 baf4 	b.w	801000e <__retarget_lock_release_recursive>
 800fa26:	bf00      	nop
 800fa28:	20000498 	.word	0x20000498

0800fa2c <__ssputs_r>:
 800fa2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa30:	688e      	ldr	r6, [r1, #8]
 800fa32:	429e      	cmp	r6, r3
 800fa34:	4682      	mov	sl, r0
 800fa36:	460c      	mov	r4, r1
 800fa38:	4690      	mov	r8, r2
 800fa3a:	461f      	mov	r7, r3
 800fa3c:	d838      	bhi.n	800fab0 <__ssputs_r+0x84>
 800fa3e:	898a      	ldrh	r2, [r1, #12]
 800fa40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fa44:	d032      	beq.n	800faac <__ssputs_r+0x80>
 800fa46:	6825      	ldr	r5, [r4, #0]
 800fa48:	6909      	ldr	r1, [r1, #16]
 800fa4a:	eba5 0901 	sub.w	r9, r5, r1
 800fa4e:	6965      	ldr	r5, [r4, #20]
 800fa50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fa54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fa58:	3301      	adds	r3, #1
 800fa5a:	444b      	add	r3, r9
 800fa5c:	106d      	asrs	r5, r5, #1
 800fa5e:	429d      	cmp	r5, r3
 800fa60:	bf38      	it	cc
 800fa62:	461d      	movcc	r5, r3
 800fa64:	0553      	lsls	r3, r2, #21
 800fa66:	d531      	bpl.n	800facc <__ssputs_r+0xa0>
 800fa68:	4629      	mov	r1, r5
 800fa6a:	f7ff fefd 	bl	800f868 <_malloc_r>
 800fa6e:	4606      	mov	r6, r0
 800fa70:	b950      	cbnz	r0, 800fa88 <__ssputs_r+0x5c>
 800fa72:	230c      	movs	r3, #12
 800fa74:	f8ca 3000 	str.w	r3, [sl]
 800fa78:	89a3      	ldrh	r3, [r4, #12]
 800fa7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fa7e:	81a3      	strh	r3, [r4, #12]
 800fa80:	f04f 30ff 	mov.w	r0, #4294967295
 800fa84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa88:	6921      	ldr	r1, [r4, #16]
 800fa8a:	464a      	mov	r2, r9
 800fa8c:	f7ff fe5c 	bl	800f748 <memcpy>
 800fa90:	89a3      	ldrh	r3, [r4, #12]
 800fa92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fa96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fa9a:	81a3      	strh	r3, [r4, #12]
 800fa9c:	6126      	str	r6, [r4, #16]
 800fa9e:	6165      	str	r5, [r4, #20]
 800faa0:	444e      	add	r6, r9
 800faa2:	eba5 0509 	sub.w	r5, r5, r9
 800faa6:	6026      	str	r6, [r4, #0]
 800faa8:	60a5      	str	r5, [r4, #8]
 800faaa:	463e      	mov	r6, r7
 800faac:	42be      	cmp	r6, r7
 800faae:	d900      	bls.n	800fab2 <__ssputs_r+0x86>
 800fab0:	463e      	mov	r6, r7
 800fab2:	4632      	mov	r2, r6
 800fab4:	6820      	ldr	r0, [r4, #0]
 800fab6:	4641      	mov	r1, r8
 800fab8:	f7ff fe54 	bl	800f764 <memmove>
 800fabc:	68a3      	ldr	r3, [r4, #8]
 800fabe:	6822      	ldr	r2, [r4, #0]
 800fac0:	1b9b      	subs	r3, r3, r6
 800fac2:	4432      	add	r2, r6
 800fac4:	60a3      	str	r3, [r4, #8]
 800fac6:	6022      	str	r2, [r4, #0]
 800fac8:	2000      	movs	r0, #0
 800faca:	e7db      	b.n	800fa84 <__ssputs_r+0x58>
 800facc:	462a      	mov	r2, r5
 800face:	f000 fa9f 	bl	8010010 <_realloc_r>
 800fad2:	4606      	mov	r6, r0
 800fad4:	2800      	cmp	r0, #0
 800fad6:	d1e1      	bne.n	800fa9c <__ssputs_r+0x70>
 800fad8:	6921      	ldr	r1, [r4, #16]
 800fada:	4650      	mov	r0, sl
 800fadc:	f7ff fe74 	bl	800f7c8 <_free_r>
 800fae0:	e7c7      	b.n	800fa72 <__ssputs_r+0x46>
	...

0800fae4 <_svfiprintf_r>:
 800fae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fae8:	4698      	mov	r8, r3
 800faea:	898b      	ldrh	r3, [r1, #12]
 800faec:	061b      	lsls	r3, r3, #24
 800faee:	b09d      	sub	sp, #116	; 0x74
 800faf0:	4607      	mov	r7, r0
 800faf2:	460d      	mov	r5, r1
 800faf4:	4614      	mov	r4, r2
 800faf6:	d50e      	bpl.n	800fb16 <_svfiprintf_r+0x32>
 800faf8:	690b      	ldr	r3, [r1, #16]
 800fafa:	b963      	cbnz	r3, 800fb16 <_svfiprintf_r+0x32>
 800fafc:	2140      	movs	r1, #64	; 0x40
 800fafe:	f7ff feb3 	bl	800f868 <_malloc_r>
 800fb02:	6028      	str	r0, [r5, #0]
 800fb04:	6128      	str	r0, [r5, #16]
 800fb06:	b920      	cbnz	r0, 800fb12 <_svfiprintf_r+0x2e>
 800fb08:	230c      	movs	r3, #12
 800fb0a:	603b      	str	r3, [r7, #0]
 800fb0c:	f04f 30ff 	mov.w	r0, #4294967295
 800fb10:	e0d1      	b.n	800fcb6 <_svfiprintf_r+0x1d2>
 800fb12:	2340      	movs	r3, #64	; 0x40
 800fb14:	616b      	str	r3, [r5, #20]
 800fb16:	2300      	movs	r3, #0
 800fb18:	9309      	str	r3, [sp, #36]	; 0x24
 800fb1a:	2320      	movs	r3, #32
 800fb1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fb20:	f8cd 800c 	str.w	r8, [sp, #12]
 800fb24:	2330      	movs	r3, #48	; 0x30
 800fb26:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800fcd0 <_svfiprintf_r+0x1ec>
 800fb2a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fb2e:	f04f 0901 	mov.w	r9, #1
 800fb32:	4623      	mov	r3, r4
 800fb34:	469a      	mov	sl, r3
 800fb36:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fb3a:	b10a      	cbz	r2, 800fb40 <_svfiprintf_r+0x5c>
 800fb3c:	2a25      	cmp	r2, #37	; 0x25
 800fb3e:	d1f9      	bne.n	800fb34 <_svfiprintf_r+0x50>
 800fb40:	ebba 0b04 	subs.w	fp, sl, r4
 800fb44:	d00b      	beq.n	800fb5e <_svfiprintf_r+0x7a>
 800fb46:	465b      	mov	r3, fp
 800fb48:	4622      	mov	r2, r4
 800fb4a:	4629      	mov	r1, r5
 800fb4c:	4638      	mov	r0, r7
 800fb4e:	f7ff ff6d 	bl	800fa2c <__ssputs_r>
 800fb52:	3001      	adds	r0, #1
 800fb54:	f000 80aa 	beq.w	800fcac <_svfiprintf_r+0x1c8>
 800fb58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fb5a:	445a      	add	r2, fp
 800fb5c:	9209      	str	r2, [sp, #36]	; 0x24
 800fb5e:	f89a 3000 	ldrb.w	r3, [sl]
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	f000 80a2 	beq.w	800fcac <_svfiprintf_r+0x1c8>
 800fb68:	2300      	movs	r3, #0
 800fb6a:	f04f 32ff 	mov.w	r2, #4294967295
 800fb6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fb72:	f10a 0a01 	add.w	sl, sl, #1
 800fb76:	9304      	str	r3, [sp, #16]
 800fb78:	9307      	str	r3, [sp, #28]
 800fb7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fb7e:	931a      	str	r3, [sp, #104]	; 0x68
 800fb80:	4654      	mov	r4, sl
 800fb82:	2205      	movs	r2, #5
 800fb84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb88:	4851      	ldr	r0, [pc, #324]	; (800fcd0 <_svfiprintf_r+0x1ec>)
 800fb8a:	f7f0 fbc1 	bl	8000310 <memchr>
 800fb8e:	9a04      	ldr	r2, [sp, #16]
 800fb90:	b9d8      	cbnz	r0, 800fbca <_svfiprintf_r+0xe6>
 800fb92:	06d0      	lsls	r0, r2, #27
 800fb94:	bf44      	itt	mi
 800fb96:	2320      	movmi	r3, #32
 800fb98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fb9c:	0711      	lsls	r1, r2, #28
 800fb9e:	bf44      	itt	mi
 800fba0:	232b      	movmi	r3, #43	; 0x2b
 800fba2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fba6:	f89a 3000 	ldrb.w	r3, [sl]
 800fbaa:	2b2a      	cmp	r3, #42	; 0x2a
 800fbac:	d015      	beq.n	800fbda <_svfiprintf_r+0xf6>
 800fbae:	9a07      	ldr	r2, [sp, #28]
 800fbb0:	4654      	mov	r4, sl
 800fbb2:	2000      	movs	r0, #0
 800fbb4:	f04f 0c0a 	mov.w	ip, #10
 800fbb8:	4621      	mov	r1, r4
 800fbba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fbbe:	3b30      	subs	r3, #48	; 0x30
 800fbc0:	2b09      	cmp	r3, #9
 800fbc2:	d94e      	bls.n	800fc62 <_svfiprintf_r+0x17e>
 800fbc4:	b1b0      	cbz	r0, 800fbf4 <_svfiprintf_r+0x110>
 800fbc6:	9207      	str	r2, [sp, #28]
 800fbc8:	e014      	b.n	800fbf4 <_svfiprintf_r+0x110>
 800fbca:	eba0 0308 	sub.w	r3, r0, r8
 800fbce:	fa09 f303 	lsl.w	r3, r9, r3
 800fbd2:	4313      	orrs	r3, r2
 800fbd4:	9304      	str	r3, [sp, #16]
 800fbd6:	46a2      	mov	sl, r4
 800fbd8:	e7d2      	b.n	800fb80 <_svfiprintf_r+0x9c>
 800fbda:	9b03      	ldr	r3, [sp, #12]
 800fbdc:	1d19      	adds	r1, r3, #4
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	9103      	str	r1, [sp, #12]
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	bfbb      	ittet	lt
 800fbe6:	425b      	neglt	r3, r3
 800fbe8:	f042 0202 	orrlt.w	r2, r2, #2
 800fbec:	9307      	strge	r3, [sp, #28]
 800fbee:	9307      	strlt	r3, [sp, #28]
 800fbf0:	bfb8      	it	lt
 800fbf2:	9204      	strlt	r2, [sp, #16]
 800fbf4:	7823      	ldrb	r3, [r4, #0]
 800fbf6:	2b2e      	cmp	r3, #46	; 0x2e
 800fbf8:	d10c      	bne.n	800fc14 <_svfiprintf_r+0x130>
 800fbfa:	7863      	ldrb	r3, [r4, #1]
 800fbfc:	2b2a      	cmp	r3, #42	; 0x2a
 800fbfe:	d135      	bne.n	800fc6c <_svfiprintf_r+0x188>
 800fc00:	9b03      	ldr	r3, [sp, #12]
 800fc02:	1d1a      	adds	r2, r3, #4
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	9203      	str	r2, [sp, #12]
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	bfb8      	it	lt
 800fc0c:	f04f 33ff 	movlt.w	r3, #4294967295
 800fc10:	3402      	adds	r4, #2
 800fc12:	9305      	str	r3, [sp, #20]
 800fc14:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800fce0 <_svfiprintf_r+0x1fc>
 800fc18:	7821      	ldrb	r1, [r4, #0]
 800fc1a:	2203      	movs	r2, #3
 800fc1c:	4650      	mov	r0, sl
 800fc1e:	f7f0 fb77 	bl	8000310 <memchr>
 800fc22:	b140      	cbz	r0, 800fc36 <_svfiprintf_r+0x152>
 800fc24:	2340      	movs	r3, #64	; 0x40
 800fc26:	eba0 000a 	sub.w	r0, r0, sl
 800fc2a:	fa03 f000 	lsl.w	r0, r3, r0
 800fc2e:	9b04      	ldr	r3, [sp, #16]
 800fc30:	4303      	orrs	r3, r0
 800fc32:	3401      	adds	r4, #1
 800fc34:	9304      	str	r3, [sp, #16]
 800fc36:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc3a:	4826      	ldr	r0, [pc, #152]	; (800fcd4 <_svfiprintf_r+0x1f0>)
 800fc3c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fc40:	2206      	movs	r2, #6
 800fc42:	f7f0 fb65 	bl	8000310 <memchr>
 800fc46:	2800      	cmp	r0, #0
 800fc48:	d038      	beq.n	800fcbc <_svfiprintf_r+0x1d8>
 800fc4a:	4b23      	ldr	r3, [pc, #140]	; (800fcd8 <_svfiprintf_r+0x1f4>)
 800fc4c:	bb1b      	cbnz	r3, 800fc96 <_svfiprintf_r+0x1b2>
 800fc4e:	9b03      	ldr	r3, [sp, #12]
 800fc50:	3307      	adds	r3, #7
 800fc52:	f023 0307 	bic.w	r3, r3, #7
 800fc56:	3308      	adds	r3, #8
 800fc58:	9303      	str	r3, [sp, #12]
 800fc5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc5c:	4433      	add	r3, r6
 800fc5e:	9309      	str	r3, [sp, #36]	; 0x24
 800fc60:	e767      	b.n	800fb32 <_svfiprintf_r+0x4e>
 800fc62:	fb0c 3202 	mla	r2, ip, r2, r3
 800fc66:	460c      	mov	r4, r1
 800fc68:	2001      	movs	r0, #1
 800fc6a:	e7a5      	b.n	800fbb8 <_svfiprintf_r+0xd4>
 800fc6c:	2300      	movs	r3, #0
 800fc6e:	3401      	adds	r4, #1
 800fc70:	9305      	str	r3, [sp, #20]
 800fc72:	4619      	mov	r1, r3
 800fc74:	f04f 0c0a 	mov.w	ip, #10
 800fc78:	4620      	mov	r0, r4
 800fc7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fc7e:	3a30      	subs	r2, #48	; 0x30
 800fc80:	2a09      	cmp	r2, #9
 800fc82:	d903      	bls.n	800fc8c <_svfiprintf_r+0x1a8>
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d0c5      	beq.n	800fc14 <_svfiprintf_r+0x130>
 800fc88:	9105      	str	r1, [sp, #20]
 800fc8a:	e7c3      	b.n	800fc14 <_svfiprintf_r+0x130>
 800fc8c:	fb0c 2101 	mla	r1, ip, r1, r2
 800fc90:	4604      	mov	r4, r0
 800fc92:	2301      	movs	r3, #1
 800fc94:	e7f0      	b.n	800fc78 <_svfiprintf_r+0x194>
 800fc96:	ab03      	add	r3, sp, #12
 800fc98:	9300      	str	r3, [sp, #0]
 800fc9a:	462a      	mov	r2, r5
 800fc9c:	4b0f      	ldr	r3, [pc, #60]	; (800fcdc <_svfiprintf_r+0x1f8>)
 800fc9e:	a904      	add	r1, sp, #16
 800fca0:	4638      	mov	r0, r7
 800fca2:	f3af 8000 	nop.w
 800fca6:	1c42      	adds	r2, r0, #1
 800fca8:	4606      	mov	r6, r0
 800fcaa:	d1d6      	bne.n	800fc5a <_svfiprintf_r+0x176>
 800fcac:	89ab      	ldrh	r3, [r5, #12]
 800fcae:	065b      	lsls	r3, r3, #25
 800fcb0:	f53f af2c 	bmi.w	800fb0c <_svfiprintf_r+0x28>
 800fcb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fcb6:	b01d      	add	sp, #116	; 0x74
 800fcb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcbc:	ab03      	add	r3, sp, #12
 800fcbe:	9300      	str	r3, [sp, #0]
 800fcc0:	462a      	mov	r2, r5
 800fcc2:	4b06      	ldr	r3, [pc, #24]	; (800fcdc <_svfiprintf_r+0x1f8>)
 800fcc4:	a904      	add	r1, sp, #16
 800fcc6:	4638      	mov	r0, r7
 800fcc8:	f000 f87a 	bl	800fdc0 <_printf_i>
 800fccc:	e7eb      	b.n	800fca6 <_svfiprintf_r+0x1c2>
 800fcce:	bf00      	nop
 800fcd0:	0802b2c0 	.word	0x0802b2c0
 800fcd4:	0802b2ca 	.word	0x0802b2ca
 800fcd8:	00000000 	.word	0x00000000
 800fcdc:	0800fa2d 	.word	0x0800fa2d
 800fce0:	0802b2c6 	.word	0x0802b2c6

0800fce4 <_printf_common>:
 800fce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fce8:	4616      	mov	r6, r2
 800fcea:	4699      	mov	r9, r3
 800fcec:	688a      	ldr	r2, [r1, #8]
 800fcee:	690b      	ldr	r3, [r1, #16]
 800fcf0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fcf4:	4293      	cmp	r3, r2
 800fcf6:	bfb8      	it	lt
 800fcf8:	4613      	movlt	r3, r2
 800fcfa:	6033      	str	r3, [r6, #0]
 800fcfc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fd00:	4607      	mov	r7, r0
 800fd02:	460c      	mov	r4, r1
 800fd04:	b10a      	cbz	r2, 800fd0a <_printf_common+0x26>
 800fd06:	3301      	adds	r3, #1
 800fd08:	6033      	str	r3, [r6, #0]
 800fd0a:	6823      	ldr	r3, [r4, #0]
 800fd0c:	0699      	lsls	r1, r3, #26
 800fd0e:	bf42      	ittt	mi
 800fd10:	6833      	ldrmi	r3, [r6, #0]
 800fd12:	3302      	addmi	r3, #2
 800fd14:	6033      	strmi	r3, [r6, #0]
 800fd16:	6825      	ldr	r5, [r4, #0]
 800fd18:	f015 0506 	ands.w	r5, r5, #6
 800fd1c:	d106      	bne.n	800fd2c <_printf_common+0x48>
 800fd1e:	f104 0a19 	add.w	sl, r4, #25
 800fd22:	68e3      	ldr	r3, [r4, #12]
 800fd24:	6832      	ldr	r2, [r6, #0]
 800fd26:	1a9b      	subs	r3, r3, r2
 800fd28:	42ab      	cmp	r3, r5
 800fd2a:	dc26      	bgt.n	800fd7a <_printf_common+0x96>
 800fd2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fd30:	1e13      	subs	r3, r2, #0
 800fd32:	6822      	ldr	r2, [r4, #0]
 800fd34:	bf18      	it	ne
 800fd36:	2301      	movne	r3, #1
 800fd38:	0692      	lsls	r2, r2, #26
 800fd3a:	d42b      	bmi.n	800fd94 <_printf_common+0xb0>
 800fd3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fd40:	4649      	mov	r1, r9
 800fd42:	4638      	mov	r0, r7
 800fd44:	47c0      	blx	r8
 800fd46:	3001      	adds	r0, #1
 800fd48:	d01e      	beq.n	800fd88 <_printf_common+0xa4>
 800fd4a:	6823      	ldr	r3, [r4, #0]
 800fd4c:	68e5      	ldr	r5, [r4, #12]
 800fd4e:	6832      	ldr	r2, [r6, #0]
 800fd50:	f003 0306 	and.w	r3, r3, #6
 800fd54:	2b04      	cmp	r3, #4
 800fd56:	bf08      	it	eq
 800fd58:	1aad      	subeq	r5, r5, r2
 800fd5a:	68a3      	ldr	r3, [r4, #8]
 800fd5c:	6922      	ldr	r2, [r4, #16]
 800fd5e:	bf0c      	ite	eq
 800fd60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fd64:	2500      	movne	r5, #0
 800fd66:	4293      	cmp	r3, r2
 800fd68:	bfc4      	itt	gt
 800fd6a:	1a9b      	subgt	r3, r3, r2
 800fd6c:	18ed      	addgt	r5, r5, r3
 800fd6e:	2600      	movs	r6, #0
 800fd70:	341a      	adds	r4, #26
 800fd72:	42b5      	cmp	r5, r6
 800fd74:	d11a      	bne.n	800fdac <_printf_common+0xc8>
 800fd76:	2000      	movs	r0, #0
 800fd78:	e008      	b.n	800fd8c <_printf_common+0xa8>
 800fd7a:	2301      	movs	r3, #1
 800fd7c:	4652      	mov	r2, sl
 800fd7e:	4649      	mov	r1, r9
 800fd80:	4638      	mov	r0, r7
 800fd82:	47c0      	blx	r8
 800fd84:	3001      	adds	r0, #1
 800fd86:	d103      	bne.n	800fd90 <_printf_common+0xac>
 800fd88:	f04f 30ff 	mov.w	r0, #4294967295
 800fd8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd90:	3501      	adds	r5, #1
 800fd92:	e7c6      	b.n	800fd22 <_printf_common+0x3e>
 800fd94:	18e1      	adds	r1, r4, r3
 800fd96:	1c5a      	adds	r2, r3, #1
 800fd98:	2030      	movs	r0, #48	; 0x30
 800fd9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fd9e:	4422      	add	r2, r4
 800fda0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fda4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fda8:	3302      	adds	r3, #2
 800fdaa:	e7c7      	b.n	800fd3c <_printf_common+0x58>
 800fdac:	2301      	movs	r3, #1
 800fdae:	4622      	mov	r2, r4
 800fdb0:	4649      	mov	r1, r9
 800fdb2:	4638      	mov	r0, r7
 800fdb4:	47c0      	blx	r8
 800fdb6:	3001      	adds	r0, #1
 800fdb8:	d0e6      	beq.n	800fd88 <_printf_common+0xa4>
 800fdba:	3601      	adds	r6, #1
 800fdbc:	e7d9      	b.n	800fd72 <_printf_common+0x8e>
	...

0800fdc0 <_printf_i>:
 800fdc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fdc4:	460c      	mov	r4, r1
 800fdc6:	4691      	mov	r9, r2
 800fdc8:	7e27      	ldrb	r7, [r4, #24]
 800fdca:	990c      	ldr	r1, [sp, #48]	; 0x30
 800fdcc:	2f78      	cmp	r7, #120	; 0x78
 800fdce:	4680      	mov	r8, r0
 800fdd0:	469a      	mov	sl, r3
 800fdd2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fdd6:	d807      	bhi.n	800fde8 <_printf_i+0x28>
 800fdd8:	2f62      	cmp	r7, #98	; 0x62
 800fdda:	d80a      	bhi.n	800fdf2 <_printf_i+0x32>
 800fddc:	2f00      	cmp	r7, #0
 800fdde:	f000 80d8 	beq.w	800ff92 <_printf_i+0x1d2>
 800fde2:	2f58      	cmp	r7, #88	; 0x58
 800fde4:	f000 80a3 	beq.w	800ff2e <_printf_i+0x16e>
 800fde8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800fdec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fdf0:	e03a      	b.n	800fe68 <_printf_i+0xa8>
 800fdf2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fdf6:	2b15      	cmp	r3, #21
 800fdf8:	d8f6      	bhi.n	800fde8 <_printf_i+0x28>
 800fdfa:	a001      	add	r0, pc, #4	; (adr r0, 800fe00 <_printf_i+0x40>)
 800fdfc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800fe00:	0800fe59 	.word	0x0800fe59
 800fe04:	0800fe6d 	.word	0x0800fe6d
 800fe08:	0800fde9 	.word	0x0800fde9
 800fe0c:	0800fde9 	.word	0x0800fde9
 800fe10:	0800fde9 	.word	0x0800fde9
 800fe14:	0800fde9 	.word	0x0800fde9
 800fe18:	0800fe6d 	.word	0x0800fe6d
 800fe1c:	0800fde9 	.word	0x0800fde9
 800fe20:	0800fde9 	.word	0x0800fde9
 800fe24:	0800fde9 	.word	0x0800fde9
 800fe28:	0800fde9 	.word	0x0800fde9
 800fe2c:	0800ff79 	.word	0x0800ff79
 800fe30:	0800fe9d 	.word	0x0800fe9d
 800fe34:	0800ff5b 	.word	0x0800ff5b
 800fe38:	0800fde9 	.word	0x0800fde9
 800fe3c:	0800fde9 	.word	0x0800fde9
 800fe40:	0800ff9b 	.word	0x0800ff9b
 800fe44:	0800fde9 	.word	0x0800fde9
 800fe48:	0800fe9d 	.word	0x0800fe9d
 800fe4c:	0800fde9 	.word	0x0800fde9
 800fe50:	0800fde9 	.word	0x0800fde9
 800fe54:	0800ff63 	.word	0x0800ff63
 800fe58:	680b      	ldr	r3, [r1, #0]
 800fe5a:	1d1a      	adds	r2, r3, #4
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	600a      	str	r2, [r1, #0]
 800fe60:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800fe64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fe68:	2301      	movs	r3, #1
 800fe6a:	e0a3      	b.n	800ffb4 <_printf_i+0x1f4>
 800fe6c:	6825      	ldr	r5, [r4, #0]
 800fe6e:	6808      	ldr	r0, [r1, #0]
 800fe70:	062e      	lsls	r6, r5, #24
 800fe72:	f100 0304 	add.w	r3, r0, #4
 800fe76:	d50a      	bpl.n	800fe8e <_printf_i+0xce>
 800fe78:	6805      	ldr	r5, [r0, #0]
 800fe7a:	600b      	str	r3, [r1, #0]
 800fe7c:	2d00      	cmp	r5, #0
 800fe7e:	da03      	bge.n	800fe88 <_printf_i+0xc8>
 800fe80:	232d      	movs	r3, #45	; 0x2d
 800fe82:	426d      	negs	r5, r5
 800fe84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fe88:	485e      	ldr	r0, [pc, #376]	; (8010004 <_printf_i+0x244>)
 800fe8a:	230a      	movs	r3, #10
 800fe8c:	e019      	b.n	800fec2 <_printf_i+0x102>
 800fe8e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800fe92:	6805      	ldr	r5, [r0, #0]
 800fe94:	600b      	str	r3, [r1, #0]
 800fe96:	bf18      	it	ne
 800fe98:	b22d      	sxthne	r5, r5
 800fe9a:	e7ef      	b.n	800fe7c <_printf_i+0xbc>
 800fe9c:	680b      	ldr	r3, [r1, #0]
 800fe9e:	6825      	ldr	r5, [r4, #0]
 800fea0:	1d18      	adds	r0, r3, #4
 800fea2:	6008      	str	r0, [r1, #0]
 800fea4:	0628      	lsls	r0, r5, #24
 800fea6:	d501      	bpl.n	800feac <_printf_i+0xec>
 800fea8:	681d      	ldr	r5, [r3, #0]
 800feaa:	e002      	b.n	800feb2 <_printf_i+0xf2>
 800feac:	0669      	lsls	r1, r5, #25
 800feae:	d5fb      	bpl.n	800fea8 <_printf_i+0xe8>
 800feb0:	881d      	ldrh	r5, [r3, #0]
 800feb2:	4854      	ldr	r0, [pc, #336]	; (8010004 <_printf_i+0x244>)
 800feb4:	2f6f      	cmp	r7, #111	; 0x6f
 800feb6:	bf0c      	ite	eq
 800feb8:	2308      	moveq	r3, #8
 800feba:	230a      	movne	r3, #10
 800febc:	2100      	movs	r1, #0
 800febe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fec2:	6866      	ldr	r6, [r4, #4]
 800fec4:	60a6      	str	r6, [r4, #8]
 800fec6:	2e00      	cmp	r6, #0
 800fec8:	bfa2      	ittt	ge
 800feca:	6821      	ldrge	r1, [r4, #0]
 800fecc:	f021 0104 	bicge.w	r1, r1, #4
 800fed0:	6021      	strge	r1, [r4, #0]
 800fed2:	b90d      	cbnz	r5, 800fed8 <_printf_i+0x118>
 800fed4:	2e00      	cmp	r6, #0
 800fed6:	d04d      	beq.n	800ff74 <_printf_i+0x1b4>
 800fed8:	4616      	mov	r6, r2
 800feda:	fbb5 f1f3 	udiv	r1, r5, r3
 800fede:	fb03 5711 	mls	r7, r3, r1, r5
 800fee2:	5dc7      	ldrb	r7, [r0, r7]
 800fee4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fee8:	462f      	mov	r7, r5
 800feea:	42bb      	cmp	r3, r7
 800feec:	460d      	mov	r5, r1
 800feee:	d9f4      	bls.n	800feda <_printf_i+0x11a>
 800fef0:	2b08      	cmp	r3, #8
 800fef2:	d10b      	bne.n	800ff0c <_printf_i+0x14c>
 800fef4:	6823      	ldr	r3, [r4, #0]
 800fef6:	07df      	lsls	r7, r3, #31
 800fef8:	d508      	bpl.n	800ff0c <_printf_i+0x14c>
 800fefa:	6923      	ldr	r3, [r4, #16]
 800fefc:	6861      	ldr	r1, [r4, #4]
 800fefe:	4299      	cmp	r1, r3
 800ff00:	bfde      	ittt	le
 800ff02:	2330      	movle	r3, #48	; 0x30
 800ff04:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ff08:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ff0c:	1b92      	subs	r2, r2, r6
 800ff0e:	6122      	str	r2, [r4, #16]
 800ff10:	f8cd a000 	str.w	sl, [sp]
 800ff14:	464b      	mov	r3, r9
 800ff16:	aa03      	add	r2, sp, #12
 800ff18:	4621      	mov	r1, r4
 800ff1a:	4640      	mov	r0, r8
 800ff1c:	f7ff fee2 	bl	800fce4 <_printf_common>
 800ff20:	3001      	adds	r0, #1
 800ff22:	d14c      	bne.n	800ffbe <_printf_i+0x1fe>
 800ff24:	f04f 30ff 	mov.w	r0, #4294967295
 800ff28:	b004      	add	sp, #16
 800ff2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff2e:	4835      	ldr	r0, [pc, #212]	; (8010004 <_printf_i+0x244>)
 800ff30:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ff34:	6823      	ldr	r3, [r4, #0]
 800ff36:	680e      	ldr	r6, [r1, #0]
 800ff38:	061f      	lsls	r7, r3, #24
 800ff3a:	f856 5b04 	ldr.w	r5, [r6], #4
 800ff3e:	600e      	str	r6, [r1, #0]
 800ff40:	d514      	bpl.n	800ff6c <_printf_i+0x1ac>
 800ff42:	07d9      	lsls	r1, r3, #31
 800ff44:	bf44      	itt	mi
 800ff46:	f043 0320 	orrmi.w	r3, r3, #32
 800ff4a:	6023      	strmi	r3, [r4, #0]
 800ff4c:	b91d      	cbnz	r5, 800ff56 <_printf_i+0x196>
 800ff4e:	6823      	ldr	r3, [r4, #0]
 800ff50:	f023 0320 	bic.w	r3, r3, #32
 800ff54:	6023      	str	r3, [r4, #0]
 800ff56:	2310      	movs	r3, #16
 800ff58:	e7b0      	b.n	800febc <_printf_i+0xfc>
 800ff5a:	6823      	ldr	r3, [r4, #0]
 800ff5c:	f043 0320 	orr.w	r3, r3, #32
 800ff60:	6023      	str	r3, [r4, #0]
 800ff62:	2378      	movs	r3, #120	; 0x78
 800ff64:	4828      	ldr	r0, [pc, #160]	; (8010008 <_printf_i+0x248>)
 800ff66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ff6a:	e7e3      	b.n	800ff34 <_printf_i+0x174>
 800ff6c:	065e      	lsls	r6, r3, #25
 800ff6e:	bf48      	it	mi
 800ff70:	b2ad      	uxthmi	r5, r5
 800ff72:	e7e6      	b.n	800ff42 <_printf_i+0x182>
 800ff74:	4616      	mov	r6, r2
 800ff76:	e7bb      	b.n	800fef0 <_printf_i+0x130>
 800ff78:	680b      	ldr	r3, [r1, #0]
 800ff7a:	6826      	ldr	r6, [r4, #0]
 800ff7c:	6960      	ldr	r0, [r4, #20]
 800ff7e:	1d1d      	adds	r5, r3, #4
 800ff80:	600d      	str	r5, [r1, #0]
 800ff82:	0635      	lsls	r5, r6, #24
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	d501      	bpl.n	800ff8c <_printf_i+0x1cc>
 800ff88:	6018      	str	r0, [r3, #0]
 800ff8a:	e002      	b.n	800ff92 <_printf_i+0x1d2>
 800ff8c:	0671      	lsls	r1, r6, #25
 800ff8e:	d5fb      	bpl.n	800ff88 <_printf_i+0x1c8>
 800ff90:	8018      	strh	r0, [r3, #0]
 800ff92:	2300      	movs	r3, #0
 800ff94:	6123      	str	r3, [r4, #16]
 800ff96:	4616      	mov	r6, r2
 800ff98:	e7ba      	b.n	800ff10 <_printf_i+0x150>
 800ff9a:	680b      	ldr	r3, [r1, #0]
 800ff9c:	1d1a      	adds	r2, r3, #4
 800ff9e:	600a      	str	r2, [r1, #0]
 800ffa0:	681e      	ldr	r6, [r3, #0]
 800ffa2:	6862      	ldr	r2, [r4, #4]
 800ffa4:	2100      	movs	r1, #0
 800ffa6:	4630      	mov	r0, r6
 800ffa8:	f7f0 f9b2 	bl	8000310 <memchr>
 800ffac:	b108      	cbz	r0, 800ffb2 <_printf_i+0x1f2>
 800ffae:	1b80      	subs	r0, r0, r6
 800ffb0:	6060      	str	r0, [r4, #4]
 800ffb2:	6863      	ldr	r3, [r4, #4]
 800ffb4:	6123      	str	r3, [r4, #16]
 800ffb6:	2300      	movs	r3, #0
 800ffb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ffbc:	e7a8      	b.n	800ff10 <_printf_i+0x150>
 800ffbe:	6923      	ldr	r3, [r4, #16]
 800ffc0:	4632      	mov	r2, r6
 800ffc2:	4649      	mov	r1, r9
 800ffc4:	4640      	mov	r0, r8
 800ffc6:	47d0      	blx	sl
 800ffc8:	3001      	adds	r0, #1
 800ffca:	d0ab      	beq.n	800ff24 <_printf_i+0x164>
 800ffcc:	6823      	ldr	r3, [r4, #0]
 800ffce:	079b      	lsls	r3, r3, #30
 800ffd0:	d413      	bmi.n	800fffa <_printf_i+0x23a>
 800ffd2:	68e0      	ldr	r0, [r4, #12]
 800ffd4:	9b03      	ldr	r3, [sp, #12]
 800ffd6:	4298      	cmp	r0, r3
 800ffd8:	bfb8      	it	lt
 800ffda:	4618      	movlt	r0, r3
 800ffdc:	e7a4      	b.n	800ff28 <_printf_i+0x168>
 800ffde:	2301      	movs	r3, #1
 800ffe0:	4632      	mov	r2, r6
 800ffe2:	4649      	mov	r1, r9
 800ffe4:	4640      	mov	r0, r8
 800ffe6:	47d0      	blx	sl
 800ffe8:	3001      	adds	r0, #1
 800ffea:	d09b      	beq.n	800ff24 <_printf_i+0x164>
 800ffec:	3501      	adds	r5, #1
 800ffee:	68e3      	ldr	r3, [r4, #12]
 800fff0:	9903      	ldr	r1, [sp, #12]
 800fff2:	1a5b      	subs	r3, r3, r1
 800fff4:	42ab      	cmp	r3, r5
 800fff6:	dcf2      	bgt.n	800ffde <_printf_i+0x21e>
 800fff8:	e7eb      	b.n	800ffd2 <_printf_i+0x212>
 800fffa:	2500      	movs	r5, #0
 800fffc:	f104 0619 	add.w	r6, r4, #25
 8010000:	e7f5      	b.n	800ffee <_printf_i+0x22e>
 8010002:	bf00      	nop
 8010004:	0802b2d1 	.word	0x0802b2d1
 8010008:	0802b2e2 	.word	0x0802b2e2

0801000c <__retarget_lock_acquire_recursive>:
 801000c:	4770      	bx	lr

0801000e <__retarget_lock_release_recursive>:
 801000e:	4770      	bx	lr

08010010 <_realloc_r>:
 8010010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010012:	4607      	mov	r7, r0
 8010014:	4614      	mov	r4, r2
 8010016:	460e      	mov	r6, r1
 8010018:	b921      	cbnz	r1, 8010024 <_realloc_r+0x14>
 801001a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801001e:	4611      	mov	r1, r2
 8010020:	f7ff bc22 	b.w	800f868 <_malloc_r>
 8010024:	b922      	cbnz	r2, 8010030 <_realloc_r+0x20>
 8010026:	f7ff fbcf 	bl	800f7c8 <_free_r>
 801002a:	4625      	mov	r5, r4
 801002c:	4628      	mov	r0, r5
 801002e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010030:	f000 f814 	bl	801005c <_malloc_usable_size_r>
 8010034:	42a0      	cmp	r0, r4
 8010036:	d20f      	bcs.n	8010058 <_realloc_r+0x48>
 8010038:	4621      	mov	r1, r4
 801003a:	4638      	mov	r0, r7
 801003c:	f7ff fc14 	bl	800f868 <_malloc_r>
 8010040:	4605      	mov	r5, r0
 8010042:	2800      	cmp	r0, #0
 8010044:	d0f2      	beq.n	801002c <_realloc_r+0x1c>
 8010046:	4631      	mov	r1, r6
 8010048:	4622      	mov	r2, r4
 801004a:	f7ff fb7d 	bl	800f748 <memcpy>
 801004e:	4631      	mov	r1, r6
 8010050:	4638      	mov	r0, r7
 8010052:	f7ff fbb9 	bl	800f7c8 <_free_r>
 8010056:	e7e9      	b.n	801002c <_realloc_r+0x1c>
 8010058:	4635      	mov	r5, r6
 801005a:	e7e7      	b.n	801002c <_realloc_r+0x1c>

0801005c <_malloc_usable_size_r>:
 801005c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010060:	1f18      	subs	r0, r3, #4
 8010062:	2b00      	cmp	r3, #0
 8010064:	bfbc      	itt	lt
 8010066:	580b      	ldrlt	r3, [r1, r0]
 8010068:	18c0      	addlt	r0, r0, r3
 801006a:	4770      	bx	lr

0801006c <_init>:
 801006c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801006e:	bf00      	nop
 8010070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010072:	bc08      	pop	{r3}
 8010074:	469e      	mov	lr, r3
 8010076:	4770      	bx	lr

08010078 <_fini>:
 8010078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801007a:	bf00      	nop
 801007c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801007e:	bc08      	pop	{r3}
 8010080:	469e      	mov	lr, r3
 8010082:	4770      	bx	lr
