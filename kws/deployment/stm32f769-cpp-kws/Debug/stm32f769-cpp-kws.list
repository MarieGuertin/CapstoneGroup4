
stm32f769-cpp-kws.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fa8c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001b25c  0800fc90  0800fc90  0001fc90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802aeec  0802aeec  00040080  2**0
                  CONTENTS
  4 .ARM          00000008  0802aeec  0802aeec  0003aeec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802aef4  0802aef4  00040080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802aef4  0802aef4  0003aef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802aef8  0802aef8  0003aef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0802aefc  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f8  20000080  0802af7c  00040080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000478  0802af7c  00040478  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00040080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005fd7c  00000000  00000000  000400ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007db6  00000000  00000000  0009fe2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019b8  00000000  00000000  000a7be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016b8  00000000  00000000  000a9598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00037ded  00000000  00000000  000aac50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028871  00000000  00000000  000e2a3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018a738  00000000  00000000  0010b2ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  002959e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007218  00000000  00000000  00295a3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000080 	.word	0x20000080
 800021c:	00000000 	.word	0x00000000
 8000220:	0800fc74 	.word	0x0800fc74

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000084 	.word	0x20000084
 800023c:	0800fc74 	.word	0x0800fc74

08000240 <arm_bitreversal_32>:
	ENDP

#else

arm_bitreversal_32 PROC
	ADDS     r3,r1,#1
 8000240:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 8000242:	2b01      	cmp	r3, #1
	IT       LS
 8000244:	bf98      	it	ls
	BXLS     lr
 8000246:	4770      	bxls	lr
	PUSH     {r4-r9}
 8000248:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 800024c:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 800024e:	089b      	lsrs	r3, r3, #2

08000250 <arm_bitreversal_32_0>:
arm_bitreversal_32_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 8000250:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 8000254:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 8000258:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 800025a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8
 800025e:	4480      	add	r8, r0
	ADD      r9,r0,r9
 8000260:	4481      	add	r9, r0
	ADD      r2,r0,r2
 8000262:	4402      	add	r2, r0
	ADD      r12,r0,r12
 8000264:	4484      	add	ip, r0
	LDR      r7,[r9,#0]
 8000266:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 800026a:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 800026e:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 8000270:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 8000274:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 8000278:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 800027c:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 8000280:	6014      	str	r4, [r2, #0]
	LDR      r7,[r9,#4]
 8000282:	f8d9 7004 	ldr.w	r7, [r9, #4]
	LDR      r6,[r8,#4]
 8000286:	f8d8 6004 	ldr.w	r6, [r8, #4]
	LDR      r5,[r2,#4]
 800028a:	6855      	ldr	r5, [r2, #4]
	LDR      r4,[r12,#4]
 800028c:	f8dc 4004 	ldr.w	r4, [ip, #4]
	STR      r6,[r9,#4]
 8000290:	f8c9 6004 	str.w	r6, [r9, #4]
	STR      r7,[r8,#4]
 8000294:	f8c8 7004 	str.w	r7, [r8, #4]
	STR      r5,[r12,#4]
 8000298:	f8cc 5004 	str.w	r5, [ip, #4]
	STR      r4,[r2,#4]
 800029c:	6054      	str	r4, [r2, #4]
	ADDS     r1,r1,#8
 800029e:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 80002a0:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_32_0
 80002a2:	d1d5      	bne.n	8000250 <arm_bitreversal_32_0>
	POP      {r4-r9}
 80002a4:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 80002a8:	4770      	bx	lr

080002aa <arm_bitreversal_16>:
	ENDP

arm_bitreversal_16 PROC
	ADDS     r3,r1,#1
 80002aa:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 80002ac:	2b01      	cmp	r3, #1
	IT       LS
 80002ae:	bf98      	it	ls
	BXLS     lr
 80002b0:	4770      	bxls	lr
	PUSH     {r4-r9}
 80002b2:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 80002b6:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 80002b8:	089b      	lsrs	r3, r3, #2

080002ba <arm_bitreversal_16_0>:
arm_bitreversal_16_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 80002ba:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 80002be:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 80002c2:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 80002c4:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8,LSR #1
 80002c8:	eb00 0858 	add.w	r8, r0, r8, lsr #1
	ADD      r9,r0,r9,LSR #1
 80002cc:	eb00 0959 	add.w	r9, r0, r9, lsr #1
	ADD      r2,r0,r2,LSR #1
 80002d0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
	ADD      r12,r0,r12,LSR #1
 80002d4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
	LDR      r7,[r9,#0]
 80002d8:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 80002dc:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 80002e0:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 80002e2:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 80002e6:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 80002ea:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 80002ee:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 80002f2:	6014      	str	r4, [r2, #0]
	ADDS     r1,r1,#8
 80002f4:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 80002f6:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_16_0
 80002f8:	d1df      	bne.n	80002ba <arm_bitreversal_16_0>
	POP      {r4-r9}
 80002fa:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 80002fe:	4770      	bx	lr

08000300 <strlen>:
 8000300:	4603      	mov	r3, r0
 8000302:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000306:	2a00      	cmp	r2, #0
 8000308:	d1fb      	bne.n	8000302 <strlen+0x2>
 800030a:	1a18      	subs	r0, r3, r0
 800030c:	3801      	subs	r0, #1
 800030e:	4770      	bx	lr

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96e 	b.w	80006a4 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	4604      	mov	r4, r0
 80003e8:	468c      	mov	ip, r1
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	f040 8083 	bne.w	80004f6 <__udivmoddi4+0x116>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4617      	mov	r7, r2
 80003f4:	d947      	bls.n	8000486 <__udivmoddi4+0xa6>
 80003f6:	fab2 f282 	clz	r2, r2
 80003fa:	b142      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fc:	f1c2 0020 	rsb	r0, r2, #32
 8000400:	fa24 f000 	lsr.w	r0, r4, r0
 8000404:	4091      	lsls	r1, r2
 8000406:	4097      	lsls	r7, r2
 8000408:	ea40 0c01 	orr.w	ip, r0, r1
 800040c:	4094      	lsls	r4, r2
 800040e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fbbc f6f8 	udiv	r6, ip, r8
 8000418:	fa1f fe87 	uxth.w	lr, r7
 800041c:	fb08 c116 	mls	r1, r8, r6, ip
 8000420:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000424:	fb06 f10e 	mul.w	r1, r6, lr
 8000428:	4299      	cmp	r1, r3
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x60>
 800042c:	18fb      	adds	r3, r7, r3
 800042e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000432:	f080 8119 	bcs.w	8000668 <__udivmoddi4+0x288>
 8000436:	4299      	cmp	r1, r3
 8000438:	f240 8116 	bls.w	8000668 <__udivmoddi4+0x288>
 800043c:	3e02      	subs	r6, #2
 800043e:	443b      	add	r3, r7
 8000440:	1a5b      	subs	r3, r3, r1
 8000442:	b2a4      	uxth	r4, r4
 8000444:	fbb3 f0f8 	udiv	r0, r3, r8
 8000448:	fb08 3310 	mls	r3, r8, r0, r3
 800044c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000450:	fb00 fe0e 	mul.w	lr, r0, lr
 8000454:	45a6      	cmp	lr, r4
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x8c>
 8000458:	193c      	adds	r4, r7, r4
 800045a:	f100 33ff 	add.w	r3, r0, #4294967295
 800045e:	f080 8105 	bcs.w	800066c <__udivmoddi4+0x28c>
 8000462:	45a6      	cmp	lr, r4
 8000464:	f240 8102 	bls.w	800066c <__udivmoddi4+0x28c>
 8000468:	3802      	subs	r0, #2
 800046a:	443c      	add	r4, r7
 800046c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	2600      	movs	r6, #0
 8000476:	b11d      	cbz	r5, 8000480 <__udivmoddi4+0xa0>
 8000478:	40d4      	lsrs	r4, r2
 800047a:	2300      	movs	r3, #0
 800047c:	e9c5 4300 	strd	r4, r3, [r5]
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	b902      	cbnz	r2, 800048a <__udivmoddi4+0xaa>
 8000488:	deff      	udf	#255	; 0xff
 800048a:	fab2 f282 	clz	r2, r2
 800048e:	2a00      	cmp	r2, #0
 8000490:	d150      	bne.n	8000534 <__udivmoddi4+0x154>
 8000492:	1bcb      	subs	r3, r1, r7
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	fa1f f887 	uxth.w	r8, r7
 800049c:	2601      	movs	r6, #1
 800049e:	fbb3 fcfe 	udiv	ip, r3, lr
 80004a2:	0c21      	lsrs	r1, r4, #16
 80004a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80004a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ac:	fb08 f30c 	mul.w	r3, r8, ip
 80004b0:	428b      	cmp	r3, r1
 80004b2:	d907      	bls.n	80004c4 <__udivmoddi4+0xe4>
 80004b4:	1879      	adds	r1, r7, r1
 80004b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ba:	d202      	bcs.n	80004c2 <__udivmoddi4+0xe2>
 80004bc:	428b      	cmp	r3, r1
 80004be:	f200 80e9 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004c2:	4684      	mov	ip, r0
 80004c4:	1ac9      	subs	r1, r1, r3
 80004c6:	b2a3      	uxth	r3, r4
 80004c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80004d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004d4:	fb08 f800 	mul.w	r8, r8, r0
 80004d8:	45a0      	cmp	r8, r4
 80004da:	d907      	bls.n	80004ec <__udivmoddi4+0x10c>
 80004dc:	193c      	adds	r4, r7, r4
 80004de:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x10a>
 80004e4:	45a0      	cmp	r8, r4
 80004e6:	f200 80d9 	bhi.w	800069c <__udivmoddi4+0x2bc>
 80004ea:	4618      	mov	r0, r3
 80004ec:	eba4 0408 	sub.w	r4, r4, r8
 80004f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004f4:	e7bf      	b.n	8000476 <__udivmoddi4+0x96>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d909      	bls.n	800050e <__udivmoddi4+0x12e>
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	f000 80b1 	beq.w	8000662 <__udivmoddi4+0x282>
 8000500:	2600      	movs	r6, #0
 8000502:	e9c5 0100 	strd	r0, r1, [r5]
 8000506:	4630      	mov	r0, r6
 8000508:	4631      	mov	r1, r6
 800050a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050e:	fab3 f683 	clz	r6, r3
 8000512:	2e00      	cmp	r6, #0
 8000514:	d14a      	bne.n	80005ac <__udivmoddi4+0x1cc>
 8000516:	428b      	cmp	r3, r1
 8000518:	d302      	bcc.n	8000520 <__udivmoddi4+0x140>
 800051a:	4282      	cmp	r2, r0
 800051c:	f200 80b8 	bhi.w	8000690 <__udivmoddi4+0x2b0>
 8000520:	1a84      	subs	r4, r0, r2
 8000522:	eb61 0103 	sbc.w	r1, r1, r3
 8000526:	2001      	movs	r0, #1
 8000528:	468c      	mov	ip, r1
 800052a:	2d00      	cmp	r5, #0
 800052c:	d0a8      	beq.n	8000480 <__udivmoddi4+0xa0>
 800052e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000532:	e7a5      	b.n	8000480 <__udivmoddi4+0xa0>
 8000534:	f1c2 0320 	rsb	r3, r2, #32
 8000538:	fa20 f603 	lsr.w	r6, r0, r3
 800053c:	4097      	lsls	r7, r2
 800053e:	fa01 f002 	lsl.w	r0, r1, r2
 8000542:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000546:	40d9      	lsrs	r1, r3
 8000548:	4330      	orrs	r0, r6
 800054a:	0c03      	lsrs	r3, r0, #16
 800054c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000550:	fa1f f887 	uxth.w	r8, r7
 8000554:	fb0e 1116 	mls	r1, lr, r6, r1
 8000558:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800055c:	fb06 f108 	mul.w	r1, r6, r8
 8000560:	4299      	cmp	r1, r3
 8000562:	fa04 f402 	lsl.w	r4, r4, r2
 8000566:	d909      	bls.n	800057c <__udivmoddi4+0x19c>
 8000568:	18fb      	adds	r3, r7, r3
 800056a:	f106 3cff 	add.w	ip, r6, #4294967295
 800056e:	f080 808d 	bcs.w	800068c <__udivmoddi4+0x2ac>
 8000572:	4299      	cmp	r1, r3
 8000574:	f240 808a 	bls.w	800068c <__udivmoddi4+0x2ac>
 8000578:	3e02      	subs	r6, #2
 800057a:	443b      	add	r3, r7
 800057c:	1a5b      	subs	r3, r3, r1
 800057e:	b281      	uxth	r1, r0
 8000580:	fbb3 f0fe 	udiv	r0, r3, lr
 8000584:	fb0e 3310 	mls	r3, lr, r0, r3
 8000588:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800058c:	fb00 f308 	mul.w	r3, r0, r8
 8000590:	428b      	cmp	r3, r1
 8000592:	d907      	bls.n	80005a4 <__udivmoddi4+0x1c4>
 8000594:	1879      	adds	r1, r7, r1
 8000596:	f100 3cff 	add.w	ip, r0, #4294967295
 800059a:	d273      	bcs.n	8000684 <__udivmoddi4+0x2a4>
 800059c:	428b      	cmp	r3, r1
 800059e:	d971      	bls.n	8000684 <__udivmoddi4+0x2a4>
 80005a0:	3802      	subs	r0, #2
 80005a2:	4439      	add	r1, r7
 80005a4:	1acb      	subs	r3, r1, r3
 80005a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80005aa:	e778      	b.n	800049e <__udivmoddi4+0xbe>
 80005ac:	f1c6 0c20 	rsb	ip, r6, #32
 80005b0:	fa03 f406 	lsl.w	r4, r3, r6
 80005b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80005b8:	431c      	orrs	r4, r3
 80005ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80005be:	fa01 f306 	lsl.w	r3, r1, r6
 80005c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005ca:	431f      	orrs	r7, r3
 80005cc:	0c3b      	lsrs	r3, r7, #16
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fa1f f884 	uxth.w	r8, r4
 80005d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005de:	fb09 fa08 	mul.w	sl, r9, r8
 80005e2:	458a      	cmp	sl, r1
 80005e4:	fa02 f206 	lsl.w	r2, r2, r6
 80005e8:	fa00 f306 	lsl.w	r3, r0, r6
 80005ec:	d908      	bls.n	8000600 <__udivmoddi4+0x220>
 80005ee:	1861      	adds	r1, r4, r1
 80005f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005f4:	d248      	bcs.n	8000688 <__udivmoddi4+0x2a8>
 80005f6:	458a      	cmp	sl, r1
 80005f8:	d946      	bls.n	8000688 <__udivmoddi4+0x2a8>
 80005fa:	f1a9 0902 	sub.w	r9, r9, #2
 80005fe:	4421      	add	r1, r4
 8000600:	eba1 010a 	sub.w	r1, r1, sl
 8000604:	b2bf      	uxth	r7, r7
 8000606:	fbb1 f0fe 	udiv	r0, r1, lr
 800060a:	fb0e 1110 	mls	r1, lr, r0, r1
 800060e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000612:	fb00 f808 	mul.w	r8, r0, r8
 8000616:	45b8      	cmp	r8, r7
 8000618:	d907      	bls.n	800062a <__udivmoddi4+0x24a>
 800061a:	19e7      	adds	r7, r4, r7
 800061c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000620:	d22e      	bcs.n	8000680 <__udivmoddi4+0x2a0>
 8000622:	45b8      	cmp	r8, r7
 8000624:	d92c      	bls.n	8000680 <__udivmoddi4+0x2a0>
 8000626:	3802      	subs	r0, #2
 8000628:	4427      	add	r7, r4
 800062a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800062e:	eba7 0708 	sub.w	r7, r7, r8
 8000632:	fba0 8902 	umull	r8, r9, r0, r2
 8000636:	454f      	cmp	r7, r9
 8000638:	46c6      	mov	lr, r8
 800063a:	4649      	mov	r1, r9
 800063c:	d31a      	bcc.n	8000674 <__udivmoddi4+0x294>
 800063e:	d017      	beq.n	8000670 <__udivmoddi4+0x290>
 8000640:	b15d      	cbz	r5, 800065a <__udivmoddi4+0x27a>
 8000642:	ebb3 020e 	subs.w	r2, r3, lr
 8000646:	eb67 0701 	sbc.w	r7, r7, r1
 800064a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800064e:	40f2      	lsrs	r2, r6
 8000650:	ea4c 0202 	orr.w	r2, ip, r2
 8000654:	40f7      	lsrs	r7, r6
 8000656:	e9c5 2700 	strd	r2, r7, [r5]
 800065a:	2600      	movs	r6, #0
 800065c:	4631      	mov	r1, r6
 800065e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000662:	462e      	mov	r6, r5
 8000664:	4628      	mov	r0, r5
 8000666:	e70b      	b.n	8000480 <__udivmoddi4+0xa0>
 8000668:	4606      	mov	r6, r0
 800066a:	e6e9      	b.n	8000440 <__udivmoddi4+0x60>
 800066c:	4618      	mov	r0, r3
 800066e:	e6fd      	b.n	800046c <__udivmoddi4+0x8c>
 8000670:	4543      	cmp	r3, r8
 8000672:	d2e5      	bcs.n	8000640 <__udivmoddi4+0x260>
 8000674:	ebb8 0e02 	subs.w	lr, r8, r2
 8000678:	eb69 0104 	sbc.w	r1, r9, r4
 800067c:	3801      	subs	r0, #1
 800067e:	e7df      	b.n	8000640 <__udivmoddi4+0x260>
 8000680:	4608      	mov	r0, r1
 8000682:	e7d2      	b.n	800062a <__udivmoddi4+0x24a>
 8000684:	4660      	mov	r0, ip
 8000686:	e78d      	b.n	80005a4 <__udivmoddi4+0x1c4>
 8000688:	4681      	mov	r9, r0
 800068a:	e7b9      	b.n	8000600 <__udivmoddi4+0x220>
 800068c:	4666      	mov	r6, ip
 800068e:	e775      	b.n	800057c <__udivmoddi4+0x19c>
 8000690:	4630      	mov	r0, r6
 8000692:	e74a      	b.n	800052a <__udivmoddi4+0x14a>
 8000694:	f1ac 0c02 	sub.w	ip, ip, #2
 8000698:	4439      	add	r1, r7
 800069a:	e713      	b.n	80004c4 <__udivmoddi4+0xe4>
 800069c:	3802      	subs	r0, #2
 800069e:	443c      	add	r4, r7
 80006a0:	e724      	b.n	80004ec <__udivmoddi4+0x10c>
 80006a2:	bf00      	nop

080006a4 <__aeabi_idiv0>:
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop

080006a8 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	ed87 0a01 	vstr	s0, [r7, #4]
 80006b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80006b6:	fef8 7a67 	vrinta.f32	s15, s15
 80006ba:	eeb0 0a67 	vmov.f32	s0, s15
 80006be:	370c      	adds	r7, #12
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr

080006c8 <_ZN4MFCC8MelScaleEf>:

    static inline float InverseMelScale(float mel_freq) {
      return 700.0f * (expf (mel_freq / 1127.0f) - 1.0f);
    }

    static inline float MelScale(float freq) {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	ed87 0a01 	vstr	s0, [r7, #4]
      return 1127.0f * logf (1.0f + freq / 700.0f);
 80006d2:	ed97 7a01 	vldr	s14, [r7, #4]
 80006d6:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8000704 <_ZN4MFCC8MelScaleEf+0x3c>
 80006da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80006e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80006e6:	eeb0 0a67 	vmov.f32	s0, s15
 80006ea:	f00d ff99 	bl	800e620 <logf>
 80006ee:	eef0 7a40 	vmov.f32	s15, s0
 80006f2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000708 <_ZN4MFCC8MelScaleEf+0x40>
 80006f6:	ee67 7a87 	vmul.f32	s15, s15, s14
    }
 80006fa:	eeb0 0a67 	vmov.f32	s0, s15
 80006fe:	3708      	adds	r7, #8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	442f0000 	.word	0x442f0000
 8000708:	448ce000 	.word	0x448ce000

0800070c <_ZSt3logIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    log(_Tp __x)
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
    { return __builtin_log(__x); }
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	ee07 3a90 	vmov	s15, r3
 800071a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800071e:	eeb0 0b47 	vmov.f64	d0, d7
 8000722:	f00d fa35 	bl	800db90 <log>
 8000726:	eeb0 7b40 	vmov.f64	d7, d0
 800072a:	eeb0 0b47 	vmov.f64	d0, d7
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <_ZSt3powIidEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
 800073a:	60f8      	str	r0, [r7, #12]
 800073c:	ed87 0b00 	vstr	d0, [r7]
      return pow(__type(__x), __type(__y));
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	ee07 3a90 	vmov	s15, r3
 8000746:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800074a:	ed97 1b00 	vldr	d1, [r7]
 800074e:	eeb0 0b47 	vmov.f64	d0, d7
 8000752:	f00d fbe1 	bl	800df18 <pow>
 8000756:	eeb0 7b40 	vmov.f64	d7, d0
    }
 800075a:	eeb0 0b47 	vmov.f64	d0, d7
 800075e:	3710      	adds	r7, #16
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	0000      	movs	r0, r0
	...

08000768 <_ZN4MFCCC1Eiii>:

#include "ML-KWS-for-MCU/MFCC/mfcc.h"
#include "float.h"
#include "arm_math.h"

MFCC::MFCC(int num_mfcc_features, int frame_len, int mfcc_dec_bits) 
 8000768:	b580      	push	{r7, lr}
 800076a:	ed2d 8b02 	vpush	{d8}
 800076e:	b086      	sub	sp, #24
 8000770:	af00      	add	r7, sp, #0
 8000772:	60f8      	str	r0, [r7, #12]
 8000774:	60b9      	str	r1, [r7, #8]
 8000776:	607a      	str	r2, [r7, #4]
 8000778:	603b      	str	r3, [r7, #0]
:num_mfcc_features(num_mfcc_features), 
 frame_len(frame_len), 
 mfcc_dec_bits(mfcc_dec_bits)
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	68ba      	ldr	r2, [r7, #8]
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	687a      	ldr	r2, [r7, #4]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	683a      	ldr	r2, [r7, #0]
 800078a:	60da      	str	r2, [r3, #12]
{

  // Round-up to nearest power of 2.
  frame_len_padded = pow(2,ceil((log(frame_len)/log(2))));
 800078c:	6878      	ldr	r0, [r7, #4]
 800078e:	f7ff ffbd 	bl	800070c <_ZSt3logIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000792:	eeb0 8b40 	vmov.f64	d8, d0
 8000796:	2002      	movs	r0, #2
 8000798:	f7ff ffb8 	bl	800070c <_ZSt3logIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 800079c:	eeb0 6b40 	vmov.f64	d6, d0
 80007a0:	ee88 7b06 	vdiv.f64	d7, d8, d6
 80007a4:	eeb0 0b47 	vmov.f64	d0, d7
 80007a8:	f00d fe7a 	bl	800e4a0 <ceil>
 80007ac:	eeb0 7b40 	vmov.f64	d7, d0
 80007b0:	eeb0 0b47 	vmov.f64	d0, d7
 80007b4:	2002      	movs	r0, #2
 80007b6:	f7ff ffbd 	bl	8000734 <_ZSt3powIidEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80007ba:	eeb0 7b40 	vmov.f64	d7, d0
 80007be:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80007c2:	ee17 2a90 	vmov	r2, s15
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	609a      	str	r2, [r3, #8]

  frame = new float[frame_len_padded];
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	689b      	ldr	r3, [r3, #8]
 80007ce:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d201      	bcs.n	80007da <_ZN4MFCCC1Eiii+0x72>
 80007d6:	009b      	lsls	r3, r3, #2
 80007d8:	e001      	b.n	80007de <_ZN4MFCCC1Eiii+0x76>
 80007da:	f04f 33ff 	mov.w	r3, #4294967295
 80007de:	4618      	mov	r0, r3
 80007e0:	f00d f9b2 	bl	800db48 <_Znaj>
 80007e4:	4603      	mov	r3, r0
 80007e6:	461a      	mov	r2, r3
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	611a      	str	r2, [r3, #16]
  buffer = new float[frame_len_padded];
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	689b      	ldr	r3, [r3, #8]
 80007f0:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 80007f4:	4293      	cmp	r3, r2
 80007f6:	d201      	bcs.n	80007fc <_ZN4MFCCC1Eiii+0x94>
 80007f8:	009b      	lsls	r3, r3, #2
 80007fa:	e001      	b.n	8000800 <_ZN4MFCCC1Eiii+0x98>
 80007fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000800:	4618      	mov	r0, r3
 8000802:	f00d f9a1 	bl	800db48 <_Znaj>
 8000806:	4603      	mov	r3, r0
 8000808:	461a      	mov	r2, r3
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	615a      	str	r2, [r3, #20]
  mel_energies = new float[NUM_FBANK_BINS];
 800080e:	20a0      	movs	r0, #160	; 0xa0
 8000810:	f00d f99a 	bl	800db48 <_Znaj>
 8000814:	4603      	mov	r3, r0
 8000816:	461a      	mov	r2, r3
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	619a      	str	r2, [r3, #24]

  //create window function
  window_func = new float[frame_len];
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8000822:	4293      	cmp	r3, r2
 8000824:	d201      	bcs.n	800082a <_ZN4MFCCC1Eiii+0xc2>
 8000826:	009b      	lsls	r3, r3, #2
 8000828:	e001      	b.n	800082e <_ZN4MFCCC1Eiii+0xc6>
 800082a:	f04f 33ff 	mov.w	r3, #4294967295
 800082e:	4618      	mov	r0, r3
 8000830:	f00d f98a 	bl	800db48 <_Znaj>
 8000834:	4603      	mov	r3, r0
 8000836:	461a      	mov	r2, r3
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	61da      	str	r2, [r3, #28]
  for (int i = 0; i < frame_len; i++)
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]
 8000840:	697a      	ldr	r2, [r7, #20]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	429a      	cmp	r2, r3
 8000846:	da26      	bge.n	8000896 <_ZN4MFCCC1Eiii+0x12e>
    window_func[i] = 0.5 - 0.5*(M_2PI * ((float)i) / (frame_len));
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	ee07 3a90 	vmov	s15, r3
 800084e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000852:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000856:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 8000900 <_ZN4MFCCC1Eiii+0x198>
 800085a:	ee27 5b06 	vmul.f64	d5, d7, d6
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	ee07 3a90 	vmov	s15, r3
 8000864:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000868:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800086c:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8000870:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000874:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8000878:	ee36 7b47 	vsub.f64	d7, d6, d7
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	69da      	ldr	r2, [r3, #28]
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	009b      	lsls	r3, r3, #2
 8000884:	4413      	add	r3, r2
 8000886:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800088a:	edc3 7a00 	vstr	s15, [r3]
  for (int i = 0; i < frame_len; i++)
 800088e:	697b      	ldr	r3, [r7, #20]
 8000890:	3301      	adds	r3, #1
 8000892:	617b      	str	r3, [r7, #20]
 8000894:	e7d4      	b.n	8000840 <_ZN4MFCCC1Eiii+0xd8>

  //create mel filterbank
  fbank_filter_first = new int32_t[NUM_FBANK_BINS];
 8000896:	20a0      	movs	r0, #160	; 0xa0
 8000898:	f00d f956 	bl	800db48 <_Znaj>
 800089c:	4603      	mov	r3, r0
 800089e:	461a      	mov	r2, r3
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	621a      	str	r2, [r3, #32]
  fbank_filter_last = new int32_t[NUM_FBANK_BINS];;
 80008a4:	20a0      	movs	r0, #160	; 0xa0
 80008a6:	f00d f94f 	bl	800db48 <_Znaj>
 80008aa:	4603      	mov	r3, r0
 80008ac:	461a      	mov	r2, r3
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	625a      	str	r2, [r3, #36]	; 0x24
  mel_fbank = create_mel_fbank();
 80008b2:	68f8      	ldr	r0, [r7, #12]
 80008b4:	f000 f928 	bl	8000b08 <_ZN4MFCC16create_mel_fbankEv>
 80008b8:	4602      	mov	r2, r0
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	629a      	str	r2, [r3, #40]	; 0x28
  
  //create DCT matrix
  dct_matrix = create_dct_matrix(NUM_FBANK_BINS, num_mfcc_features);
 80008be:	68ba      	ldr	r2, [r7, #8]
 80008c0:	2128      	movs	r1, #40	; 0x28
 80008c2:	68f8      	ldr	r0, [r7, #12]
 80008c4:	f000 f890 	bl	80009e8 <_ZN4MFCC17create_dct_matrixEll>
 80008c8:	4602      	mov	r2, r0
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	62da      	str	r2, [r3, #44]	; 0x2c

  //initialize FFT
  rfft = new arm_rfft_fast_instance_f32;
 80008ce:	2018      	movs	r0, #24
 80008d0:	f00d f929 	bl	800db26 <_Znwj>
 80008d4:	4603      	mov	r3, r0
 80008d6:	461a      	mov	r2, r3
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	631a      	str	r2, [r3, #48]	; 0x30
  arm_rfft_fast_init_f32(rfft, frame_len_padded);
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	689b      	ldr	r3, [r3, #8]
 80008e4:	b29b      	uxth	r3, r3
 80008e6:	4619      	mov	r1, r3
 80008e8:	4610      	mov	r0, r2
 80008ea:	f005 fdf5 	bl	80064d8 <arm_rfft_fast_init_f32>

}
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	4618      	mov	r0, r3
 80008f2:	3718      	adds	r7, #24
 80008f4:	46bd      	mov	sp, r7
 80008f6:	ecbd 8b02 	vpop	{d8}
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	f3af 8000 	nop.w
 8000900:	54442d18 	.word	0x54442d18
 8000904:	401921fb 	.word	0x401921fb

08000908 <_ZN4MFCCD1Ev>:

MFCC::~MFCC() {
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  delete []frame;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	691b      	ldr	r3, [r3, #16]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d004      	beq.n	8000922 <_ZN4MFCCD1Ev+0x1a>
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	691b      	ldr	r3, [r3, #16]
 800091c:	4618      	mov	r0, r3
 800091e:	f00d f900 	bl	800db22 <_ZdaPv>
  delete [] buffer;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	695b      	ldr	r3, [r3, #20]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d004      	beq.n	8000934 <_ZN4MFCCD1Ev+0x2c>
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	695b      	ldr	r3, [r3, #20]
 800092e:	4618      	mov	r0, r3
 8000930:	f00d f8f7 	bl	800db22 <_ZdaPv>
  delete []mel_energies;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	699b      	ldr	r3, [r3, #24]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d004      	beq.n	8000946 <_ZN4MFCCD1Ev+0x3e>
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	4618      	mov	r0, r3
 8000942:	f00d f8ee 	bl	800db22 <_ZdaPv>
  delete []window_func;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	69db      	ldr	r3, [r3, #28]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d004      	beq.n	8000958 <_ZN4MFCCD1Ev+0x50>
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	69db      	ldr	r3, [r3, #28]
 8000952:	4618      	mov	r0, r3
 8000954:	f00d f8e5 	bl	800db22 <_ZdaPv>
  delete []fbank_filter_first;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	6a1b      	ldr	r3, [r3, #32]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d004      	beq.n	800096a <_ZN4MFCCD1Ev+0x62>
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	6a1b      	ldr	r3, [r3, #32]
 8000964:	4618      	mov	r0, r3
 8000966:	f00d f8dc 	bl	800db22 <_ZdaPv>
  delete []fbank_filter_last;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800096e:	2b00      	cmp	r3, #0
 8000970:	d004      	beq.n	800097c <_ZN4MFCCD1Ev+0x74>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000976:	4618      	mov	r0, r3
 8000978:	f00d f8d3 	bl	800db22 <_ZdaPv>
  delete []dct_matrix;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000980:	2b00      	cmp	r3, #0
 8000982:	d004      	beq.n	800098e <_ZN4MFCCD1Ev+0x86>
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000988:	4618      	mov	r0, r3
 800098a:	f00d f8ca 	bl	800db22 <_ZdaPv>
  delete rfft;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	2b00      	cmp	r3, #0
 8000994:	d003      	beq.n	800099e <_ZN4MFCCD1Ev+0x96>
 8000996:	2118      	movs	r1, #24
 8000998:	4618      	mov	r0, r3
 800099a:	f00d f8c0 	bl	800db1e <_ZdlPvj>
  for(int i=0;i<NUM_FBANK_BINS;i++)
 800099e:	2300      	movs	r3, #0
 80009a0:	60fb      	str	r3, [r7, #12]
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	2b27      	cmp	r3, #39	; 0x27
 80009a6:	dc0f      	bgt.n	80009c8 <_ZN4MFCCD1Ev+0xc0>
    delete mel_fbank[i];
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	009b      	lsls	r3, r3, #2
 80009b0:	4413      	add	r3, r2
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d003      	beq.n	80009c0 <_ZN4MFCCD1Ev+0xb8>
 80009b8:	2104      	movs	r1, #4
 80009ba:	4618      	mov	r0, r3
 80009bc:	f00d f8af 	bl	800db1e <_ZdlPvj>
  for(int i=0;i<NUM_FBANK_BINS;i++)
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	3301      	adds	r3, #1
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	e7ec      	b.n	80009a2 <_ZN4MFCCD1Ev+0x9a>
  delete mel_fbank;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d003      	beq.n	80009d8 <_ZN4MFCCD1Ev+0xd0>
 80009d0:	2104      	movs	r1, #4
 80009d2:	4618      	mov	r0, r3
 80009d4:	f00d f8a3 	bl	800db1e <_ZdlPvj>
}
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	4618      	mov	r0, r3
 80009dc:	3710      	adds	r7, #16
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	0000      	movs	r0, r0
 80009e4:	0000      	movs	r0, r0
	...

080009e8 <_ZN4MFCC17create_dct_matrixEll>:

float * MFCC::create_dct_matrix(int32_t input_length, int32_t coefficient_count) {
 80009e8:	b580      	push	{r7, lr}
 80009ea:	ed2d 8b02 	vpush	{d8}
 80009ee:	b08a      	sub	sp, #40	; 0x28
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	60f8      	str	r0, [r7, #12]
 80009f4:	60b9      	str	r1, [r7, #8]
 80009f6:	607a      	str	r2, [r7, #4]
  int32_t k, n;
  float * M = new float[input_length*coefficient_count];
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	687a      	ldr	r2, [r7, #4]
 80009fc:	fb02 f303 	mul.w	r3, r2, r3
 8000a00:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d201      	bcs.n	8000a0c <_ZN4MFCC17create_dct_matrixEll+0x24>
 8000a08:	009b      	lsls	r3, r3, #2
 8000a0a:	e001      	b.n	8000a10 <_ZN4MFCC17create_dct_matrixEll+0x28>
 8000a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a10:	4618      	mov	r0, r3
 8000a12:	f00d f899 	bl	800db48 <_Znaj>
 8000a16:	4603      	mov	r3, r0
 8000a18:	61fb      	str	r3, [r7, #28]
  float normalizer;
  arm_sqrt_f32(2.0/(float)input_length,&normalizer);
 8000a1a:	68bb      	ldr	r3, [r7, #8]
 8000a1c:	ee07 3a90 	vmov	s15, r3
 8000a20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a24:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000a28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a2c:	edc7 7a06 	vstr	s15, [r7, #24]
 8000a30:	f107 0310 	add.w	r3, r7, #16
 8000a34:	617b      	str	r3, [r7, #20]
   */
  CMSIS_INLINE __STATIC_INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8000a36:	edd7 7a06 	vldr	s15, [r7, #24]
 8000a3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a42:	db09      	blt.n	8000a58 <_ZN4MFCC17create_dct_matrixEll+0x70>
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined ( __ICCARM__ ) && (__VER__ >= 6040000)
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
#else
      *pOut = sqrtf(in);
 8000a44:	ed97 0a06 	vldr	s0, [r7, #24]
 8000a48:	f00d fe50 	bl	800e6ec <sqrtf>
 8000a4c:	eef0 7a40 	vmov.f32	s15, s0
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	edc3 7a00 	vstr	s15, [r3]
#endif

      return (ARM_MATH_SUCCESS);
 8000a56:	e004      	b.n	8000a62 <_ZN4MFCC17create_dct_matrixEll+0x7a>
    }
    else
    {
      *pOut = 0.0f;
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	f04f 0200 	mov.w	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8000a60:	bf00      	nop
  for (k = 0; k < coefficient_count; k++) {
 8000a62:	2300      	movs	r3, #0
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
 8000a66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	da41      	bge.n	8000af2 <_ZN4MFCC17create_dct_matrixEll+0x10a>
    for (n = 0; n < input_length; n++) {
 8000a6e:	2300      	movs	r3, #0
 8000a70:	623b      	str	r3, [r7, #32]
 8000a72:	6a3a      	ldr	r2, [r7, #32]
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	429a      	cmp	r2, r3
 8000a78:	da37      	bge.n	8000aea <_ZN4MFCC17create_dct_matrixEll+0x102>
      M[k*input_length+n] = normalizer * cos( ((double)M_PI)/input_length * (n + 0.5) * k );
 8000a7a:	edd7 7a04 	vldr	s15, [r7, #16]
 8000a7e:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8000a82:	68bb      	ldr	r3, [r7, #8]
 8000a84:	ee07 3a90 	vmov	s15, r3
 8000a88:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000a8c:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 8000b00 <_ZN4MFCC17create_dct_matrixEll+0x118>
 8000a90:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000a94:	6a3b      	ldr	r3, [r7, #32]
 8000a96:	ee07 3a90 	vmov	s15, r3
 8000a9a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000a9e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8000aa2:	ee37 7b05 	vadd.f64	d7, d7, d5
 8000aa6:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aac:	ee07 3a90 	vmov	s15, r3
 8000ab0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000ab4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000ab8:	eeb0 0b47 	vmov.f64	d0, d7
 8000abc:	f00d fd68 	bl	800e590 <cos>
 8000ac0:	eeb0 7b40 	vmov.f64	d7, d0
 8000ac4:	ee28 7b07 	vmul.f64	d7, d8, d7
 8000ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aca:	68ba      	ldr	r2, [r7, #8]
 8000acc:	fb02 f203 	mul.w	r2, r2, r3
 8000ad0:	6a3b      	ldr	r3, [r7, #32]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	009b      	lsls	r3, r3, #2
 8000ad6:	69fa      	ldr	r2, [r7, #28]
 8000ad8:	4413      	add	r3, r2
 8000ada:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ade:	edc3 7a00 	vstr	s15, [r3]
    for (n = 0; n < input_length; n++) {
 8000ae2:	6a3b      	ldr	r3, [r7, #32]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	623b      	str	r3, [r7, #32]
 8000ae8:	e7c3      	b.n	8000a72 <_ZN4MFCC17create_dct_matrixEll+0x8a>
  for (k = 0; k < coefficient_count; k++) {
 8000aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aec:	3301      	adds	r3, #1
 8000aee:	627b      	str	r3, [r7, #36]	; 0x24
 8000af0:	e7b9      	b.n	8000a66 <_ZN4MFCC17create_dct_matrixEll+0x7e>
    }
  }
  return M;
 8000af2:	69fb      	ldr	r3, [r7, #28]
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3728      	adds	r7, #40	; 0x28
 8000af8:	46bd      	mov	sp, r7
 8000afa:	ecbd 8b02 	vpop	{d8}
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	54442d18 	.word	0x54442d18
 8000b04:	400921fb 	.word	0x400921fb

08000b08 <_ZN4MFCC16create_mel_fbankEv>:

float ** MFCC::create_mel_fbank() {
 8000b08:	b590      	push	{r4, r7, lr}
 8000b0a:	b095      	sub	sp, #84	; 0x54
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]

  int32_t bin, i;

  int32_t num_fft_bins = frame_len_padded/2;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	689b      	ldr	r3, [r3, #8]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	da00      	bge.n	8000b1a <_ZN4MFCC16create_mel_fbankEv+0x12>
 8000b18:	3301      	adds	r3, #1
 8000b1a:	105b      	asrs	r3, r3, #1
 8000b1c:	637b      	str	r3, [r7, #52]	; 0x34
  float fft_bin_width = ((float)SAMP_FREQ) / frame_len_padded;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	689b      	ldr	r3, [r3, #8]
 8000b22:	ee07 3a90 	vmov	s15, r3
 8000b26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b2a:	eddf 6a93 	vldr	s13, [pc, #588]	; 8000d78 <_ZN4MFCC16create_mel_fbankEv+0x270>
 8000b2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b32:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
  float mel_low_freq = MelScale(MEL_LOW_FREQ);
 8000b36:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8000b3a:	f7ff fdc5 	bl	80006c8 <_ZN4MFCC8MelScaleEf>
 8000b3e:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
  float mel_high_freq = MelScale(MEL_HIGH_FREQ); 
 8000b42:	ed9f 0a8e 	vldr	s0, [pc, #568]	; 8000d7c <_ZN4MFCC16create_mel_fbankEv+0x274>
 8000b46:	f7ff fdbf 	bl	80006c8 <_ZN4MFCC8MelScaleEf>
 8000b4a:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
  float mel_freq_delta = (mel_high_freq - mel_low_freq) / (NUM_FBANK_BINS+1);
 8000b4e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8000b52:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000b56:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000b5a:	eddf 6a89 	vldr	s13, [pc, #548]	; 8000d80 <_ZN4MFCC16create_mel_fbankEv+0x278>
 8000b5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b62:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

  float *this_bin = new float[num_fft_bins];
 8000b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b68:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d201      	bcs.n	8000b74 <_ZN4MFCC16create_mel_fbankEv+0x6c>
 8000b70:	009b      	lsls	r3, r3, #2
 8000b72:	e001      	b.n	8000b78 <_ZN4MFCC16create_mel_fbankEv+0x70>
 8000b74:	f04f 33ff 	mov.w	r3, #4294967295
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f00c ffe5 	bl	800db48 <_Znaj>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	623b      	str	r3, [r7, #32]

  float ** mel_fbank =  new float*[NUM_FBANK_BINS];
 8000b82:	20a0      	movs	r0, #160	; 0xa0
 8000b84:	f00c ffe0 	bl	800db48 <_Znaj>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	61fb      	str	r3, [r7, #28]

  for (bin = 0; bin < NUM_FBANK_BINS; bin++) {
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000b90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b92:	2b27      	cmp	r3, #39	; 0x27
 8000b94:	f300 80e4 	bgt.w	8000d60 <_ZN4MFCC16create_mel_fbankEv+0x258>

    float left_mel = mel_low_freq + bin * mel_freq_delta;
 8000b98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b9a:	ee07 3a90 	vmov	s15, r3
 8000b9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ba2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000baa:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000bae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bb2:	edc7 7a06 	vstr	s15, [r7, #24]
    float center_mel = mel_low_freq + (bin + 1) * mel_freq_delta;
 8000bb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000bb8:	3301      	adds	r3, #1
 8000bba:	ee07 3a90 	vmov	s15, r3
 8000bbe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bc2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000bc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bca:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000bce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bd2:	edc7 7a05 	vstr	s15, [r7, #20]
    float right_mel = mel_low_freq + (bin + 2) * mel_freq_delta;
 8000bd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000bd8:	3302      	adds	r3, #2
 8000bda:	ee07 3a90 	vmov	s15, r3
 8000bde:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000be2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bea:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000bee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bf2:	edc7 7a04 	vstr	s15, [r7, #16]

    int32_t first_index = -1, last_index = -1;
 8000bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bfa:	647b      	str	r3, [r7, #68]	; 0x44
 8000bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8000c00:	643b      	str	r3, [r7, #64]	; 0x40

    for (i = 0; i < num_fft_bins; i++) {
 8000c02:	2300      	movs	r3, #0
 8000c04:	64bb      	str	r3, [r7, #72]	; 0x48
 8000c06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c0a:	429a      	cmp	r2, r3
 8000c0c:	da65      	bge.n	8000cda <_ZN4MFCC16create_mel_fbankEv+0x1d2>

      float freq = (fft_bin_width * i);  // center freq of this fft bin.
 8000c0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c10:	ee07 3a90 	vmov	s15, r3
 8000c14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c18:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000c1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c20:	edc7 7a03 	vstr	s15, [r7, #12]
      float mel = MelScale(freq);
 8000c24:	ed97 0a03 	vldr	s0, [r7, #12]
 8000c28:	f7ff fd4e 	bl	80006c8 <_ZN4MFCC8MelScaleEf>
 8000c2c:	ed87 0a02 	vstr	s0, [r7, #8]
      this_bin[i] = 0.0;
 8000c30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	6a3a      	ldr	r2, [r7, #32]
 8000c36:	4413      	add	r3, r2
 8000c38:	f04f 0200 	mov.w	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]

      if (mel > left_mel && mel < right_mel) {
 8000c3e:	ed97 7a02 	vldr	s14, [r7, #8]
 8000c42:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c4e:	dd40      	ble.n	8000cd2 <_ZN4MFCC16create_mel_fbankEv+0x1ca>
 8000c50:	ed97 7a02 	vldr	s14, [r7, #8]
 8000c54:	edd7 7a04 	vldr	s15, [r7, #16]
 8000c58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c60:	d537      	bpl.n	8000cd2 <_ZN4MFCC16create_mel_fbankEv+0x1ca>
        float weight;
        if (mel <= center_mel) {
 8000c62:	ed97 7a02 	vldr	s14, [r7, #8]
 8000c66:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c72:	d810      	bhi.n	8000c96 <_ZN4MFCC16create_mel_fbankEv+0x18e>
          weight = (mel - left_mel) / (center_mel - left_mel);
 8000c74:	ed97 7a02 	vldr	s14, [r7, #8]
 8000c78:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c7c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000c80:	ed97 7a05 	vldr	s14, [r7, #20]
 8000c84:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c88:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000c8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c90:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 8000c94:	e00f      	b.n	8000cb6 <_ZN4MFCC16create_mel_fbankEv+0x1ae>
        } else {
          weight = (right_mel-mel) / (right_mel-center_mel);
 8000c96:	ed97 7a04 	vldr	s14, [r7, #16]
 8000c9a:	edd7 7a02 	vldr	s15, [r7, #8]
 8000c9e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000ca2:	ed97 7a04 	vldr	s14, [r7, #16]
 8000ca6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000caa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000cae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cb2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        }
        this_bin[i] = weight;
 8000cb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	6a3a      	ldr	r2, [r7, #32]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000cc0:	601a      	str	r2, [r3, #0]
        if (first_index == -1)
 8000cc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cc8:	d101      	bne.n	8000cce <_ZN4MFCC16create_mel_fbankEv+0x1c6>
          first_index = i;
 8000cca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ccc:	647b      	str	r3, [r7, #68]	; 0x44
        last_index = i;
 8000cce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cd0:	643b      	str	r3, [r7, #64]	; 0x40
    for (i = 0; i < num_fft_bins; i++) {
 8000cd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	64bb      	str	r3, [r7, #72]	; 0x48
 8000cd8:	e795      	b.n	8000c06 <_ZN4MFCC16create_mel_fbankEv+0xfe>
      }
    }

    fbank_filter_first[bin] = first_index;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6a1a      	ldr	r2, [r3, #32]
 8000cde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	4413      	add	r3, r2
 8000ce4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000ce6:	601a      	str	r2, [r3, #0]
    fbank_filter_last[bin] = last_index;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000cec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cee:	009b      	lsls	r3, r3, #2
 8000cf0:	4413      	add	r3, r2
 8000cf2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000cf4:	601a      	str	r2, [r3, #0]
    mel_fbank[bin] = new float[last_index-first_index+1]; 
 8000cf6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000cf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000cfa:	1ad3      	subs	r3, r2, r3
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d201      	bcs.n	8000d0a <_ZN4MFCC16create_mel_fbankEv+0x202>
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	e001      	b.n	8000d0e <_ZN4MFCC16create_mel_fbankEv+0x206>
 8000d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000d10:	0092      	lsls	r2, r2, #2
 8000d12:	69f9      	ldr	r1, [r7, #28]
 8000d14:	188c      	adds	r4, r1, r2
 8000d16:	4618      	mov	r0, r3
 8000d18:	f00c ff16 	bl	800db48 <_Znaj>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	6023      	str	r3, [r4, #0]

    int32_t j = 0;
 8000d20:	2300      	movs	r3, #0
 8000d22:	63bb      	str	r3, [r7, #56]	; 0x38
    //copy the part we care about
    for (i = first_index; i <= last_index; i++) {
 8000d24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d26:	64bb      	str	r3, [r7, #72]	; 0x48
 8000d28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000d2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	dc13      	bgt.n	8000d58 <_ZN4MFCC16create_mel_fbankEv+0x250>
      mel_fbank[bin][j++] = this_bin[i];
 8000d30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	6a3a      	ldr	r2, [r7, #32]
 8000d36:	441a      	add	r2, r3
 8000d38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	69f9      	ldr	r1, [r7, #28]
 8000d3e:	440b      	add	r3, r1
 8000d40:	6819      	ldr	r1, [r3, #0]
 8000d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d44:	1c58      	adds	r0, r3, #1
 8000d46:	63b8      	str	r0, [r7, #56]	; 0x38
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	440b      	add	r3, r1
 8000d4c:	6812      	ldr	r2, [r2, #0]
 8000d4e:	601a      	str	r2, [r3, #0]
    for (i = first_index; i <= last_index; i++) {
 8000d50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d52:	3301      	adds	r3, #1
 8000d54:	64bb      	str	r3, [r7, #72]	; 0x48
 8000d56:	e7e7      	b.n	8000d28 <_ZN4MFCC16create_mel_fbankEv+0x220>
  for (bin = 0; bin < NUM_FBANK_BINS; bin++) {
 8000d58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000d5e:	e717      	b.n	8000b90 <_ZN4MFCC16create_mel_fbankEv+0x88>
    }
  }
  delete []this_bin;
 8000d60:	6a3b      	ldr	r3, [r7, #32]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d002      	beq.n	8000d6c <_ZN4MFCC16create_mel_fbankEv+0x264>
 8000d66:	6a38      	ldr	r0, [r7, #32]
 8000d68:	f00c fedb 	bl	800db22 <_ZdaPv>
  return mel_fbank;
 8000d6c:	69fb      	ldr	r3, [r7, #28]
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3754      	adds	r7, #84	; 0x54
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd90      	pop	{r4, r7, pc}
 8000d76:	bf00      	nop
 8000d78:	467a0000 	.word	0x467a0000
 8000d7c:	457a0000 	.word	0x457a0000
 8000d80:	42240000 	.word	0x42240000

08000d84 <_ZN4MFCC12mfcc_computeEPKsPa>:

void MFCC::mfcc_compute(const int16_t * audio_data, q7_t* mfcc_out) {
 8000d84:	b590      	push	{r4, r7, lr}
 8000d86:	b095      	sub	sp, #84	; 0x54
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	607a      	str	r2, [r7, #4]

  int32_t i, j, bin;

  //TensorFlow way of normalizing .wav data to (-1,1)
  for (i = 0; i < frame_len; i++) {
 8000d90:	2300      	movs	r3, #0
 8000d92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	da18      	bge.n	8000dd0 <_ZN4MFCC12mfcc_computeEPKsPa+0x4c>
    frame[i] = (float)audio_data[i]/(1<<15);
 8000d9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	68ba      	ldr	r2, [r7, #8]
 8000da4:	4413      	add	r3, r2
 8000da6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000daa:	ee07 3a90 	vmov	s15, r3
 8000dae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	691a      	ldr	r2, [r3, #16]
 8000db6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	4413      	add	r3, r2
 8000dbc:	eddf 6aad 	vldr	s13, [pc, #692]	; 8001074 <_ZN4MFCC12mfcc_computeEPKsPa+0x2f0>
 8000dc0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000dc4:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < frame_len; i++) {
 8000dc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000dca:	3301      	adds	r3, #1
 8000dcc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000dce:	e7e1      	b.n	8000d94 <_ZN4MFCC12mfcc_computeEPKsPa+0x10>
  }
  //Fill up remaining with zeros
  memset(&frame[frame_len], 0, sizeof(float) * (frame_len_padded-frame_len));
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	691a      	ldr	r2, [r3, #16]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	18d0      	adds	r0, r2, r3
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	689a      	ldr	r2, [r3, #8]
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	461a      	mov	r2, r3
 8000dea:	2100      	movs	r1, #0
 8000dec:	f00e fad8 	bl	800f3a0 <memset>

  for (i = 0; i < frame_len; i++) {
 8000df0:	2300      	movs	r3, #0
 8000df2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	da1a      	bge.n	8000e34 <_ZN4MFCC12mfcc_computeEPKsPa+0xb0>
    frame[i] *= window_func[i];
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	691a      	ldr	r2, [r3, #16]
 8000e02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	4413      	add	r3, r2
 8000e08:	ed93 7a00 	vldr	s14, [r3]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	69da      	ldr	r2, [r3, #28]
 8000e10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	4413      	add	r3, r2
 8000e16:	edd3 7a00 	vldr	s15, [r3]
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	691a      	ldr	r2, [r3, #16]
 8000e1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	4413      	add	r3, r2
 8000e24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e28:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < frame_len; i++) {
 8000e2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e2e:	3301      	adds	r3, #1
 8000e30:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000e32:	e7df      	b.n	8000df4 <_ZN4MFCC12mfcc_computeEPKsPa+0x70>
  }

  //Compute FFT
  arm_rfft_fast_f32(rfft, frame, buffer, 0);
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	6919      	ldr	r1, [r3, #16]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	695a      	ldr	r2, [r3, #20]
 8000e40:	2300      	movs	r3, #0
 8000e42:	f005 fb1b 	bl	800647c <arm_rfft_fast_f32>

  //Convert to power spectrum
  //frame is stored as [real0, realN/2-1, real1, im1, real2, im2, ...]
  int32_t half_dim = frame_len_padded/2;
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	da00      	bge.n	8000e50 <_ZN4MFCC12mfcc_computeEPKsPa+0xcc>
 8000e4e:	3301      	adds	r3, #1
 8000e50:	105b      	asrs	r3, r3, #1
 8000e52:	63bb      	str	r3, [r7, #56]	; 0x38
  float first_energy = buffer[0] * buffer[0],
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	695b      	ldr	r3, [r3, #20]
 8000e58:	ed93 7a00 	vldr	s14, [r3]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	695b      	ldr	r3, [r3, #20]
 8000e60:	edd3 7a00 	vldr	s15, [r3]
 8000e64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e68:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        last_energy =  buffer[1] * buffer[1];  // handle this special case
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	695b      	ldr	r3, [r3, #20]
 8000e70:	3304      	adds	r3, #4
 8000e72:	ed93 7a00 	vldr	s14, [r3]
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	695b      	ldr	r3, [r3, #20]
 8000e7a:	3304      	adds	r3, #4
 8000e7c:	edd3 7a00 	vldr	s15, [r3]
 8000e80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e84:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
  for (i = 1; i < half_dim; i++) {
 8000e88:	2301      	movs	r3, #1
 8000e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000e8c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e90:	429a      	cmp	r2, r3
 8000e92:	da23      	bge.n	8000edc <_ZN4MFCC12mfcc_computeEPKsPa+0x158>
    float real = buffer[i*2], im = buffer[i*2 + 1];
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	695a      	ldr	r2, [r3, #20]
 8000e98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e9a:	00db      	lsls	r3, r3, #3
 8000e9c:	4413      	add	r3, r2
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	695a      	ldr	r2, [r3, #20]
 8000ea6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ea8:	00db      	lsls	r3, r3, #3
 8000eaa:	3304      	adds	r3, #4
 8000eac:	4413      	add	r3, r2
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	62bb      	str	r3, [r7, #40]	; 0x28
    buffer[i] = real*real + im*im;
 8000eb2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000eb6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000eba:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000ebe:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	695a      	ldr	r2, [r3, #20]
 8000ec6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	4413      	add	r3, r2
 8000ecc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ed0:	edc3 7a00 	vstr	s15, [r3]
  for (i = 1; i < half_dim; i++) {
 8000ed4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000eda:	e7d7      	b.n	8000e8c <_ZN4MFCC12mfcc_computeEPKsPa+0x108>
  }
  buffer[0] = first_energy;
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	695b      	ldr	r3, [r3, #20]
 8000ee0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ee2:	601a      	str	r2, [r3, #0]
  buffer[half_dim] = last_energy;  
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	695a      	ldr	r2, [r3, #20]
 8000ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	4413      	add	r3, r2
 8000eee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000ef0:	601a      	str	r2, [r3, #0]
 
  float sqrt_data;
  //Apply mel filterbanks
  for (bin = 0; bin < NUM_FBANK_BINS; bin++) {
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	647b      	str	r3, [r7, #68]	; 0x44
 8000ef6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ef8:	2b27      	cmp	r3, #39	; 0x27
 8000efa:	dc6d      	bgt.n	8000fd8 <_ZN4MFCC12mfcc_computeEPKsPa+0x254>
    j = 0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	64bb      	str	r3, [r7, #72]	; 0x48
    float mel_energy = 0;
 8000f00:	f04f 0300 	mov.w	r3, #0
 8000f04:	643b      	str	r3, [r7, #64]	; 0x40
    int32_t first_index = fbank_filter_first[bin];
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	6a1a      	ldr	r2, [r3, #32]
 8000f0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	4413      	add	r3, r2
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t last_index = fbank_filter_last[bin];
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	4413      	add	r3, r2
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	623b      	str	r3, [r7, #32]
    for (i = first_index; i <= last_index; i++) {
 8000f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f24:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000f26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000f28:	6a3b      	ldr	r3, [r7, #32]
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	dc3a      	bgt.n	8000fa4 <_ZN4MFCC12mfcc_computeEPKsPa+0x220>
      arm_sqrt_f32(buffer[i],&sqrt_data);
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	695a      	ldr	r2, [r3, #20]
 8000f32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	4413      	add	r3, r2
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	61fb      	str	r3, [r7, #28]
 8000f3c:	f107 0314 	add.w	r3, r7, #20
 8000f40:	61bb      	str	r3, [r7, #24]
    if (in >= 0.0f)
 8000f42:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f46:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f4e:	db09      	blt.n	8000f64 <_ZN4MFCC12mfcc_computeEPKsPa+0x1e0>
      *pOut = sqrtf(in);
 8000f50:	ed97 0a07 	vldr	s0, [r7, #28]
 8000f54:	f00d fbca 	bl	800e6ec <sqrtf>
 8000f58:	eef0 7a40 	vmov.f32	s15, s0
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 8000f62:	e004      	b.n	8000f6e <_ZN4MFCC12mfcc_computeEPKsPa+0x1ea>
      *pOut = 0.0f;
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	f04f 0200 	mov.w	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8000f6c:	bf00      	nop
      mel_energy += (sqrt_data) * mel_fbank[bin][j++];
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	4413      	add	r3, r2
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f7c:	1c59      	adds	r1, r3, #1
 8000f7e:	64b9      	str	r1, [r7, #72]	; 0x48
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	4413      	add	r3, r2
 8000f84:	ed93 7a00 	vldr	s14, [r3]
 8000f88:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f90:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000f94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f98:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    for (i = first_index; i <= last_index; i++) {
 8000f9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000fa2:	e7c0      	b.n	8000f26 <_ZN4MFCC12mfcc_computeEPKsPa+0x1a2>
    }
    mel_energies[bin] = mel_energy;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	699a      	ldr	r2, [r3, #24]
 8000fa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	4413      	add	r3, r2
 8000fae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000fb0:	601a      	str	r2, [r3, #0]

    //avoid log of zero
    if (mel_energy == 0.0)
 8000fb2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8000fb6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fbe:	d107      	bne.n	8000fd0 <_ZN4MFCC12mfcc_computeEPKsPa+0x24c>
      mel_energies[bin] = FLT_MIN;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	699a      	ldr	r2, [r3, #24]
 8000fc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	4413      	add	r3, r2
 8000fca:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000fce:	601a      	str	r2, [r3, #0]
  for (bin = 0; bin < NUM_FBANK_BINS; bin++) {
 8000fd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	647b      	str	r3, [r7, #68]	; 0x44
 8000fd6:	e78e      	b.n	8000ef6 <_ZN4MFCC12mfcc_computeEPKsPa+0x172>
  }

  //Take log
  for (bin = 0; bin < NUM_FBANK_BINS; bin++)
 8000fd8:	2300      	movs	r3, #0
 8000fda:	647b      	str	r3, [r7, #68]	; 0x44
 8000fdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000fde:	2b27      	cmp	r3, #39	; 0x27
 8000fe0:	dc17      	bgt.n	8001012 <_ZN4MFCC12mfcc_computeEPKsPa+0x28e>
    mel_energies[bin] = logf(mel_energies[bin]);
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	699a      	ldr	r2, [r3, #24]
 8000fe6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	4413      	add	r3, r2
 8000fec:	edd3 7a00 	vldr	s15, [r3]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	699a      	ldr	r2, [r3, #24]
 8000ff4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	18d4      	adds	r4, r2, r3
 8000ffa:	eeb0 0a67 	vmov.f32	s0, s15
 8000ffe:	f00d fb0f 	bl	800e620 <logf>
 8001002:	eef0 7a40 	vmov.f32	s15, s0
 8001006:	edc4 7a00 	vstr	s15, [r4]
  for (bin = 0; bin < NUM_FBANK_BINS; bin++)
 800100a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800100c:	3301      	adds	r3, #1
 800100e:	647b      	str	r3, [r7, #68]	; 0x44
 8001010:	e7e4      	b.n	8000fdc <_ZN4MFCC12mfcc_computeEPKsPa+0x258>

  //Take DCT. Uses matrix mul.
  for (i = 0; i < num_mfcc_features; i++) {
 8001012:	2300      	movs	r3, #0
 8001014:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800101c:	429a      	cmp	r2, r3
 800101e:	da72      	bge.n	8001106 <_ZN4MFCC12mfcc_computeEPKsPa+0x382>
    float sum = 0.0;
 8001020:	f04f 0300 	mov.w	r3, #0
 8001024:	63fb      	str	r3, [r7, #60]	; 0x3c
    for (j = 0; j < NUM_FBANK_BINS; j++) {
 8001026:	2300      	movs	r3, #0
 8001028:	64bb      	str	r3, [r7, #72]	; 0x48
 800102a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800102c:	2b27      	cmp	r3, #39	; 0x27
 800102e:	dc27      	bgt.n	8001080 <_ZN4MFCC12mfcc_computeEPKsPa+0x2fc>
      sum += dct_matrix[i*NUM_FBANK_BINS+j] * mel_energies[j];
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001034:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001036:	4613      	mov	r3, r2
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	4413      	add	r3, r2
 800103c:	00db      	lsls	r3, r3, #3
 800103e:	461a      	mov	r2, r3
 8001040:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001042:	4413      	add	r3, r2
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	440b      	add	r3, r1
 8001048:	ed93 7a00 	vldr	s14, [r3]
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	699a      	ldr	r2, [r3, #24]
 8001050:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	4413      	add	r3, r2
 8001056:	edd3 7a00 	vldr	s15, [r3]
 800105a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800105e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001062:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001066:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    for (j = 0; j < NUM_FBANK_BINS; j++) {
 800106a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800106c:	3301      	adds	r3, #1
 800106e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001070:	e7db      	b.n	800102a <_ZN4MFCC12mfcc_computeEPKsPa+0x2a6>
 8001072:	bf00      	nop
 8001074:	47000000 	.word	0x47000000
 8001078:	42fe0000 	.word	0x42fe0000
 800107c:	c3000000 	.word	0xc3000000
    }

    //Input is Qx.mfcc_dec_bits (from quantization step)
    sum *= (0x1<<mfcc_dec_bits);
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	2201      	movs	r2, #1
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	ee07 3a90 	vmov	s15, r3
 800108e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001092:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800109a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    sum = round(sum); 
 800109e:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 80010a2:	f7ff fb01 	bl	80006a8 <_ZSt5roundf>
 80010a6:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
    if(sum >= 127)
 80010aa:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80010ae:	ed1f 7a0e 	vldr	s14, [pc, #-56]	; 8001078 <_ZN4MFCC12mfcc_computeEPKsPa+0x2f4>
 80010b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ba:	db05      	blt.n	80010c8 <_ZN4MFCC12mfcc_computeEPKsPa+0x344>
      mfcc_out[i] = 127;
 80010bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	4413      	add	r3, r2
 80010c2:	227f      	movs	r2, #127	; 0x7f
 80010c4:	701a      	strb	r2, [r3, #0]
 80010c6:	e01a      	b.n	80010fe <_ZN4MFCC12mfcc_computeEPKsPa+0x37a>
    else if(sum <= -128)
 80010c8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80010cc:	ed1f 7a15 	vldr	s14, [pc, #-84]	; 800107c <_ZN4MFCC12mfcc_computeEPKsPa+0x2f8>
 80010d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010d8:	d805      	bhi.n	80010e6 <_ZN4MFCC12mfcc_computeEPKsPa+0x362>
      mfcc_out[i] = -128;
 80010da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	4413      	add	r3, r2
 80010e0:	2280      	movs	r2, #128	; 0x80
 80010e2:	701a      	strb	r2, [r3, #0]
 80010e4:	e00b      	b.n	80010fe <_ZN4MFCC12mfcc_computeEPKsPa+0x37a>
    else
      mfcc_out[i] = sum; 
 80010e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010e8:	687a      	ldr	r2, [r7, #4]
 80010ea:	4413      	add	r3, r2
 80010ec:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80010f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010f4:	edc7 7a00 	vstr	s15, [r7]
 80010f8:	683a      	ldr	r2, [r7, #0]
 80010fa:	b252      	sxtb	r2, r2
 80010fc:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < num_mfcc_features; i++) {
 80010fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001100:	3301      	adds	r3, #1
 8001102:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001104:	e787      	b.n	8001016 <_ZN4MFCC12mfcc_computeEPKsPa+0x292>
  }

}
 8001106:	bf00      	nop
 8001108:	3754      	adds	r7, #84	; 0x54
 800110a:	46bd      	mov	sp, r7
 800110c:	bd90      	pop	{r4, r7, pc}
 800110e:	bf00      	nop

08001110 <_ZN2NNC1Ev>:
#ifndef __NN_H__
#define __NN_H__

#include "arm_nnfunctions.h"

class NN {
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	4a04      	ldr	r2, [pc, #16]	; (800112c <_ZN2NNC1Ev+0x1c>)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4618      	mov	r0, r3
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	080155f4 	.word	0x080155f4

08001130 <_ZN6DS_CNNC1Ev>:
const q7_t DS_CNN::conv5_pw_wt[CONV5_OUT_CH*CONV4_OUT_CH]=CONV5_PW_WT;
const q7_t DS_CNN::conv5_pw_bias[CONV5_OUT_CH]=CONV5_PW_BIAS;
const q7_t DS_CNN::final_fc_wt[CONV5_OUT_CH*OUT_DIM]=FINAL_FC_WT;
const q7_t DS_CNN::final_fc_bias[OUT_DIM]=FINAL_FC_BIAS;

DS_CNN::DS_CNN()
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff ffe8 	bl	8001110 <_ZN2NNC1Ev>
 8001140:	4a19      	ldr	r2, [pc, #100]	; (80011a8 <_ZN6DS_CNNC1Ev+0x78>)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	601a      	str	r2, [r3, #0]
{
  scratch_pad = new q7_t[SCRATCH_BUFFER_SIZE];
 8001146:	f44f 408f 	mov.w	r0, #18304	; 0x4780
 800114a:	f00c fcfd 	bl	800db48 <_Znaj>
 800114e:	4603      	mov	r3, r0
 8001150:	461a      	mov	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	61da      	str	r2, [r3, #28]
  buffer1 = scratch_pad;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	69da      	ldr	r2, [r3, #28]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	625a      	str	r2, [r3, #36]	; 0x24
  buffer2 = buffer1 + (CONV1_OUT_CH*CONV1_OUT_X*CONV1_OUT_Y);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001162:	f503 52fa 	add.w	r2, r3, #8000	; 0x1f40
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	629a      	str	r2, [r3, #40]	; 0x28
  col_buffer = buffer2 + (CONV2_OUT_CH*CONV2_OUT_X*CONV2_OUT_Y);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800116e:	f503 52fa 	add.w	r2, r3, #8000	; 0x1f40
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	621a      	str	r2, [r3, #32]
  frame_len = FRAME_LEN;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	f44f 7220 	mov.w	r2, #640	; 0x280
 800117c:	605a      	str	r2, [r3, #4]
  frame_shift = FRAME_SHIFT;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001184:	609a      	str	r2, [r3, #8]
  num_mfcc_features = NUM_MFCC_COEFFS;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	220a      	movs	r2, #10
 800118a:	60da      	str	r2, [r3, #12]
  num_frames = NUM_FRAMES;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2231      	movs	r2, #49	; 0x31
 8001190:	611a      	str	r2, [r3, #16]
  num_out_classes = OUT_DIM;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	220c      	movs	r2, #12
 8001196:	615a      	str	r2, [r3, #20]
  in_dec_bits = MFCC_DEC_BITS;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2201      	movs	r2, #1
 800119c:	619a      	str	r2, [r3, #24]
}
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4618      	mov	r0, r3
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	080155e0 	.word	0x080155e0

080011ac <_ZN6DS_CNND1Ev>:

DS_CNN::~DS_CNN()
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	4a09      	ldr	r2, [pc, #36]	; (80011dc <_ZN6DS_CNND1Ev+0x30>)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	601a      	str	r2, [r3, #0]
{
  delete scratch_pad;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	69db      	ldr	r3, [r3, #28]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d003      	beq.n	80011ca <_ZN6DS_CNND1Ev+0x1e>
 80011c2:	2101      	movs	r1, #1
 80011c4:	4618      	mov	r0, r3
 80011c6:	f00c fcaa 	bl	800db1e <_ZdlPvj>
DS_CNN::~DS_CNN()
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f000 fa29 	bl	8001624 <_ZN2NND1Ev>
}
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4618      	mov	r0, r3
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	080155e0 	.word	0x080155e0

080011e0 <_ZN6DS_CNND0Ev>:
DS_CNN::~DS_CNN()
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
}
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f7ff ffdf 	bl	80011ac <_ZN6DS_CNND1Ev>
 80011ee:	212c      	movs	r1, #44	; 0x2c
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f00c fc94 	bl	800db1e <_ZdlPvj>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4618      	mov	r0, r3
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <_ZN6DS_CNN6run_nnEPaS0_>:

void DS_CNN::run_nn(q7_t* in_data, q7_t* out_data)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b094      	sub	sp, #80	; 0x50
 8001204:	af10      	add	r7, sp, #64	; 0x40
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
  //CONV1 : regular convolution
  arm_convolve_HWC_q7_basic_nonsquare(in_data, CONV1_IN_X, CONV1_IN_Y, 1, conv1_wt, CONV1_OUT_CH, CONV1_KX, CONV1_KY, CONV1_PX, CONV1_PY, CONV1_SX, CONV1_SY, conv1_bias, CONV1_BIAS_LSHIFT, CONV1_OUT_RSHIFT, buffer1, CONV1_OUT_X, CONV1_OUT_Y, (q15_t*)col_buffer, NULL);
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001210:	68fa      	ldr	r2, [r7, #12]
 8001212:	6a12      	ldr	r2, [r2, #32]
 8001214:	2100      	movs	r1, #0
 8001216:	910f      	str	r1, [sp, #60]	; 0x3c
 8001218:	920e      	str	r2, [sp, #56]	; 0x38
 800121a:	2219      	movs	r2, #25
 800121c:	920d      	str	r2, [sp, #52]	; 0x34
 800121e:	2205      	movs	r2, #5
 8001220:	920c      	str	r2, [sp, #48]	; 0x30
 8001222:	930b      	str	r3, [sp, #44]	; 0x2c
 8001224:	2306      	movs	r3, #6
 8001226:	930a      	str	r3, [sp, #40]	; 0x28
 8001228:	2302      	movs	r3, #2
 800122a:	9309      	str	r3, [sp, #36]	; 0x24
 800122c:	4ba4      	ldr	r3, [pc, #656]	; (80014c0 <_ZN6DS_CNN6run_nnEPaS0_+0x2c0>)
 800122e:	9308      	str	r3, [sp, #32]
 8001230:	2302      	movs	r3, #2
 8001232:	9307      	str	r3, [sp, #28]
 8001234:	2302      	movs	r3, #2
 8001236:	9306      	str	r3, [sp, #24]
 8001238:	2304      	movs	r3, #4
 800123a:	9305      	str	r3, [sp, #20]
 800123c:	2301      	movs	r3, #1
 800123e:	9304      	str	r3, [sp, #16]
 8001240:	230a      	movs	r3, #10
 8001242:	9303      	str	r3, [sp, #12]
 8001244:	2304      	movs	r3, #4
 8001246:	9302      	str	r3, [sp, #8]
 8001248:	2340      	movs	r3, #64	; 0x40
 800124a:	9301      	str	r3, [sp, #4]
 800124c:	4b9d      	ldr	r3, [pc, #628]	; (80014c4 <_ZN6DS_CNN6run_nnEPaS0_+0x2c4>)
 800124e:	9300      	str	r3, [sp, #0]
 8001250:	2301      	movs	r3, #1
 8001252:	2231      	movs	r2, #49	; 0x31
 8001254:	210a      	movs	r1, #10
 8001256:	68b8      	ldr	r0, [r7, #8]
 8001258:	f005 fc26 	bl	8006aa8 <arm_convolve_HWC_q7_basic_nonsquare>
  arm_relu_q7(buffer1,CONV1_OUT_X*CONV1_OUT_Y*CONV1_OUT_CH);
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001260:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8001264:	4618      	mov	r0, r3
 8001266:	f005 fa19 	bl	800669c <arm_relu_q7>

  //CONV2 : DS + PW conv
  //Depthwise separable conv (batch norm params folded into conv wts/bias)
  arm_depthwise_separable_conv_HWC_q7_nonsquare(buffer1,CONV2_IN_X,CONV2_IN_Y,CONV1_OUT_CH,conv2_ds_wt,CONV1_OUT_CH,CONV2_DS_KX,CONV2_DS_KY,CONV2_DS_PX,CONV2_DS_PY,CONV2_DS_SX,CONV2_DS_SY,conv2_ds_bias,CONV2_DS_BIAS_LSHIFT,CONV2_DS_OUT_RSHIFT,buffer2,CONV2_OUT_X,CONV2_OUT_Y,(q15_t*)col_buffer, NULL);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001272:	68fa      	ldr	r2, [r7, #12]
 8001274:	6a12      	ldr	r2, [r2, #32]
 8001276:	2100      	movs	r1, #0
 8001278:	910f      	str	r1, [sp, #60]	; 0x3c
 800127a:	920e      	str	r2, [sp, #56]	; 0x38
 800127c:	2219      	movs	r2, #25
 800127e:	920d      	str	r2, [sp, #52]	; 0x34
 8001280:	2205      	movs	r2, #5
 8001282:	920c      	str	r2, [sp, #48]	; 0x30
 8001284:	930b      	str	r3, [sp, #44]	; 0x2c
 8001286:	2305      	movs	r3, #5
 8001288:	930a      	str	r3, [sp, #40]	; 0x28
 800128a:	2302      	movs	r3, #2
 800128c:	9309      	str	r3, [sp, #36]	; 0x24
 800128e:	4b8e      	ldr	r3, [pc, #568]	; (80014c8 <_ZN6DS_CNN6run_nnEPaS0_+0x2c8>)
 8001290:	9308      	str	r3, [sp, #32]
 8001292:	2301      	movs	r3, #1
 8001294:	9307      	str	r3, [sp, #28]
 8001296:	2301      	movs	r3, #1
 8001298:	9306      	str	r3, [sp, #24]
 800129a:	2301      	movs	r3, #1
 800129c:	9305      	str	r3, [sp, #20]
 800129e:	2301      	movs	r3, #1
 80012a0:	9304      	str	r3, [sp, #16]
 80012a2:	2303      	movs	r3, #3
 80012a4:	9303      	str	r3, [sp, #12]
 80012a6:	2303      	movs	r3, #3
 80012a8:	9302      	str	r3, [sp, #8]
 80012aa:	2340      	movs	r3, #64	; 0x40
 80012ac:	9301      	str	r3, [sp, #4]
 80012ae:	4b87      	ldr	r3, [pc, #540]	; (80014cc <_ZN6DS_CNN6run_nnEPaS0_+0x2cc>)
 80012b0:	9300      	str	r3, [sp, #0]
 80012b2:	2340      	movs	r3, #64	; 0x40
 80012b4:	2219      	movs	r2, #25
 80012b6:	2105      	movs	r1, #5
 80012b8:	f005 fdee 	bl	8006e98 <arm_depthwise_separable_conv_HWC_q7_nonsquare>
  arm_relu_q7(buffer2,CONV2_OUT_X*CONV2_OUT_Y*CONV2_OUT_CH);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c0:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 80012c4:	4618      	mov	r0, r3
 80012c6:	f005 f9e9 	bl	800669c <arm_relu_q7>

  //Pointwise conv
  arm_convolve_1x1_HWC_q7_fast_nonsquare(buffer2, CONV2_OUT_X, CONV2_OUT_Y, CONV1_OUT_CH, conv2_pw_wt, CONV2_OUT_CH, 1, 1, 0, 0, 1, 1, conv2_pw_bias, CONV2_PW_BIAS_LSHIFT, CONV2_PW_OUT_RSHIFT, buffer1, CONV2_OUT_X, CONV2_OUT_Y, (q15_t*)col_buffer, NULL);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d2:	68fa      	ldr	r2, [r7, #12]
 80012d4:	6a12      	ldr	r2, [r2, #32]
 80012d6:	2100      	movs	r1, #0
 80012d8:	910f      	str	r1, [sp, #60]	; 0x3c
 80012da:	920e      	str	r2, [sp, #56]	; 0x38
 80012dc:	2219      	movs	r2, #25
 80012de:	920d      	str	r2, [sp, #52]	; 0x34
 80012e0:	2205      	movs	r2, #5
 80012e2:	920c      	str	r2, [sp, #48]	; 0x30
 80012e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80012e6:	2308      	movs	r3, #8
 80012e8:	930a      	str	r3, [sp, #40]	; 0x28
 80012ea:	2304      	movs	r3, #4
 80012ec:	9309      	str	r3, [sp, #36]	; 0x24
 80012ee:	4b78      	ldr	r3, [pc, #480]	; (80014d0 <_ZN6DS_CNN6run_nnEPaS0_+0x2d0>)
 80012f0:	9308      	str	r3, [sp, #32]
 80012f2:	2301      	movs	r3, #1
 80012f4:	9307      	str	r3, [sp, #28]
 80012f6:	2301      	movs	r3, #1
 80012f8:	9306      	str	r3, [sp, #24]
 80012fa:	2300      	movs	r3, #0
 80012fc:	9305      	str	r3, [sp, #20]
 80012fe:	2300      	movs	r3, #0
 8001300:	9304      	str	r3, [sp, #16]
 8001302:	2301      	movs	r3, #1
 8001304:	9303      	str	r3, [sp, #12]
 8001306:	2301      	movs	r3, #1
 8001308:	9302      	str	r3, [sp, #8]
 800130a:	2340      	movs	r3, #64	; 0x40
 800130c:	9301      	str	r3, [sp, #4]
 800130e:	4b71      	ldr	r3, [pc, #452]	; (80014d4 <_ZN6DS_CNN6run_nnEPaS0_+0x2d4>)
 8001310:	9300      	str	r3, [sp, #0]
 8001312:	2340      	movs	r3, #64	; 0x40
 8001314:	2219      	movs	r2, #25
 8001316:	2105      	movs	r1, #5
 8001318:	f005 fa21 	bl	800675e <arm_convolve_1x1_HWC_q7_fast_nonsquare>
  arm_relu_q7(buffer1,CONV2_OUT_X*CONV2_OUT_Y*CONV2_OUT_CH);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001320:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8001324:	4618      	mov	r0, r3
 8001326:	f005 f9b9 	bl	800669c <arm_relu_q7>

  //CONV3 : DS + PW conv
  //Depthwise separable conv (batch norm params folded into conv wts/bias)
  arm_depthwise_separable_conv_HWC_q7_nonsquare(buffer1,CONV3_IN_X,CONV3_IN_Y,CONV2_OUT_CH,conv3_ds_wt,CONV2_OUT_CH,CONV3_DS_KX,CONV3_DS_KY,CONV3_DS_PX,CONV3_DS_PY,CONV3_DS_SX,CONV3_DS_SY,conv3_ds_bias,CONV3_DS_BIAS_LSHIFT,CONV3_DS_OUT_RSHIFT,buffer2,CONV3_OUT_X,CONV3_OUT_Y,(q15_t*)col_buffer, NULL);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001332:	68fa      	ldr	r2, [r7, #12]
 8001334:	6a12      	ldr	r2, [r2, #32]
 8001336:	2100      	movs	r1, #0
 8001338:	910f      	str	r1, [sp, #60]	; 0x3c
 800133a:	920e      	str	r2, [sp, #56]	; 0x38
 800133c:	2219      	movs	r2, #25
 800133e:	920d      	str	r2, [sp, #52]	; 0x34
 8001340:	2205      	movs	r2, #5
 8001342:	920c      	str	r2, [sp, #48]	; 0x30
 8001344:	930b      	str	r3, [sp, #44]	; 0x2c
 8001346:	2304      	movs	r3, #4
 8001348:	930a      	str	r3, [sp, #40]	; 0x28
 800134a:	2302      	movs	r3, #2
 800134c:	9309      	str	r3, [sp, #36]	; 0x24
 800134e:	4b62      	ldr	r3, [pc, #392]	; (80014d8 <_ZN6DS_CNN6run_nnEPaS0_+0x2d8>)
 8001350:	9308      	str	r3, [sp, #32]
 8001352:	2301      	movs	r3, #1
 8001354:	9307      	str	r3, [sp, #28]
 8001356:	2301      	movs	r3, #1
 8001358:	9306      	str	r3, [sp, #24]
 800135a:	2301      	movs	r3, #1
 800135c:	9305      	str	r3, [sp, #20]
 800135e:	2301      	movs	r3, #1
 8001360:	9304      	str	r3, [sp, #16]
 8001362:	2303      	movs	r3, #3
 8001364:	9303      	str	r3, [sp, #12]
 8001366:	2303      	movs	r3, #3
 8001368:	9302      	str	r3, [sp, #8]
 800136a:	2340      	movs	r3, #64	; 0x40
 800136c:	9301      	str	r3, [sp, #4]
 800136e:	4b5b      	ldr	r3, [pc, #364]	; (80014dc <_ZN6DS_CNN6run_nnEPaS0_+0x2dc>)
 8001370:	9300      	str	r3, [sp, #0]
 8001372:	2340      	movs	r3, #64	; 0x40
 8001374:	2219      	movs	r2, #25
 8001376:	2105      	movs	r1, #5
 8001378:	f005 fd8e 	bl	8006e98 <arm_depthwise_separable_conv_HWC_q7_nonsquare>
  arm_relu_q7(buffer2,CONV3_OUT_X*CONV3_OUT_Y*CONV3_OUT_CH);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001380:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8001384:	4618      	mov	r0, r3
 8001386:	f005 f989 	bl	800669c <arm_relu_q7>
  //Pointwise conv
  arm_convolve_1x1_HWC_q7_fast_nonsquare(buffer2, CONV3_OUT_X, CONV3_OUT_Y, CONV2_OUT_CH, conv3_pw_wt, CONV3_OUT_CH, 1, 1, 0, 0, 1, 1, conv3_pw_bias, CONV3_PW_BIAS_LSHIFT, CONV3_PW_OUT_RSHIFT, buffer1, CONV3_OUT_X, CONV3_OUT_Y, (q15_t*)col_buffer, NULL);
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001392:	68fa      	ldr	r2, [r7, #12]
 8001394:	6a12      	ldr	r2, [r2, #32]
 8001396:	2100      	movs	r1, #0
 8001398:	910f      	str	r1, [sp, #60]	; 0x3c
 800139a:	920e      	str	r2, [sp, #56]	; 0x38
 800139c:	2219      	movs	r2, #25
 800139e:	920d      	str	r2, [sp, #52]	; 0x34
 80013a0:	2205      	movs	r2, #5
 80013a2:	920c      	str	r2, [sp, #48]	; 0x30
 80013a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80013a6:	2308      	movs	r3, #8
 80013a8:	930a      	str	r3, [sp, #40]	; 0x28
 80013aa:	2305      	movs	r3, #5
 80013ac:	9309      	str	r3, [sp, #36]	; 0x24
 80013ae:	4b4c      	ldr	r3, [pc, #304]	; (80014e0 <_ZN6DS_CNN6run_nnEPaS0_+0x2e0>)
 80013b0:	9308      	str	r3, [sp, #32]
 80013b2:	2301      	movs	r3, #1
 80013b4:	9307      	str	r3, [sp, #28]
 80013b6:	2301      	movs	r3, #1
 80013b8:	9306      	str	r3, [sp, #24]
 80013ba:	2300      	movs	r3, #0
 80013bc:	9305      	str	r3, [sp, #20]
 80013be:	2300      	movs	r3, #0
 80013c0:	9304      	str	r3, [sp, #16]
 80013c2:	2301      	movs	r3, #1
 80013c4:	9303      	str	r3, [sp, #12]
 80013c6:	2301      	movs	r3, #1
 80013c8:	9302      	str	r3, [sp, #8]
 80013ca:	2340      	movs	r3, #64	; 0x40
 80013cc:	9301      	str	r3, [sp, #4]
 80013ce:	4b45      	ldr	r3, [pc, #276]	; (80014e4 <_ZN6DS_CNN6run_nnEPaS0_+0x2e4>)
 80013d0:	9300      	str	r3, [sp, #0]
 80013d2:	2340      	movs	r3, #64	; 0x40
 80013d4:	2219      	movs	r2, #25
 80013d6:	2105      	movs	r1, #5
 80013d8:	f005 f9c1 	bl	800675e <arm_convolve_1x1_HWC_q7_fast_nonsquare>
  arm_relu_q7(buffer1,CONV3_OUT_X*CONV3_OUT_Y*CONV3_OUT_CH);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e0:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 80013e4:	4618      	mov	r0, r3
 80013e6:	f005 f959 	bl	800669c <arm_relu_q7>

  //CONV4 : DS + PW conv
  //Depthwise separable conv (batch norm params folded into conv wts/bias)
  arm_depthwise_separable_conv_HWC_q7_nonsquare(buffer1,CONV4_IN_X,CONV4_IN_Y,CONV3_OUT_CH,conv4_ds_wt,CONV3_OUT_CH,CONV4_DS_KX,CONV4_DS_KY,CONV4_DS_PX,CONV4_DS_PY,CONV4_DS_SX,CONV4_DS_SY,conv4_ds_bias,CONV4_DS_BIAS_LSHIFT,CONV4_DS_OUT_RSHIFT,buffer2,CONV4_OUT_X,CONV4_OUT_Y,(q15_t*)col_buffer, NULL);
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f2:	68fa      	ldr	r2, [r7, #12]
 80013f4:	6a12      	ldr	r2, [r2, #32]
 80013f6:	2100      	movs	r1, #0
 80013f8:	910f      	str	r1, [sp, #60]	; 0x3c
 80013fa:	920e      	str	r2, [sp, #56]	; 0x38
 80013fc:	2219      	movs	r2, #25
 80013fe:	920d      	str	r2, [sp, #52]	; 0x34
 8001400:	2205      	movs	r2, #5
 8001402:	920c      	str	r2, [sp, #48]	; 0x30
 8001404:	930b      	str	r3, [sp, #44]	; 0x2c
 8001406:	2305      	movs	r3, #5
 8001408:	930a      	str	r3, [sp, #40]	; 0x28
 800140a:	2303      	movs	r3, #3
 800140c:	9309      	str	r3, [sp, #36]	; 0x24
 800140e:	4b36      	ldr	r3, [pc, #216]	; (80014e8 <_ZN6DS_CNN6run_nnEPaS0_+0x2e8>)
 8001410:	9308      	str	r3, [sp, #32]
 8001412:	2301      	movs	r3, #1
 8001414:	9307      	str	r3, [sp, #28]
 8001416:	2301      	movs	r3, #1
 8001418:	9306      	str	r3, [sp, #24]
 800141a:	2301      	movs	r3, #1
 800141c:	9305      	str	r3, [sp, #20]
 800141e:	2301      	movs	r3, #1
 8001420:	9304      	str	r3, [sp, #16]
 8001422:	2303      	movs	r3, #3
 8001424:	9303      	str	r3, [sp, #12]
 8001426:	2303      	movs	r3, #3
 8001428:	9302      	str	r3, [sp, #8]
 800142a:	2340      	movs	r3, #64	; 0x40
 800142c:	9301      	str	r3, [sp, #4]
 800142e:	4b2f      	ldr	r3, [pc, #188]	; (80014ec <_ZN6DS_CNN6run_nnEPaS0_+0x2ec>)
 8001430:	9300      	str	r3, [sp, #0]
 8001432:	2340      	movs	r3, #64	; 0x40
 8001434:	2219      	movs	r2, #25
 8001436:	2105      	movs	r1, #5
 8001438:	f005 fd2e 	bl	8006e98 <arm_depthwise_separable_conv_HWC_q7_nonsquare>
  arm_relu_q7(buffer2,CONV4_OUT_X*CONV4_OUT_Y*CONV4_OUT_CH);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001440:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8001444:	4618      	mov	r0, r3
 8001446:	f005 f929 	bl	800669c <arm_relu_q7>
  //Pointwise conv
  arm_convolve_1x1_HWC_q7_fast_nonsquare(buffer2, CONV4_OUT_X, CONV4_OUT_Y, CONV3_OUT_CH, conv4_pw_wt, CONV4_OUT_CH, 1, 1, 0, 0, 1, 1, conv4_pw_bias, CONV4_PW_BIAS_LSHIFT, CONV4_PW_OUT_RSHIFT, buffer1, CONV4_OUT_X, CONV4_OUT_Y, (q15_t*)col_buffer, NULL);
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001452:	68fa      	ldr	r2, [r7, #12]
 8001454:	6a12      	ldr	r2, [r2, #32]
 8001456:	2100      	movs	r1, #0
 8001458:	910f      	str	r1, [sp, #60]	; 0x3c
 800145a:	920e      	str	r2, [sp, #56]	; 0x38
 800145c:	2219      	movs	r2, #25
 800145e:	920d      	str	r2, [sp, #52]	; 0x34
 8001460:	2205      	movs	r2, #5
 8001462:	920c      	str	r2, [sp, #48]	; 0x30
 8001464:	930b      	str	r3, [sp, #44]	; 0x2c
 8001466:	2307      	movs	r3, #7
 8001468:	930a      	str	r3, [sp, #40]	; 0x28
 800146a:	2305      	movs	r3, #5
 800146c:	9309      	str	r3, [sp, #36]	; 0x24
 800146e:	4b20      	ldr	r3, [pc, #128]	; (80014f0 <_ZN6DS_CNN6run_nnEPaS0_+0x2f0>)
 8001470:	9308      	str	r3, [sp, #32]
 8001472:	2301      	movs	r3, #1
 8001474:	9307      	str	r3, [sp, #28]
 8001476:	2301      	movs	r3, #1
 8001478:	9306      	str	r3, [sp, #24]
 800147a:	2300      	movs	r3, #0
 800147c:	9305      	str	r3, [sp, #20]
 800147e:	2300      	movs	r3, #0
 8001480:	9304      	str	r3, [sp, #16]
 8001482:	2301      	movs	r3, #1
 8001484:	9303      	str	r3, [sp, #12]
 8001486:	2301      	movs	r3, #1
 8001488:	9302      	str	r3, [sp, #8]
 800148a:	2340      	movs	r3, #64	; 0x40
 800148c:	9301      	str	r3, [sp, #4]
 800148e:	4b19      	ldr	r3, [pc, #100]	; (80014f4 <_ZN6DS_CNN6run_nnEPaS0_+0x2f4>)
 8001490:	9300      	str	r3, [sp, #0]
 8001492:	2340      	movs	r3, #64	; 0x40
 8001494:	2219      	movs	r2, #25
 8001496:	2105      	movs	r1, #5
 8001498:	f005 f961 	bl	800675e <arm_convolve_1x1_HWC_q7_fast_nonsquare>
  arm_relu_q7(buffer1,CONV4_OUT_X*CONV4_OUT_Y*CONV4_OUT_CH);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a0:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 80014a4:	4618      	mov	r0, r3
 80014a6:	f005 f8f9 	bl	800669c <arm_relu_q7>

  //CONV5 : DS + PW conv
  //Depthwise separable conv (batch norm params folded into conv wts/bias)
  arm_depthwise_separable_conv_HWC_q7_nonsquare(buffer1,CONV5_IN_X,CONV5_IN_Y,CONV4_OUT_CH,conv5_ds_wt,CONV4_OUT_CH,CONV5_DS_KX,CONV5_DS_KY,CONV5_DS_PX,CONV5_DS_PY,CONV5_DS_SX,CONV5_DS_SY,conv5_ds_bias,CONV5_DS_BIAS_LSHIFT,CONV5_DS_OUT_RSHIFT,buffer2,CONV5_OUT_X,CONV5_OUT_Y,(q15_t*)col_buffer, NULL);
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b2:	68fa      	ldr	r2, [r7, #12]
 80014b4:	6a12      	ldr	r2, [r2, #32]
 80014b6:	2100      	movs	r1, #0
 80014b8:	910f      	str	r1, [sp, #60]	; 0x3c
 80014ba:	920e      	str	r2, [sp, #56]	; 0x38
 80014bc:	2219      	movs	r2, #25
 80014be:	e01b      	b.n	80014f8 <_ZN6DS_CNN6run_nnEPaS0_+0x2f8>
 80014c0:	0801078c 	.word	0x0801078c
 80014c4:	0800fd8c 	.word	0x0800fd8c
 80014c8:	08010a0c 	.word	0x08010a0c
 80014cc:	080107cc 	.word	0x080107cc
 80014d0:	08011a4c 	.word	0x08011a4c
 80014d4:	08010a4c 	.word	0x08010a4c
 80014d8:	08011ccc 	.word	0x08011ccc
 80014dc:	08011a8c 	.word	0x08011a8c
 80014e0:	08012d0c 	.word	0x08012d0c
 80014e4:	08011d0c 	.word	0x08011d0c
 80014e8:	08012f8c 	.word	0x08012f8c
 80014ec:	08012d4c 	.word	0x08012d4c
 80014f0:	08013fcc 	.word	0x08013fcc
 80014f4:	08012fcc 	.word	0x08012fcc
 80014f8:	920d      	str	r2, [sp, #52]	; 0x34
 80014fa:	2205      	movs	r2, #5
 80014fc:	920c      	str	r2, [sp, #48]	; 0x30
 80014fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8001500:	2305      	movs	r3, #5
 8001502:	930a      	str	r3, [sp, #40]	; 0x28
 8001504:	2303      	movs	r3, #3
 8001506:	9309      	str	r3, [sp, #36]	; 0x24
 8001508:	4b40      	ldr	r3, [pc, #256]	; (800160c <_ZN6DS_CNN6run_nnEPaS0_+0x40c>)
 800150a:	9308      	str	r3, [sp, #32]
 800150c:	2301      	movs	r3, #1
 800150e:	9307      	str	r3, [sp, #28]
 8001510:	2301      	movs	r3, #1
 8001512:	9306      	str	r3, [sp, #24]
 8001514:	2301      	movs	r3, #1
 8001516:	9305      	str	r3, [sp, #20]
 8001518:	2301      	movs	r3, #1
 800151a:	9304      	str	r3, [sp, #16]
 800151c:	2303      	movs	r3, #3
 800151e:	9303      	str	r3, [sp, #12]
 8001520:	2303      	movs	r3, #3
 8001522:	9302      	str	r3, [sp, #8]
 8001524:	2340      	movs	r3, #64	; 0x40
 8001526:	9301      	str	r3, [sp, #4]
 8001528:	4b39      	ldr	r3, [pc, #228]	; (8001610 <_ZN6DS_CNN6run_nnEPaS0_+0x410>)
 800152a:	9300      	str	r3, [sp, #0]
 800152c:	2340      	movs	r3, #64	; 0x40
 800152e:	2219      	movs	r2, #25
 8001530:	2105      	movs	r1, #5
 8001532:	f005 fcb1 	bl	8006e98 <arm_depthwise_separable_conv_HWC_q7_nonsquare>
  arm_relu_q7(buffer2,CONV5_OUT_X*CONV5_OUT_Y*CONV5_OUT_CH);
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800153a:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 800153e:	4618      	mov	r0, r3
 8001540:	f005 f8ac 	bl	800669c <arm_relu_q7>
  //Pointwise conv
  arm_convolve_1x1_HWC_q7_fast_nonsquare(buffer2, CONV5_OUT_X, CONV5_OUT_Y, CONV4_OUT_CH, conv5_pw_wt, CONV5_OUT_CH, 1, 1, 0, 0, 1, 1, conv5_pw_bias, CONV5_PW_BIAS_LSHIFT, CONV5_PW_OUT_RSHIFT, buffer1, CONV5_OUT_X, CONV5_OUT_Y, (q15_t*)col_buffer, NULL);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154c:	68fa      	ldr	r2, [r7, #12]
 800154e:	6a12      	ldr	r2, [r2, #32]
 8001550:	2100      	movs	r1, #0
 8001552:	910f      	str	r1, [sp, #60]	; 0x3c
 8001554:	920e      	str	r2, [sp, #56]	; 0x38
 8001556:	2219      	movs	r2, #25
 8001558:	920d      	str	r2, [sp, #52]	; 0x34
 800155a:	2205      	movs	r2, #5
 800155c:	920c      	str	r2, [sp, #48]	; 0x30
 800155e:	930b      	str	r3, [sp, #44]	; 0x2c
 8001560:	2308      	movs	r3, #8
 8001562:	930a      	str	r3, [sp, #40]	; 0x28
 8001564:	2305      	movs	r3, #5
 8001566:	9309      	str	r3, [sp, #36]	; 0x24
 8001568:	4b2a      	ldr	r3, [pc, #168]	; (8001614 <_ZN6DS_CNN6run_nnEPaS0_+0x414>)
 800156a:	9308      	str	r3, [sp, #32]
 800156c:	2301      	movs	r3, #1
 800156e:	9307      	str	r3, [sp, #28]
 8001570:	2301      	movs	r3, #1
 8001572:	9306      	str	r3, [sp, #24]
 8001574:	2300      	movs	r3, #0
 8001576:	9305      	str	r3, [sp, #20]
 8001578:	2300      	movs	r3, #0
 800157a:	9304      	str	r3, [sp, #16]
 800157c:	2301      	movs	r3, #1
 800157e:	9303      	str	r3, [sp, #12]
 8001580:	2301      	movs	r3, #1
 8001582:	9302      	str	r3, [sp, #8]
 8001584:	2340      	movs	r3, #64	; 0x40
 8001586:	9301      	str	r3, [sp, #4]
 8001588:	4b23      	ldr	r3, [pc, #140]	; (8001618 <_ZN6DS_CNN6run_nnEPaS0_+0x418>)
 800158a:	9300      	str	r3, [sp, #0]
 800158c:	2340      	movs	r3, #64	; 0x40
 800158e:	2219      	movs	r2, #25
 8001590:	2105      	movs	r1, #5
 8001592:	f005 f8e4 	bl	800675e <arm_convolve_1x1_HWC_q7_fast_nonsquare>
  arm_relu_q7(buffer1,CONV5_OUT_X*CONV5_OUT_Y*CONV5_OUT_CH);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159a:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 800159e:	4618      	mov	r0, r3
 80015a0:	f005 f87c 	bl	800669c <arm_relu_q7>

  //Average pool
  arm_avepool_q7_HWC_nonsquare (buffer1,CONV5_OUT_X,CONV5_OUT_Y,CONV5_OUT_CH,CONV5_OUT_X,CONV5_OUT_Y,0,0,1,1,1,1,NULL,buffer2, 2);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ac:	2202      	movs	r2, #2
 80015ae:	920a      	str	r2, [sp, #40]	; 0x28
 80015b0:	9309      	str	r3, [sp, #36]	; 0x24
 80015b2:	2300      	movs	r3, #0
 80015b4:	9308      	str	r3, [sp, #32]
 80015b6:	2301      	movs	r3, #1
 80015b8:	9307      	str	r3, [sp, #28]
 80015ba:	2301      	movs	r3, #1
 80015bc:	9306      	str	r3, [sp, #24]
 80015be:	2301      	movs	r3, #1
 80015c0:	9305      	str	r3, [sp, #20]
 80015c2:	2301      	movs	r3, #1
 80015c4:	9304      	str	r3, [sp, #16]
 80015c6:	2300      	movs	r3, #0
 80015c8:	9303      	str	r3, [sp, #12]
 80015ca:	2300      	movs	r3, #0
 80015cc:	9302      	str	r3, [sp, #8]
 80015ce:	2319      	movs	r3, #25
 80015d0:	9301      	str	r3, [sp, #4]
 80015d2:	2305      	movs	r3, #5
 80015d4:	9300      	str	r3, [sp, #0]
 80015d6:	2340      	movs	r3, #64	; 0x40
 80015d8:	2219      	movs	r2, #25
 80015da:	2105      	movs	r1, #5
 80015dc:	f000 f832 	bl	8001644 <arm_avepool_q7_HWC_nonsquare>

  arm_fully_connected_q7(buffer2, final_fc_wt, CONV5_OUT_CH, OUT_DIM, FINAL_FC_BIAS_LSHIFT, FINAL_FC_OUT_RSHIFT, final_fc_bias, out_data, (q15_t*)col_buffer);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	6a1b      	ldr	r3, [r3, #32]
 80015e8:	9304      	str	r3, [sp, #16]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	9303      	str	r3, [sp, #12]
 80015ee:	4b0b      	ldr	r3, [pc, #44]	; (800161c <_ZN6DS_CNN6run_nnEPaS0_+0x41c>)
 80015f0:	9302      	str	r3, [sp, #8]
 80015f2:	2307      	movs	r3, #7
 80015f4:	9301      	str	r3, [sp, #4]
 80015f6:	2302      	movs	r3, #2
 80015f8:	9300      	str	r3, [sp, #0]
 80015fa:	230c      	movs	r3, #12
 80015fc:	2240      	movs	r2, #64	; 0x40
 80015fe:	4908      	ldr	r1, [pc, #32]	; (8001620 <_ZN6DS_CNN6run_nnEPaS0_+0x420>)
 8001600:	f007 f92e 	bl	8008860 <arm_fully_connected_q7>

}
 8001604:	bf00      	nop
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	0801424c 	.word	0x0801424c
 8001610:	0801400c 	.word	0x0801400c
 8001614:	0801528c 	.word	0x0801528c
 8001618:	0801428c 	.word	0x0801428c
 800161c:	080155cc 	.word	0x080155cc
 8001620:	080152cc 	.word	0x080152cc

08001624 <_ZN2NND1Ev>:
 * limitations under the License.
 */

#include "ML-KWS-for-MCU/NN/nn.h"

NN::~NN() {
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	4a04      	ldr	r2, [pc, #16]	; (8001640 <_ZN2NND1Ev+0x1c>)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	601a      	str	r2, [r3, #0]
}
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4618      	mov	r0, r3
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	080155f4 	.word	0x080155f4

08001644 <arm_avepool_q7_HWC_nonsquare>:
        const uint16_t dim_im_out_x,  // output image dimension
        const uint16_t dim_im_out_y,  // output image dimension
        q7_t * bufferA,               // a buffer for local storage
        q7_t * Im_out,                // output feature
        const uint16_t out_lshift)    // output left shift (scaling)
{
 8001644:	b4b0      	push	{r4, r5, r7}
 8001646:	b08b      	sub	sp, #44	; 0x2c
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	4608      	mov	r0, r1
 800164e:	4611      	mov	r1, r2
 8001650:	461a      	mov	r2, r3
 8001652:	4603      	mov	r3, r0
 8001654:	817b      	strh	r3, [r7, #10]
 8001656:	460b      	mov	r3, r1
 8001658:	813b      	strh	r3, [r7, #8]
 800165a:	4613      	mov	r3, r2
 800165c:	80fb      	strh	r3, [r7, #6]
  int16_t i_ch_in, i_x, i_y;
  int16_t k_x, k_y;
  
  for(i_ch_in=0;i_ch_in<ch_im_in;i_ch_in++) {
 800165e:	2300      	movs	r3, #0
 8001660:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001662:	e0b2      	b.n	80017ca <arm_avepool_q7_HWC_nonsquare+0x186>
    for(i_y=0;i_y<dim_im_out_y;i_y++) {
 8001664:	2300      	movs	r3, #0
 8001666:	847b      	strh	r3, [r7, #34]	; 0x22
 8001668:	e0a2      	b.n	80017b0 <arm_avepool_q7_HWC_nonsquare+0x16c>
      for(i_x=0;i_x<dim_im_out_x;i_x++) {
 800166a:	2300      	movs	r3, #0
 800166c:	84bb      	strh	r3, [r7, #36]	; 0x24
 800166e:	e092      	b.n	8001796 <arm_avepool_q7_HWC_nonsquare+0x152>
        int sum = 0;
 8001670:	2300      	movs	r3, #0
 8001672:	61bb      	str	r3, [r7, #24]
        int count = 0;
 8001674:	2300      	movs	r3, #0
 8001676:	617b      	str	r3, [r7, #20]
        for (k_y = i_y*stride_y-padding_y; k_y < i_y*stride_y-padding_y+dim_kernel_y; k_y++) {
 8001678:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800167a:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800167e:	fb12 f303 	smulbb	r3, r2, r3
 8001682:	b29a      	uxth	r2, r3
 8001684:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	b29b      	uxth	r3, r3
 800168c:	83fb      	strh	r3, [r7, #30]
 800168e:	e052      	b.n	8001736 <arm_avepool_q7_HWC_nonsquare+0xf2>
          for (k_x = i_x*stride_x-padding_x;k_x < i_x*stride_x-padding_x+dim_kernel_x; k_x++) {
 8001690:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001692:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001696:	fb12 f303 	smulbb	r3, r2, r3
 800169a:	b29a      	uxth	r2, r3
 800169c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	843b      	strh	r3, [r7, #32]
 80016a6:	e031      	b.n	800170c <arm_avepool_q7_HWC_nonsquare+0xc8>
            if (k_y >= 0 && k_x >= 0 && k_y<dim_im_in_y && k_x<dim_im_in_x) {
 80016a8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	db27      	blt.n	8001700 <arm_avepool_q7_HWC_nonsquare+0xbc>
 80016b0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	db23      	blt.n	8001700 <arm_avepool_q7_HWC_nonsquare+0xbc>
 80016b8:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80016bc:	893b      	ldrh	r3, [r7, #8]
 80016be:	429a      	cmp	r2, r3
 80016c0:	da1e      	bge.n	8001700 <arm_avepool_q7_HWC_nonsquare+0xbc>
 80016c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80016c6:	897b      	ldrh	r3, [r7, #10]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	da19      	bge.n	8001700 <arm_avepool_q7_HWC_nonsquare+0xbc>
              sum += Im_in[i_ch_in + ch_im_in*(k_x+k_y*dim_im_in_x)];
 80016cc:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80016d0:	88fb      	ldrh	r3, [r7, #6]
 80016d2:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 80016d6:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 80016da:	897c      	ldrh	r4, [r7, #10]
 80016dc:	fb04 f101 	mul.w	r1, r4, r1
 80016e0:	4401      	add	r1, r0
 80016e2:	fb01 f303 	mul.w	r3, r1, r3
 80016e6:	4413      	add	r3, r2
 80016e8:	461a      	mov	r2, r3
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	4413      	add	r3, r2
 80016ee:	f993 3000 	ldrsb.w	r3, [r3]
 80016f2:	461a      	mov	r2, r3
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	4413      	add	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
              count++;
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	3301      	adds	r3, #1
 80016fe:	617b      	str	r3, [r7, #20]
          for (k_x = i_x*stride_x-padding_x;k_x < i_x*stride_x-padding_x+dim_kernel_x; k_x++) {
 8001700:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001704:	b29b      	uxth	r3, r3
 8001706:	3301      	adds	r3, #1
 8001708:	b29b      	uxth	r3, r3
 800170a:	843b      	strh	r3, [r7, #32]
 800170c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001710:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001714:	f8b7 1048 	ldrh.w	r1, [r7, #72]	; 0x48
 8001718:	fb01 f103 	mul.w	r1, r1, r3
 800171c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001720:	1ac9      	subs	r1, r1, r3
 8001722:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001724:	440b      	add	r3, r1
 8001726:	429a      	cmp	r2, r3
 8001728:	dbbe      	blt.n	80016a8 <arm_avepool_q7_HWC_nonsquare+0x64>
        for (k_y = i_y*stride_y-padding_y; k_y < i_y*stride_y-padding_y+dim_kernel_y; k_y++) {
 800172a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800172e:	b29b      	uxth	r3, r3
 8001730:	3301      	adds	r3, #1
 8001732:	b29b      	uxth	r3, r3
 8001734:	83fb      	strh	r3, [r7, #30]
 8001736:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800173a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800173e:	f8b7 104c 	ldrh.w	r1, [r7, #76]	; 0x4c
 8001742:	fb01 f103 	mul.w	r1, r1, r3
 8001746:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800174a:	1ac9      	subs	r1, r1, r3
 800174c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800174e:	440b      	add	r3, r1
 8001750:	429a      	cmp	r2, r3
 8001752:	db9d      	blt.n	8001690 <arm_avepool_q7_HWC_nonsquare+0x4c>
            }
          }
        }
        Im_out[i_ch_in+ch_im_in*(i_x+i_y*dim_im_out_x)] = sum*(0x1<<out_lshift)/count;
 8001754:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	409a      	lsls	r2, r3
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	fb92 f5f3 	sdiv	r5, r2, r3
 8001762:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8001766:	88fb      	ldrh	r3, [r7, #6]
 8001768:	f9b7 0024 	ldrsh.w	r0, [r7, #36]	; 0x24
 800176c:	f9b7 1022 	ldrsh.w	r1, [r7, #34]	; 0x22
 8001770:	f8b7 4050 	ldrh.w	r4, [r7, #80]	; 0x50
 8001774:	fb04 f101 	mul.w	r1, r4, r1
 8001778:	4401      	add	r1, r0
 800177a:	fb01 f303 	mul.w	r3, r1, r3
 800177e:	4413      	add	r3, r2
 8001780:	461a      	mov	r2, r3
 8001782:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001784:	4413      	add	r3, r2
 8001786:	b26a      	sxtb	r2, r5
 8001788:	701a      	strb	r2, [r3, #0]
      for(i_x=0;i_x<dim_im_out_x;i_x++) {
 800178a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800178e:	b29b      	uxth	r3, r3
 8001790:	3301      	adds	r3, #1
 8001792:	b29b      	uxth	r3, r3
 8001794:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001796:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800179a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800179e:	429a      	cmp	r2, r3
 80017a0:	f6ff af66 	blt.w	8001670 <arm_avepool_q7_HWC_nonsquare+0x2c>
    for(i_y=0;i_y<dim_im_out_y;i_y++) {
 80017a4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	3301      	adds	r3, #1
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	847b      	strh	r3, [r7, #34]	; 0x22
 80017b0:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 80017b4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80017b8:	429a      	cmp	r2, r3
 80017ba:	f6ff af56 	blt.w	800166a <arm_avepool_q7_HWC_nonsquare+0x26>
  for(i_ch_in=0;i_ch_in<ch_im_in;i_ch_in++) {
 80017be:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	3301      	adds	r3, #1
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80017ca:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80017ce:	88fb      	ldrh	r3, [r7, #6]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	f6ff af47 	blt.w	8001664 <arm_avepool_q7_HWC_nonsquare+0x20>
      }
    }
  }
}
 80017d6:	bf00      	nop
 80017d8:	bf00      	nop
 80017da:	372c      	adds	r7, #44	; 0x2c
 80017dc:	46bd      	mov	sp, r7
 80017de:	bcb0      	pop	{r4, r5, r7}
 80017e0:	4770      	bx	lr

080017e2 <_ZN11AudioPlayerC1EP17DAC_HandleTypeDef>:
#include <stdint.h>
#include<stdio.h>
#include <cstring>

// constructor
AudioPlayer::AudioPlayer(DAC_HandleTypeDef *hdac)
 80017e2:	b480      	push	{r7}
 80017e4:	b083      	sub	sp, #12
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
 80017ea:	6039      	str	r1, [r7, #0]
: hdac(hdac)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	683a      	ldr	r2, [r7, #0]
 80017f0:	611a      	str	r2, [r3, #16]
{
	dac_stop_flag = 1;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2201      	movs	r2, #1
 80017f6:	731a      	strb	r2, [r3, #12]
}
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	4618      	mov	r0, r3
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr

08001806 <_ZN11AudioPlayerD1Ev>:

// destructor
AudioPlayer::~AudioPlayer() {
 8001806:	b480      	push	{r7}
 8001808:	b083      	sub	sp, #12
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
}
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4618      	mov	r0, r3
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <_ZN11AudioPlayer10play_audioEP8WaveData>:

// record audio
void AudioPlayer::play_audio(WaveData * data) {
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af02      	add	r7, sp, #8
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
	cur_data = data;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	683a      	ldr	r2, [r7, #0]
 800182a:	609a      	str	r2, [r3, #8]
	played_samples = 0;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	615a      	str	r2, [r3, #20]
	converted_samples = 0;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	619a      	str	r2, [r3, #24]

	conversion_buffer = new uint16_t[PLAY_BUFFER_LENGTH];
 8001838:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 800183c:	f00c f984 	bl	800db48 <_Znaj>
 8001840:	4603      	mov	r3, r0
 8001842:	461a      	mov	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	605a      	str	r2, [r3, #4]
	dac_buffer = new uint16_t[PLAY_BUFFER_LENGTH];
 8001848:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 800184c:	f00c f97c 	bl	800db48 <_Znaj>
 8001850:	4603      	mov	r3, r0
 8001852:	461a      	mov	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	601a      	str	r2, [r3, #0]


	// initial full read
	update_dac_buffer(0, PLAY_BUFFER_LENGTH);
 8001858:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800185c:	2100      	movs	r1, #0
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f000 f834 	bl	80018cc <_ZN11AudioPlayer17update_dac_bufferEmm>

	// Start DAC in circular mode
	dac_stop_flag = 0;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	731a      	strb	r2, [r3, #12]
	if (HAL_DAC_Start_DMA(hdac, DAC_CHANNEL_1, (uint32_t*)dac_buffer, PLAY_BUFFER_LENGTH, DAC_ALIGN_12B_R) == HAL_ERROR) {
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6918      	ldr	r0, [r3, #16]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	2300      	movs	r3, #0
 8001874:	9300      	str	r3, [sp, #0]
 8001876:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800187a:	2100      	movs	r1, #0
 800187c:	f007 fd54 	bl	8009328 <HAL_DAC_Start_DMA>
 8001880:	4603      	mov	r3, r0
 8001882:	2b01      	cmp	r3, #1
 8001884:	bf0c      	ite	eq
 8001886:	2301      	moveq	r3, #1
 8001888:	2300      	movne	r3, #0
 800188a:	b2db      	uxtb	r3, r3
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <_ZN11AudioPlayer10play_audioEP8WaveData+0x78>
		Error_Handler();
 8001890:	f001 f854 	bl	800293c <Error_Handler>
	}
	while(!dac_stop_flag);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	7b1b      	ldrb	r3, [r3, #12]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d100      	bne.n	800189e <_ZN11AudioPlayer10play_audioEP8WaveData+0x82>
 800189c:	e7fa      	b.n	8001894 <_ZN11AudioPlayer10play_audioEP8WaveData+0x78>
	delete [] dac_buffer;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d004      	beq.n	80018b0 <_ZN11AudioPlayer10play_audioEP8WaveData+0x94>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f00c f939 	bl	800db22 <_ZdaPv>
	delete [] conversion_buffer;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d004      	beq.n	80018c2 <_ZN11AudioPlayer10play_audioEP8WaveData+0xa6>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	4618      	mov	r0, r3
 80018be:	f00c f930 	bl	800db22 <_ZdaPv>
}
 80018c2:	bf00      	nop
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
	...

080018cc <_ZN11AudioPlayer17update_dac_bufferEmm>:

// update buffer. Method called by dac callbacks functions.
void AudioPlayer::update_dac_buffer(uint32_t offset, uint32_t data_length) {
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b088      	sub	sp, #32
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	607a      	str	r2, [r7, #4]
	uint32_t remaining_samples = MAX_RECORD_LENGTH - converted_samples;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	f5c3 537a 	rsb	r3, r3, #16000	; 0x3e80
 80018e0:	617b      	str	r3, [r7, #20]
	uint32_t read_length = data_length;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	61fb      	str	r3, [r7, #28]
	if (read_length >= remaining_samples) {
 80018e6:	69fa      	ldr	r2, [r7, #28]
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d301      	bcc.n	80018f2 <_ZN11AudioPlayer17update_dac_bufferEmm+0x26>
		read_length = remaining_samples;
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	61fb      	str	r3, [r7, #28]
	}
	if (read_length > 0) {
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d046      	beq.n	8001986 <_ZN11AudioPlayer17update_dac_bufferEmm+0xba>
		qspi_read((uint8_t*)conversion_buffer, cur_data->qspi_address + converted_samples*WAVE_DATA_WIDTH, read_length * WAVE_DATA_WIDTH);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	6858      	ldr	r0, [r3, #4]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	685a      	ldr	r2, [r3, #4]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	699b      	ldr	r3, [r3, #24]
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	18d1      	adds	r1, r2, r3
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	461a      	mov	r2, r3
 8001910:	f001 f819 	bl	8002946 <_Z9qspi_readPhmm>
		for (uint32_t i = 0; i < read_length; i++){
 8001914:	2300      	movs	r3, #0
 8001916:	61bb      	str	r3, [r7, #24]
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	429a      	cmp	r2, r3
 800191e:	d220      	bcs.n	8001962 <_ZN11AudioPlayer17update_dac_bufferEmm+0x96>
			conversion_buffer[i] = (uint16_t)(conversion_buffer[i] * WAVE_TO_DAC_SCALE_FACTOR + WAVE_TO_DAC_BIAS);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	685a      	ldr	r2, [r3, #4]
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	4413      	add	r3, r2
 800192a:	881b      	ldrh	r3, [r3, #0]
 800192c:	ee07 3a90 	vmov	s15, r3
 8001930:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001934:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001990 <_ZN11AudioPlayer17update_dac_bufferEmm+0xc4>
 8001938:	ee67 7a87 	vmul.f32	s15, s15, s14
 800193c:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001994 <_ZN11AudioPlayer17update_dac_bufferEmm+0xc8>
 8001940:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	685a      	ldr	r2, [r3, #4]
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	4413      	add	r3, r2
 800194e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001952:	ee17 2a90 	vmov	r2, s15
 8001956:	b292      	uxth	r2, r2
 8001958:	801a      	strh	r2, [r3, #0]
		for (uint32_t i = 0; i < read_length; i++){
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	3301      	adds	r3, #1
 800195e:	61bb      	str	r3, [r7, #24]
 8001960:	e7da      	b.n	8001918 <_ZN11AudioPlayer17update_dac_bufferEmm+0x4c>
		}
		converted_samples += read_length;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	699a      	ldr	r2, [r3, #24]
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	441a      	add	r2, r3
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	619a      	str	r2, [r3, #24]
		memcpy(dac_buffer + offset, conversion_buffer, read_length * DAC_DATA_WIDTH);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	18d0      	adds	r0, r2, r3
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	6859      	ldr	r1, [r3, #4]
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	461a      	mov	r2, r3
 8001982:	f00d fce5 	bl	800f350 <memcpy>
	}
}
 8001986:	bf00      	nop
 8001988:	3720      	adds	r7, #32
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	3d7ff100 	.word	0x3d7ff100
 8001994:	44fff100 	.word	0x44fff100

08001998 <_ZN8WaveDataC1Em>:
#include "qspi_handler.h"
#include <stdlib.h>
#include <stdint.h>
#include<stdio.h>

WaveData::WaveData(uint32_t qspi_address)
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
: qspi_address(qspi_address)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	683a      	ldr	r2, [r7, #0]
 80019a6:	605a      	str	r2, [r3, #4]
{
	num_of_samples = 0;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
}
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4618      	mov	r0, r3
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <_ZN13AudioRecorderC1EP26DFSDM_Filter_HandleTypeDef>:

// constructor
AudioRecorder::AudioRecorder(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
: hdfsdm_filter(hdfsdm_filter)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	683a      	ldr	r2, [r7, #0]
 80019ca:	611a      	str	r2, [r3, #16]
{
	dfsdm_stop_flag = 1;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2201      	movs	r2, #1
 80019d0:	731a      	strb	r2, [r3, #12]
}
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4618      	mov	r0, r3
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <_ZN13AudioRecorderD1Ev>:

// destructor
AudioRecorder::~AudioRecorder() {
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
}
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	4618      	mov	r0, r3
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
	...

080019f8 <_ZN13AudioRecorder12record_audioEm>:

// record audio
WaveData * AudioRecorder::record_audio(uint32_t qspi_address) {
 80019f8:	b590      	push	{r4, r7, lr}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
	// create audio record instance
	cur_data = new WaveData(qspi_address);
 8001a02:	2008      	movs	r0, #8
 8001a04:	f00c f88f 	bl	800db26 <_Znwj>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	461c      	mov	r4, r3
 8001a0c:	6839      	ldr	r1, [r7, #0]
 8001a0e:	4620      	mov	r0, r4
 8001a10:	f7ff ffc2 	bl	8001998 <_ZN8WaveDataC1Em>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	609c      	str	r4, [r3, #8]

	// start DFSDM
	wave_buffer = new int16_t[RECORD_BUFFER_LENGTH];
 8001a18:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 8001a1c:	f00c f894 	bl	800db48 <_Znaj>
 8001a20:	4603      	mov	r3, r0
 8001a22:	461a      	mov	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	605a      	str	r2, [r3, #4]
	dfsdm_buffer = new int32_t[RECORD_BUFFER_LENGTH];
 8001a28:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 8001a2c:	f00c f88c 	bl	800db48 <_Znaj>
 8001a30:	4603      	mov	r3, r0
 8001a32:	461a      	mov	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	601a      	str	r2, [r3, #0]

	dfsdm_stop_flag = 0;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	731a      	strb	r2, [r3, #12]
	if (HAL_DFSDM_FilterRegularStart_DMA(hdfsdm_filter, dfsdm_buffer,RECORD_BUFFER_LENGTH) == HAL_ERROR) {
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6918      	ldr	r0, [r3, #16]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	f008 f844 	bl	8009ad8 <HAL_DFSDM_FilterRegularStart_DMA>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	bf0c      	ite	eq
 8001a56:	2301      	moveq	r3, #1
 8001a58:	2300      	movne	r3, #0
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <_ZN13AudioRecorder12record_audioEm+0x6c>
		Error_Handler();
 8001a60:	f000 ff6c 	bl	800293c <Error_Handler>
	}
	// Sleep while waiting for DFSDM conversion
	if(LOW_POWER_MODE){
 8001a64:	4b12      	ldr	r3, [pc, #72]	; (8001ab0 <_ZN13AudioRecorder12record_audioEm+0xb8>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d003      	beq.n	8001a74 <_ZN13AudioRecorder12record_audioEm+0x7c>
		enter_sleep_mode();
 8001a6c:	f000 f94c 	bl	8001d08 <_Z16enter_sleep_modev>
		HAL_ResumeTick();
 8001a70:	f002 f946 	bl	8003d00 <HAL_ResumeTick>
	}
	while(!dfsdm_stop_flag);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	7b1b      	ldrb	r3, [r3, #12]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d100      	bne.n	8001a7e <_ZN13AudioRecorder12record_audioEm+0x86>
 8001a7c:	e7fa      	b.n	8001a74 <_ZN13AudioRecorder12record_audioEm+0x7c>
	delete [] dfsdm_buffer;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d004      	beq.n	8001a90 <_ZN13AudioRecorder12record_audioEm+0x98>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f00c f849 	bl	800db22 <_ZdaPv>
	delete [] wave_buffer;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d004      	beq.n	8001aa2 <_ZN13AudioRecorder12record_audioEm+0xaa>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f00c f840 	bl	800db22 <_ZdaPv>
	return cur_data;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	689b      	ldr	r3, [r3, #8]
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd90      	pop	{r4, r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	2000038c 	.word	0x2000038c

08001ab4 <_ZN13AudioRecorder18update_wave_bufferEmm>:

// update buffer. Method called by dfsdm callbacks functions.
void AudioRecorder::update_wave_buffer(uint32_t offset, uint32_t data_length) {
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b088      	sub	sp, #32
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
	uint32_t remaining_samples = MAX_RECORD_LENGTH - cur_data->num_of_samples;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f5c3 537a 	rsb	r3, r3, #16000	; 0x3e80
 8001aca:	617b      	str	r3, [r7, #20]
	uint32_t write_length = data_length;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	61fb      	str	r3, [r7, #28]
	if (write_length >= remaining_samples) {
 8001ad0:	69fa      	ldr	r2, [r7, #28]
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d301      	bcc.n	8001adc <_ZN13AudioRecorder18update_wave_bufferEmm+0x28>
		write_length = remaining_samples;
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	61fb      	str	r3, [r7, #28]
	}
	// keep 24 MSB and cast to int16_t
	for (uint32_t i = 0;i < write_length; i++) {
 8001adc:	2300      	movs	r3, #0
 8001ade:	61bb      	str	r3, [r7, #24]
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d213      	bcs.n	8001b10 <_ZN13AudioRecorder18update_wave_bufferEmm+0x5c>
		wave_buffer[i] = (int16_t)((dfsdm_buffer + offset)[i] >> 16);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	68b9      	ldr	r1, [r7, #8]
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	440b      	add	r3, r1
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	4413      	add	r3, r2
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	1419      	asrs	r1, r3, #16
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	685a      	ldr	r2, [r3, #4]
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	4413      	add	r3, r2
 8001b04:	b20a      	sxth	r2, r1
 8001b06:	801a      	strh	r2, [r3, #0]
	for (uint32_t i = 0;i < write_length; i++) {
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	61bb      	str	r3, [r7, #24]
 8001b0e:	e7e7      	b.n	8001ae0 <_ZN13AudioRecorder18update_wave_bufferEmm+0x2c>
	}
	// write half of buffer
	qspi_write((uint8_t*)(wave_buffer), cur_data->qspi_address + (cur_data->num_of_samples * WAVE_DATA_WIDTH), write_length * WAVE_DATA_WIDTH);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6858      	ldr	r0, [r3, #4]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	685a      	ldr	r2, [r3, #4]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	18d1      	adds	r1, r2, r3
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	461a      	mov	r2, r3
 8001b2a:	f000 ff25 	bl	8002978 <_Z10qspi_writePhmm>
	cur_data->num_of_samples += write_length;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	6819      	ldr	r1, [r3, #0]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	69fa      	ldr	r2, [r7, #28]
 8001b3a:	440a      	add	r2, r1
 8001b3c:	601a      	str	r2, [r3, #0]
}
 8001b3e:	bf00      	nop
 8001b40:	3720      	adds	r7, #32
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
	...

08001b48 <_Z13get_top_classPa>:


uint32_t num_output_classes = 12;


uint32_t get_top_class(q7_t* nn_output) {
 8001b48:	b480      	push	{r7}
 8001b4a:	b087      	sub	sp, #28
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
	uint32_t max_index = 0;
 8001b50:	2300      	movs	r3, #0
 8001b52:	617b      	str	r3, [r7, #20]
	int32_t max_value = -128;
 8001b54:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8001b58:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < num_output_classes; i++) {
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60fb      	str	r3, [r7, #12]
 8001b5e:	4b10      	ldr	r3, [pc, #64]	; (8001ba0 <_Z13get_top_classPa+0x58>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	68fa      	ldr	r2, [r7, #12]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d214      	bcs.n	8001b92 <_Z13get_top_classPa+0x4a>
		if (nn_output[i] > max_value) {
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	f993 3000 	ldrsb.w	r3, [r3]
 8001b72:	461a      	mov	r2, r3
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	4293      	cmp	r3, r2
 8001b78:	da07      	bge.n	8001b8a <_Z13get_top_classPa+0x42>
			max_index = i;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	617b      	str	r3, [r7, #20]
			max_value = nn_output[i];
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	4413      	add	r3, r2
 8001b84:	f993 3000 	ldrsb.w	r3, [r3]
 8001b88:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < num_output_classes; i++) {
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	e7e5      	b.n	8001b5e <_Z13get_top_classPa+0x16>
		}
	}
	return max_index;
 8001b92:	697b      	ldr	r3, [r7, #20]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	371c      	adds	r7, #28
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	20000000 	.word	0x20000000

08001ba4 <_Z19average_predictionsPaS_mm>:

void average_predictions(q7_t *average_out, q7_t* average_window_head, uint32_t num_predictions, uint32_t num_output_classes) {
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b08a      	sub	sp, #40	; 0x28
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6178      	str	r0, [r7, #20]
 8001bac:	6139      	str	r1, [r7, #16]
 8001bae:	60fa      	str	r2, [r7, #12]
 8001bb0:	60bb      	str	r3, [r7, #8]
	q15_t *sum = new q15_t[num_output_classes];
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	4a32      	ldr	r2, [pc, #200]	; (8001c80 <_Z19average_predictionsPaS_mm+0xdc>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d801      	bhi.n	8001bbe <_Z19average_predictionsPaS_mm+0x1a>
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	e001      	b.n	8001bc2 <_Z19average_predictionsPaS_mm+0x1e>
 8001bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f00b ffc0 	bl	800db48 <_Znaj>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	61fb      	str	r3, [r7, #28]
	for (uint32_t i = 0; i < num_output_classes; i++) {
 8001bcc:	2300      	movs	r3, #0
 8001bce:	627b      	str	r3, [r7, #36]	; 0x24
 8001bd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d248      	bcs.n	8001c6a <_Z19average_predictionsPaS_mm+0xc6>
		sum[i] = 0;
 8001bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	69fa      	ldr	r2, [r7, #28]
 8001bde:	4413      	add	r3, r2
 8001be0:	2200      	movs	r2, #0
 8001be2:	801a      	strh	r2, [r3, #0]
		for (uint32_t j = 0; j < num_predictions; j++) {
 8001be4:	2300      	movs	r3, #0
 8001be6:	623b      	str	r3, [r7, #32]
 8001be8:	6a3a      	ldr	r2, [r7, #32]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d21d      	bcs.n	8001c2c <_Z19average_predictionsPaS_mm+0x88>
			sum[i] += average_window_head[j * num_output_classes + i];
 8001bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	69fa      	ldr	r2, [r7, #28]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bfc:	b29a      	uxth	r2, r3
 8001bfe:	6a3b      	ldr	r3, [r7, #32]
 8001c00:	68b9      	ldr	r1, [r7, #8]
 8001c02:	fb01 f103 	mul.w	r1, r1, r3
 8001c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c08:	440b      	add	r3, r1
 8001c0a:	6939      	ldr	r1, [r7, #16]
 8001c0c:	440b      	add	r3, r1
 8001c0e:	f993 3000 	ldrsb.w	r3, [r3]
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	4413      	add	r3, r2
 8001c16:	b299      	uxth	r1, r3
 8001c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	69fa      	ldr	r2, [r7, #28]
 8001c1e:	4413      	add	r3, r2
 8001c20:	b20a      	sxth	r2, r1
 8001c22:	801a      	strh	r2, [r3, #0]
		for (uint32_t j = 0; j < num_predictions; j++) {
 8001c24:	6a3b      	ldr	r3, [r7, #32]
 8001c26:	3301      	adds	r3, #1
 8001c28:	623b      	str	r3, [r7, #32]
 8001c2a:	e7dd      	b.n	8001be8 <_Z19average_predictionsPaS_mm+0x44>
		}
		average_out[i] = sum[i] / (float) num_predictions;
 8001c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	69fa      	ldr	r2, [r7, #28]
 8001c32:	4413      	add	r3, r2
 8001c34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c38:	ee07 3a90 	vmov	s15, r3
 8001c3c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	ee07 3a90 	vmov	s15, r3
 8001c46:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c4e:	697a      	ldr	r2, [r7, #20]
 8001c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c52:	4413      	add	r3, r2
 8001c54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c58:	edc7 7a01 	vstr	s15, [r7, #4]
 8001c5c:	793a      	ldrb	r2, [r7, #4]
 8001c5e:	b252      	sxtb	r2, r2
 8001c60:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < num_output_classes; i++) {
 8001c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c64:	3301      	adds	r3, #1
 8001c66:	627b      	str	r3, [r7, #36]	; 0x24
 8001c68:	e7b2      	b.n	8001bd0 <_Z19average_predictionsPaS_mm+0x2c>
	}
	delete [] sum;
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d002      	beq.n	8001c76 <_Z19average_predictionsPaS_mm+0xd2>
 8001c70:	69f8      	ldr	r0, [r7, #28]
 8001c72:	f00b ff56 	bl	800db22 <_ZdaPv>
}
 8001c76:	bf00      	nop
 8001c78:	3728      	adds	r7, #40	; 0x28
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	3ffffffc 	.word	0x3ffffffc

08001c84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	db0b      	blt.n	8001cae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c96:	79fb      	ldrb	r3, [r7, #7]
 8001c98:	f003 021f 	and.w	r2, r3, #31
 8001c9c:	4907      	ldr	r1, [pc, #28]	; (8001cbc <__NVIC_EnableIRQ+0x38>)
 8001c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca2:	095b      	lsrs	r3, r3, #5
 8001ca4:	2001      	movs	r0, #1
 8001ca6:	fa00 f202 	lsl.w	r2, r0, r2
 8001caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	e000e100 	.word	0xe000e100

08001cc0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	db12      	blt.n	8001cf8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cd2:	79fb      	ldrb	r3, [r7, #7]
 8001cd4:	f003 021f 	and.w	r2, r3, #31
 8001cd8:	490a      	ldr	r1, [pc, #40]	; (8001d04 <__NVIC_DisableIRQ+0x44>)
 8001cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cde:	095b      	lsrs	r3, r3, #5
 8001ce0:	2001      	movs	r0, #1
 8001ce2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ce6:	3320      	adds	r3, #32
 8001ce8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001cec:	f3bf 8f4f 	dsb	sy
}
 8001cf0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cf2:	f3bf 8f6f 	isb	sy
}
 8001cf6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	e000e100 	.word	0xe000e100

08001d08 <_Z16enter_sleep_modev>:
 *      Author: chrismartel
 */
#include "main.h"
#include "low_power.h"

void enter_sleep_mode(){
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0

	// disable the systick interrupt or else this interrupt will wake the mcu every time it is triggered
	HAL_SuspendTick();
 8001d0c:	f001 ffe6 	bl	8003cdc <HAL_SuspendTick>
	NVIC_DisableIRQ(TIM2_IRQn);
 8001d10:	201c      	movs	r0, #28
 8001d12:	f7ff ffd5 	bl	8001cc0 <__NVIC_DisableIRQ>
//	NVIC_DisableIRQ(TIM1_TRG_COM_TIM13_IRQn);
	// enter sleep mode with wait for interrupt (wfi)
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001d16:	2101      	movs	r1, #1
 8001d18:	2000      	movs	r0, #0
 8001d1a:	f008 ff85 	bl	800ac28 <HAL_PWR_EnterSLEEPMode>

	NVIC_EnableIRQ(TIM2_IRQn);
 8001d1e:	201c      	movs	r0, #28
 8001d20:	f7ff ffb0 	bl	8001c84 <__NVIC_EnableIRQ>
//	NVIC_EnableIRQ(TIM1_TRG_COM_TIM13_IRQn);
	HAL_ResumeTick();
 8001d24:	f001 ffec 	bl	8003d00 <HAL_ResumeTick>
}
 8001d28:	bf00      	nop
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	0000      	movs	r0, r0
	...

08001d30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d30:	b590      	push	{r4, r7, lr}
 8001d32:	b0a7      	sub	sp, #156	; 0x9c
 8001d34:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d36:	f007 f9a2 	bl	800907e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d3a:	f000 fa13 	bl	8002164 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d3e:	f000 fc43 	bl	80025c8 <_ZL12MX_GPIO_Initv>
  MX_QUADSPI_Init();
 8001d42:	f000 fb4f 	bl	80023e4 <_ZL15MX_QUADSPI_Initv>
  MX_DMA_Init();
 8001d46:	f000 fc0d 	bl	8002564 <_ZL11MX_DMA_Initv>
  MX_DAC_Init();
 8001d4a:	f000 fab7 	bl	80022bc <_ZL11MX_DAC_Initv>
  MX_DFSDM1_Init();
 8001d4e:	f000 fae9 	bl	8002324 <_ZL14MX_DFSDM1_Initv>
  MX_TIM2_Init();
 8001d52:	f000 fb77 	bl	8002444 <_ZL12MX_TIM2_Initv>
  MX_USART1_UART_Init();
 8001d56:	f000 fbd1 	bl	80024fc <_ZL19MX_USART1_UART_Initv>
//  MX_CRC_Init();
  /* USER CODE BEGIN 2 */

  qspi_init();
 8001d5a:	f000 fe26 	bl	80029aa <_Z9qspi_initv>
  HAL_TIM_Base_Start_IT(&htim2);
 8001d5e:	48c2      	ldr	r0, [pc, #776]	; (8002068 <main+0x338>)
 8001d60:	f00a fd7a 	bl	800c858 <HAL_TIM_Base_Start_IT>
  main_state = SETUP;
 8001d64:	4bc1      	ldr	r3, [pc, #772]	; (800206c <main+0x33c>)
 8001d66:	2201      	movs	r2, #1
 8001d68:	701a      	strb	r2, [r3, #0]

  char output_class[12][8] = {"Silence", "Unknown","yes","no","up","down","left","right","on","off","stop","go"};
 8001d6a:	4ac1      	ldr	r2, [pc, #772]	; (8002070 <main+0x340>)
 8001d6c:	1d3b      	adds	r3, r7, #4
 8001d6e:	4611      	mov	r1, r2
 8001d70:	2260      	movs	r2, #96	; 0x60
 8001d72:	4618      	mov	r0, r3
 8001d74:	f00d faec 	bl	800f350 <memcpy>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	switch(main_state) {
 8001d78:	4bbc      	ldr	r3, [pc, #752]	; (800206c <main+0x33c>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b04      	cmp	r3, #4
 8001d80:	d8fa      	bhi.n	8001d78 <main+0x48>
 8001d82:	a201      	add	r2, pc, #4	; (adr r2, 8001d88 <main+0x58>)
 8001d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d88:	08002139 	.word	0x08002139
 8001d8c:	08001d9d 	.word	0x08001d9d
 8001d90:	08001deb 	.word	0x08001deb
 8001d94:	08001e47 	.word	0x08001e47
 8001d98:	08002101 	.word	0x08002101
	case SETUP:
	{
		ITM_Port32(31) = 1;
 8001d9c:	4bb5      	ldr	r3, [pc, #724]	; (8002074 <main+0x344>)
 8001d9e:	2201      	movs	r2, #1
 8001da0:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8001da2:	2200      	movs	r2, #0
 8001da4:	2120      	movs	r1, #32
 8001da6:	48b4      	ldr	r0, [pc, #720]	; (8002078 <main+0x348>)
 8001da8:	f008 ff24 	bl	800abf4 <HAL_GPIO_WritePin>

		// To indicate to user, don't do nothing when red light
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8001dac:	2201      	movs	r2, #1
 8001dae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001db2:	48b1      	ldr	r0, [pc, #708]	; (8002078 <main+0x348>)
 8001db4:	f008 ff1e 	bl	800abf4 <HAL_GPIO_WritePin>
		qspi_erase_blocks(WAVE_DATA_QSPI_ADDRESS, 6);
 8001db8:	2106      	movs	r1, #6
 8001dba:	f44f 2020 	mov.w	r0, #655360	; 0xa0000
 8001dbe:	f000 fe05 	bl	80029cc <_Z17qspi_erase_blocksmm>
		HAL_Delay(2000);
 8001dc2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001dc6:	f007 f987 	bl	80090d8 <HAL_Delay>

		ITM_Port32(31) = 2;
 8001dca:	4baa      	ldr	r3, [pc, #680]	; (8002074 <main+0x344>)
 8001dcc:	2202      	movs	r2, #2
 8001dce:	601a      	str	r2, [r3, #0]
		print("Press the blue button and say a keyword\r\n");
 8001dd0:	48aa      	ldr	r0, [pc, #680]	; (800207c <main+0x34c>)
 8001dd2:	f000 fd87 	bl	80028e4 <print>
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ddc:	48a6      	ldr	r0, [pc, #664]	; (8002078 <main+0x348>)
 8001dde:	f008 ff09 	bl	800abf4 <HAL_GPIO_WritePin>
		main_state = READY;
 8001de2:	4ba2      	ldr	r3, [pc, #648]	; (800206c <main+0x33c>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	701a      	strb	r2, [r3, #0]
		break;
 8001de8:	e1af      	b.n	800214a <main+0x41a>
	}
	case RECORDING:
	{
		ITM_Port32(31) = 3;
 8001dea:	4ba2      	ldr	r3, [pc, #648]	; (8002074 <main+0x344>)
 8001dec:	2203      	movs	r2, #3
 8001dee:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 8001df0:	2201      	movs	r2, #1
 8001df2:	2120      	movs	r1, #32
 8001df4:	48a0      	ldr	r0, [pc, #640]	; (8002078 <main+0x348>)
 8001df6:	f008 fefd 	bl	800abf4 <HAL_GPIO_WritePin>
		audio_recorder = new AudioRecorder(&hdfsdm1_filter0);
 8001dfa:	2014      	movs	r0, #20
 8001dfc:	f00b fe93 	bl	800db26 <_Znwj>
 8001e00:	4603      	mov	r3, r0
 8001e02:	461c      	mov	r4, r3
 8001e04:	499e      	ldr	r1, [pc, #632]	; (8002080 <main+0x350>)
 8001e06:	4620      	mov	r0, r4
 8001e08:	f7ff fdd8 	bl	80019bc <_ZN13AudioRecorderC1EP26DFSDM_Filter_HandleTypeDef>
 8001e0c:	4b9d      	ldr	r3, [pc, #628]	; (8002084 <main+0x354>)
 8001e0e:	601c      	str	r4, [r3, #0]
		wave_data = audio_recorder->record_audio(WAVE_DATA_QSPI_ADDRESS);
 8001e10:	4b9c      	ldr	r3, [pc, #624]	; (8002084 <main+0x354>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff fded 	bl	80019f8 <_ZN13AudioRecorder12record_audioEm>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	4a99      	ldr	r2, [pc, #612]	; (8002088 <main+0x358>)
 8001e22:	6013      	str	r3, [r2, #0]

		ITM_Port32(31) = 4;
 8001e24:	4b93      	ldr	r3, [pc, #588]	; (8002074 <main+0x344>)
 8001e26:	2204      	movs	r2, #4
 8001e28:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	2120      	movs	r1, #32
 8001e2e:	4892      	ldr	r0, [pc, #584]	; (8002078 <main+0x348>)
 8001e30:	f008 fee0 	bl	800abf4 <HAL_GPIO_WritePin>
//		main_state = NN;
		audio_recorder->~AudioRecorder();
 8001e34:	4b93      	ldr	r3, [pc, #588]	; (8002084 <main+0x354>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff fdd1 	bl	80019e0 <_ZN13AudioRecorderD1Ev>
		main_state = NN;
 8001e3e:	4b8b      	ldr	r3, [pc, #556]	; (800206c <main+0x33c>)
 8001e40:	2203      	movs	r2, #3
 8001e42:	701a      	strb	r2, [r3, #0]
		break;
 8001e44:	e181      	b.n	800214a <main+0x41a>
	}
	case NN:
	{
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8001e46:	2201      	movs	r2, #1
 8001e48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e4c:	488a      	ldr	r0, [pc, #552]	; (8002078 <main+0x348>)
 8001e4e:	f008 fed1 	bl	800abf4 <HAL_GPIO_WritePin>

		// input buffer
		int16_t *audio_buffer = new int16_t[(RECORDING_WINDOW_LENGTH+1)*FRAME_SHIFT];
 8001e52:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001e56:	f00b fe77 	bl	800db48 <_Znaj>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

		// mfcc coefficients
		q7_t *mfcc_out = (q7_t*) calloc(NUM_FRAMES * NUM_MFCC_COEFFS, sizeof(q7_t));
 8001e60:	2101      	movs	r1, #1
 8001e62:	f44f 70f5 	mov.w	r0, #490	; 0x1ea
 8001e66:	f00d fa31 	bl	800f2cc <calloc>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	67fb      	str	r3, [r7, #124]	; 0x7c

		// output buffer
		q7_t *predictions = (q7_t*) calloc(NUM_PREDICTIONS * NUM_OUTPUT_CLASSES, sizeof(q7_t));
 8001e6e:	2101      	movs	r1, #1
 8001e70:	206c      	movs	r0, #108	; 0x6c
 8001e72:	f00d fa2b 	bl	800f2cc <calloc>
 8001e76:	4603      	mov	r3, r0
 8001e78:	67bb      	str	r3, [r7, #120]	; 0x78

		// average predictions
		q7_t *average = new q7_t[NUM_OUTPUT_CLASSES];
 8001e7a:	200c      	movs	r0, #12
 8001e7c:	f00b fe64 	bl	800db48 <_Znaj>
 8001e80:	4603      	mov	r3, r0
 8001e82:	677b      	str	r3, [r7, #116]	; 0x74

		uint32_t pred_index;

		q7_t *mfcc_head;
		DS_CNN *ds_cnn = new DS_CNN();
 8001e84:	202c      	movs	r0, #44	; 0x2c
 8001e86:	f00b fe4e 	bl	800db26 <_Znwj>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	461c      	mov	r4, r3
 8001e8e:	4620      	mov	r0, r4
 8001e90:	f7ff f94e 	bl	8001130 <_ZN6DS_CNNC1Ev>
 8001e94:	673c      	str	r4, [r7, #112]	; 0x70
		MFCC *mfcc = new MFCC(NUM_MFCC_COEFFS, FRAME_LEN, MFCC_DEC_BITS);
 8001e96:	2034      	movs	r0, #52	; 0x34
 8001e98:	f00b fe45 	bl	800db26 <_Znwj>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	461c      	mov	r4, r3
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8001ea6:	210a      	movs	r1, #10
 8001ea8:	4620      	mov	r0, r4
 8001eaa:	f7fe fc5d 	bl	8000768 <_ZN4MFCCC1Eiii>
 8001eae:	66fc      	str	r4, [r7, #108]	; 0x6c

		bool keyword_detected = false;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93

		q7_t *average_window_head = predictions;
 8001eb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001eb8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		for (uint32_t i = 0; i < NUM_PREDICTIONS; i ++) {
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001ec2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ec6:	2b08      	cmp	r3, #8
 8001ec8:	f200 80ea 	bhi.w	80020a0 <main+0x370>
				qspi_read((uint8_t*)audio_buffer, WAVE_DATA_QSPI_ADDRESS + (i * RECORDING_WINDOW_LENGTH * FRAME_SHIFT * WAVE_DATA_WIDTH), RECORDING_WINDOW_SIZE);
 8001ecc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ed0:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8001ed4:	fb02 f303 	mul.w	r3, r2, r3
 8001ed8:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
 8001edc:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001ee6:	f000 fd2e 	bl	8002946 <_Z9qspi_readPhmm>
				// move old data to the left
				arm_copy_q7(mfcc_out + (RECORDING_WINDOW_LENGTH * NUM_MFCC_COEFFS), mfcc_out, (NUM_FRAMES - RECORDING_WINDOW_LENGTH) * NUM_MFCC_COEFFS * sizeof(q7_t));
 8001eea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001eec:	3332      	adds	r3, #50	; 0x32
 8001eee:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8001ef2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f001 fffc 	bl	8003ef2 <arm_copy_q7>
				mfcc_head = mfcc_out + ((NUM_FRAMES-RECORDING_WINDOW_LENGTH) * NUM_MFCC_COEFFS);
 8001efa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001efc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001f00:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
				for (uint32_t j = 0; j < RECORDING_WINDOW_LENGTH; j ++) {
 8001f04:	2300      	movs	r3, #0
 8001f06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001f0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f0e:	2b04      	cmp	r3, #4
 8001f10:	d81a      	bhi.n	8001f48 <main+0x218>
					mfcc->mfcc_compute(audio_buffer + (j * FRAME_SHIFT), mfcc_head);
 8001f12:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001f16:	4613      	mov	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	4413      	add	r3, r2
 8001f1c:	01db      	lsls	r3, r3, #7
 8001f1e:	461a      	mov	r2, r3
 8001f20:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f24:	4413      	add	r3, r2
 8001f26:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001f2e:	f7fe ff29 	bl	8000d84 <_ZN4MFCC12mfcc_computeEPKsPa>
					mfcc_head += NUM_MFCC_COEFFS;
 8001f32:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001f36:	330a      	adds	r3, #10
 8001f38:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
				for (uint32_t j = 0; j < RECORDING_WINDOW_LENGTH; j ++) {
 8001f3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f40:	3301      	adds	r3, #1
 8001f42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001f46:	e7e0      	b.n	8001f0a <main+0x1da>
				}
				q7_t* nn_out = predictions + (i * NUM_OUTPUT_CLASSES);
 8001f48:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	4413      	add	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	461a      	mov	r2, r3
 8001f56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f58:	4413      	add	r3, r2
 8001f5a:	66bb      	str	r3, [r7, #104]	; 0x68
				ds_cnn->run_nn(mfcc_out, nn_out);
 8001f5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	3308      	adds	r3, #8
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001f66:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001f68:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001f6a:	4798      	blx	r3
//				arm_softmax_q7(nn_out,NUM_OUTPUT_CLASSES,nn_out);

				// get prediction for each recording window
				if (DEBUG_MODE) {
 8001f6c:	4b47      	ldr	r3, [pc, #284]	; (800208c <main+0x35c>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d014      	beq.n	8001f9e <main+0x26e>
					pred_index = get_top_class(nn_out);
 8001f74:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8001f76:	f7ff fde7 	bl	8001b48 <_Z13get_top_classPa>
 8001f7a:	6678      	str	r0, [r7, #100]	; 0x64
					sprintf(uart_buffer, "Prediction: \"%s\" score: %d\r\n", output_class[pred_index], nn_out[pred_index]);
 8001f7c:	1d3a      	adds	r2, r7, #4
 8001f7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f80:	00db      	lsls	r3, r3, #3
 8001f82:	18d1      	adds	r1, r2, r3
 8001f84:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001f86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f88:	4413      	add	r3, r2
 8001f8a:	f993 3000 	ldrsb.w	r3, [r3]
 8001f8e:	460a      	mov	r2, r1
 8001f90:	493f      	ldr	r1, [pc, #252]	; (8002090 <main+0x360>)
 8001f92:	4840      	ldr	r0, [pc, #256]	; (8002094 <main+0x364>)
 8001f94:	f00d fb1a 	bl	800f5cc <siprintf>
					print(uart_buffer);
 8001f98:	483e      	ldr	r0, [pc, #248]	; (8002094 <main+0x364>)
 8001f9a:	f000 fca3 	bl	80028e4 <print>
				}

				// increment average window pointer
				if (i >= AVERAGE_WINDOW_LENGTH) {
 8001f9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d904      	bls.n	8001fb0 <main+0x280>
					average_window_head += NUM_OUTPUT_CLASSES;
 8001fa6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001faa:	330c      	adds	r3, #12
 8001fac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
				}
				average_predictions(average, average_window_head, AVERAGE_WINDOW_LENGTH, NUM_OUTPUT_CLASSES);
 8001fb0:	230c      	movs	r3, #12
 8001fb2:	2203      	movs	r2, #3
 8001fb4:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8001fb8:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001fba:	f7ff fdf3 	bl	8001ba4 <_Z19average_predictionsPaS_mm>
				pred_index = get_top_class(average);
 8001fbe:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001fc0:	f7ff fdc2 	bl	8001b48 <_Z13get_top_classPa>
 8001fc4:	6678      	str	r0, [r7, #100]	; 0x64

				if (DEBUG_MODE) {
 8001fc6:	4b31      	ldr	r3, [pc, #196]	; (800208c <main+0x35c>)
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d010      	beq.n	8001ff0 <main+0x2c0>
					sprintf(uart_buffer, "Average: \"%s\" score: %d\r\n", output_class[pred_index], average[pred_index]);
 8001fce:	1d3a      	adds	r2, r7, #4
 8001fd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	18d1      	adds	r1, r2, r3
 8001fd6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001fd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001fda:	4413      	add	r3, r2
 8001fdc:	f993 3000 	ldrsb.w	r3, [r3]
 8001fe0:	460a      	mov	r2, r1
 8001fe2:	492d      	ldr	r1, [pc, #180]	; (8002098 <main+0x368>)
 8001fe4:	482b      	ldr	r0, [pc, #172]	; (8002094 <main+0x364>)
 8001fe6:	f00d faf1 	bl	800f5cc <siprintf>
					print(uart_buffer);
 8001fea:	482a      	ldr	r0, [pc, #168]	; (8002094 <main+0x364>)
 8001fec:	f000 fc7a 	bl	80028e4 <print>
				}

				if (average[pred_index] / 128.0 * 100 > DETECTION_THRESHOLD) {
 8001ff0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001ff2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ff4:	4413      	add	r3, r2
 8001ff6:	f993 3000 	ldrsb.w	r3, [r3]
 8001ffa:	ee07 3a90 	vmov	s15, r3
 8001ffe:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002002:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8002050 <main+0x320>
 8002006:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800200a:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8002058 <main+0x328>
 800200e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002012:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8002060 <main+0x330>
 8002016:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800201a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800201e:	dd0f      	ble.n	8002040 <main+0x310>
					sprintf(uart_buffer, "Keyword Detected: \"%s\"\r\n", output_class[pred_index]);
 8002020:	1d3a      	adds	r2, r7, #4
 8002022:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002024:	00db      	lsls	r3, r3, #3
 8002026:	4413      	add	r3, r2
 8002028:	461a      	mov	r2, r3
 800202a:	491c      	ldr	r1, [pc, #112]	; (800209c <main+0x36c>)
 800202c:	4819      	ldr	r0, [pc, #100]	; (8002094 <main+0x364>)
 800202e:	f00d facd 	bl	800f5cc <siprintf>
					print(uart_buffer);
 8002032:	4818      	ldr	r0, [pc, #96]	; (8002094 <main+0x364>)
 8002034:	f000 fc56 	bl	80028e4 <print>
					keyword_detected = true;
 8002038:	2301      	movs	r3, #1
 800203a:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
					break;
 800203e:	e02f      	b.n	80020a0 <main+0x370>
		for (uint32_t i = 0; i < NUM_PREDICTIONS; i ++) {
 8002040:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002044:	3301      	adds	r3, #1
 8002046:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800204a:	e73a      	b.n	8001ec2 <main+0x192>
 800204c:	f3af 8000 	nop.w
 8002050:	00000000 	.word	0x00000000
 8002054:	40600000 	.word	0x40600000
 8002058:	00000000 	.word	0x00000000
 800205c:	40590000 	.word	0x40590000
 8002060:	00000000 	.word	0x00000000
 8002064:	40418000 	.word	0x40418000
 8002068:	20000248 	.word	0x20000248
 800206c:	20000318 	.word	0x20000318
 8002070:	0800fd2c 	.word	0x0800fd2c
 8002074:	e000007c 	.word	0xe000007c
 8002078:	40022400 	.word	0x40022400
 800207c:	0800fc90 	.word	0x0800fc90
 8002080:	20000110 	.word	0x20000110
 8002084:	20000380 	.word	0x20000380
 8002088:	20000384 	.word	0x20000384
 800208c:	20000004 	.word	0x20000004
 8002090:	0800fcbc 	.word	0x0800fcbc
 8002094:	2000031c 	.word	0x2000031c
 8002098:	0800fcdc 	.word	0x0800fcdc
 800209c:	0800fcf8 	.word	0x0800fcf8
				}
		}

		if (!keyword_detected) {
 80020a0:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80020a4:	f083 0301 	eor.w	r3, r3, #1
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d002      	beq.n	80020b4 <main+0x384>
			print("No keyword detected.");
 80020ae:	4827      	ldr	r0, [pc, #156]	; (800214c <main+0x41c>)
 80020b0:	f000 fc18 	bl	80028e4 <print>
		}

		mfcc->~MFCC();
 80020b4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80020b6:	f7fe fc27 	bl	8000908 <_ZN4MFCCD1Ev>
		ds_cnn->~DS_CNN();
 80020ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80020c2:	4798      	blx	r3
		delete [] mfcc_out;
 80020c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d002      	beq.n	80020d0 <main+0x3a0>
 80020ca:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80020cc:	f00b fd29 	bl	800db22 <_ZdaPv>
		delete [] predictions;
 80020d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d002      	beq.n	80020dc <main+0x3ac>
 80020d6:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80020d8:	f00b fd23 	bl	800db22 <_ZdaPv>
		delete [] average;
 80020dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d002      	beq.n	80020e8 <main+0x3b8>
 80020e2:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80020e4:	f00b fd1d 	bl	800db22 <_ZdaPv>
		delete [] audio_buffer;
 80020e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d003      	beq.n	80020f8 <main+0x3c8>
 80020f0:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80020f4:	f00b fd15 	bl	800db22 <_ZdaPv>
		main_state = SETUP;
 80020f8:	4b15      	ldr	r3, [pc, #84]	; (8002150 <main+0x420>)
 80020fa:	2201      	movs	r2, #1
 80020fc:	701a      	strb	r2, [r3, #0]
		break;
 80020fe:	e024      	b.n	800214a <main+0x41a>
	}
	case AUDIO_TEST:
	{
		audio_player = new AudioPlayer(&hdac);
 8002100:	201c      	movs	r0, #28
 8002102:	f00b fd10 	bl	800db26 <_Znwj>
 8002106:	4603      	mov	r3, r0
 8002108:	461c      	mov	r4, r3
 800210a:	4912      	ldr	r1, [pc, #72]	; (8002154 <main+0x424>)
 800210c:	4620      	mov	r0, r4
 800210e:	f7ff fb68 	bl	80017e2 <_ZN11AudioPlayerC1EP17DAC_HandleTypeDef>
 8002112:	4b11      	ldr	r3, [pc, #68]	; (8002158 <main+0x428>)
 8002114:	601c      	str	r4, [r3, #0]
		audio_player->play_audio(wave_data);
 8002116:	4b10      	ldr	r3, [pc, #64]	; (8002158 <main+0x428>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a10      	ldr	r2, [pc, #64]	; (800215c <main+0x42c>)
 800211c:	6812      	ldr	r2, [r2, #0]
 800211e:	4611      	mov	r1, r2
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff fb7b 	bl	800181c <_ZN11AudioPlayer10play_audioEP8WaveData>

//		audio_recorder->print_data(wave_data);
		main_state = NN;
 8002126:	4b0a      	ldr	r3, [pc, #40]	; (8002150 <main+0x420>)
 8002128:	2203      	movs	r2, #3
 800212a:	701a      	strb	r2, [r3, #0]
//		main_state = SETUP;
		audio_player->~AudioPlayer();
 800212c:	4b0a      	ldr	r3, [pc, #40]	; (8002158 <main+0x428>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff fb68 	bl	8001806 <_ZN11AudioPlayerD1Ev>

		break;
 8002136:	e008      	b.n	800214a <main+0x41a>
	}
	case READY:
	{
		BLUE_BUTTON_WAIT();
 8002138:	f000 fac6 	bl	80026c8 <BLUE_BUTTON_WAIT>
		if (LOW_POWER_MODE)
 800213c:	4b08      	ldr	r3, [pc, #32]	; (8002160 <main+0x430>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <main+0x418>
			enter_sleep_mode();
 8002144:	f7ff fde0 	bl	8001d08 <_Z16enter_sleep_modev>
		break;
 8002148:	bf00      	nop
	}
	}
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 800214a:	e615      	b.n	8001d78 <main+0x48>
 800214c:	0800fd14 	.word	0x0800fd14
 8002150:	20000318 	.word	0x20000318
 8002154:	2000009c 	.word	0x2000009c
 8002158:	20000388 	.word	0x20000388
 800215c:	20000384 	.word	0x20000384
 8002160:	2000038c 	.word	0x2000038c

08002164 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b0b8      	sub	sp, #224	; 0xe0
 8002168:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800216a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800216e:	2234      	movs	r2, #52	; 0x34
 8002170:	2100      	movs	r1, #0
 8002172:	4618      	mov	r0, r3
 8002174:	f00d f914 	bl	800f3a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002178:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]
 8002180:	605a      	str	r2, [r3, #4]
 8002182:	609a      	str	r2, [r3, #8]
 8002184:	60da      	str	r2, [r3, #12]
 8002186:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002188:	f107 0308 	add.w	r3, r7, #8
 800218c:	2290      	movs	r2, #144	; 0x90
 800218e:	2100      	movs	r1, #0
 8002190:	4618      	mov	r0, r3
 8002192:	f00d f905 	bl	800f3a0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002196:	4b46      	ldr	r3, [pc, #280]	; (80022b0 <_Z18SystemClock_Configv+0x14c>)
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	4a45      	ldr	r2, [pc, #276]	; (80022b0 <_Z18SystemClock_Configv+0x14c>)
 800219c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021a0:	6413      	str	r3, [r2, #64]	; 0x40
 80021a2:	4b43      	ldr	r3, [pc, #268]	; (80022b0 <_Z18SystemClock_Configv+0x14c>)
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021aa:	607b      	str	r3, [r7, #4]
 80021ac:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021ae:	4b41      	ldr	r3, [pc, #260]	; (80022b4 <_Z18SystemClock_Configv+0x150>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a40      	ldr	r2, [pc, #256]	; (80022b4 <_Z18SystemClock_Configv+0x150>)
 80021b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021b8:	6013      	str	r3, [r2, #0]
 80021ba:	4b3e      	ldr	r3, [pc, #248]	; (80022b4 <_Z18SystemClock_Configv+0x150>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80021c2:	603b      	str	r3, [r7, #0]
 80021c4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80021c6:	2302      	movs	r3, #2
 80021c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021cc:	2301      	movs	r3, #1
 80021ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80021d2:	2310      	movs	r3, #16
 80021d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021d8:	2302      	movs	r3, #2
 80021da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80021de:	2300      	movs	r3, #0
 80021e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 80021e4:	2308      	movs	r3, #8
 80021e6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 80021ea:	23d8      	movs	r3, #216	; 0xd8
 80021ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80021f0:	2302      	movs	r3, #2
 80021f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80021f6:	2304      	movs	r3, #4
 80021f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80021fc:	2302      	movs	r3, #2
 80021fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002202:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002206:	4618      	mov	r0, r3
 8002208:	f009 f9f0 	bl	800b5ec <HAL_RCC_OscConfig>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	bf14      	ite	ne
 8002212:	2301      	movne	r3, #1
 8002214:	2300      	moveq	r3, #0
 8002216:	b2db      	uxtb	r3, r3
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <_Z18SystemClock_Configv+0xbc>
  {
    Error_Handler();
 800221c:	f000 fb8e 	bl	800293c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002220:	f008 fd24 	bl	800ac6c <HAL_PWREx_EnableOverDrive>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	bf14      	ite	ne
 800222a:	2301      	movne	r3, #1
 800222c:	2300      	moveq	r3, #0
 800222e:	b2db      	uxtb	r3, r3
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8002234:	f000 fb82 	bl	800293c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002238:	230f      	movs	r3, #15
 800223a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800223e:	2302      	movs	r3, #2
 8002240:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002244:	2300      	movs	r3, #0
 8002246:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800224a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800224e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002252:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002256:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800225a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800225e:	2107      	movs	r1, #7
 8002260:	4618      	mov	r0, r3
 8002262:	f009 fc71 	bl	800bb48 <HAL_RCC_ClockConfig>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	bf14      	ite	ne
 800226c:	2301      	movne	r3, #1
 800226e:	2300      	moveq	r3, #0
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <_Z18SystemClock_Configv+0x116>
  {
    Error_Handler();
 8002276:	f000 fb61 	bl	800293c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_USART1;
 800227a:	4b0f      	ldr	r3, [pc, #60]	; (80022b8 <_Z18SystemClock_Configv+0x154>)
 800227c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800227e:	2300      	movs	r3, #0
 8002280:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8002282:	2300      	movs	r3, #0
 8002284:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002288:	f107 0308 	add.w	r3, r7, #8
 800228c:	4618      	mov	r0, r3
 800228e:	f009 fe63 	bl	800bf58 <HAL_RCCEx_PeriphCLKConfig>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	bf14      	ite	ne
 8002298:	2301      	movne	r3, #1
 800229a:	2300      	moveq	r3, #0
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <_Z18SystemClock_Configv+0x142>
  {
    Error_Handler();
 80022a2:	f000 fb4b 	bl	800293c <Error_Handler>
  }
}
 80022a6:	bf00      	nop
 80022a8:	37e0      	adds	r7, #224	; 0xe0
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	40023800 	.word	0x40023800
 80022b4:	40007000 	.word	0x40007000
 80022b8:	08000040 	.word	0x08000040

080022bc <_ZL11MX_DAC_Initv>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80022c2:	463b      	mov	r3, r7
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80022ca:	4b14      	ldr	r3, [pc, #80]	; (800231c <_ZL11MX_DAC_Initv+0x60>)
 80022cc:	4a14      	ldr	r2, [pc, #80]	; (8002320 <_ZL11MX_DAC_Initv+0x64>)
 80022ce:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80022d0:	4812      	ldr	r0, [pc, #72]	; (800231c <_ZL11MX_DAC_Initv+0x60>)
 80022d2:	f007 f807 	bl	80092e4 <HAL_DAC_Init>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	bf14      	ite	ne
 80022dc:	2301      	movne	r3, #1
 80022de:	2300      	moveq	r3, #0
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <_ZL11MX_DAC_Initv+0x2e>
  {
    Error_Handler();
 80022e6:	f000 fb29 	bl	800293c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80022ea:	2324      	movs	r3, #36	; 0x24
 80022ec:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80022ee:	2300      	movs	r3, #0
 80022f0:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80022f2:	463b      	mov	r3, r7
 80022f4:	2200      	movs	r2, #0
 80022f6:	4619      	mov	r1, r3
 80022f8:	4808      	ldr	r0, [pc, #32]	; (800231c <_ZL11MX_DAC_Initv+0x60>)
 80022fa:	f007 f933 	bl	8009564 <HAL_DAC_ConfigChannel>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	bf14      	ite	ne
 8002304:	2301      	movne	r3, #1
 8002306:	2300      	moveq	r3, #0
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <_ZL11MX_DAC_Initv+0x56>
  {
    Error_Handler();
 800230e:	f000 fb15 	bl	800293c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8002312:	bf00      	nop
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	2000009c 	.word	0x2000009c
 8002320:	40007400 	.word	0x40007400

08002324 <_ZL14MX_DFSDM1_Initv>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8002328:	4b29      	ldr	r3, [pc, #164]	; (80023d0 <_ZL14MX_DFSDM1_Initv+0xac>)
 800232a:	4a2a      	ldr	r2, [pc, #168]	; (80023d4 <_ZL14MX_DFSDM1_Initv+0xb0>)
 800232c:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800232e:	4b28      	ldr	r3, [pc, #160]	; (80023d0 <_ZL14MX_DFSDM1_Initv+0xac>)
 8002330:	2200      	movs	r2, #0
 8002332:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8002334:	4b26      	ldr	r3, [pc, #152]	; (80023d0 <_ZL14MX_DFSDM1_Initv+0xac>)
 8002336:	2201      	movs	r2, #1
 8002338:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 800233a:	4b25      	ldr	r3, [pc, #148]	; (80023d0 <_ZL14MX_DFSDM1_Initv+0xac>)
 800233c:	2201      	movs	r2, #1
 800233e:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8002340:	4b23      	ldr	r3, [pc, #140]	; (80023d0 <_ZL14MX_DFSDM1_Initv+0xac>)
 8002342:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8002346:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 200;
 8002348:	4b21      	ldr	r3, [pc, #132]	; (80023d0 <_ZL14MX_DFSDM1_Initv+0xac>)
 800234a:	22c8      	movs	r2, #200	; 0xc8
 800234c:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 800234e:	4b20      	ldr	r3, [pc, #128]	; (80023d0 <_ZL14MX_DFSDM1_Initv+0xac>)
 8002350:	2201      	movs	r2, #1
 8002352:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_DFSDM_FilterInit(&hdfsdm1_filter0);
 8002354:	481e      	ldr	r0, [pc, #120]	; (80023d0 <_ZL14MX_DFSDM1_Initv+0xac>)
 8002356:	f007 fa9f 	bl	8009898 <HAL_DFSDM_FilterInit>
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 800235a:	4b1f      	ldr	r3, [pc, #124]	; (80023d8 <_ZL14MX_DFSDM1_Initv+0xb4>)
 800235c:	4a1f      	ldr	r2, [pc, #124]	; (80023dc <_ZL14MX_DFSDM1_Initv+0xb8>)
 800235e:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8002360:	4b1d      	ldr	r3, [pc, #116]	; (80023d8 <_ZL14MX_DFSDM1_Initv+0xb4>)
 8002362:	2201      	movs	r2, #1
 8002364:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8002366:	4b1c      	ldr	r3, [pc, #112]	; (80023d8 <_ZL14MX_DFSDM1_Initv+0xb4>)
 8002368:	2200      	movs	r2, #0
 800236a:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 68;
 800236c:	4b1a      	ldr	r3, [pc, #104]	; (80023d8 <_ZL14MX_DFSDM1_Initv+0xb4>)
 800236e:	2244      	movs	r2, #68	; 0x44
 8002370:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8002372:	4b19      	ldr	r3, [pc, #100]	; (80023d8 <_ZL14MX_DFSDM1_Initv+0xb4>)
 8002374:	2200      	movs	r2, #0
 8002376:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8002378:	4b17      	ldr	r3, [pc, #92]	; (80023d8 <_ZL14MX_DFSDM1_Initv+0xb4>)
 800237a:	2200      	movs	r2, #0
 800237c:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 800237e:	4b16      	ldr	r3, [pc, #88]	; (80023d8 <_ZL14MX_DFSDM1_Initv+0xb4>)
 8002380:	2200      	movs	r2, #0
 8002382:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8002384:	4b14      	ldr	r3, [pc, #80]	; (80023d8 <_ZL14MX_DFSDM1_Initv+0xb4>)
 8002386:	2200      	movs	r2, #0
 8002388:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800238a:	4b13      	ldr	r3, [pc, #76]	; (80023d8 <_ZL14MX_DFSDM1_Initv+0xb4>)
 800238c:	2204      	movs	r2, #4
 800238e:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8002390:	4b11      	ldr	r3, [pc, #68]	; (80023d8 <_ZL14MX_DFSDM1_Initv+0xb4>)
 8002392:	2200      	movs	r2, #0
 8002394:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8002396:	4b10      	ldr	r3, [pc, #64]	; (80023d8 <_ZL14MX_DFSDM1_Initv+0xb4>)
 8002398:	2201      	movs	r2, #1
 800239a:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 800239c:	4b0e      	ldr	r3, [pc, #56]	; (80023d8 <_ZL14MX_DFSDM1_Initv+0xb4>)
 800239e:	2200      	movs	r2, #0
 80023a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 80023a2:	4b0d      	ldr	r3, [pc, #52]	; (80023d8 <_ZL14MX_DFSDM1_Initv+0xb4>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 80023a8:	480b      	ldr	r0, [pc, #44]	; (80023d8 <_ZL14MX_DFSDM1_Initv+0xb4>)
 80023aa:	f007 f9b5 	bl	8009718 <HAL_DFSDM_ChannelInit>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	bf14      	ite	ne
 80023b4:	2301      	movne	r3, #1
 80023b6:	2300      	moveq	r3, #0
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <_ZL14MX_DFSDM1_Initv+0x9e>
  {
    Error_Handler();
 80023be:	f000 fabd 	bl	800293c <Error_Handler>
  }
  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON);
 80023c2:	2201      	movs	r2, #1
 80023c4:	4906      	ldr	r1, [pc, #24]	; (80023e0 <_ZL14MX_DFSDM1_Initv+0xbc>)
 80023c6:	4802      	ldr	r0, [pc, #8]	; (80023d0 <_ZL14MX_DFSDM1_Initv+0xac>)
 80023c8:	f007 fb40 	bl	8009a4c <HAL_DFSDM_FilterConfigRegChannel>
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80023cc:	bf00      	nop
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	20000110 	.word	0x20000110
 80023d4:	40017500 	.word	0x40017500
 80023d8:	20000164 	.word	0x20000164
 80023dc:	40017440 	.word	0x40017440
 80023e0:	00020004 	.word	0x00020004

080023e4 <_ZL15MX_QUADSPI_Initv>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80023e8:	4b14      	ldr	r3, [pc, #80]	; (800243c <_ZL15MX_QUADSPI_Initv+0x58>)
 80023ea:	4a15      	ldr	r2, [pc, #84]	; (8002440 <_ZL15MX_QUADSPI_Initv+0x5c>)
 80023ec:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80023ee:	4b13      	ldr	r3, [pc, #76]	; (800243c <_ZL15MX_QUADSPI_Initv+0x58>)
 80023f0:	22ff      	movs	r2, #255	; 0xff
 80023f2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80023f4:	4b11      	ldr	r3, [pc, #68]	; (800243c <_ZL15MX_QUADSPI_Initv+0x58>)
 80023f6:	2201      	movs	r2, #1
 80023f8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80023fa:	4b10      	ldr	r3, [pc, #64]	; (800243c <_ZL15MX_QUADSPI_Initv+0x58>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8002400:	4b0e      	ldr	r3, [pc, #56]	; (800243c <_ZL15MX_QUADSPI_Initv+0x58>)
 8002402:	2201      	movs	r2, #1
 8002404:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8002406:	4b0d      	ldr	r3, [pc, #52]	; (800243c <_ZL15MX_QUADSPI_Initv+0x58>)
 8002408:	2200      	movs	r2, #0
 800240a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800240c:	4b0b      	ldr	r3, [pc, #44]	; (800243c <_ZL15MX_QUADSPI_Initv+0x58>)
 800240e:	2200      	movs	r2, #0
 8002410:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8002412:	4b0a      	ldr	r3, [pc, #40]	; (800243c <_ZL15MX_QUADSPI_Initv+0x58>)
 8002414:	2200      	movs	r2, #0
 8002416:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8002418:	4b08      	ldr	r3, [pc, #32]	; (800243c <_ZL15MX_QUADSPI_Initv+0x58>)
 800241a:	2200      	movs	r2, #0
 800241c:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800241e:	4807      	ldr	r0, [pc, #28]	; (800243c <_ZL15MX_QUADSPI_Initv+0x58>)
 8002420:	f008 fc74 	bl	800ad0c <HAL_QSPI_Init>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	bf14      	ite	ne
 800242a:	2301      	movne	r3, #1
 800242c:	2300      	moveq	r3, #0
 800242e:	b2db      	uxtb	r3, r3
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <_ZL15MX_QUADSPI_Initv+0x54>
  {
    Error_Handler();
 8002434:	f000 fa82 	bl	800293c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8002438:	bf00      	nop
 800243a:	bd80      	pop	{r7, pc}
 800243c:	200001fc 	.word	0x200001fc
 8002440:	a0001000 	.word	0xa0001000

08002444 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b088      	sub	sp, #32
 8002448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800244a:	f107 0310 	add.w	r3, r7, #16
 800244e:	2200      	movs	r2, #0
 8002450:	601a      	str	r2, [r3, #0]
 8002452:	605a      	str	r2, [r3, #4]
 8002454:	609a      	str	r2, [r3, #8]
 8002456:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002458:	1d3b      	adds	r3, r7, #4
 800245a:	2200      	movs	r2, #0
 800245c:	601a      	str	r2, [r3, #0]
 800245e:	605a      	str	r2, [r3, #4]
 8002460:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002462:	4b25      	ldr	r3, [pc, #148]	; (80024f8 <_ZL12MX_TIM2_Initv+0xb4>)
 8002464:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002468:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800246a:	4b23      	ldr	r3, [pc, #140]	; (80024f8 <_ZL12MX_TIM2_Initv+0xb4>)
 800246c:	2200      	movs	r2, #0
 800246e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002470:	4b21      	ldr	r3, [pc, #132]	; (80024f8 <_ZL12MX_TIM2_Initv+0xb4>)
 8002472:	2200      	movs	r2, #0
 8002474:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 13500;
 8002476:	4b20      	ldr	r3, [pc, #128]	; (80024f8 <_ZL12MX_TIM2_Initv+0xb4>)
 8002478:	f243 42bc 	movw	r2, #13500	; 0x34bc
 800247c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800247e:	4b1e      	ldr	r3, [pc, #120]	; (80024f8 <_ZL12MX_TIM2_Initv+0xb4>)
 8002480:	2200      	movs	r2, #0
 8002482:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002484:	4b1c      	ldr	r3, [pc, #112]	; (80024f8 <_ZL12MX_TIM2_Initv+0xb4>)
 8002486:	2200      	movs	r2, #0
 8002488:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800248a:	481b      	ldr	r0, [pc, #108]	; (80024f8 <_ZL12MX_TIM2_Initv+0xb4>)
 800248c:	f00a f98c 	bl	800c7a8 <HAL_TIM_Base_Init>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	bf14      	ite	ne
 8002496:	2301      	movne	r3, #1
 8002498:	2300      	moveq	r3, #0
 800249a:	b2db      	uxtb	r3, r3
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <_ZL12MX_TIM2_Initv+0x60>
  {
    Error_Handler();
 80024a0:	f000 fa4c 	bl	800293c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024a8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80024aa:	f107 0310 	add.w	r3, r7, #16
 80024ae:	4619      	mov	r1, r3
 80024b0:	4811      	ldr	r0, [pc, #68]	; (80024f8 <_ZL12MX_TIM2_Initv+0xb4>)
 80024b2:	f00a fb69 	bl	800cb88 <HAL_TIM_ConfigClockSource>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	bf14      	ite	ne
 80024bc:	2301      	movne	r3, #1
 80024be:	2300      	moveq	r3, #0
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <_ZL12MX_TIM2_Initv+0x86>
  {
    Error_Handler();
 80024c6:	f000 fa39 	bl	800293c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024ca:	2300      	movs	r3, #0
 80024cc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024ce:	2300      	movs	r3, #0
 80024d0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80024d2:	1d3b      	adds	r3, r7, #4
 80024d4:	4619      	mov	r1, r3
 80024d6:	4808      	ldr	r0, [pc, #32]	; (80024f8 <_ZL12MX_TIM2_Initv+0xb4>)
 80024d8:	f00a fd82 	bl	800cfe0 <HAL_TIMEx_MasterConfigSynchronization>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	bf14      	ite	ne
 80024e2:	2301      	movne	r3, #1
 80024e4:	2300      	moveq	r3, #0
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <_ZL12MX_TIM2_Initv+0xac>
  {
    Error_Handler();
 80024ec:	f000 fa26 	bl	800293c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80024f0:	bf00      	nop
 80024f2:	3720      	adds	r7, #32
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	20000248 	.word	0x20000248

080024fc <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002500:	4b16      	ldr	r3, [pc, #88]	; (800255c <_ZL19MX_USART1_UART_Initv+0x60>)
 8002502:	4a17      	ldr	r2, [pc, #92]	; (8002560 <_ZL19MX_USART1_UART_Initv+0x64>)
 8002504:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002506:	4b15      	ldr	r3, [pc, #84]	; (800255c <_ZL19MX_USART1_UART_Initv+0x60>)
 8002508:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800250c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800250e:	4b13      	ldr	r3, [pc, #76]	; (800255c <_ZL19MX_USART1_UART_Initv+0x60>)
 8002510:	2200      	movs	r2, #0
 8002512:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002514:	4b11      	ldr	r3, [pc, #68]	; (800255c <_ZL19MX_USART1_UART_Initv+0x60>)
 8002516:	2200      	movs	r2, #0
 8002518:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800251a:	4b10      	ldr	r3, [pc, #64]	; (800255c <_ZL19MX_USART1_UART_Initv+0x60>)
 800251c:	2200      	movs	r2, #0
 800251e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002520:	4b0e      	ldr	r3, [pc, #56]	; (800255c <_ZL19MX_USART1_UART_Initv+0x60>)
 8002522:	220c      	movs	r2, #12
 8002524:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002526:	4b0d      	ldr	r3, [pc, #52]	; (800255c <_ZL19MX_USART1_UART_Initv+0x60>)
 8002528:	2200      	movs	r2, #0
 800252a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800252c:	4b0b      	ldr	r3, [pc, #44]	; (800255c <_ZL19MX_USART1_UART_Initv+0x60>)
 800252e:	2200      	movs	r2, #0
 8002530:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002532:	4b0a      	ldr	r3, [pc, #40]	; (800255c <_ZL19MX_USART1_UART_Initv+0x60>)
 8002534:	2200      	movs	r2, #0
 8002536:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002538:	4b08      	ldr	r3, [pc, #32]	; (800255c <_ZL19MX_USART1_UART_Initv+0x60>)
 800253a:	2200      	movs	r2, #0
 800253c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800253e:	4807      	ldr	r0, [pc, #28]	; (800255c <_ZL19MX_USART1_UART_Initv+0x60>)
 8002540:	f00a fdfa 	bl	800d138 <HAL_UART_Init>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	bf14      	ite	ne
 800254a:	2301      	movne	r3, #1
 800254c:	2300      	moveq	r3, #0
 800254e:	b2db      	uxtb	r3, r3
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <_ZL19MX_USART1_UART_Initv+0x5c>
  {
    Error_Handler();
 8002554:	f000 f9f2 	bl	800293c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002558:	bf00      	nop
 800255a:	bd80      	pop	{r7, pc}
 800255c:	20000294 	.word	0x20000294
 8002560:	40011000 	.word	0x40011000

08002564 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800256a:	4b16      	ldr	r3, [pc, #88]	; (80025c4 <_ZL11MX_DMA_Initv+0x60>)
 800256c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256e:	4a15      	ldr	r2, [pc, #84]	; (80025c4 <_ZL11MX_DMA_Initv+0x60>)
 8002570:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002574:	6313      	str	r3, [r2, #48]	; 0x30
 8002576:	4b13      	ldr	r3, [pc, #76]	; (80025c4 <_ZL11MX_DMA_Initv+0x60>)
 8002578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800257e:	607b      	str	r3, [r7, #4]
 8002580:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002582:	4b10      	ldr	r3, [pc, #64]	; (80025c4 <_ZL11MX_DMA_Initv+0x60>)
 8002584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002586:	4a0f      	ldr	r2, [pc, #60]	; (80025c4 <_ZL11MX_DMA_Initv+0x60>)
 8002588:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800258c:	6313      	str	r3, [r2, #48]	; 0x30
 800258e:	4b0d      	ldr	r3, [pc, #52]	; (80025c4 <_ZL11MX_DMA_Initv+0x60>)
 8002590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002592:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002596:	603b      	str	r3, [r7, #0]
 8002598:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800259a:	2200      	movs	r2, #0
 800259c:	2100      	movs	r1, #0
 800259e:	2010      	movs	r0, #16
 80025a0:	f006 fe76 	bl	8009290 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80025a4:	2010      	movs	r0, #16
 80025a6:	f006 fe8f 	bl	80092c8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80025aa:	2200      	movs	r2, #0
 80025ac:	2100      	movs	r1, #0
 80025ae:	2038      	movs	r0, #56	; 0x38
 80025b0:	f006 fe6e 	bl	8009290 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80025b4:	2038      	movs	r0, #56	; 0x38
 80025b6:	f006 fe87 	bl	80092c8 <HAL_NVIC_EnableIRQ>

}
 80025ba:	bf00      	nop
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	40023800 	.word	0x40023800

080025c8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b08c      	sub	sp, #48	; 0x30
 80025cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ce:	f107 031c 	add.w	r3, r7, #28
 80025d2:	2200      	movs	r2, #0
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	605a      	str	r2, [r3, #4]
 80025d8:	609a      	str	r2, [r3, #8]
 80025da:	60da      	str	r2, [r3, #12]
 80025dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80025de:	4b37      	ldr	r3, [pc, #220]	; (80026bc <_ZL12MX_GPIO_Initv+0xf4>)
 80025e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e2:	4a36      	ldr	r2, [pc, #216]	; (80026bc <_ZL12MX_GPIO_Initv+0xf4>)
 80025e4:	f043 0310 	orr.w	r3, r3, #16
 80025e8:	6313      	str	r3, [r2, #48]	; 0x30
 80025ea:	4b34      	ldr	r3, [pc, #208]	; (80026bc <_ZL12MX_GPIO_Initv+0xf4>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ee:	f003 0310 	and.w	r3, r3, #16
 80025f2:	61bb      	str	r3, [r7, #24]
 80025f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025f6:	4b31      	ldr	r3, [pc, #196]	; (80026bc <_ZL12MX_GPIO_Initv+0xf4>)
 80025f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fa:	4a30      	ldr	r2, [pc, #192]	; (80026bc <_ZL12MX_GPIO_Initv+0xf4>)
 80025fc:	f043 0302 	orr.w	r3, r3, #2
 8002600:	6313      	str	r3, [r2, #48]	; 0x30
 8002602:	4b2e      	ldr	r3, [pc, #184]	; (80026bc <_ZL12MX_GPIO_Initv+0xf4>)
 8002604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	617b      	str	r3, [r7, #20]
 800260c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800260e:	4b2b      	ldr	r3, [pc, #172]	; (80026bc <_ZL12MX_GPIO_Initv+0xf4>)
 8002610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002612:	4a2a      	ldr	r2, [pc, #168]	; (80026bc <_ZL12MX_GPIO_Initv+0xf4>)
 8002614:	f043 0301 	orr.w	r3, r3, #1
 8002618:	6313      	str	r3, [r2, #48]	; 0x30
 800261a:	4b28      	ldr	r3, [pc, #160]	; (80026bc <_ZL12MX_GPIO_Initv+0xf4>)
 800261c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	613b      	str	r3, [r7, #16]
 8002624:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002626:	4b25      	ldr	r3, [pc, #148]	; (80026bc <_ZL12MX_GPIO_Initv+0xf4>)
 8002628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262a:	4a24      	ldr	r2, [pc, #144]	; (80026bc <_ZL12MX_GPIO_Initv+0xf4>)
 800262c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002630:	6313      	str	r3, [r2, #48]	; 0x30
 8002632:	4b22      	ldr	r3, [pc, #136]	; (80026bc <_ZL12MX_GPIO_Initv+0xf4>)
 8002634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002636:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800263a:	60fb      	str	r3, [r7, #12]
 800263c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800263e:	4b1f      	ldr	r3, [pc, #124]	; (80026bc <_ZL12MX_GPIO_Initv+0xf4>)
 8002640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002642:	4a1e      	ldr	r2, [pc, #120]	; (80026bc <_ZL12MX_GPIO_Initv+0xf4>)
 8002644:	f043 0304 	orr.w	r3, r3, #4
 8002648:	6313      	str	r3, [r2, #48]	; 0x30
 800264a:	4b1c      	ldr	r3, [pc, #112]	; (80026bc <_ZL12MX_GPIO_Initv+0xf4>)
 800264c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264e:	f003 0304 	and.w	r3, r3, #4
 8002652:	60bb      	str	r3, [r7, #8]
 8002654:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002656:	4b19      	ldr	r3, [pc, #100]	; (80026bc <_ZL12MX_GPIO_Initv+0xf4>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265a:	4a18      	ldr	r2, [pc, #96]	; (80026bc <_ZL12MX_GPIO_Initv+0xf4>)
 800265c:	f043 0308 	orr.w	r3, r3, #8
 8002660:	6313      	str	r3, [r2, #48]	; 0x30
 8002662:	4b16      	ldr	r3, [pc, #88]	; (80026bc <_ZL12MX_GPIO_Initv+0xf4>)
 8002664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002666:	f003 0308 	and.w	r3, r3, #8
 800266a:	607b      	str	r3, [r7, #4]
 800266c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, RED_LED_Pin|GREEN_LED_Pin, GPIO_PIN_RESET);
 800266e:	2200      	movs	r2, #0
 8002670:	f242 0120 	movw	r1, #8224	; 0x2020
 8002674:	4812      	ldr	r0, [pc, #72]	; (80026c0 <_ZL12MX_GPIO_Initv+0xf8>)
 8002676:	f008 fabd 	bl	800abf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RED_LED_Pin GREEN_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin|GREEN_LED_Pin;
 800267a:	f242 0320 	movw	r3, #8224	; 0x2020
 800267e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002680:	2301      	movs	r3, #1
 8002682:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002684:	2300      	movs	r3, #0
 8002686:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002688:	2300      	movs	r3, #0
 800268a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800268c:	f107 031c 	add.w	r3, r7, #28
 8002690:	4619      	mov	r1, r3
 8002692:	480b      	ldr	r0, [pc, #44]	; (80026c0 <_ZL12MX_GPIO_Initv+0xf8>)
 8002694:	f007 ffde 	bl	800a654 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 8002698:	2301      	movs	r3, #1
 800269a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800269c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80026a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a2:	2300      	movs	r3, #0
 80026a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80026a6:	f107 031c 	add.w	r3, r7, #28
 80026aa:	4619      	mov	r1, r3
 80026ac:	4805      	ldr	r0, [pc, #20]	; (80026c4 <_ZL12MX_GPIO_Initv+0xfc>)
 80026ae:	f007 ffd1 	bl	800a654 <HAL_GPIO_Init>

}
 80026b2:	bf00      	nop
 80026b4:	3730      	adds	r7, #48	; 0x30
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	40023800 	.word	0x40023800
 80026c0:	40022400 	.word	0x40022400
 80026c4:	40020000 	.word	0x40020000

080026c8 <BLUE_BUTTON_WAIT>:
//		}
//		break;
//	}
//}
void BLUE_BUTTON_WAIT()
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
	while(HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO_Port, BLUE_BUTTON_Pin)==GPIO_PIN_RESET);
 80026cc:	2101      	movs	r1, #1
 80026ce:	4816      	ldr	r0, [pc, #88]	; (8002728 <BLUE_BUTTON_WAIT+0x60>)
 80026d0:	f008 fa78 	bl	800abc4 <HAL_GPIO_ReadPin>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	bf0c      	ite	eq
 80026da:	2301      	moveq	r3, #1
 80026dc:	2300      	movne	r3, #0
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d000      	beq.n	80026e6 <BLUE_BUTTON_WAIT+0x1e>
 80026e4:	e7f2      	b.n	80026cc <BLUE_BUTTON_WAIT+0x4>
	switch(main_state) {
 80026e6:	4b11      	ldr	r3, [pc, #68]	; (800272c <BLUE_BUTTON_WAIT+0x64>)
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	2b05      	cmp	r3, #5
 80026ee:	d819      	bhi.n	8002724 <BLUE_BUTTON_WAIT+0x5c>
 80026f0:	a201      	add	r2, pc, #4	; (adr r2, 80026f8 <BLUE_BUTTON_WAIT+0x30>)
 80026f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026f6:	bf00      	nop
 80026f8:	08002711 	.word	0x08002711
 80026fc:	08002723 	.word	0x08002723
 8002700:	08002719 	.word	0x08002719
 8002704:	08002723 	.word	0x08002723
 8002708:	08002723 	.word	0x08002723
 800270c:	08002723 	.word	0x08002723
	case READY:
		main_state = RECORDING;
 8002710:	4b06      	ldr	r3, [pc, #24]	; (800272c <BLUE_BUTTON_WAIT+0x64>)
 8002712:	2202      	movs	r2, #2
 8002714:	701a      	strb	r2, [r3, #0]
		break;
 8002716:	e005      	b.n	8002724 <BLUE_BUTTON_WAIT+0x5c>
	case RECORDING:
		audio_recorder->dfsdm_stop_flag = 1;
 8002718:	4b05      	ldr	r3, [pc, #20]	; (8002730 <BLUE_BUTTON_WAIT+0x68>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2201      	movs	r2, #1
 800271e:	731a      	strb	r2, [r3, #12]
		break;
 8002720:	e000      	b.n	8002724 <BLUE_BUTTON_WAIT+0x5c>
	case SETUP:
	case MFCC_TEST:
	case AUDIO_TEST:
	case NN:
		break;
 8002722:	bf00      	nop
	}
}
 8002724:	bf00      	nop
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40020000 	.word	0x40020000
 800272c:	20000318 	.word	0x20000318
 8002730:	20000380 	.word	0x20000380

08002734 <HAL_DAC_ConvHalfCpltCallbackCh1>:

// DAC Circular DMA callback functions
void HAL_DAC_ConvHalfCpltCallbackCh1 (DAC_HandleTypeDef * hdac) {
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
	if (hdac->Instance == DAC1) {
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a17      	ldr	r2, [pc, #92]	; (80027a0 <HAL_DAC_ConvHalfCpltCallbackCh1+0x6c>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d128      	bne.n	8002798 <HAL_DAC_ConvHalfCpltCallbackCh1+0x64>
		audio_player->played_samples += PLAY_HALF_BUFFER_LENGTH;
 8002746:	4b17      	ldr	r3, [pc, #92]	; (80027a4 <HAL_DAC_ConvHalfCpltCallbackCh1+0x70>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	695a      	ldr	r2, [r3, #20]
 800274c:	4b15      	ldr	r3, [pc, #84]	; (80027a4 <HAL_DAC_ConvHalfCpltCallbackCh1+0x70>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f502 627a 	add.w	r2, r2, #4000	; 0xfa0
 8002754:	615a      	str	r2, [r3, #20]
		if (audio_player->played_samples >= MAX_RECORD_LENGTH) {
 8002756:	4b13      	ldr	r3, [pc, #76]	; (80027a4 <HAL_DAC_ConvHalfCpltCallbackCh1+0x70>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	695b      	ldr	r3, [r3, #20]
 800275c:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8002760:	d312      	bcc.n	8002788 <HAL_DAC_ConvHalfCpltCallbackCh1+0x54>
			if (HAL_DAC_Stop_DMA(hdac, DAC_CHANNEL_1) == HAL_ERROR) {
 8002762:	2100      	movs	r1, #0
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f006 feab 	bl	80094c0 <HAL_DAC_Stop_DMA>
 800276a:	4603      	mov	r3, r0
 800276c:	2b01      	cmp	r3, #1
 800276e:	bf0c      	ite	eq
 8002770:	2301      	moveq	r3, #1
 8002772:	2300      	movne	r3, #0
 8002774:	b2db      	uxtb	r3, r3
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <HAL_DAC_ConvHalfCpltCallbackCh1+0x4a>
				Error_Handler();
 800277a:	f000 f8df 	bl	800293c <Error_Handler>
			}
			audio_player->dac_stop_flag = 1;
 800277e:	4b09      	ldr	r3, [pc, #36]	; (80027a4 <HAL_DAC_ConvHalfCpltCallbackCh1+0x70>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2201      	movs	r2, #1
 8002784:	731a      	strb	r2, [r3, #12]
		}
		else {
			audio_player->update_dac_buffer(0, PLAY_HALF_BUFFER_LENGTH);
		}
	}
}
 8002786:	e007      	b.n	8002798 <HAL_DAC_ConvHalfCpltCallbackCh1+0x64>
			audio_player->update_dac_buffer(0, PLAY_HALF_BUFFER_LENGTH);
 8002788:	4b06      	ldr	r3, [pc, #24]	; (80027a4 <HAL_DAC_ConvHalfCpltCallbackCh1+0x70>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8002790:	2100      	movs	r1, #0
 8002792:	4618      	mov	r0, r3
 8002794:	f7ff f89a 	bl	80018cc <_ZN11AudioPlayer17update_dac_bufferEmm>
}
 8002798:	bf00      	nop
 800279a:	3708      	adds	r7, #8
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40007400 	.word	0x40007400
 80027a4:	20000388 	.word	0x20000388

080027a8 <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1 (DAC_HandleTypeDef * hdac) {
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
	audio_player->played_samples += PLAY_HALF_BUFFER_LENGTH;
 80027b0:	4b19      	ldr	r3, [pc, #100]	; (8002818 <HAL_DAC_ConvCpltCallbackCh1+0x70>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	695a      	ldr	r2, [r3, #20]
 80027b6:	4b18      	ldr	r3, [pc, #96]	; (8002818 <HAL_DAC_ConvCpltCallbackCh1+0x70>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f502 627a 	add.w	r2, r2, #4000	; 0xfa0
 80027be:	615a      	str	r2, [r3, #20]
	if (hdac->Instance == DAC1) {
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a15      	ldr	r2, [pc, #84]	; (800281c <HAL_DAC_ConvCpltCallbackCh1+0x74>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d121      	bne.n	800280e <HAL_DAC_ConvCpltCallbackCh1+0x66>
		if (audio_player->played_samples >= MAX_RECORD_LENGTH) {
 80027ca:	4b13      	ldr	r3, [pc, #76]	; (8002818 <HAL_DAC_ConvCpltCallbackCh1+0x70>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	695b      	ldr	r3, [r3, #20]
 80027d0:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80027d4:	d312      	bcc.n	80027fc <HAL_DAC_ConvCpltCallbackCh1+0x54>
			if (HAL_DAC_Stop_DMA(hdac, DAC_CHANNEL_1) == HAL_ERROR) {
 80027d6:	2100      	movs	r1, #0
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f006 fe71 	bl	80094c0 <HAL_DAC_Stop_DMA>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	bf0c      	ite	eq
 80027e4:	2301      	moveq	r3, #1
 80027e6:	2300      	movne	r3, #0
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <HAL_DAC_ConvCpltCallbackCh1+0x4a>
				Error_Handler();
 80027ee:	f000 f8a5 	bl	800293c <Error_Handler>
			}
			audio_player->dac_stop_flag = 1;
 80027f2:	4b09      	ldr	r3, [pc, #36]	; (8002818 <HAL_DAC_ConvCpltCallbackCh1+0x70>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	2201      	movs	r2, #1
 80027f8:	731a      	strb	r2, [r3, #12]
		}
		else {
			audio_player->update_dac_buffer(PLAY_HALF_BUFFER_LENGTH, PLAY_HALF_BUFFER_LENGTH);
		}
	}
}
 80027fa:	e008      	b.n	800280e <HAL_DAC_ConvCpltCallbackCh1+0x66>
			audio_player->update_dac_buffer(PLAY_HALF_BUFFER_LENGTH, PLAY_HALF_BUFFER_LENGTH);
 80027fc:	4b06      	ldr	r3, [pc, #24]	; (8002818 <HAL_DAC_ConvCpltCallbackCh1+0x70>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8002804:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8002808:	4618      	mov	r0, r3
 800280a:	f7ff f85f 	bl	80018cc <_ZN11AudioPlayer17update_dac_bufferEmm>
}
 800280e:	bf00      	nop
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	20000388 	.word	0x20000388
 800281c:	40007400 	.word	0x40007400

08002820 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:

// DFSDM Circular DMA Callback Functions
void HAL_DFSDM_FilterRegConvHalfCpltCallback (DFSDM_Filter_HandleTypeDef *hdfsdm_filter) {
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
	if (hdfsdm_filter == &hdfsdm1_filter0) {
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a13      	ldr	r2, [pc, #76]	; (8002878 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x58>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d11f      	bne.n	8002870 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x50>
		audio_recorder->update_wave_buffer(0, RECORD_HALF_BUFFER_LENGTH);
 8002830:	4b12      	ldr	r3, [pc, #72]	; (800287c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x5c>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8002838:	2100      	movs	r1, #0
 800283a:	4618      	mov	r0, r3
 800283c:	f7ff f93a 	bl	8001ab4 <_ZN13AudioRecorder18update_wave_bufferEmm>
		if (audio_recorder->cur_data->num_of_samples >= MAX_RECORD_LENGTH) {
 8002840:	4b0e      	ldr	r3, [pc, #56]	; (800287c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x5c>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800284c:	d310      	bcc.n	8002870 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x50>
			audio_recorder->dfsdm_stop_flag = 1;
 800284e:	4b0b      	ldr	r3, [pc, #44]	; (800287c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x5c>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2201      	movs	r2, #1
 8002854:	731a      	strb	r2, [r3, #12]
			if (HAL_DFSDM_FilterRegularStop_DMA(hdfsdm_filter) == HAL_ERROR) {
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f007 f9c2 	bl	8009be0 <HAL_DFSDM_FilterRegularStop_DMA>
 800285c:	4603      	mov	r3, r0
 800285e:	2b01      	cmp	r3, #1
 8002860:	bf0c      	ite	eq
 8002862:	2301      	moveq	r3, #1
 8002864:	2300      	movne	r3, #0
 8002866:	b2db      	uxtb	r3, r3
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x50>
				Error_Handler();
 800286c:	f000 f866 	bl	800293c <Error_Handler>
			}
		}
	}
}
 8002870:	bf00      	nop
 8002872:	3708      	adds	r7, #8
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	20000110 	.word	0x20000110
 800287c:	20000380 	.word	0x20000380

08002880 <HAL_DFSDM_FilterRegConvCpltCallback>:

void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter) {
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
	if (hdfsdm_filter == &hdfsdm1_filter0) {
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4a14      	ldr	r2, [pc, #80]	; (80028dc <HAL_DFSDM_FilterRegConvCpltCallback+0x5c>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d120      	bne.n	80028d2 <HAL_DFSDM_FilterRegConvCpltCallback+0x52>
		audio_recorder->update_wave_buffer(RECORD_HALF_BUFFER_LENGTH, RECORD_HALF_BUFFER_LENGTH);
 8002890:	4b13      	ldr	r3, [pc, #76]	; (80028e0 <HAL_DFSDM_FilterRegConvCpltCallback+0x60>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8002898:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff f909 	bl	8001ab4 <_ZN13AudioRecorder18update_wave_bufferEmm>
		if (audio_recorder->cur_data->num_of_samples >= MAX_RECORD_LENGTH) {
 80028a2:	4b0f      	ldr	r3, [pc, #60]	; (80028e0 <HAL_DFSDM_FilterRegConvCpltCallback+0x60>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80028ae:	d310      	bcc.n	80028d2 <HAL_DFSDM_FilterRegConvCpltCallback+0x52>
			audio_recorder->dfsdm_stop_flag = 1;
 80028b0:	4b0b      	ldr	r3, [pc, #44]	; (80028e0 <HAL_DFSDM_FilterRegConvCpltCallback+0x60>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2201      	movs	r2, #1
 80028b6:	731a      	strb	r2, [r3, #12]
			if (HAL_DFSDM_FilterRegularStop_DMA(hdfsdm_filter) == HAL_ERROR) {
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f007 f991 	bl	8009be0 <HAL_DFSDM_FilterRegularStop_DMA>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	bf0c      	ite	eq
 80028c4:	2301      	moveq	r3, #1
 80028c6:	2300      	movne	r3, #0
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <HAL_DFSDM_FilterRegConvCpltCallback+0x52>
				Error_Handler();
 80028ce:	f000 f835 	bl	800293c <Error_Handler>
			}
		}

	}
}
 80028d2:	bf00      	nop
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	20000110 	.word	0x20000110
 80028e0:	20000380 	.word	0x20000380

080028e4 <print>:

void print(const char* txt) {
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
	strcpy(uart_buffer, txt);
 80028ec:	6879      	ldr	r1, [r7, #4]
 80028ee:	4808      	ldr	r0, [pc, #32]	; (8002910 <print+0x2c>)
 80028f0:	f00c fe8c 	bl	800f60c <strcpy>
  	HAL_UART_Transmit(&huart1, (uint8_t *)uart_buffer, strlen(txt), 10);
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f7fd fd03 	bl	8000300 <strlen>
 80028fa:	4603      	mov	r3, r0
 80028fc:	b29a      	uxth	r2, r3
 80028fe:	230a      	movs	r3, #10
 8002900:	4903      	ldr	r1, [pc, #12]	; (8002910 <print+0x2c>)
 8002902:	4804      	ldr	r0, [pc, #16]	; (8002914 <print+0x30>)
 8002904:	f00a fc66 	bl	800d1d4 <HAL_UART_Transmit>
}
 8002908:	bf00      	nop
 800290a:	3708      	adds	r7, #8
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	2000031c 	.word	0x2000031c
 8002914:	20000294 	.word	0x20000294

08002918 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM13) {
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a04      	ldr	r2, [pc, #16]	; (8002938 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d101      	bne.n	800292e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800292a:	f006 fbb5 	bl	8009098 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800292e:	bf00      	nop
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	40001c00 	.word	0x40001c00

0800293c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002940:	b672      	cpsid	i
}
 8002942:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002944:	e7fe      	b.n	8002944 <Error_Handler+0x8>

08002946 <_Z9qspi_readPhmm>:
#include <stdint.h>
#include "stm32f769i_discovery_qspi.h"
#include "main.h"
#include <stdlib.h>

void qspi_read(uint8_t* buffer_ptr, uint32_t address, uint32_t size) {
 8002946:	b580      	push	{r7, lr}
 8002948:	b084      	sub	sp, #16
 800294a:	af00      	add	r7, sp, #0
 800294c:	60f8      	str	r0, [r7, #12]
 800294e:	60b9      	str	r1, [r7, #8]
 8002950:	607a      	str	r2, [r7, #4]
	if (BSP_QSPI_Read(buffer_ptr, address, size) != QSPI_OK)
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	68b9      	ldr	r1, [r7, #8]
 8002956:	68f8      	ldr	r0, [r7, #12]
 8002958:	f000 f8c4 	bl	8002ae4 <BSP_QSPI_Read>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	bf14      	ite	ne
 8002962:	2301      	movne	r3, #1
 8002964:	2300      	moveq	r3, #0
 8002966:	b2db      	uxtb	r3, r3
 8002968:	2b00      	cmp	r3, #0
 800296a:	d001      	beq.n	8002970 <_Z9qspi_readPhmm+0x2a>
		Error_Handler();
 800296c:	f7ff ffe6 	bl	800293c <Error_Handler>
}
 8002970:	bf00      	nop
 8002972:	3710      	adds	r7, #16
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <_Z10qspi_writePhmm>:

void qspi_write(uint8_t* buffer_ptr, uint32_t address, uint32_t size) {
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]
	if(BSP_QSPI_Write(buffer_ptr, address, size) != QSPI_OK){
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	68b9      	ldr	r1, [r7, #8]
 8002988:	68f8      	ldr	r0, [r7, #12]
 800298a:	f000 f8ff 	bl	8002b8c <BSP_QSPI_Write>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	bf14      	ite	ne
 8002994:	2301      	movne	r3, #1
 8002996:	2300      	moveq	r3, #0
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <_Z10qspi_writePhmm+0x2a>
		Error_Handler();
 800299e:	f7ff ffcd 	bl	800293c <Error_Handler>
	}
}
 80029a2:	bf00      	nop
 80029a4:	3710      	adds	r7, #16
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <_Z9qspi_initv>:

void qspi_init() {
 80029aa:	b580      	push	{r7, lr}
 80029ac:	af00      	add	r7, sp, #0
	BSP_QSPI_Init();
 80029ae:	f000 f829 	bl	8002a04 <BSP_QSPI_Init>
}
 80029b2:	bf00      	nop
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <_Z16qspi_erase_blockm>:

void qspi_erase_block(uint32_t block_address) {
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b082      	sub	sp, #8
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
	BSP_QSPI_Erase_Block(block_address);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 f962 	bl	8002c88 <BSP_QSPI_Erase_Block>
}
 80029c4:	bf00      	nop
 80029c6:	3708      	adds	r7, #8
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <_Z17qspi_erase_blocksmm>:

void qspi_erase_blocks(uint32_t start_address, uint32_t n){
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < n; i++){
 80029d6:	2300      	movs	r3, #0
 80029d8:	73fb      	strb	r3, [r7, #15]
 80029da:	7bfb      	ldrb	r3, [r7, #15]
 80029dc:	683a      	ldr	r2, [r7, #0]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d90b      	bls.n	80029fa <_Z17qspi_erase_blocksmm+0x2e>
		qspi_erase_block(start_address + i * MX25L512_SUBSECTOR_SIZE);
 80029e2:	7bfb      	ldrb	r3, [r7, #15]
 80029e4:	031b      	lsls	r3, r3, #12
 80029e6:	461a      	mov	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4413      	add	r3, r2
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7ff ffe2 	bl	80029b6 <_Z16qspi_erase_blockm>
	for(uint8_t i = 0; i < n; i++){
 80029f2:	7bfb      	ldrb	r3, [r7, #15]
 80029f4:	3301      	adds	r3, #1
 80029f6:	73fb      	strb	r3, [r7, #15]
 80029f8:	e7ef      	b.n	80029da <_Z17qspi_erase_blocksmm+0xe>
	}
}
 80029fa:	bf00      	nop
 80029fc:	3710      	adds	r7, #16
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
	...

08002a04 <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
  QSPIHandle.Instance = QUADSPI;
 8002a0a:	4b34      	ldr	r3, [pc, #208]	; (8002adc <BSP_QSPI_Init+0xd8>)
 8002a0c:	4a34      	ldr	r2, [pc, #208]	; (8002ae0 <BSP_QSPI_Init+0xdc>)
 8002a0e:	601a      	str	r2, [r3, #0]
  
  /* Call the DeInit function to reset the driver */
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 8002a10:	4832      	ldr	r0, [pc, #200]	; (8002adc <BSP_QSPI_Init+0xd8>)
 8002a12:	f008 f9f7 	bl	800ae04 <HAL_QSPI_DeInit>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d001      	beq.n	8002a20 <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e059      	b.n	8002ad4 <BSP_QSPI_Init+0xd0>
  }
  
  /* System level initialization */
  BSP_QSPI_MspInit(&QSPIHandle, NULL);
 8002a20:	2100      	movs	r1, #0
 8002a22:	482e      	ldr	r0, [pc, #184]	; (8002adc <BSP_QSPI_Init+0xd8>)
 8002a24:	f000 f974 	bl	8002d10 <BSP_QSPI_MspInit>
  
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) = 216 MHz/(1+1) = 108 Mhz */
  QSPIHandle.Init.ClockPrescaler     = 1;   /* QSPI freq = 216 MHz/(1+1) = 108 Mhz */
 8002a28:	4b2c      	ldr	r3, [pc, #176]	; (8002adc <BSP_QSPI_Init+0xd8>)
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	605a      	str	r2, [r3, #4]
  QSPIHandle.Init.FifoThreshold      = 16;
 8002a2e:	4b2b      	ldr	r3, [pc, #172]	; (8002adc <BSP_QSPI_Init+0xd8>)
 8002a30:	2210      	movs	r2, #16
 8002a32:	609a      	str	r2, [r3, #8]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE; 
 8002a34:	4b29      	ldr	r3, [pc, #164]	; (8002adc <BSP_QSPI_Init+0xd8>)
 8002a36:	2210      	movs	r2, #16
 8002a38:	60da      	str	r2, [r3, #12]
 8002a3a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002a3e:	607b      	str	r3, [r7, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	fa93 f3a3 	rbit	r3, r3
 8002a46:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a48:	683b      	ldr	r3, [r7, #0]
  QSPIHandle.Init.FlashSize          = POSITION_VAL(MX25L512_FLASH_SIZE) - 1;
 8002a4a:	fab3 f383 	clz	r3, r3
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	3b01      	subs	r3, #1
 8002a52:	461a      	mov	r2, r3
 8002a54:	4b21      	ldr	r3, [pc, #132]	; (8002adc <BSP_QSPI_Init+0xd8>)
 8002a56:	611a      	str	r2, [r3, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 30ns for nonRead */
 8002a58:	4b20      	ldr	r3, [pc, #128]	; (8002adc <BSP_QSPI_Init+0xd8>)
 8002a5a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002a5e:	615a      	str	r2, [r3, #20]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8002a60:	4b1e      	ldr	r3, [pc, #120]	; (8002adc <BSP_QSPI_Init+0xd8>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	619a      	str	r2, [r3, #24]
  QSPIHandle.Init.FlashID            = QSPI_FLASH_ID_1;
 8002a66:	4b1d      	ldr	r3, [pc, #116]	; (8002adc <BSP_QSPI_Init+0xd8>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	61da      	str	r2, [r3, #28]
  QSPIHandle.Init.DualFlash          = QSPI_DUALFLASH_DISABLE;
 8002a6c:	4b1b      	ldr	r3, [pc, #108]	; (8002adc <BSP_QSPI_Init+0xd8>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	621a      	str	r2, [r3, #32]
  
  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8002a72:	481a      	ldr	r0, [pc, #104]	; (8002adc <BSP_QSPI_Init+0xd8>)
 8002a74:	f008 f94a 	bl	800ad0c <HAL_QSPI_Init>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <BSP_QSPI_Init+0x7e>
  {
    return QSPI_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e028      	b.n	8002ad4 <BSP_QSPI_Init+0xd0>
  }
  
  /* QSPI memory reset */
  if (QSPI_ResetMemory(&QSPIHandle) != QSPI_OK)
 8002a82:	4816      	ldr	r0, [pc, #88]	; (8002adc <BSP_QSPI_Init+0xd8>)
 8002a84:	f000 fa06 	bl	8002e94 <QSPI_ResetMemory>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <BSP_QSPI_Init+0x8e>
  {
    return QSPI_NOT_SUPPORTED;
 8002a8e:	2304      	movs	r3, #4
 8002a90:	e020      	b.n	8002ad4 <BSP_QSPI_Init+0xd0>
  }
  
  /* Put QSPI memory in QPI mode */
  if( QSPI_EnterMemory_QPI( &QSPIHandle )!=QSPI_OK )
 8002a92:	4812      	ldr	r0, [pc, #72]	; (8002adc <BSP_QSPI_Init+0xd8>)
 8002a94:	f000 fc1d 	bl	80032d2 <QSPI_EnterMemory_QPI>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <BSP_QSPI_Init+0x9e>
  {
    return QSPI_NOT_SUPPORTED;
 8002a9e:	2304      	movs	r3, #4
 8002aa0:	e018      	b.n	8002ad4 <BSP_QSPI_Init+0xd0>
  }
  
  /* Set the QSPI memory in 4-bytes address mode */
  if (QSPI_EnterFourBytesAddress(&QSPIHandle) != QSPI_OK)
 8002aa2:	480e      	ldr	r0, [pc, #56]	; (8002adc <BSP_QSPI_Init+0xd8>)
 8002aa4:	f000 fb1e 	bl	80030e4 <QSPI_EnterFourBytesAddress>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <BSP_QSPI_Init+0xae>
  {
    return QSPI_NOT_SUPPORTED;
 8002aae:	2304      	movs	r3, #4
 8002ab0:	e010      	b.n	8002ad4 <BSP_QSPI_Init+0xd0>
  }
  
  /* Configuration of the dummy cycles on QSPI memory side */
  if (QSPI_DummyCyclesCfg(&QSPIHandle) != QSPI_OK)
 8002ab2:	480a      	ldr	r0, [pc, #40]	; (8002adc <BSP_QSPI_Init+0xd8>)
 8002ab4:	f000 fb51 	bl	800315a <QSPI_DummyCyclesCfg>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <BSP_QSPI_Init+0xbe>
  {
    return QSPI_NOT_SUPPORTED;
 8002abe:	2304      	movs	r3, #4
 8002ac0:	e008      	b.n	8002ad4 <BSP_QSPI_Init+0xd0>
  }
  
  /* Configuration of the Output driver strength on memory side */
  if( QSPI_OutDrvStrengthCfg( &QSPIHandle ) != QSPI_OK )
 8002ac2:	4806      	ldr	r0, [pc, #24]	; (8002adc <BSP_QSPI_Init+0xd8>)
 8002ac4:	f000 fc52 	bl	800336c <QSPI_OutDrvStrengthCfg>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <BSP_QSPI_Init+0xce>
  {
    return QSPI_NOT_SUPPORTED;
 8002ace:	2304      	movs	r3, #4
 8002ad0:	e000      	b.n	8002ad4 <BSP_QSPI_Init+0xd0>
  }
  
  return QSPI_OK;
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3708      	adds	r7, #8
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	200003cc 	.word	0x200003cc
 8002ae0:	a0001000 	.word	0xa0001000

08002ae4 <BSP_QSPI_Read>:
  * @param  ReadAddr: Read start address
  * @param  Size: Size of data to read    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b092      	sub	sp, #72	; 0x48
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the read command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8002af0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002af4:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = QPI_READ_4_BYTE_ADDR_CMD;
 8002af6:	23ec      	movs	r3, #236	; 0xec
 8002af8:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8002afa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002afe:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8002b00:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002b04:	61fb      	str	r3, [r7, #28]
  s_command.Address           = ReadAddr;
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8002b0e:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8002b12:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = MX25L512_DUMMY_CYCLES_READ_QUAD_IO;
 8002b14:	230a      	movs	r3, #10
 8002b16:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = Size;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002b20:	2300      	movs	r3, #0
 8002b22:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002b24:	2300      	movs	r3, #0
 8002b26:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Configure the command */
  if (HAL_QSPI_Command(&QSPIHandle, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002b28:	f107 0310 	add.w	r3, r7, #16
 8002b2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b30:	4619      	mov	r1, r3
 8002b32:	4815      	ldr	r0, [pc, #84]	; (8002b88 <BSP_QSPI_Read+0xa4>)
 8002b34:	f008 f98a 	bl	800ae4c <HAL_QSPI_Command>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <BSP_QSPI_Read+0x5e>
  {
    return QSPI_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e01d      	b.n	8002b7e <BSP_QSPI_Read+0x9a>
  }
  
  /* Set S# timing for Read command */
  MODIFY_REG(QSPIHandle.Instance->DCR, QUADSPI_DCR_CSHT, QSPI_CS_HIGH_TIME_1_CYCLE);
 8002b42:	4b11      	ldr	r3, [pc, #68]	; (8002b88 <BSP_QSPI_Read+0xa4>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	685a      	ldr	r2, [r3, #4]
 8002b48:	4b0f      	ldr	r3, [pc, #60]	; (8002b88 <BSP_QSPI_Read+0xa4>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002b50:	605a      	str	r2, [r3, #4]
  
  /* Reception of the data */
  if (HAL_QSPI_Receive(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b56:	68f9      	ldr	r1, [r7, #12]
 8002b58:	480b      	ldr	r0, [pc, #44]	; (8002b88 <BSP_QSPI_Read+0xa4>)
 8002b5a:	f008 fa67 	bl	800b02c <HAL_QSPI_Receive>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d001      	beq.n	8002b68 <BSP_QSPI_Read+0x84>
  {
    return QSPI_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e00a      	b.n	8002b7e <BSP_QSPI_Read+0x9a>
  }
  
  /* Restore S# timing for nonRead commands */
  MODIFY_REG(QSPIHandle.Instance->DCR, QUADSPI_DCR_CSHT, QSPI_CS_HIGH_TIME_4_CYCLE);
 8002b68:	4b07      	ldr	r3, [pc, #28]	; (8002b88 <BSP_QSPI_Read+0xa4>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b72:	4b05      	ldr	r3, [pc, #20]	; (8002b88 <BSP_QSPI_Read+0xa4>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002b7a:	605a      	str	r2, [r3, #4]

  return QSPI_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3748      	adds	r7, #72	; 0x48
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	200003cc 	.word	0x200003cc

08002b8c <BSP_QSPI_Write>:
  * @param  WriteAddr: Write start address
  * @param  Size: Size of data to write    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b096      	sub	sp, #88	; 0x58
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint32_t end_addr, current_size, current_addr;

  /* Calculation of the size between the write address and the end of the page */
  current_size = MX25L512_PAGE_SIZE - (WriteAddr % MX25L512_PAGE_SIZE);
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002ba0:	657b      	str	r3, [r7, #84]	; 0x54

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 8002ba2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d901      	bls.n	8002bae <BSP_QSPI_Write+0x22>
  {
    current_size = Size;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	657b      	str	r3, [r7, #84]	; 0x54
  }

  /* Initialize the address variables */
  current_addr = WriteAddr;
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	653b      	str	r3, [r7, #80]	; 0x50
  end_addr = WriteAddr + Size;
 8002bb2:	68ba      	ldr	r2, [r7, #8]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Initialize the program command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8002bba:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.Instruction       = QPI_PAGE_PROG_4_BYTE_ADDR_CMD;
 8002bc0:	2312      	movs	r3, #18
 8002bc2:	617b      	str	r3, [r7, #20]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8002bc4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002bc8:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8002bca:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002bce:	623b      	str	r3, [r7, #32]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8002bd4:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8002bd8:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DummyCycles       = 0;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002bde:	2300      	movs	r3, #0
 8002be0:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002be2:	2300      	movs	r3, #0
 8002be4:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002be6:	2300      	movs	r3, #0
 8002be8:	64bb      	str	r3, [r7, #72]	; 0x48
  
  /* Perform the write page by page */
  do
  {
    s_command.Address = current_addr;
 8002bea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bec:	61bb      	str	r3, [r7, #24]
    s_command.NbData  = current_size;
 8002bee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bf0:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Enable write operations */
    if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8002bf2:	4824      	ldr	r0, [pc, #144]	; (8002c84 <BSP_QSPI_Write+0xf8>)
 8002bf4:	f000 fc76 	bl	80034e4 <QSPI_WriteEnable>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <BSP_QSPI_Write+0x76>
    {
      return QSPI_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e03b      	b.n	8002c7a <BSP_QSPI_Write+0xee>
    }
    
    /* Configure the command */
    if (HAL_QSPI_Command(&QSPIHandle, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002c02:	f107 0314 	add.w	r3, r7, #20
 8002c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	481d      	ldr	r0, [pc, #116]	; (8002c84 <BSP_QSPI_Write+0xf8>)
 8002c0e:	f008 f91d 	bl	800ae4c <HAL_QSPI_Command>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d001      	beq.n	8002c1c <BSP_QSPI_Write+0x90>
    {
      return QSPI_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e02e      	b.n	8002c7a <BSP_QSPI_Write+0xee>
    }
    
    /* Transmission of the data */
    if (HAL_QSPI_Transmit(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002c1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c20:	68f9      	ldr	r1, [r7, #12]
 8002c22:	4818      	ldr	r0, [pc, #96]	; (8002c84 <BSP_QSPI_Write+0xf8>)
 8002c24:	f008 f970 	bl	800af08 <HAL_QSPI_Transmit>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <BSP_QSPI_Write+0xa6>
    {
      return QSPI_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e023      	b.n	8002c7a <BSP_QSPI_Write+0xee>
    }
    
    /* Configure automatic polling mode to wait for end of program */  
    if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8002c32:	f241 3188 	movw	r1, #5000	; 0x1388
 8002c36:	4813      	ldr	r0, [pc, #76]	; (8002c84 <BSP_QSPI_Write+0xf8>)
 8002c38:	f000 fc9d 	bl	8003576 <QSPI_AutoPollingMemReady>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <BSP_QSPI_Write+0xba>
    {
      return QSPI_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e019      	b.n	8002c7a <BSP_QSPI_Write+0xee>
    }
    
    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 8002c46:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002c48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c4a:	4413      	add	r3, r2
 8002c4c:	653b      	str	r3, [r7, #80]	; 0x50
    pData += current_size;
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c52:	4413      	add	r3, r2
 8002c54:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + MX25L512_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : MX25L512_PAGE_SIZE;
 8002c56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c58:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002c5c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d203      	bcs.n	8002c6a <BSP_QSPI_Write+0xde>
 8002c62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	e001      	b.n	8002c6e <BSP_QSPI_Write+0xe2>
 8002c6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c6e:	657b      	str	r3, [r7, #84]	; 0x54
  } while (current_addr < end_addr);
 8002c70:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002c72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d3b8      	bcc.n	8002bea <BSP_QSPI_Write+0x5e>
  
  return QSPI_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3758      	adds	r7, #88	; 0x58
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	200003cc 	.word	0x200003cc

08002c88 <BSP_QSPI_Erase_Block>:
  * @brief  Erases the specified block of the QSPI memory. 
  * @param  BlockAddress: Block address to erase  
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Erase_Block(uint32_t BlockAddress)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b090      	sub	sp, #64	; 0x40
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the erase command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8002c90:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c94:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = SUBSECTOR_ERASE_4_BYTE_ADDR_CMD;
 8002c96:	2321      	movs	r3, #33	; 0x21
 8002c98:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8002c9a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002c9e:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8002ca0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002ca4:	617b      	str	r3, [r7, #20]
  s_command.Address           = BlockAddress;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	60fb      	str	r3, [r7, #12]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002caa:	2300      	movs	r3, #0
 8002cac:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8002cc2:	4812      	ldr	r0, [pc, #72]	; (8002d0c <BSP_QSPI_Erase_Block+0x84>)
 8002cc4:	f000 fc0e 	bl	80034e4 <QSPI_WriteEnable>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <BSP_QSPI_Erase_Block+0x4a>
  {
    return QSPI_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e017      	b.n	8002d02 <BSP_QSPI_Erase_Block+0x7a>
  }

  /* Send the command */
  if (HAL_QSPI_Command(&QSPIHandle, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002cd2:	f107 0308 	add.w	r3, r7, #8
 8002cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cda:	4619      	mov	r1, r3
 8002cdc:	480b      	ldr	r0, [pc, #44]	; (8002d0c <BSP_QSPI_Erase_Block+0x84>)
 8002cde:	f008 f8b5 	bl	800ae4c <HAL_QSPI_Command>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d001      	beq.n	8002cec <BSP_QSPI_Erase_Block+0x64>
  {
    return QSPI_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e00a      	b.n	8002d02 <BSP_QSPI_Erase_Block+0x7a>
  }
  
  /* Configure automatic polling mode to wait for end of erase */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, MX25L512_SUBSECTOR_ERASE_MAX_TIME) != QSPI_OK)
 8002cec:	f44f 7148 	mov.w	r1, #800	; 0x320
 8002cf0:	4806      	ldr	r0, [pc, #24]	; (8002d0c <BSP_QSPI_Erase_Block+0x84>)
 8002cf2:	f000 fc40 	bl	8003576 <QSPI_AutoPollingMemReady>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d001      	beq.n	8002d00 <BSP_QSPI_Erase_Block+0x78>
  {
    return QSPI_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e000      	b.n	8002d02 <BSP_QSPI_Erase_Block+0x7a>
  }

  return QSPI_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3740      	adds	r7, #64	; 0x40
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	200003cc 	.word	0x200003cc

08002d10 <BSP_QSPI_MspInit>:
  *           - Peripheral's GPIO Configuration
  *           - NVIC configuration for QSPI interrupt
  * @retval None
  */
__weak void BSP_QSPI_MspInit(QSPI_HandleTypeDef *hqspi, void *Params)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b08e      	sub	sp, #56	; 0x38
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 8002d1a:	4b59      	ldr	r3, [pc, #356]	; (8002e80 <BSP_QSPI_MspInit+0x170>)
 8002d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d1e:	4a58      	ldr	r2, [pc, #352]	; (8002e80 <BSP_QSPI_MspInit+0x170>)
 8002d20:	f043 0302 	orr.w	r3, r3, #2
 8002d24:	6393      	str	r3, [r2, #56]	; 0x38
 8002d26:	4b56      	ldr	r3, [pc, #344]	; (8002e80 <BSP_QSPI_MspInit+0x170>)
 8002d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	623b      	str	r3, [r7, #32]
 8002d30:	6a3b      	ldr	r3, [r7, #32]
  /* Reset the QuadSPI memory interface */
  QSPI_FORCE_RESET();
 8002d32:	4b53      	ldr	r3, [pc, #332]	; (8002e80 <BSP_QSPI_MspInit+0x170>)
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	4a52      	ldr	r2, [pc, #328]	; (8002e80 <BSP_QSPI_MspInit+0x170>)
 8002d38:	f043 0302 	orr.w	r3, r3, #2
 8002d3c:	6193      	str	r3, [r2, #24]
  QSPI_RELEASE_RESET();
 8002d3e:	4b50      	ldr	r3, [pc, #320]	; (8002e80 <BSP_QSPI_MspInit+0x170>)
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	4a4f      	ldr	r2, [pc, #316]	; (8002e80 <BSP_QSPI_MspInit+0x170>)
 8002d44:	f023 0302 	bic.w	r3, r3, #2
 8002d48:	6193      	str	r3, [r2, #24]
  /* Enable GPIO clocks */
  QSPI_CS_GPIO_CLK_ENABLE();
 8002d4a:	4b4d      	ldr	r3, [pc, #308]	; (8002e80 <BSP_QSPI_MspInit+0x170>)
 8002d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4e:	4a4c      	ldr	r2, [pc, #304]	; (8002e80 <BSP_QSPI_MspInit+0x170>)
 8002d50:	f043 0302 	orr.w	r3, r3, #2
 8002d54:	6313      	str	r3, [r2, #48]	; 0x30
 8002d56:	4b4a      	ldr	r3, [pc, #296]	; (8002e80 <BSP_QSPI_MspInit+0x170>)
 8002d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	61fb      	str	r3, [r7, #28]
 8002d60:	69fb      	ldr	r3, [r7, #28]
  QSPI_CLK_GPIO_CLK_ENABLE();
 8002d62:	4b47      	ldr	r3, [pc, #284]	; (8002e80 <BSP_QSPI_MspInit+0x170>)
 8002d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d66:	4a46      	ldr	r2, [pc, #280]	; (8002e80 <BSP_QSPI_MspInit+0x170>)
 8002d68:	f043 0302 	orr.w	r3, r3, #2
 8002d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d6e:	4b44      	ldr	r3, [pc, #272]	; (8002e80 <BSP_QSPI_MspInit+0x170>)
 8002d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	61bb      	str	r3, [r7, #24]
 8002d78:	69bb      	ldr	r3, [r7, #24]
  QSPI_D0_GPIO_CLK_ENABLE();
 8002d7a:	4b41      	ldr	r3, [pc, #260]	; (8002e80 <BSP_QSPI_MspInit+0x170>)
 8002d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7e:	4a40      	ldr	r2, [pc, #256]	; (8002e80 <BSP_QSPI_MspInit+0x170>)
 8002d80:	f043 0304 	orr.w	r3, r3, #4
 8002d84:	6313      	str	r3, [r2, #48]	; 0x30
 8002d86:	4b3e      	ldr	r3, [pc, #248]	; (8002e80 <BSP_QSPI_MspInit+0x170>)
 8002d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8a:	f003 0304 	and.w	r3, r3, #4
 8002d8e:	617b      	str	r3, [r7, #20]
 8002d90:	697b      	ldr	r3, [r7, #20]
  QSPI_D1_GPIO_CLK_ENABLE();
 8002d92:	4b3b      	ldr	r3, [pc, #236]	; (8002e80 <BSP_QSPI_MspInit+0x170>)
 8002d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d96:	4a3a      	ldr	r2, [pc, #232]	; (8002e80 <BSP_QSPI_MspInit+0x170>)
 8002d98:	f043 0304 	orr.w	r3, r3, #4
 8002d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d9e:	4b38      	ldr	r3, [pc, #224]	; (8002e80 <BSP_QSPI_MspInit+0x170>)
 8002da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da2:	f003 0304 	and.w	r3, r3, #4
 8002da6:	613b      	str	r3, [r7, #16]
 8002da8:	693b      	ldr	r3, [r7, #16]
  QSPI_D2_GPIO_CLK_ENABLE();
 8002daa:	4b35      	ldr	r3, [pc, #212]	; (8002e80 <BSP_QSPI_MspInit+0x170>)
 8002dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dae:	4a34      	ldr	r2, [pc, #208]	; (8002e80 <BSP_QSPI_MspInit+0x170>)
 8002db0:	f043 0310 	orr.w	r3, r3, #16
 8002db4:	6313      	str	r3, [r2, #48]	; 0x30
 8002db6:	4b32      	ldr	r3, [pc, #200]	; (8002e80 <BSP_QSPI_MspInit+0x170>)
 8002db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dba:	f003 0310 	and.w	r3, r3, #16
 8002dbe:	60fb      	str	r3, [r7, #12]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
  QSPI_D3_GPIO_CLK_ENABLE();
 8002dc2:	4b2f      	ldr	r3, [pc, #188]	; (8002e80 <BSP_QSPI_MspInit+0x170>)
 8002dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc6:	4a2e      	ldr	r2, [pc, #184]	; (8002e80 <BSP_QSPI_MspInit+0x170>)
 8002dc8:	f043 0308 	orr.w	r3, r3, #8
 8002dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dce:	4b2c      	ldr	r3, [pc, #176]	; (8002e80 <BSP_QSPI_MspInit+0x170>)
 8002dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd2:	f003 0308 	and.w	r3, r3, #8
 8002dd6:	60bb      	str	r3, [r7, #8]
 8002dd8:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CS_PIN;
 8002dda:	2340      	movs	r3, #64	; 0x40
 8002ddc:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = QSPI_CS_PIN_AF;
 8002dde:	230a      	movs	r3, #10
 8002de0:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002de2:	2302      	movs	r3, #2
 8002de4:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002de6:	2301      	movs	r3, #1
 8002de8:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002dea:	2302      	movs	r3, #2
 8002dec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 8002dee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002df2:	4619      	mov	r1, r3
 8002df4:	4823      	ldr	r0, [pc, #140]	; (8002e84 <BSP_QSPI_MspInit+0x174>)
 8002df6:	f007 fc2d 	bl	800a654 <HAL_GPIO_Init>
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 8002dfa:	2304      	movs	r3, #4
 8002dfc:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = QSPI_CLK_PIN_AF;
 8002dfe:	2309      	movs	r3, #9
 8002e00:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002e02:	2300      	movs	r3, #0
 8002e04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8002e06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	481d      	ldr	r0, [pc, #116]	; (8002e84 <BSP_QSPI_MspInit+0x174>)
 8002e0e:	f007 fc21 	bl	800a654 <HAL_GPIO_Init>
  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D0_PIN;
 8002e12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e16:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = QSPI_D0_PIN_AF;
 8002e18:	2309      	movs	r3, #9
 8002e1a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 8002e1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e20:	4619      	mov	r1, r3
 8002e22:	4819      	ldr	r0, [pc, #100]	; (8002e88 <BSP_QSPI_MspInit+0x178>)
 8002e24:	f007 fc16 	bl	800a654 <HAL_GPIO_Init>
  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D1_PIN;
 8002e28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e2c:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = QSPI_D1_PIN_AF;
 8002e2e:	2309      	movs	r3, #9
 8002e30:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D1_GPIO_PORT, &gpio_init_structure);
 8002e32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e36:	4619      	mov	r1, r3
 8002e38:	4813      	ldr	r0, [pc, #76]	; (8002e88 <BSP_QSPI_MspInit+0x178>)
 8002e3a:	f007 fc0b 	bl	800a654 <HAL_GPIO_Init>
  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D2_PIN;
 8002e3e:	2304      	movs	r3, #4
 8002e40:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = QSPI_D2_PIN_AF;
 8002e42:	2309      	movs	r3, #9
 8002e44:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D2_GPIO_PORT, &gpio_init_structure);
 8002e46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	480f      	ldr	r0, [pc, #60]	; (8002e8c <BSP_QSPI_MspInit+0x17c>)
 8002e4e:	f007 fc01 	bl	800a654 <HAL_GPIO_Init>
  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D3_PIN;
 8002e52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e56:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = QSPI_D3_PIN_AF;
 8002e58:	2309      	movs	r3, #9
 8002e5a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D3_GPIO_PORT, &gpio_init_structure);
 8002e5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e60:	4619      	mov	r1, r3
 8002e62:	480b      	ldr	r0, [pc, #44]	; (8002e90 <BSP_QSPI_MspInit+0x180>)
 8002e64:	f007 fbf6 	bl	800a654 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 8002e68:	2200      	movs	r2, #0
 8002e6a:	210f      	movs	r1, #15
 8002e6c:	205c      	movs	r0, #92	; 0x5c
 8002e6e:	f006 fa0f 	bl	8009290 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8002e72:	205c      	movs	r0, #92	; 0x5c
 8002e74:	f006 fa28 	bl	80092c8 <HAL_NVIC_EnableIRQ>
}
 8002e78:	bf00      	nop
 8002e7a:	3738      	adds	r7, #56	; 0x38
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	40023800 	.word	0x40023800
 8002e84:	40020400 	.word	0x40020400
 8002e88:	40020800 	.word	0x40020800
 8002e8c:	40021000 	.word	0x40021000
 8002e90:	40020c00 	.word	0x40020c00

08002e94 <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b098      	sub	sp, #96	; 0x60
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  QSPI_AutoPollingTypeDef  s_config;
  uint8_t                  reg;

  /* Send command RESET command in QPI mode (QUAD I/Os) */
  /* Initialize the reset enable command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8002e9c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002ea0:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction       = RESET_ENABLE_CMD;
 8002ea2:	2366      	movs	r3, #102	; 0x66
 8002ea4:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataMode          = QSPI_DATA_NONE;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DummyCycles       = 0;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	65fb      	str	r3, [r7, #92]	; 0x5c
  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002ec2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ec6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eca:	4619      	mov	r1, r3
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f007 ffbd 	bl	800ae4c <HAL_QSPI_Command>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d001      	beq.n	8002edc <QSPI_ResetMemory+0x48>
  {
    return QSPI_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e0ff      	b.n	80030dc <QSPI_ResetMemory+0x248>
  }
  /* Send the reset memory command */
  s_command.Instruction = RESET_MEMORY_CMD;
 8002edc:	2399      	movs	r3, #153	; 0x99
 8002ede:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002ee0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ee4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ee8:	4619      	mov	r1, r3
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f007 ffae 	bl	800ae4c <HAL_QSPI_Command>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <QSPI_ResetMemory+0x66>
  {
    return QSPI_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e0f0      	b.n	80030dc <QSPI_ResetMemory+0x248>
  }  

  /* Send command RESET command in SPI mode */
  /* Initialize the reset enable command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002efa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002efe:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction       = RESET_ENABLE_CMD;
 8002f00:	2366      	movs	r3, #102	; 0x66
 8002f02:	62bb      	str	r3, [r7, #40]	; 0x28
  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002f04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f007 ff9c 	bl	800ae4c <HAL_QSPI_Command>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <QSPI_ResetMemory+0x8a>
  {
    return QSPI_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e0de      	b.n	80030dc <QSPI_ResetMemory+0x248>
  }
  /* Send the reset memory command */
  s_command.Instruction = RESET_MEMORY_CMD;
 8002f1e:	2399      	movs	r3, #153	; 0x99
 8002f20:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002f22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f007 ff8d 	bl	800ae4c <HAL_QSPI_Command>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d001      	beq.n	8002f3c <QSPI_ResetMemory+0xa8>
  {
    return QSPI_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e0cf      	b.n	80030dc <QSPI_ResetMemory+0x248>
  }

  /* After reset CMD, 1000ms requested if QSPI memory SWReset occured during full chip erase operation */
  HAL_Delay( 1000 );
 8002f3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002f40:	f006 f8ca 	bl	80090d8 <HAL_Delay>

  /* Configure automatic polling mode to wait the WIP bit=0 */
  s_config.Match           = 0;
 8002f44:	2300      	movs	r3, #0
 8002f46:	613b      	str	r3, [r7, #16]
  s_config.Mask            = MX25L512_SR_WIP;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	617b      	str	r3, [r7, #20]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	623b      	str	r3, [r7, #32]
  s_config.StatusBytesSize = 1;
 8002f50:	2301      	movs	r3, #1
 8002f52:	61fb      	str	r3, [r7, #28]
  s_config.Interval        = 0x10;
 8002f54:	2310      	movs	r3, #16
 8002f56:	61bb      	str	r3, [r7, #24]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8002f58:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002f5c:	627b      	str	r3, [r7, #36]	; 0x24

  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8002f5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f62:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction     = READ_STATUS_REG_CMD;
 8002f64:	2305      	movs	r3, #5
 8002f66:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode        = QSPI_DATA_1_LINE;
 8002f68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f6c:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002f6e:	f107 0210 	add.w	r2, r7, #16
 8002f72:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002f76:	f241 3388 	movw	r3, #5000	; 0x1388
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f008 f8f3 	bl	800b166 <HAL_QSPI_AutoPolling>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <QSPI_ResetMemory+0xf6>
  {
    return QSPI_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e0a8      	b.n	80030dc <QSPI_ResetMemory+0x248>
  }

  /* Initialize the reading of status register */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002f8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f8e:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8002f90:	2305      	movs	r3, #5
 8002f92:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8002f94:	2300      	movs	r3, #0
 8002f96:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8002f9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fa0:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DummyCycles       = 0;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.NbData            = 1;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002faa:	2300      	movs	r3, #0
 8002fac:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002fb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002fba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f007 ff43 	bl	800ae4c <HAL_QSPI_Command>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d001      	beq.n	8002fd0 <QSPI_ResetMemory+0x13c>
  {
    return QSPI_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e085      	b.n	80030dc <QSPI_ResetMemory+0x248>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002fd0:	f107 030f 	add.w	r3, r7, #15
 8002fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd8:	4619      	mov	r1, r3
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f008 f826 	bl	800b02c <HAL_QSPI_Receive>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <QSPI_ResetMemory+0x156>
  {
    return QSPI_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e078      	b.n	80030dc <QSPI_ResetMemory+0x248>
  }

  /* Enable write operations, command in 1 bit */
  /* Enable write operations */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002fea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fee:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8002ff0:	2306      	movs	r3, #6
 8002ff2:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataMode          = QSPI_DATA_NONE;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DummyCycles       = 0;
 8003000:	2300      	movs	r3, #0
 8003002:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003004:	2300      	movs	r3, #0
 8003006:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003008:	2300      	movs	r3, #0
 800300a:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800300c:	2300      	movs	r3, #0
 800300e:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003010:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003014:	f241 3288 	movw	r2, #5000	; 0x1388
 8003018:	4619      	mov	r1, r3
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f007 ff16 	bl	800ae4c <HAL_QSPI_Command>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <QSPI_ResetMemory+0x196>
  {
    return QSPI_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e058      	b.n	80030dc <QSPI_ResetMemory+0x248>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  s_config.Match           = MX25L512_SR_WREN;
 800302a:	2302      	movs	r3, #2
 800302c:	613b      	str	r3, [r7, #16]
  s_config.Mask            = MX25L512_SR_WREN;
 800302e:	2302      	movs	r3, #2
 8003030:	617b      	str	r3, [r7, #20]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8003032:	2300      	movs	r3, #0
 8003034:	623b      	str	r3, [r7, #32]
  s_config.StatusBytesSize = 1;
 8003036:	2301      	movs	r3, #1
 8003038:	61fb      	str	r3, [r7, #28]
  s_config.Interval        = 0x10;
 800303a:	2310      	movs	r3, #16
 800303c:	61bb      	str	r3, [r7, #24]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800303e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003042:	627b      	str	r3, [r7, #36]	; 0x24

  s_command.Instruction    = READ_STATUS_REG_CMD;
 8003044:	2305      	movs	r3, #5
 8003046:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode       = QSPI_DATA_1_LINE;
 8003048:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800304c:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800304e:	f107 0210 	add.w	r2, r7, #16
 8003052:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003056:	f241 3388 	movw	r3, #5000	; 0x1388
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f008 f883 	bl	800b166 <HAL_QSPI_AutoPolling>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <QSPI_ResetMemory+0x1d6>
  {
    return QSPI_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e038      	b.n	80030dc <QSPI_ResetMemory+0x248>
  }

  /* Update the configuration register with new dummy cycles */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800306a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800306e:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction       = WRITE_STATUS_CFG_REG_CMD;
 8003070:	2301      	movs	r3, #1
 8003072:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003074:	2300      	movs	r3, #0
 8003076:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003078:	2300      	movs	r3, #0
 800307a:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataMode          = QSPI_DATA_1_LINE;
 800307c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003080:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DummyCycles       = 0;
 8003082:	2300      	movs	r3, #0
 8003084:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.NbData            = 1;
 8003086:	2301      	movs	r3, #1
 8003088:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800308a:	2300      	movs	r3, #0
 800308c:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800308e:	2300      	movs	r3, #0
 8003090:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003092:	2300      	movs	r3, #0
 8003094:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Enable the Quad IO on the QSPI memory (Non-volatile bit) */
  reg |= MX25L512_SR_QUADEN;
 8003096:	7bfb      	ldrb	r3, [r7, #15]
 8003098:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800309c:	b2db      	uxtb	r3, r3
 800309e:	73fb      	strb	r3, [r7, #15]

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80030a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80030a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a8:	4619      	mov	r1, r3
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f007 fece 	bl	800ae4c <HAL_QSPI_Command>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <QSPI_ResetMemory+0x226>
  {
    return QSPI_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e010      	b.n	80030dc <QSPI_ResetMemory+0x248>
  }
  
  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80030ba:	f107 030f 	add.w	r3, r7, #15
 80030be:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c2:	4619      	mov	r1, r3
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f007 ff1f 	bl	800af08 <HAL_QSPI_Transmit>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d001      	beq.n	80030d4 <QSPI_ResetMemory+0x240>
  {
    return QSPI_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e003      	b.n	80030dc <QSPI_ResetMemory+0x248>
  }
  
  /* 40ms  Write Status/Configuration Register Cycle Time */
  HAL_Delay( 40 );  
 80030d4:	2028      	movs	r0, #40	; 0x28
 80030d6:	f005 ffff 	bl	80090d8 <HAL_Delay>

  return QSPI_OK;
 80030da:	2300      	movs	r3, #0
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3760      	adds	r7, #96	; 0x60
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <QSPI_EnterFourBytesAddress>:
  * @brief  This function set the QSPI memory in 4-byte address mode
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_EnterFourBytesAddress(QSPI_HandleTypeDef *hqspi)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b090      	sub	sp, #64	; 0x40
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80030ec:	f44f 7340 	mov.w	r3, #768	; 0x300
 80030f0:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = ENTER_4_BYTE_ADDR_MODE_CMD;
 80030f2:	23b7      	movs	r3, #183	; 0xb7
 80030f4:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80030f6:	2300      	movs	r3, #0
 80030f8:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80030fa:	2300      	movs	r3, #0
 80030fc:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 80030fe:	2300      	movs	r3, #0
 8003100:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8003102:	2300      	movs	r3, #0
 8003104:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003106:	2300      	movs	r3, #0
 8003108:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800310a:	2300      	movs	r3, #0
 800310c:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800310e:	2300      	movs	r3, #0
 8003110:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Enable write operations */
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 f9e6 	bl	80034e4 <QSPI_WriteEnable>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d001      	beq.n	8003122 <QSPI_EnterFourBytesAddress+0x3e>
  {
    return QSPI_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e017      	b.n	8003152 <QSPI_EnterFourBytesAddress+0x6e>
  }

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003122:	f107 0308 	add.w	r3, r7, #8
 8003126:	f241 3288 	movw	r2, #5000	; 0x1388
 800312a:	4619      	mov	r1, r3
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f007 fe8d 	bl	800ae4c <HAL_QSPI_Command>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d001      	beq.n	800313c <QSPI_EnterFourBytesAddress+0x58>
  {
    return QSPI_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e00a      	b.n	8003152 <QSPI_EnterFourBytesAddress+0x6e>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 800313c:	f241 3188 	movw	r1, #5000	; 0x1388
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f000 fa18 	bl	8003576 <QSPI_AutoPollingMemReady>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d001      	beq.n	8003150 <QSPI_EnterFourBytesAddress+0x6c>
  {
    return QSPI_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e000      	b.n	8003152 <QSPI_EnterFourBytesAddress+0x6e>
  }

  return QSPI_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3740      	adds	r7, #64	; 0x40
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <QSPI_DummyCyclesCfg>:
  * @brief  This function configure the dummy cycles on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi)
{
 800315a:	b580      	push	{r7, lr}
 800315c:	b094      	sub	sp, #80	; 0x50
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint8_t reg[2];
  
  /* Initialize the reading of status register */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003162:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003166:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8003168:	2305      	movs	r3, #5
 800316a:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800316c:	2300      	movs	r3, #0
 800316e:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003170:	2300      	movs	r3, #0
 8003172:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003174:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8003178:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 800317a:	2300      	movs	r3, #0
 800317c:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 1;
 800317e:	2301      	movs	r3, #1
 8003180:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003182:	2300      	movs	r3, #0
 8003184:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003186:	2300      	movs	r3, #0
 8003188:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800318a:	2300      	movs	r3, #0
 800318c:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800318e:	f107 0310 	add.w	r3, r7, #16
 8003192:	f241 3288 	movw	r2, #5000	; 0x1388
 8003196:	4619      	mov	r1, r3
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f007 fe57 	bl	800ae4c <HAL_QSPI_Command>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d001      	beq.n	80031a8 <QSPI_DummyCyclesCfg+0x4e>
  {
    return QSPI_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e090      	b.n	80032ca <QSPI_DummyCyclesCfg+0x170>
  }
  
  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80031a8:	f107 030c 	add.w	r3, r7, #12
 80031ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80031b0:	4619      	mov	r1, r3
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f007 ff3a 	bl	800b02c <HAL_QSPI_Receive>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d001      	beq.n	80031c2 <QSPI_DummyCyclesCfg+0x68>
  {
    return QSPI_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e083      	b.n	80032ca <QSPI_DummyCyclesCfg+0x170>
  }
  
  /* Initialize the reading of configuration register */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80031c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80031c6:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = READ_CFG_REG_CMD;
 80031c8:	2315      	movs	r3, #21
 80031ca:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80031cc:	2300      	movs	r3, #0
 80031ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80031d0:	2300      	movs	r3, #0
 80031d2:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80031d4:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80031d8:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 80031da:	2300      	movs	r3, #0
 80031dc:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 1;
 80031de:	2301      	movs	r3, #1
 80031e0:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80031e2:	2300      	movs	r3, #0
 80031e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80031e6:	2300      	movs	r3, #0
 80031e8:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80031ea:	2300      	movs	r3, #0
 80031ec:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80031ee:	f107 0310 	add.w	r3, r7, #16
 80031f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f6:	4619      	mov	r1, r3
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f007 fe27 	bl	800ae4c <HAL_QSPI_Command>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d001      	beq.n	8003208 <QSPI_DummyCyclesCfg+0xae>
  {
    return QSPI_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e060      	b.n	80032ca <QSPI_DummyCyclesCfg+0x170>
  }
  
  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003208:	f107 030c 	add.w	r3, r7, #12
 800320c:	3301      	adds	r3, #1
 800320e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003212:	4619      	mov	r1, r3
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f007 ff09 	bl	800b02c <HAL_QSPI_Receive>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d001      	beq.n	8003224 <QSPI_DummyCyclesCfg+0xca>
  {
    return QSPI_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e052      	b.n	80032ca <QSPI_DummyCyclesCfg+0x170>
  }
  
  /* Enable write operations */
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f000 f95d 	bl	80034e4 <QSPI_WriteEnable>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d001      	beq.n	8003234 <QSPI_DummyCyclesCfg+0xda>
  {
    return QSPI_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e04a      	b.n	80032ca <QSPI_DummyCyclesCfg+0x170>
  }
  
  /* Update the configuration register with new dummy cycles */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003234:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003238:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = WRITE_STATUS_CFG_REG_CMD;
 800323a:	2301      	movs	r3, #1
 800323c:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800323e:	2300      	movs	r3, #0
 8003240:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003242:	2300      	movs	r3, #0
 8003244:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003246:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800324a:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 800324c:	2300      	movs	r3, #0
 800324e:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 2;
 8003250:	2302      	movs	r3, #2
 8003252:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003254:	2300      	movs	r3, #0
 8003256:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003258:	2300      	movs	r3, #0
 800325a:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800325c:	2300      	movs	r3, #0
 800325e:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* MX25L512_DUMMY_CYCLES_READ_QUAD = 3 for 10 cycles in QPI mode */
  MODIFY_REG( reg[1], MX25L512_CR_NB_DUMMY, (MX25L512_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(MX25L512_CR_NB_DUMMY)));
 8003260:	7b7b      	ldrb	r3, [r7, #13]
 8003262:	b25b      	sxtb	r3, r3
 8003264:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003268:	b25a      	sxtb	r2, r3
 800326a:	23c0      	movs	r3, #192	; 0xc0
 800326c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800326e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003270:	fa93 f3a3 	rbit	r3, r3
 8003274:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003276:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003278:	fab3 f383 	clz	r3, r3
 800327c:	b2db      	uxtb	r3, r3
 800327e:	4619      	mov	r1, r3
 8003280:	2303      	movs	r3, #3
 8003282:	408b      	lsls	r3, r1
 8003284:	b25b      	sxtb	r3, r3
 8003286:	4313      	orrs	r3, r2
 8003288:	b25b      	sxtb	r3, r3
 800328a:	b2db      	uxtb	r3, r3
 800328c:	737b      	strb	r3, [r7, #13]
  
  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800328e:	f107 0310 	add.w	r3, r7, #16
 8003292:	f241 3288 	movw	r2, #5000	; 0x1388
 8003296:	4619      	mov	r1, r3
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f007 fdd7 	bl	800ae4c <HAL_QSPI_Command>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d001      	beq.n	80032a8 <QSPI_DummyCyclesCfg+0x14e>
  {
    return QSPI_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e010      	b.n	80032ca <QSPI_DummyCyclesCfg+0x170>
  }
  
  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80032a8:	f107 030c 	add.w	r3, r7, #12
 80032ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80032b0:	4619      	mov	r1, r3
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f007 fe28 	bl	800af08 <HAL_QSPI_Transmit>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <QSPI_DummyCyclesCfg+0x168>
  {
    return QSPI_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e003      	b.n	80032ca <QSPI_DummyCyclesCfg+0x170>
  }
  
  /* 40ms  Write Status/Configuration Register Cycle Time */
  HAL_Delay( 40 );  
 80032c2:	2028      	movs	r0, #40	; 0x28
 80032c4:	f005 ff08 	bl	80090d8 <HAL_Delay>
  
  return QSPI_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3750      	adds	r7, #80	; 0x50
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <QSPI_EnterMemory_QPI>:
  * @brief  This function put QSPI memory in QPI mode (quad I/O).
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_EnterMemory_QPI( QSPI_HandleTypeDef *hqspi )
{
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b096      	sub	sp, #88	; 0x58
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef      s_command;
  QSPI_AutoPollingTypeDef  s_config;

  /* Initialize the QPI enable command */
  /* QSPI memory is supported to be in SPI mode, so CMD on 1 LINE */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;  
 80032da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032de:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = ENTER_QUAD_CMD;
 80032e0:	2335      	movs	r3, #53	; 0x35
 80032e2:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80032e4:	2300      	movs	r3, #0
 80032e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80032e8:	2300      	movs	r3, #0
 80032ea:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 80032ec:	2300      	movs	r3, #0
 80032ee:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 80032f0:	2300      	movs	r3, #0
 80032f2:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80032f4:	2300      	movs	r3, #0
 80032f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80032f8:	2300      	movs	r3, #0
 80032fa:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80032fc:	2300      	movs	r3, #0
 80032fe:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003300:	f107 0320 	add.w	r3, r7, #32
 8003304:	f241 3288 	movw	r2, #5000	; 0x1388
 8003308:	4619      	mov	r1, r3
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f007 fd9e 	bl	800ae4c <HAL_QSPI_Command>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <QSPI_EnterMemory_QPI+0x48>
  {
    return QSPI_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e023      	b.n	8003362 <QSPI_EnterMemory_QPI+0x90>
  }

  /* Configure automatic polling mode to wait the QUADEN bit=1 and WIP bit=0 */
  s_config.Match           = MX25L512_SR_QUADEN;
 800331a:	2340      	movs	r3, #64	; 0x40
 800331c:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = MX25L512_SR_QUADEN|MX25L512_SR_WIP;
 800331e:	2341      	movs	r3, #65	; 0x41
 8003320:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8003322:	2300      	movs	r3, #0
 8003324:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 8003326:	2301      	movs	r3, #1
 8003328:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 800332a:	2310      	movs	r3, #16
 800332c:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800332e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003332:	61fb      	str	r3, [r7, #28]

  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003334:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003338:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = READ_STATUS_REG_CMD;
 800333a:	2305      	movs	r3, #5
 800333c:	623b      	str	r3, [r7, #32]
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800333e:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8003342:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003344:	f107 0208 	add.w	r2, r7, #8
 8003348:	f107 0120 	add.w	r1, r7, #32
 800334c:	f241 3388 	movw	r3, #5000	; 0x1388
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f007 ff08 	bl	800b166 <HAL_QSPI_AutoPolling>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d001      	beq.n	8003360 <QSPI_EnterMemory_QPI+0x8e>
  {
    return QSPI_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e000      	b.n	8003362 <QSPI_EnterMemory_QPI+0x90>
  }

  return QSPI_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3758      	adds	r7, #88	; 0x58
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
	...

0800336c <QSPI_OutDrvStrengthCfg>:
  * @brief  This function configure the Output driver strength on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_OutDrvStrengthCfg( QSPI_HandleTypeDef *hqspi )
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b094      	sub	sp, #80	; 0x50
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint8_t reg[2];

  /* Initialize the reading of status register */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003374:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003378:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = READ_STATUS_REG_CMD;
 800337a:	2305      	movs	r3, #5
 800337c:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800337e:	2300      	movs	r3, #0
 8003380:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003382:	2300      	movs	r3, #0
 8003384:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003386:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800338a:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 800338c:	2300      	movs	r3, #0
 800338e:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 1;
 8003390:	2301      	movs	r3, #1
 8003392:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003394:	2300      	movs	r3, #0
 8003396:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003398:	2300      	movs	r3, #0
 800339a:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800339c:	2300      	movs	r3, #0
 800339e:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80033a0:	f107 0310 	add.w	r3, r7, #16
 80033a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80033a8:	4619      	mov	r1, r3
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f007 fd4e 	bl	800ae4c <HAL_QSPI_Command>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d001      	beq.n	80033ba <QSPI_OutDrvStrengthCfg+0x4e>
  {
    return QSPI_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e08d      	b.n	80034d6 <QSPI_OutDrvStrengthCfg+0x16a>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80033ba:	f107 030c 	add.w	r3, r7, #12
 80033be:	f241 3288 	movw	r2, #5000	; 0x1388
 80033c2:	4619      	mov	r1, r3
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f007 fe31 	bl	800b02c <HAL_QSPI_Receive>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d001      	beq.n	80033d4 <QSPI_OutDrvStrengthCfg+0x68>
  {
    return QSPI_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e080      	b.n	80034d6 <QSPI_OutDrvStrengthCfg+0x16a>
  }

  /* Initialize the reading of configuration register */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80033d4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80033d8:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = READ_CFG_REG_CMD;
 80033da:	2315      	movs	r3, #21
 80033dc:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80033de:	2300      	movs	r3, #0
 80033e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80033e2:	2300      	movs	r3, #0
 80033e4:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80033e6:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80033ea:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 80033ec:	2300      	movs	r3, #0
 80033ee:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 1;
 80033f0:	2301      	movs	r3, #1
 80033f2:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80033f4:	2300      	movs	r3, #0
 80033f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80033f8:	2300      	movs	r3, #0
 80033fa:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80033fc:	2300      	movs	r3, #0
 80033fe:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003400:	f107 0310 	add.w	r3, r7, #16
 8003404:	f241 3288 	movw	r2, #5000	; 0x1388
 8003408:	4619      	mov	r1, r3
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f007 fd1e 	bl	800ae4c <HAL_QSPI_Command>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d001      	beq.n	800341a <QSPI_OutDrvStrengthCfg+0xae>
  {
    return QSPI_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e05d      	b.n	80034d6 <QSPI_OutDrvStrengthCfg+0x16a>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800341a:	f107 030c 	add.w	r3, r7, #12
 800341e:	3301      	adds	r3, #1
 8003420:	f241 3288 	movw	r2, #5000	; 0x1388
 8003424:	4619      	mov	r1, r3
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f007 fe00 	bl	800b02c <HAL_QSPI_Receive>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d001      	beq.n	8003436 <QSPI_OutDrvStrengthCfg+0xca>
  {
    return QSPI_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e04f      	b.n	80034d6 <QSPI_OutDrvStrengthCfg+0x16a>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8003436:	482a      	ldr	r0, [pc, #168]	; (80034e0 <QSPI_OutDrvStrengthCfg+0x174>)
 8003438:	f000 f854 	bl	80034e4 <QSPI_WriteEnable>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <QSPI_OutDrvStrengthCfg+0xda>
  {
    return QSPI_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e047      	b.n	80034d6 <QSPI_OutDrvStrengthCfg+0x16a>
  }

  /* Update the configuration register with new output driver strength */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003446:	f44f 7340 	mov.w	r3, #768	; 0x300
 800344a:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = WRITE_STATUS_CFG_REG_CMD;
 800344c:	2301      	movs	r3, #1
 800344e:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003450:	2300      	movs	r3, #0
 8003452:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8003454:	2300      	movs	r3, #0
 8003456:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003458:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800345c:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 800345e:	2300      	movs	r3, #0
 8003460:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 2;
 8003462:	2302      	movs	r3, #2
 8003464:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003466:	2300      	movs	r3, #0
 8003468:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800346a:	2300      	movs	r3, #0
 800346c:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800346e:	2300      	movs	r3, #0
 8003470:	647b      	str	r3, [r7, #68]	; 0x44

  /* Set Output Strength of the QSPI memory 15 ohms */
  MODIFY_REG( reg[1], MX25L512_CR_ODS, (MX25L512_CR_ODS_15 << POSITION_VAL(MX25L512_CR_ODS)));
 8003472:	7b7b      	ldrb	r3, [r7, #13]
 8003474:	b25b      	sxtb	r3, r3
 8003476:	f023 0307 	bic.w	r3, r3, #7
 800347a:	b25a      	sxtb	r2, r3
 800347c:	2307      	movs	r3, #7
 800347e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003480:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003482:	fa93 f3a3 	rbit	r3, r3
 8003486:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003488:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800348a:	fab3 f383 	clz	r3, r3
 800348e:	b2db      	uxtb	r3, r3
 8003490:	4619      	mov	r1, r3
 8003492:	2306      	movs	r3, #6
 8003494:	408b      	lsls	r3, r1
 8003496:	b25b      	sxtb	r3, r3
 8003498:	4313      	orrs	r3, r2
 800349a:	b25b      	sxtb	r3, r3
 800349c:	b2db      	uxtb	r3, r3
 800349e:	737b      	strb	r3, [r7, #13]

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80034a0:	f107 0310 	add.w	r3, r7, #16
 80034a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a8:	4619      	mov	r1, r3
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f007 fcce 	bl	800ae4c <HAL_QSPI_Command>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d001      	beq.n	80034ba <QSPI_OutDrvStrengthCfg+0x14e>
  {
    return QSPI_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e00d      	b.n	80034d6 <QSPI_OutDrvStrengthCfg+0x16a>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80034ba:	f107 030c 	add.w	r3, r7, #12
 80034be:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c2:	4619      	mov	r1, r3
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f007 fd1f 	bl	800af08 <HAL_QSPI_Transmit>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d001      	beq.n	80034d4 <QSPI_OutDrvStrengthCfg+0x168>
  {
    return QSPI_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e000      	b.n	80034d6 <QSPI_OutDrvStrengthCfg+0x16a>
  }

  return QSPI_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3750      	adds	r7, #80	; 0x50
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	200003cc 	.word	0x200003cc

080034e4 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b096      	sub	sp, #88	; 0x58
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;
  
  /* Enable write operations */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80034ec:	f44f 7340 	mov.w	r3, #768	; 0x300
 80034f0:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = WRITE_ENABLE_CMD;
 80034f2:	2306      	movs	r3, #6
 80034f4:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80034f6:	2300      	movs	r3, #0
 80034f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80034fa:	2300      	movs	r3, #0
 80034fc:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 80034fe:	2300      	movs	r3, #0
 8003500:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 8003502:	2300      	movs	r3, #0
 8003504:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003506:	2300      	movs	r3, #0
 8003508:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800350a:	2300      	movs	r3, #0
 800350c:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800350e:	2300      	movs	r3, #0
 8003510:	657b      	str	r3, [r7, #84]	; 0x54
  
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003512:	f107 0320 	add.w	r3, r7, #32
 8003516:	f241 3288 	movw	r2, #5000	; 0x1388
 800351a:	4619      	mov	r1, r3
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f007 fc95 	bl	800ae4c <HAL_QSPI_Command>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d001      	beq.n	800352c <QSPI_WriteEnable+0x48>
  {
    return QSPI_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e020      	b.n	800356e <QSPI_WriteEnable+0x8a>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  s_config.Match           = MX25L512_SR_WREN;
 800352c:	2302      	movs	r3, #2
 800352e:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = MX25L512_SR_WREN;
 8003530:	2302      	movs	r3, #2
 8003532:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8003534:	2300      	movs	r3, #0
 8003536:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 8003538:	2301      	movs	r3, #1
 800353a:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 800353c:	2310      	movs	r3, #16
 800353e:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8003540:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003544:	61fb      	str	r3, [r7, #28]
  
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8003546:	2305      	movs	r3, #5
 8003548:	623b      	str	r3, [r7, #32]
  s_command.DataMode       = QSPI_DATA_4_LINES;
 800354a:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800354e:	647b      	str	r3, [r7, #68]	; 0x44
  
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003550:	f107 0208 	add.w	r2, r7, #8
 8003554:	f107 0120 	add.w	r1, r7, #32
 8003558:	f241 3388 	movw	r3, #5000	; 0x1388
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f007 fe02 	bl	800b166 <HAL_QSPI_AutoPolling>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d001      	beq.n	800356c <QSPI_WriteEnable+0x88>
  {
    return QSPI_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e000      	b.n	800356e <QSPI_WriteEnable+0x8a>
  }
  
  return QSPI_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3758      	adds	r7, #88	; 0x58
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <QSPI_AutoPollingMemReady>:
  * @param  hqspi: QSPI handle
  * @param  Timeout
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003576:	b580      	push	{r7, lr}
 8003578:	b096      	sub	sp, #88	; 0x58
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
 800357e:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */  
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8003580:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003584:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8003586:	2305      	movs	r3, #5
 8003588:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800358a:	2300      	movs	r3, #0
 800358c:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800358e:	2300      	movs	r3, #0
 8003590:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8003592:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8003596:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 8003598:	2300      	movs	r3, #0
 800359a:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800359c:	2300      	movs	r3, #0
 800359e:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80035a0:	2300      	movs	r3, #0
 80035a2:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80035a4:	2300      	movs	r3, #0
 80035a6:	657b      	str	r3, [r7, #84]	; 0x54

  s_config.Match           = 0;
 80035a8:	2300      	movs	r3, #0
 80035aa:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = MX25L512_SR_WIP;
 80035ac:	2301      	movs	r3, #1
 80035ae:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80035b0:	2300      	movs	r3, #0
 80035b2:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 80035b4:	2301      	movs	r3, #1
 80035b6:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 80035b8:	2310      	movs	r3, #16
 80035ba:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80035bc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80035c0:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 80035c2:	f107 0208 	add.w	r2, r7, #8
 80035c6:	f107 0120 	add.w	r1, r7, #32
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f007 fdca 	bl	800b166 <HAL_QSPI_AutoPolling>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d001      	beq.n	80035dc <QSPI_AutoPollingMemReady+0x66>
  {
    return QSPI_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e000      	b.n	80035de <QSPI_AutoPollingMemReady+0x68>
  }

  return QSPI_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3758      	adds	r7, #88	; 0x58
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
	...

080035e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80035ee:	4b0f      	ldr	r3, [pc, #60]	; (800362c <HAL_MspInit+0x44>)
 80035f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f2:	4a0e      	ldr	r2, [pc, #56]	; (800362c <HAL_MspInit+0x44>)
 80035f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035f8:	6413      	str	r3, [r2, #64]	; 0x40
 80035fa:	4b0c      	ldr	r3, [pc, #48]	; (800362c <HAL_MspInit+0x44>)
 80035fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003602:	607b      	str	r3, [r7, #4]
 8003604:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003606:	4b09      	ldr	r3, [pc, #36]	; (800362c <HAL_MspInit+0x44>)
 8003608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800360a:	4a08      	ldr	r2, [pc, #32]	; (800362c <HAL_MspInit+0x44>)
 800360c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003610:	6453      	str	r3, [r2, #68]	; 0x44
 8003612:	4b06      	ldr	r3, [pc, #24]	; (800362c <HAL_MspInit+0x44>)
 8003614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003616:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800361a:	603b      	str	r3, [r7, #0]
 800361c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800361e:	bf00      	nop
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	40023800 	.word	0x40023800

08003630 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b08a      	sub	sp, #40	; 0x28
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003638:	f107 0314 	add.w	r3, r7, #20
 800363c:	2200      	movs	r2, #0
 800363e:	601a      	str	r2, [r3, #0]
 8003640:	605a      	str	r2, [r3, #4]
 8003642:	609a      	str	r2, [r3, #8]
 8003644:	60da      	str	r2, [r3, #12]
 8003646:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a2d      	ldr	r2, [pc, #180]	; (8003704 <HAL_DAC_MspInit+0xd4>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d154      	bne.n	80036fc <HAL_DAC_MspInit+0xcc>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8003652:	4b2d      	ldr	r3, [pc, #180]	; (8003708 <HAL_DAC_MspInit+0xd8>)
 8003654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003656:	4a2c      	ldr	r2, [pc, #176]	; (8003708 <HAL_DAC_MspInit+0xd8>)
 8003658:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800365c:	6413      	str	r3, [r2, #64]	; 0x40
 800365e:	4b2a      	ldr	r3, [pc, #168]	; (8003708 <HAL_DAC_MspInit+0xd8>)
 8003660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003662:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003666:	613b      	str	r3, [r7, #16]
 8003668:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800366a:	4b27      	ldr	r3, [pc, #156]	; (8003708 <HAL_DAC_MspInit+0xd8>)
 800366c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366e:	4a26      	ldr	r2, [pc, #152]	; (8003708 <HAL_DAC_MspInit+0xd8>)
 8003670:	f043 0301 	orr.w	r3, r3, #1
 8003674:	6313      	str	r3, [r2, #48]	; 0x30
 8003676:	4b24      	ldr	r3, [pc, #144]	; (8003708 <HAL_DAC_MspInit+0xd8>)
 8003678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	60fb      	str	r3, [r7, #12]
 8003680:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003682:	2310      	movs	r3, #16
 8003684:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003686:	2303      	movs	r3, #3
 8003688:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800368a:	2300      	movs	r3, #0
 800368c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800368e:	f107 0314 	add.w	r3, r7, #20
 8003692:	4619      	mov	r1, r3
 8003694:	481d      	ldr	r0, [pc, #116]	; (800370c <HAL_DAC_MspInit+0xdc>)
 8003696:	f006 ffdd 	bl	800a654 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 800369a:	4b1d      	ldr	r3, [pc, #116]	; (8003710 <HAL_DAC_MspInit+0xe0>)
 800369c:	4a1d      	ldr	r2, [pc, #116]	; (8003714 <HAL_DAC_MspInit+0xe4>)
 800369e:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 80036a0:	4b1b      	ldr	r3, [pc, #108]	; (8003710 <HAL_DAC_MspInit+0xe0>)
 80036a2:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80036a6:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80036a8:	4b19      	ldr	r3, [pc, #100]	; (8003710 <HAL_DAC_MspInit+0xe0>)
 80036aa:	2240      	movs	r2, #64	; 0x40
 80036ac:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 80036ae:	4b18      	ldr	r3, [pc, #96]	; (8003710 <HAL_DAC_MspInit+0xe0>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 80036b4:	4b16      	ldr	r3, [pc, #88]	; (8003710 <HAL_DAC_MspInit+0xe0>)
 80036b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036ba:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80036bc:	4b14      	ldr	r3, [pc, #80]	; (8003710 <HAL_DAC_MspInit+0xe0>)
 80036be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036c2:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80036c4:	4b12      	ldr	r3, [pc, #72]	; (8003710 <HAL_DAC_MspInit+0xe0>)
 80036c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80036ca:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 80036cc:	4b10      	ldr	r3, [pc, #64]	; (8003710 <HAL_DAC_MspInit+0xe0>)
 80036ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036d2:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 80036d4:	4b0e      	ldr	r3, [pc, #56]	; (8003710 <HAL_DAC_MspInit+0xe0>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036da:	4b0d      	ldr	r3, [pc, #52]	; (8003710 <HAL_DAC_MspInit+0xe0>)
 80036dc:	2200      	movs	r2, #0
 80036de:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80036e0:	480b      	ldr	r0, [pc, #44]	; (8003710 <HAL_DAC_MspInit+0xe0>)
 80036e2:	f006 fbcf 	bl	8009e84 <HAL_DMA_Init>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d001      	beq.n	80036f0 <HAL_DAC_MspInit+0xc0>
    {
      Error_Handler();
 80036ec:	f7ff f926 	bl	800293c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4a07      	ldr	r2, [pc, #28]	; (8003710 <HAL_DAC_MspInit+0xe0>)
 80036f4:	609a      	str	r2, [r3, #8]
 80036f6:	4a06      	ldr	r2, [pc, #24]	; (8003710 <HAL_DAC_MspInit+0xe0>)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80036fc:	bf00      	nop
 80036fe:	3728      	adds	r7, #40	; 0x28
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	40007400 	.word	0x40007400
 8003708:	40023800 	.word	0x40023800
 800370c:	40020000 	.word	0x40020000
 8003710:	200000b0 	.word	0x200000b0
 8003714:	40026088 	.word	0x40026088

08003718 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b08a      	sub	sp, #40	; 0x28
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003720:	f107 0314 	add.w	r3, r7, #20
 8003724:	2200      	movs	r2, #0
 8003726:	601a      	str	r2, [r3, #0]
 8003728:	605a      	str	r2, [r3, #4]
 800372a:	609a      	str	r2, [r3, #8]
 800372c:	60da      	str	r2, [r3, #12]
 800372e:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8003730:	4b4a      	ldr	r3, [pc, #296]	; (800385c <HAL_DFSDM_FilterMspInit+0x144>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d151      	bne.n	80037dc <HAL_DFSDM_FilterMspInit+0xc4>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8003738:	4b49      	ldr	r3, [pc, #292]	; (8003860 <HAL_DFSDM_FilterMspInit+0x148>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	3301      	adds	r3, #1
 800373e:	4a48      	ldr	r2, [pc, #288]	; (8003860 <HAL_DFSDM_FilterMspInit+0x148>)
 8003740:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8003742:	4b47      	ldr	r3, [pc, #284]	; (8003860 <HAL_DFSDM_FilterMspInit+0x148>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2b01      	cmp	r3, #1
 8003748:	d10b      	bne.n	8003762 <HAL_DFSDM_FilterMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 800374a:	4b46      	ldr	r3, [pc, #280]	; (8003864 <HAL_DFSDM_FilterMspInit+0x14c>)
 800374c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800374e:	4a45      	ldr	r2, [pc, #276]	; (8003864 <HAL_DFSDM_FilterMspInit+0x14c>)
 8003750:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003754:	6453      	str	r3, [r2, #68]	; 0x44
 8003756:	4b43      	ldr	r3, [pc, #268]	; (8003864 <HAL_DFSDM_FilterMspInit+0x14c>)
 8003758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800375a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800375e:	613b      	str	r3, [r7, #16]
 8003760:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003762:	4b40      	ldr	r3, [pc, #256]	; (8003864 <HAL_DFSDM_FilterMspInit+0x14c>)
 8003764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003766:	4a3f      	ldr	r2, [pc, #252]	; (8003864 <HAL_DFSDM_FilterMspInit+0x14c>)
 8003768:	f043 0308 	orr.w	r3, r3, #8
 800376c:	6313      	str	r3, [r2, #48]	; 0x30
 800376e:	4b3d      	ldr	r3, [pc, #244]	; (8003864 <HAL_DFSDM_FilterMspInit+0x14c>)
 8003770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003772:	f003 0308 	and.w	r3, r3, #8
 8003776:	60fb      	str	r3, [r7, #12]
 8003778:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800377a:	4b3a      	ldr	r3, [pc, #232]	; (8003864 <HAL_DFSDM_FilterMspInit+0x14c>)
 800377c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377e:	4a39      	ldr	r2, [pc, #228]	; (8003864 <HAL_DFSDM_FilterMspInit+0x14c>)
 8003780:	f043 0304 	orr.w	r3, r3, #4
 8003784:	6313      	str	r3, [r2, #48]	; 0x30
 8003786:	4b37      	ldr	r3, [pc, #220]	; (8003864 <HAL_DFSDM_FilterMspInit+0x14c>)
 8003788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378a:	f003 0304 	and.w	r3, r3, #4
 800378e:	60bb      	str	r3, [r7, #8]
 8003790:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PD3     ------> DFSDM1_CKOUT
    PC5     ------> DFSDM1_DATIN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003792:	2308      	movs	r3, #8
 8003794:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003796:	2302      	movs	r3, #2
 8003798:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800379a:	2300      	movs	r3, #0
 800379c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800379e:	2300      	movs	r3, #0
 80037a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 80037a2:	2303      	movs	r3, #3
 80037a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80037a6:	f107 0314 	add.w	r3, r7, #20
 80037aa:	4619      	mov	r1, r3
 80037ac:	482e      	ldr	r0, [pc, #184]	; (8003868 <HAL_DFSDM_FilterMspInit+0x150>)
 80037ae:	f006 ff51 	bl	800a654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80037b2:	2320      	movs	r3, #32
 80037b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037b6:	2302      	movs	r3, #2
 80037b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ba:	2300      	movs	r3, #0
 80037bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037be:	2300      	movs	r3, #0
 80037c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 80037c2:	2303      	movs	r3, #3
 80037c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037c6:	f107 0314 	add.w	r3, r7, #20
 80037ca:	4619      	mov	r1, r3
 80037cc:	4827      	ldr	r0, [pc, #156]	; (800386c <HAL_DFSDM_FilterMspInit+0x154>)
 80037ce:	f006 ff41 	bl	800a654 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80037d2:	4b22      	ldr	r3, [pc, #136]	; (800385c <HAL_DFSDM_FilterMspInit+0x144>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	3301      	adds	r3, #1
 80037d8:	4a20      	ldr	r2, [pc, #128]	; (800385c <HAL_DFSDM_FilterMspInit+0x144>)
 80037da:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a23      	ldr	r2, [pc, #140]	; (8003870 <HAL_DFSDM_FilterMspInit+0x158>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d136      	bne.n	8003854 <HAL_DFSDM_FilterMspInit+0x13c>
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 80037e6:	4b23      	ldr	r3, [pc, #140]	; (8003874 <HAL_DFSDM_FilterMspInit+0x15c>)
 80037e8:	4a23      	ldr	r2, [pc, #140]	; (8003878 <HAL_DFSDM_FilterMspInit+0x160>)
 80037ea:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Channel = DMA_CHANNEL_8;
 80037ec:	4b21      	ldr	r3, [pc, #132]	; (8003874 <HAL_DFSDM_FilterMspInit+0x15c>)
 80037ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037f2:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80037f4:	4b1f      	ldr	r3, [pc, #124]	; (8003874 <HAL_DFSDM_FilterMspInit+0x15c>)
 80037f6:	2200      	movs	r2, #0
 80037f8:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 80037fa:	4b1e      	ldr	r3, [pc, #120]	; (8003874 <HAL_DFSDM_FilterMspInit+0x15c>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8003800:	4b1c      	ldr	r3, [pc, #112]	; (8003874 <HAL_DFSDM_FilterMspInit+0x15c>)
 8003802:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003806:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003808:	4b1a      	ldr	r3, [pc, #104]	; (8003874 <HAL_DFSDM_FilterMspInit+0x15c>)
 800380a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800380e:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003810:	4b18      	ldr	r3, [pc, #96]	; (8003874 <HAL_DFSDM_FilterMspInit+0x15c>)
 8003812:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003816:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 8003818:	4b16      	ldr	r3, [pc, #88]	; (8003874 <HAL_DFSDM_FilterMspInit+0x15c>)
 800381a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800381e:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 8003820:	4b14      	ldr	r3, [pc, #80]	; (8003874 <HAL_DFSDM_FilterMspInit+0x15c>)
 8003822:	2200      	movs	r2, #0
 8003824:	621a      	str	r2, [r3, #32]
    hdma_dfsdm1_flt0.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003826:	4b13      	ldr	r3, [pc, #76]	; (8003874 <HAL_DFSDM_FilterMspInit+0x15c>)
 8003828:	2200      	movs	r2, #0
 800382a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 800382c:	4811      	ldr	r0, [pc, #68]	; (8003874 <HAL_DFSDM_FilterMspInit+0x15c>)
 800382e:	f006 fb29 	bl	8009e84 <HAL_DMA_Init>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d001      	beq.n	800383c <HAL_DFSDM_FilterMspInit+0x124>
    {
      Error_Handler();
 8003838:	f7ff f880 	bl	800293c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a0d      	ldr	r2, [pc, #52]	; (8003874 <HAL_DFSDM_FilterMspInit+0x15c>)
 8003840:	62da      	str	r2, [r3, #44]	; 0x2c
 8003842:	4a0c      	ldr	r2, [pc, #48]	; (8003874 <HAL_DFSDM_FilterMspInit+0x15c>)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4a0a      	ldr	r2, [pc, #40]	; (8003874 <HAL_DFSDM_FilterMspInit+0x15c>)
 800384c:	629a      	str	r2, [r3, #40]	; 0x28
 800384e:	4a09      	ldr	r2, [pc, #36]	; (8003874 <HAL_DFSDM_FilterMspInit+0x15c>)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6393      	str	r3, [r2, #56]	; 0x38
  }

}
 8003854:	bf00      	nop
 8003856:	3728      	adds	r7, #40	; 0x28
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	20000394 	.word	0x20000394
 8003860:	20000390 	.word	0x20000390
 8003864:	40023800 	.word	0x40023800
 8003868:	40020c00 	.word	0x40020c00
 800386c:	40020800 	.word	0x40020800
 8003870:	40017500 	.word	0x40017500
 8003874:	2000019c 	.word	0x2000019c
 8003878:	40026410 	.word	0x40026410

0800387c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b08a      	sub	sp, #40	; 0x28
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003884:	f107 0314 	add.w	r3, r7, #20
 8003888:	2200      	movs	r2, #0
 800388a:	601a      	str	r2, [r3, #0]
 800388c:	605a      	str	r2, [r3, #4]
 800388e:	609a      	str	r2, [r3, #8]
 8003890:	60da      	str	r2, [r3, #12]
 8003892:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8003894:	4b2c      	ldr	r3, [pc, #176]	; (8003948 <HAL_DFSDM_ChannelMspInit+0xcc>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d151      	bne.n	8003940 <HAL_DFSDM_ChannelMspInit+0xc4>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 800389c:	4b2b      	ldr	r3, [pc, #172]	; (800394c <HAL_DFSDM_ChannelMspInit+0xd0>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	3301      	adds	r3, #1
 80038a2:	4a2a      	ldr	r2, [pc, #168]	; (800394c <HAL_DFSDM_ChannelMspInit+0xd0>)
 80038a4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80038a6:	4b29      	ldr	r3, [pc, #164]	; (800394c <HAL_DFSDM_ChannelMspInit+0xd0>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d10b      	bne.n	80038c6 <HAL_DFSDM_ChannelMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80038ae:	4b28      	ldr	r3, [pc, #160]	; (8003950 <HAL_DFSDM_ChannelMspInit+0xd4>)
 80038b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b2:	4a27      	ldr	r2, [pc, #156]	; (8003950 <HAL_DFSDM_ChannelMspInit+0xd4>)
 80038b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80038b8:	6453      	str	r3, [r2, #68]	; 0x44
 80038ba:	4b25      	ldr	r3, [pc, #148]	; (8003950 <HAL_DFSDM_ChannelMspInit+0xd4>)
 80038bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038c2:	613b      	str	r3, [r7, #16]
 80038c4:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80038c6:	4b22      	ldr	r3, [pc, #136]	; (8003950 <HAL_DFSDM_ChannelMspInit+0xd4>)
 80038c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ca:	4a21      	ldr	r2, [pc, #132]	; (8003950 <HAL_DFSDM_ChannelMspInit+0xd4>)
 80038cc:	f043 0308 	orr.w	r3, r3, #8
 80038d0:	6313      	str	r3, [r2, #48]	; 0x30
 80038d2:	4b1f      	ldr	r3, [pc, #124]	; (8003950 <HAL_DFSDM_ChannelMspInit+0xd4>)
 80038d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d6:	f003 0308 	and.w	r3, r3, #8
 80038da:	60fb      	str	r3, [r7, #12]
 80038dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038de:	4b1c      	ldr	r3, [pc, #112]	; (8003950 <HAL_DFSDM_ChannelMspInit+0xd4>)
 80038e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e2:	4a1b      	ldr	r2, [pc, #108]	; (8003950 <HAL_DFSDM_ChannelMspInit+0xd4>)
 80038e4:	f043 0304 	orr.w	r3, r3, #4
 80038e8:	6313      	str	r3, [r2, #48]	; 0x30
 80038ea:	4b19      	ldr	r3, [pc, #100]	; (8003950 <HAL_DFSDM_ChannelMspInit+0xd4>)
 80038ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ee:	f003 0304 	and.w	r3, r3, #4
 80038f2:	60bb      	str	r3, [r7, #8]
 80038f4:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PD3     ------> DFSDM1_CKOUT
    PC5     ------> DFSDM1_DATIN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80038f6:	2308      	movs	r3, #8
 80038f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038fa:	2302      	movs	r3, #2
 80038fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038fe:	2300      	movs	r3, #0
 8003900:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003902:	2300      	movs	r3, #0
 8003904:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8003906:	2303      	movs	r3, #3
 8003908:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800390a:	f107 0314 	add.w	r3, r7, #20
 800390e:	4619      	mov	r1, r3
 8003910:	4810      	ldr	r0, [pc, #64]	; (8003954 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8003912:	f006 fe9f 	bl	800a654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003916:	2320      	movs	r3, #32
 8003918:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800391a:	2302      	movs	r3, #2
 800391c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800391e:	2300      	movs	r3, #0
 8003920:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003922:	2300      	movs	r3, #0
 8003924:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8003926:	2303      	movs	r3, #3
 8003928:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800392a:	f107 0314 	add.w	r3, r7, #20
 800392e:	4619      	mov	r1, r3
 8003930:	4809      	ldr	r0, [pc, #36]	; (8003958 <HAL_DFSDM_ChannelMspInit+0xdc>)
 8003932:	f006 fe8f 	bl	800a654 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8003936:	4b04      	ldr	r3, [pc, #16]	; (8003948 <HAL_DFSDM_ChannelMspInit+0xcc>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	3301      	adds	r3, #1
 800393c:	4a02      	ldr	r2, [pc, #8]	; (8003948 <HAL_DFSDM_ChannelMspInit+0xcc>)
 800393e:	6013      	str	r3, [r2, #0]
  }

}
 8003940:	bf00      	nop
 8003942:	3728      	adds	r7, #40	; 0x28
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	20000394 	.word	0x20000394
 800394c:	20000390 	.word	0x20000390
 8003950:	40023800 	.word	0x40023800
 8003954:	40020c00 	.word	0x40020c00
 8003958:	40020800 	.word	0x40020800

0800395c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b08c      	sub	sp, #48	; 0x30
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003964:	f107 031c 	add.w	r3, r7, #28
 8003968:	2200      	movs	r2, #0
 800396a:	601a      	str	r2, [r3, #0]
 800396c:	605a      	str	r2, [r3, #4]
 800396e:	609a      	str	r2, [r3, #8]
 8003970:	60da      	str	r2, [r3, #12]
 8003972:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a4a      	ldr	r2, [pc, #296]	; (8003aa4 <HAL_QSPI_MspInit+0x148>)
 800397a:	4293      	cmp	r3, r2
 800397c:	f040 808e 	bne.w	8003a9c <HAL_QSPI_MspInit+0x140>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8003980:	4b49      	ldr	r3, [pc, #292]	; (8003aa8 <HAL_QSPI_MspInit+0x14c>)
 8003982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003984:	4a48      	ldr	r2, [pc, #288]	; (8003aa8 <HAL_QSPI_MspInit+0x14c>)
 8003986:	f043 0302 	orr.w	r3, r3, #2
 800398a:	6393      	str	r3, [r2, #56]	; 0x38
 800398c:	4b46      	ldr	r3, [pc, #280]	; (8003aa8 <HAL_QSPI_MspInit+0x14c>)
 800398e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003990:	f003 0302 	and.w	r3, r3, #2
 8003994:	61bb      	str	r3, [r7, #24]
 8003996:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003998:	4b43      	ldr	r3, [pc, #268]	; (8003aa8 <HAL_QSPI_MspInit+0x14c>)
 800399a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399c:	4a42      	ldr	r2, [pc, #264]	; (8003aa8 <HAL_QSPI_MspInit+0x14c>)
 800399e:	f043 0310 	orr.w	r3, r3, #16
 80039a2:	6313      	str	r3, [r2, #48]	; 0x30
 80039a4:	4b40      	ldr	r3, [pc, #256]	; (8003aa8 <HAL_QSPI_MspInit+0x14c>)
 80039a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a8:	f003 0310 	and.w	r3, r3, #16
 80039ac:	617b      	str	r3, [r7, #20]
 80039ae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039b0:	4b3d      	ldr	r3, [pc, #244]	; (8003aa8 <HAL_QSPI_MspInit+0x14c>)
 80039b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b4:	4a3c      	ldr	r2, [pc, #240]	; (8003aa8 <HAL_QSPI_MspInit+0x14c>)
 80039b6:	f043 0302 	orr.w	r3, r3, #2
 80039ba:	6313      	str	r3, [r2, #48]	; 0x30
 80039bc:	4b3a      	ldr	r3, [pc, #232]	; (8003aa8 <HAL_QSPI_MspInit+0x14c>)
 80039be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c0:	f003 0302 	and.w	r3, r3, #2
 80039c4:	613b      	str	r3, [r7, #16]
 80039c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039c8:	4b37      	ldr	r3, [pc, #220]	; (8003aa8 <HAL_QSPI_MspInit+0x14c>)
 80039ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039cc:	4a36      	ldr	r2, [pc, #216]	; (8003aa8 <HAL_QSPI_MspInit+0x14c>)
 80039ce:	f043 0304 	orr.w	r3, r3, #4
 80039d2:	6313      	str	r3, [r2, #48]	; 0x30
 80039d4:	4b34      	ldr	r3, [pc, #208]	; (8003aa8 <HAL_QSPI_MspInit+0x14c>)
 80039d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d8:	f003 0304 	and.w	r3, r3, #4
 80039dc:	60fb      	str	r3, [r7, #12]
 80039de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80039e0:	4b31      	ldr	r3, [pc, #196]	; (8003aa8 <HAL_QSPI_MspInit+0x14c>)
 80039e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e4:	4a30      	ldr	r2, [pc, #192]	; (8003aa8 <HAL_QSPI_MspInit+0x14c>)
 80039e6:	f043 0308 	orr.w	r3, r3, #8
 80039ea:	6313      	str	r3, [r2, #48]	; 0x30
 80039ec:	4b2e      	ldr	r3, [pc, #184]	; (8003aa8 <HAL_QSPI_MspInit+0x14c>)
 80039ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f0:	f003 0308 	and.w	r3, r3, #8
 80039f4:	60bb      	str	r3, [r7, #8]
 80039f6:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> QUADSPI_BK1_IO1
    PC9     ------> QUADSPI_BK1_IO0
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80039f8:	2304      	movs	r3, #4
 80039fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039fc:	2302      	movs	r3, #2
 80039fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a00:	2300      	movs	r3, #0
 8003a02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a04:	2303      	movs	r3, #3
 8003a06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003a08:	2309      	movs	r3, #9
 8003a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a0c:	f107 031c 	add.w	r3, r7, #28
 8003a10:	4619      	mov	r1, r3
 8003a12:	4826      	ldr	r0, [pc, #152]	; (8003aac <HAL_QSPI_MspInit+0x150>)
 8003a14:	f006 fe1e 	bl	800a654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003a18:	2340      	movs	r3, #64	; 0x40
 8003a1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a20:	2300      	movs	r3, #0
 8003a22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a24:	2303      	movs	r3, #3
 8003a26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003a28:	230a      	movs	r3, #10
 8003a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a2c:	f107 031c 	add.w	r3, r7, #28
 8003a30:	4619      	mov	r1, r3
 8003a32:	481f      	ldr	r0, [pc, #124]	; (8003ab0 <HAL_QSPI_MspInit+0x154>)
 8003a34:	f006 fe0e 	bl	800a654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8003a38:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003a3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a3e:	2302      	movs	r3, #2
 8003a40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a42:	2300      	movs	r3, #0
 8003a44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a46:	2303      	movs	r3, #3
 8003a48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003a4a:	2309      	movs	r3, #9
 8003a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a4e:	f107 031c 	add.w	r3, r7, #28
 8003a52:	4619      	mov	r1, r3
 8003a54:	4817      	ldr	r0, [pc, #92]	; (8003ab4 <HAL_QSPI_MspInit+0x158>)
 8003a56:	f006 fdfd 	bl	800a654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003a5a:	2304      	movs	r3, #4
 8003a5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a5e:	2302      	movs	r3, #2
 8003a60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a62:	2300      	movs	r3, #0
 8003a64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a66:	2303      	movs	r3, #3
 8003a68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003a6a:	2309      	movs	r3, #9
 8003a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a6e:	f107 031c 	add.w	r3, r7, #28
 8003a72:	4619      	mov	r1, r3
 8003a74:	480e      	ldr	r0, [pc, #56]	; (8003ab0 <HAL_QSPI_MspInit+0x154>)
 8003a76:	f006 fded 	bl	800a654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003a7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a80:	2302      	movs	r3, #2
 8003a82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a84:	2300      	movs	r3, #0
 8003a86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003a8c:	2309      	movs	r3, #9
 8003a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a90:	f107 031c 	add.w	r3, r7, #28
 8003a94:	4619      	mov	r1, r3
 8003a96:	4808      	ldr	r0, [pc, #32]	; (8003ab8 <HAL_QSPI_MspInit+0x15c>)
 8003a98:	f006 fddc 	bl	800a654 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8003a9c:	bf00      	nop
 8003a9e:	3730      	adds	r7, #48	; 0x30
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	a0001000 	.word	0xa0001000
 8003aa8:	40023800 	.word	0x40023800
 8003aac:	40021000 	.word	0x40021000
 8003ab0:	40020400 	.word	0x40020400
 8003ab4:	40020800 	.word	0x40020800
 8003ab8:	40020c00 	.word	0x40020c00

08003abc <HAL_QSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  if(hqspi->Instance==QUADSPI)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a0f      	ldr	r2, [pc, #60]	; (8003b08 <HAL_QSPI_MspDeInit+0x4c>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d117      	bne.n	8003afe <HAL_QSPI_MspDeInit+0x42>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8003ace:	4b0f      	ldr	r3, [pc, #60]	; (8003b0c <HAL_QSPI_MspDeInit+0x50>)
 8003ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad2:	4a0e      	ldr	r2, [pc, #56]	; (8003b0c <HAL_QSPI_MspDeInit+0x50>)
 8003ad4:	f023 0302 	bic.w	r3, r3, #2
 8003ad8:	6393      	str	r3, [r2, #56]	; 0x38
    PC10     ------> QUADSPI_BK1_IO1
    PC9     ------> QUADSPI_BK1_IO0
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2);
 8003ada:	2104      	movs	r1, #4
 8003adc:	480c      	ldr	r0, [pc, #48]	; (8003b10 <HAL_QSPI_MspDeInit+0x54>)
 8003ade:	f006 ff65 	bl	800a9ac <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_2);
 8003ae2:	2144      	movs	r1, #68	; 0x44
 8003ae4:	480b      	ldr	r0, [pc, #44]	; (8003b14 <HAL_QSPI_MspDeInit+0x58>)
 8003ae6:	f006 ff61 	bl	800a9ac <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_10|GPIO_PIN_9);
 8003aea:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003aee:	480a      	ldr	r0, [pc, #40]	; (8003b18 <HAL_QSPI_MspDeInit+0x5c>)
 8003af0:	f006 ff5c 	bl	800a9ac <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_13);
 8003af4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003af8:	4808      	ldr	r0, [pc, #32]	; (8003b1c <HAL_QSPI_MspDeInit+0x60>)
 8003afa:	f006 ff57 	bl	800a9ac <HAL_GPIO_DeInit>
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }

}
 8003afe:	bf00      	nop
 8003b00:	3708      	adds	r7, #8
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	a0001000 	.word	0xa0001000
 8003b0c:	40023800 	.word	0x40023800
 8003b10:	40021000 	.word	0x40021000
 8003b14:	40020400 	.word	0x40020400
 8003b18:	40020800 	.word	0x40020800
 8003b1c:	40020c00 	.word	0x40020c00

08003b20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b30:	d113      	bne.n	8003b5a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003b32:	4b0c      	ldr	r3, [pc, #48]	; (8003b64 <HAL_TIM_Base_MspInit+0x44>)
 8003b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b36:	4a0b      	ldr	r2, [pc, #44]	; (8003b64 <HAL_TIM_Base_MspInit+0x44>)
 8003b38:	f043 0301 	orr.w	r3, r3, #1
 8003b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8003b3e:	4b09      	ldr	r3, [pc, #36]	; (8003b64 <HAL_TIM_Base_MspInit+0x44>)
 8003b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	60fb      	str	r3, [r7, #12]
 8003b48:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	2100      	movs	r1, #0
 8003b4e:	201c      	movs	r0, #28
 8003b50:	f005 fb9e 	bl	8009290 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003b54:	201c      	movs	r0, #28
 8003b56:	f005 fbb7 	bl	80092c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003b5a:	bf00      	nop
 8003b5c:	3710      	adds	r7, #16
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	40023800 	.word	0x40023800

08003b68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b08a      	sub	sp, #40	; 0x28
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b70:	f107 0314 	add.w	r3, r7, #20
 8003b74:	2200      	movs	r2, #0
 8003b76:	601a      	str	r2, [r3, #0]
 8003b78:	605a      	str	r2, [r3, #4]
 8003b7a:	609a      	str	r2, [r3, #8]
 8003b7c:	60da      	str	r2, [r3, #12]
 8003b7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a25      	ldr	r2, [pc, #148]	; (8003c1c <HAL_UART_MspInit+0xb4>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d144      	bne.n	8003c14 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003b8a:	4b25      	ldr	r3, [pc, #148]	; (8003c20 <HAL_UART_MspInit+0xb8>)
 8003b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b8e:	4a24      	ldr	r2, [pc, #144]	; (8003c20 <HAL_UART_MspInit+0xb8>)
 8003b90:	f043 0310 	orr.w	r3, r3, #16
 8003b94:	6453      	str	r3, [r2, #68]	; 0x44
 8003b96:	4b22      	ldr	r3, [pc, #136]	; (8003c20 <HAL_UART_MspInit+0xb8>)
 8003b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b9a:	f003 0310 	and.w	r3, r3, #16
 8003b9e:	613b      	str	r3, [r7, #16]
 8003ba0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ba2:	4b1f      	ldr	r3, [pc, #124]	; (8003c20 <HAL_UART_MspInit+0xb8>)
 8003ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba6:	4a1e      	ldr	r2, [pc, #120]	; (8003c20 <HAL_UART_MspInit+0xb8>)
 8003ba8:	f043 0302 	orr.w	r3, r3, #2
 8003bac:	6313      	str	r3, [r2, #48]	; 0x30
 8003bae:	4b1c      	ldr	r3, [pc, #112]	; (8003c20 <HAL_UART_MspInit+0xb8>)
 8003bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	60fb      	str	r3, [r7, #12]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bba:	4b19      	ldr	r3, [pc, #100]	; (8003c20 <HAL_UART_MspInit+0xb8>)
 8003bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bbe:	4a18      	ldr	r2, [pc, #96]	; (8003c20 <HAL_UART_MspInit+0xb8>)
 8003bc0:	f043 0301 	orr.w	r3, r3, #1
 8003bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8003bc6:	4b16      	ldr	r3, [pc, #88]	; (8003c20 <HAL_UART_MspInit+0xb8>)
 8003bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	60bb      	str	r3, [r7, #8]
 8003bd0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003bd2:	2380      	movs	r3, #128	; 0x80
 8003bd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bd6:	2302      	movs	r3, #2
 8003bd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bde:	2303      	movs	r3, #3
 8003be0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003be2:	2307      	movs	r3, #7
 8003be4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003be6:	f107 0314 	add.w	r3, r7, #20
 8003bea:	4619      	mov	r1, r3
 8003bec:	480d      	ldr	r0, [pc, #52]	; (8003c24 <HAL_UART_MspInit+0xbc>)
 8003bee:	f006 fd31 	bl	800a654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003bf2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003bf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bf8:	2302      	movs	r3, #2
 8003bfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c00:	2303      	movs	r3, #3
 8003c02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003c04:	2307      	movs	r3, #7
 8003c06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c08:	f107 0314 	add.w	r3, r7, #20
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	4806      	ldr	r0, [pc, #24]	; (8003c28 <HAL_UART_MspInit+0xc0>)
 8003c10:	f006 fd20 	bl	800a654 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003c14:	bf00      	nop
 8003c16:	3728      	adds	r7, #40	; 0x28
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	40011000 	.word	0x40011000
 8003c20:	40023800 	.word	0x40023800
 8003c24:	40020400 	.word	0x40020400
 8003c28:	40020000 	.word	0x40020000

08003c2c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b08c      	sub	sp, #48	; 0x30
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003c34:	2300      	movs	r3, #0
 8003c36:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM13 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority ,0);
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	6879      	ldr	r1, [r7, #4]
 8003c40:	202c      	movs	r0, #44	; 0x2c
 8003c42:	f005 fb25 	bl	8009290 <HAL_NVIC_SetPriority>

  /* Enable the TIM13 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8003c46:	202c      	movs	r0, #44	; 0x2c
 8003c48:	f005 fb3e 	bl	80092c8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM13 clock */
  __HAL_RCC_TIM13_CLK_ENABLE();
 8003c4c:	4b1f      	ldr	r3, [pc, #124]	; (8003ccc <HAL_InitTick+0xa0>)
 8003c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c50:	4a1e      	ldr	r2, [pc, #120]	; (8003ccc <HAL_InitTick+0xa0>)
 8003c52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c56:	6413      	str	r3, [r2, #64]	; 0x40
 8003c58:	4b1c      	ldr	r3, [pc, #112]	; (8003ccc <HAL_InitTick+0xa0>)
 8003c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c60:	60fb      	str	r3, [r7, #12]
 8003c62:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003c64:	f107 0210 	add.w	r2, r7, #16
 8003c68:	f107 0314 	add.w	r3, r7, #20
 8003c6c:	4611      	mov	r1, r2
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f008 f940 	bl	800bef4 <HAL_RCC_GetClockConfig>

  /* Compute TIM13 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003c74:	f008 f916 	bl	800bea4 <HAL_RCC_GetPCLK1Freq>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	005b      	lsls	r3, r3, #1
 8003c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM13 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c80:	4a13      	ldr	r2, [pc, #76]	; (8003cd0 <HAL_InitTick+0xa4>)
 8003c82:	fba2 2303 	umull	r2, r3, r2, r3
 8003c86:	0c9b      	lsrs	r3, r3, #18
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM13 */
  htim13.Instance = TIM13;
 8003c8c:	4b11      	ldr	r3, [pc, #68]	; (8003cd4 <HAL_InitTick+0xa8>)
 8003c8e:	4a12      	ldr	r2, [pc, #72]	; (8003cd8 <HAL_InitTick+0xac>)
 8003c90:	601a      	str	r2, [r3, #0]
  + Period = [(TIM13CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim13.Init.Period = (1000000U / 1000U) - 1U;
 8003c92:	4b10      	ldr	r3, [pc, #64]	; (8003cd4 <HAL_InitTick+0xa8>)
 8003c94:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003c98:	60da      	str	r2, [r3, #12]
  htim13.Init.Prescaler = uwPrescalerValue;
 8003c9a:	4a0e      	ldr	r2, [pc, #56]	; (8003cd4 <HAL_InitTick+0xa8>)
 8003c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c9e:	6053      	str	r3, [r2, #4]
  htim13.Init.ClockDivision = 0;
 8003ca0:	4b0c      	ldr	r3, [pc, #48]	; (8003cd4 <HAL_InitTick+0xa8>)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	611a      	str	r2, [r3, #16]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ca6:	4b0b      	ldr	r3, [pc, #44]	; (8003cd4 <HAL_InitTick+0xa8>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim13) == HAL_OK)
 8003cac:	4809      	ldr	r0, [pc, #36]	; (8003cd4 <HAL_InitTick+0xa8>)
 8003cae:	f008 fd7b 	bl	800c7a8 <HAL_TIM_Base_Init>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d104      	bne.n	8003cc2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim13);
 8003cb8:	4806      	ldr	r0, [pc, #24]	; (8003cd4 <HAL_InitTick+0xa8>)
 8003cba:	f008 fdcd 	bl	800c858 <HAL_TIM_Base_Start_IT>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	e000      	b.n	8003cc4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3730      	adds	r7, #48	; 0x30
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	40023800 	.word	0x40023800
 8003cd0:	431bde83 	.word	0x431bde83
 8003cd4:	20000418 	.word	0x20000418
 8003cd8:	40001c00 	.word	0x40001c00

08003cdc <HAL_SuspendTick>:
  * @note   Disable the tick increment by disabling TIM13 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_SuspendTick(void)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	af00      	add	r7, sp, #0
  /* Disable TIM13 update Interrupt */
  __HAL_TIM_DISABLE_IT(&htim13, TIM_IT_UPDATE);
 8003ce0:	4b06      	ldr	r3, [pc, #24]	; (8003cfc <HAL_SuspendTick+0x20>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68da      	ldr	r2, [r3, #12]
 8003ce6:	4b05      	ldr	r3, [pc, #20]	; (8003cfc <HAL_SuspendTick+0x20>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f022 0201 	bic.w	r2, r2, #1
 8003cee:	60da      	str	r2, [r3, #12]
}
 8003cf0:	bf00      	nop
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	20000418 	.word	0x20000418

08003d00 <HAL_ResumeTick>:
  * @note   Enable the tick increment by Enabling TIM13 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_ResumeTick(void)
{
 8003d00:	b480      	push	{r7}
 8003d02:	af00      	add	r7, sp, #0
  /* Enable TIM13 Update interrupt */
  __HAL_TIM_ENABLE_IT(&htim13, TIM_IT_UPDATE);
 8003d04:	4b06      	ldr	r3, [pc, #24]	; (8003d20 <HAL_ResumeTick+0x20>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68da      	ldr	r2, [r3, #12]
 8003d0a:	4b05      	ldr	r3, [pc, #20]	; (8003d20 <HAL_ResumeTick+0x20>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f042 0201 	orr.w	r2, r2, #1
 8003d12:	60da      	str	r2, [r3, #12]
}
 8003d14:	bf00      	nop
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	20000418 	.word	0x20000418

08003d24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d24:	b480      	push	{r7}
 8003d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003d28:	e7fe      	b.n	8003d28 <NMI_Handler+0x4>

08003d2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d2a:	b480      	push	{r7}
 8003d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d2e:	e7fe      	b.n	8003d2e <HardFault_Handler+0x4>

08003d30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d30:	b480      	push	{r7}
 8003d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d34:	e7fe      	b.n	8003d34 <MemManage_Handler+0x4>

08003d36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d36:	b480      	push	{r7}
 8003d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d3a:	e7fe      	b.n	8003d3a <BusFault_Handler+0x4>

08003d3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d40:	e7fe      	b.n	8003d40 <UsageFault_Handler+0x4>

08003d42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d42:	b480      	push	{r7}
 8003d44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d46:	bf00      	nop
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d50:	b480      	push	{r7}
 8003d52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d54:	bf00      	nop
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr

08003d5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d5e:	b480      	push	{r7}
 8003d60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d62:	bf00      	nop
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d70:	bf00      	nop
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
	...

08003d7c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8003d80:	4802      	ldr	r0, [pc, #8]	; (8003d8c <DMA1_Stream5_IRQHandler+0x10>)
 8003d82:	f006 f9fd 	bl	800a180 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003d86:	bf00      	nop
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	200000b0 	.word	0x200000b0

08003d90 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003d94:	4802      	ldr	r0, [pc, #8]	; (8003da0 <TIM2_IRQHandler+0x10>)
 8003d96:	f008 fdd7 	bl	800c948 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003d9a:	bf00      	nop
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	20000248 	.word	0x20000248

08003da4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8003da8:	4802      	ldr	r0, [pc, #8]	; (8003db4 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8003daa:	f008 fdcd 	bl	800c948 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8003dae:	bf00      	nop
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	20000418 	.word	0x20000418

08003db8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8003dbc:	4802      	ldr	r0, [pc, #8]	; (8003dc8 <DMA2_Stream0_IRQHandler+0x10>)
 8003dbe:	f006 f9df 	bl	800a180 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003dc2:	bf00      	nop
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	2000019c 	.word	0x2000019c

08003dcc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	af00      	add	r7, sp, #0
	return 1;
 8003dd0:	2301      	movs	r3, #1
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <_kill>:

int _kill(int pid, int sig)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003de6:	f00b fa79 	bl	800f2dc <__errno>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2216      	movs	r2, #22
 8003dee:	601a      	str	r2, [r3, #0]
	return -1;
 8003df0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3708      	adds	r7, #8
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <_exit>:

void _exit (int status)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003e04:	f04f 31ff 	mov.w	r1, #4294967295
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f7ff ffe7 	bl	8003ddc <_kill>
	while (1) {}		/* Make sure we hang here */
 8003e0e:	e7fe      	b.n	8003e0e <_exit+0x12>

08003e10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b086      	sub	sp, #24
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e18:	4a14      	ldr	r2, [pc, #80]	; (8003e6c <_sbrk+0x5c>)
 8003e1a:	4b15      	ldr	r3, [pc, #84]	; (8003e70 <_sbrk+0x60>)
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e24:	4b13      	ldr	r3, [pc, #76]	; (8003e74 <_sbrk+0x64>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d102      	bne.n	8003e32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e2c:	4b11      	ldr	r3, [pc, #68]	; (8003e74 <_sbrk+0x64>)
 8003e2e:	4a12      	ldr	r2, [pc, #72]	; (8003e78 <_sbrk+0x68>)
 8003e30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e32:	4b10      	ldr	r3, [pc, #64]	; (8003e74 <_sbrk+0x64>)
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4413      	add	r3, r2
 8003e3a:	693a      	ldr	r2, [r7, #16]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d207      	bcs.n	8003e50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e40:	f00b fa4c 	bl	800f2dc <__errno>
 8003e44:	4603      	mov	r3, r0
 8003e46:	220c      	movs	r2, #12
 8003e48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e4e:	e009      	b.n	8003e64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e50:	4b08      	ldr	r3, [pc, #32]	; (8003e74 <_sbrk+0x64>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e56:	4b07      	ldr	r3, [pc, #28]	; (8003e74 <_sbrk+0x64>)
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	4a05      	ldr	r2, [pc, #20]	; (8003e74 <_sbrk+0x64>)
 8003e60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003e62:	68fb      	ldr	r3, [r7, #12]
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3718      	adds	r7, #24
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	20080000 	.word	0x20080000
 8003e70:	00000400 	.word	0x00000400
 8003e74:	20000398 	.word	0x20000398
 8003e78:	20000478 	.word	0x20000478

08003e7c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003e80:	4b06      	ldr	r3, [pc, #24]	; (8003e9c <SystemInit+0x20>)
 8003e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e86:	4a05      	ldr	r2, [pc, #20]	; (8003e9c <SystemInit+0x20>)
 8003e88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003e90:	bf00      	nop
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
 8003e9a:	bf00      	nop
 8003e9c:	e000ed00 	.word	0xe000ed00

08003ea0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003ea0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ed8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003ea4:	480d      	ldr	r0, [pc, #52]	; (8003edc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003ea6:	490e      	ldr	r1, [pc, #56]	; (8003ee0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003ea8:	4a0e      	ldr	r2, [pc, #56]	; (8003ee4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003eaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003eac:	e002      	b.n	8003eb4 <LoopCopyDataInit>

08003eae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003eae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003eb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003eb2:	3304      	adds	r3, #4

08003eb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003eb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003eb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003eb8:	d3f9      	bcc.n	8003eae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003eba:	4a0b      	ldr	r2, [pc, #44]	; (8003ee8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003ebc:	4c0b      	ldr	r4, [pc, #44]	; (8003eec <LoopFillZerobss+0x26>)
  movs r3, #0
 8003ebe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ec0:	e001      	b.n	8003ec6 <LoopFillZerobss>

08003ec2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ec2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ec4:	3204      	adds	r2, #4

08003ec6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ec6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ec8:	d3fb      	bcc.n	8003ec2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003eca:	f7ff ffd7 	bl	8003e7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003ece:	f00b fa0b 	bl	800f2e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003ed2:	f7fd ff2d 	bl	8001d30 <main>
  bx  lr    
 8003ed6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003ed8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8003edc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ee0:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8003ee4:	0802aefc 	.word	0x0802aefc
  ldr r2, =_sbss
 8003ee8:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8003eec:	20000478 	.word	0x20000478

08003ef0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ef0:	e7fe      	b.n	8003ef0 <ADC_IRQHandler>

08003ef2 <arm_copy_q7>:

void arm_copy_q7(
  q7_t * pSrc,
  q7_t * pDst,
  uint32_t blockSize)
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	b087      	sub	sp, #28
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	60f8      	str	r0, [r7, #12]
 8003efa:	60b9      	str	r1, [r7, #8]
 8003efc:	607a      	str	r2, [r7, #4]
#if defined (ARM_MATH_DSP)

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  /*loop Unrolling */
  blkCnt = blockSize >> 2U;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	089b      	lsrs	r3, r3, #2
 8003f02:	617b      	str	r3, [r7, #20]

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  while (blkCnt > 0U)
 8003f04:	e00e      	b.n	8003f24 <arm_copy_q7+0x32>
  {
    /* C = A */
    /* Copy and then store the results in the destination buffer */
    /* 4 samples are copied and stored at a time using SIMD */
    *__SIMD32(pDst)++ = *__SIMD32(pSrc)++;
 8003f06:	f107 030c 	add.w	r3, r7, #12
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	1d11      	adds	r1, r2, #4
 8003f0e:	6019      	str	r1, [r3, #0]
 8003f10:	f107 0108 	add.w	r1, r7, #8
 8003f14:	680b      	ldr	r3, [r1, #0]
 8003f16:	1d18      	adds	r0, r3, #4
 8003f18:	6008      	str	r0, [r1, #0]
 8003f1a:	6812      	ldr	r2, [r2, #0]
 8003f1c:	601a      	str	r2, [r3, #0]

    /* Decrement the loop counter */
    blkCnt--;
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	3b01      	subs	r3, #1
 8003f22:	617b      	str	r3, [r7, #20]
  while (blkCnt > 0U)
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1ed      	bne.n	8003f06 <arm_copy_q7+0x14>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4U;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f003 0303 	and.w	r3, r3, #3
 8003f30:	617b      	str	r3, [r7, #20]
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_DSP) */


  while (blkCnt > 0U)
 8003f32:	e00b      	b.n	8003f4c <arm_copy_q7+0x5a>
  {
    /* C = A */
    /* Copy and then store the results in the destination buffer */
    *pDst++ = *pSrc++;
 8003f34:	68fa      	ldr	r2, [r7, #12]
 8003f36:	1c53      	adds	r3, r2, #1
 8003f38:	60fb      	str	r3, [r7, #12]
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	1c59      	adds	r1, r3, #1
 8003f3e:	60b9      	str	r1, [r7, #8]
 8003f40:	f992 2000 	ldrsb.w	r2, [r2]
 8003f44:	701a      	strb	r2, [r3, #0]

    /* Decrement the loop counter */
    blkCnt--;
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	617b      	str	r3, [r7, #20]
  while (blkCnt > 0U)
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1f0      	bne.n	8003f34 <arm_copy_q7+0x42>
  }
}
 8003f52:	bf00      	nop
 8003f54:	bf00      	nop
 8003f56:	371c      	adds	r7, #28
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <arm_cfft_radix8by2_f32>:
* \endcode
*
*/

void arm_cfft_radix8by2_f32( arm_cfft_instance_f32 * S, float32_t * p1)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b0a0      	sub	sp, #128	; 0x80
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	881b      	ldrh	r3, [r3, #0]
 8003f6e:	66bb      	str	r3, [r7, #104]	; 0x68
    float32_t * pCol1, * pCol2, * pMid1, * pMid2;
    float32_t * p2 = p1 + L;
 8003f70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	683a      	ldr	r2, [r7, #0]
 8003f76:	4413      	add	r3, r2
 8003f78:	677b      	str	r3, [r7, #116]	; 0x74
    const float32_t * tw = (float32_t *) S->pTwiddle;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	673b      	str	r3, [r7, #112]	; 0x70
    float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
    float32_t m0, m1, m2, m3;
    uint32_t l;

    pCol1 = p1;
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	667b      	str	r3, [r7, #100]	; 0x64
    pCol2 = p2;
 8003f84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f86:	663b      	str	r3, [r7, #96]	; 0x60

    //    Define new length
    L >>= 1;
 8003f88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f8a:	085b      	lsrs	r3, r3, #1
 8003f8c:	66bb      	str	r3, [r7, #104]	; 0x68
    //    Initialize mid pointers
    pMid1 = p1 + L;
 8003f8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	683a      	ldr	r2, [r7, #0]
 8003f94:	4413      	add	r3, r2
 8003f96:	67fb      	str	r3, [r7, #124]	; 0x7c
    pMid2 = p2 + L;
 8003f98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003f9e:	4413      	add	r3, r2
 8003fa0:	67bb      	str	r3, [r7, #120]	; 0x78

    // do two dot Fourier transform
    for ( l = L >> 2; l > 0; l-- )
 8003fa2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003fa4:	089b      	lsrs	r3, r3, #2
 8003fa6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003fa8:	e1b6      	b.n	8004318 <arm_cfft_radix8by2_f32+0x3b8>
    {
        t1[0] = p1[0];
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	63bb      	str	r3, [r7, #56]	; 0x38
        t1[1] = p1[1];
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        t1[2] = p1[2];
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	643b      	str	r3, [r7, #64]	; 0x40
        t1[3] = p1[3];
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	647b      	str	r3, [r7, #68]	; 0x44

        t2[0] = p2[0];
 8003fc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	62bb      	str	r3, [r7, #40]	; 0x28
        t2[1] = p2[1];
 8003fc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
        t2[2] = p2[2];
 8003fce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	633b      	str	r3, [r7, #48]	; 0x30
        t2[3] = p2[3];
 8003fd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	637b      	str	r3, [r7, #52]	; 0x34

        t3[0] = pMid1[0];
 8003fda:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	61bb      	str	r3, [r7, #24]
        t3[1] = pMid1[1];
 8003fe0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	61fb      	str	r3, [r7, #28]
        t3[2] = pMid1[2];
 8003fe6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	623b      	str	r3, [r7, #32]
        t3[3] = pMid1[3];
 8003fec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	627b      	str	r3, [r7, #36]	; 0x24

        t4[0] = pMid2[0];
 8003ff2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	60bb      	str	r3, [r7, #8]
        t4[1] = pMid2[1];
 8003ff8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	60fb      	str	r3, [r7, #12]
        t4[2] = pMid2[2];
 8003ffe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	613b      	str	r3, [r7, #16]
        t4[3] = pMid2[3];
 8004004:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	617b      	str	r3, [r7, #20]

        *p1++ = t1[0] + t2[0];
 800400a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800400e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	1d1a      	adds	r2, r3, #4
 8004016:	603a      	str	r2, [r7, #0]
 8004018:	ee77 7a27 	vadd.f32	s15, s14, s15
 800401c:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[1] + t2[1];
 8004020:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8004024:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	1d1a      	adds	r2, r3, #4
 800402c:	603a      	str	r2, [r7, #0]
 800402e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004032:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[2] + t2[2];
 8004036:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800403a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	1d1a      	adds	r2, r3, #4
 8004042:	603a      	str	r2, [r7, #0]
 8004044:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004048:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[3] + t2[3];    // col 1
 800404c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8004050:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	1d1a      	adds	r2, r3, #4
 8004058:	603a      	str	r2, [r7, #0]
 800405a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800405e:	edc3 7a00 	vstr	s15, [r3]

        t2[0] = t1[0] - t2[0];
 8004062:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004066:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800406a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800406e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        t2[1] = t1[1] - t2[1];
 8004072:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8004076:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800407a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800407e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        t2[2] = t1[2] - t2[2];
 8004082:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004086:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800408a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800408e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        t2[3] = t1[3] - t2[3];    // for col 2
 8004092:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8004096:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800409a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800409e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

        *pMid1++ = t3[0] + t4[0];
 80040a2:	ed97 7a06 	vldr	s14, [r7, #24]
 80040a6:	edd7 7a02 	vldr	s15, [r7, #8]
 80040aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80040ac:	1d1a      	adds	r2, r3, #4
 80040ae:	67fa      	str	r2, [r7, #124]	; 0x7c
 80040b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040b4:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[1] + t4[1];
 80040b8:	ed97 7a07 	vldr	s14, [r7, #28]
 80040bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80040c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80040c2:	1d1a      	adds	r2, r3, #4
 80040c4:	67fa      	str	r2, [r7, #124]	; 0x7c
 80040c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040ca:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[2] + t4[2];
 80040ce:	ed97 7a08 	vldr	s14, [r7, #32]
 80040d2:	edd7 7a04 	vldr	s15, [r7, #16]
 80040d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80040d8:	1d1a      	adds	r2, r3, #4
 80040da:	67fa      	str	r2, [r7, #124]	; 0x7c
 80040dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040e0:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[3] + t4[3]; // col 1
 80040e4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80040e8:	edd7 7a05 	vldr	s15, [r7, #20]
 80040ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80040ee:	1d1a      	adds	r2, r3, #4
 80040f0:	67fa      	str	r2, [r7, #124]	; 0x7c
 80040f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040f6:	edc3 7a00 	vstr	s15, [r3]

        t4[0] = t4[0] - t3[0];
 80040fa:	ed97 7a02 	vldr	s14, [r7, #8]
 80040fe:	edd7 7a06 	vldr	s15, [r7, #24]
 8004102:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004106:	edc7 7a02 	vstr	s15, [r7, #8]
        t4[1] = t4[1] - t3[1];
 800410a:	ed97 7a03 	vldr	s14, [r7, #12]
 800410e:	edd7 7a07 	vldr	s15, [r7, #28]
 8004112:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004116:	edc7 7a03 	vstr	s15, [r7, #12]
        t4[2] = t4[2] - t3[2];
 800411a:	ed97 7a04 	vldr	s14, [r7, #16]
 800411e:	edd7 7a08 	vldr	s15, [r7, #32]
 8004122:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004126:	edc7 7a04 	vstr	s15, [r7, #16]
        t4[3] = t4[3] - t3[3];    // for col 2
 800412a:	ed97 7a05 	vldr	s14, [r7, #20]
 800412e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004132:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004136:	edc7 7a05 	vstr	s15, [r7, #20]

        twR = *tw++;
 800413a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800413c:	1d1a      	adds	r2, r3, #4
 800413e:	673a      	str	r2, [r7, #112]	; 0x70
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	65fb      	str	r3, [r7, #92]	; 0x5c
        twI = *tw++;
 8004144:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004146:	1d1a      	adds	r2, r3, #4
 8004148:	673a      	str	r2, [r7, #112]	; 0x70
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	65bb      	str	r3, [r7, #88]	; 0x58

        // multiply by twiddle factors
        m0 = t2[0] * twR;
 800414e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004152:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8004156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800415a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t2[1] * twI;
 800415e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004162:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8004166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800416a:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t2[1] * twR;
 800416e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004172:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8004176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800417a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t2[0] * twI;
 800417e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004182:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8004186:	ee67 7a27 	vmul.f32	s15, s14, s15
 800418a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

        // R  =  R  *  Tr - I * Ti
        *p2++ = m0 + m1;
 800418e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004190:	1d1a      	adds	r2, r3, #4
 8004192:	677a      	str	r2, [r7, #116]	; 0x74
 8004194:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8004198:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800419c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041a0:	edc3 7a00 	vstr	s15, [r3]
        // I  =  I  *  Tr + R * Ti
        *p2++ = m2 - m3;
 80041a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041a6:	1d1a      	adds	r2, r3, #4
 80041a8:	677a      	str	r2, [r7, #116]	; 0x74
 80041aa:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80041ae:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80041b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041b6:	edc3 7a00 	vstr	s15, [r3]

        // use vertical symmetry
        //  0.9988 - 0.0491i <==> -0.0491 - 0.9988i
        m0 = t4[0] * twI;
 80041ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80041be:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80041c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041c6:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t4[1] * twR;
 80041ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80041ce:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80041d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041d6:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t4[1] * twI;
 80041da:	edd7 7a03 	vldr	s15, [r7, #12]
 80041de:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80041e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041e6:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t4[0] * twR;
 80041ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80041ee:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80041f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041f6:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

        *pMid2++ = m0 - m1;
 80041fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041fc:	1d1a      	adds	r2, r3, #4
 80041fe:	67ba      	str	r2, [r7, #120]	; 0x78
 8004200:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8004204:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8004208:	ee77 7a67 	vsub.f32	s15, s14, s15
 800420c:	edc3 7a00 	vstr	s15, [r3]
        *pMid2++ = m2 + m3;
 8004210:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004212:	1d1a      	adds	r2, r3, #4
 8004214:	67ba      	str	r2, [r7, #120]	; 0x78
 8004216:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800421a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800421e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004222:	edc3 7a00 	vstr	s15, [r3]

        twR = *tw++;
 8004226:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004228:	1d1a      	adds	r2, r3, #4
 800422a:	673a      	str	r2, [r7, #112]	; 0x70
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	65fb      	str	r3, [r7, #92]	; 0x5c
        twI = *tw++;
 8004230:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004232:	1d1a      	adds	r2, r3, #4
 8004234:	673a      	str	r2, [r7, #112]	; 0x70
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	65bb      	str	r3, [r7, #88]	; 0x58

        m0 = t2[2] * twR;
 800423a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800423e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8004242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004246:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t2[3] * twI;
 800424a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800424e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8004252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004256:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t2[3] * twR;
 800425a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800425e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8004262:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004266:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t2[2] * twI;
 800426a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800426e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8004272:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004276:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

        *p2++ = m0 + m1;
 800427a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800427c:	1d1a      	adds	r2, r3, #4
 800427e:	677a      	str	r2, [r7, #116]	; 0x74
 8004280:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8004284:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8004288:	ee77 7a27 	vadd.f32	s15, s14, s15
 800428c:	edc3 7a00 	vstr	s15, [r3]
        *p2++ = m2 - m3;
 8004290:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004292:	1d1a      	adds	r2, r3, #4
 8004294:	677a      	str	r2, [r7, #116]	; 0x74
 8004296:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800429a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800429e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042a2:	edc3 7a00 	vstr	s15, [r3]

        m0 = t4[2] * twI;
 80042a6:	edd7 7a04 	vldr	s15, [r7, #16]
 80042aa:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80042ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042b2:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t4[3] * twR;
 80042b6:	edd7 7a05 	vldr	s15, [r7, #20]
 80042ba:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80042be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042c2:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t4[3] * twI;
 80042c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80042ca:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80042ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042d2:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t4[2] * twR;
 80042d6:	edd7 7a04 	vldr	s15, [r7, #16]
 80042da:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80042de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042e2:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

        *pMid2++ = m0 - m1;
 80042e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042e8:	1d1a      	adds	r2, r3, #4
 80042ea:	67ba      	str	r2, [r7, #120]	; 0x78
 80042ec:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80042f0:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80042f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042f8:	edc3 7a00 	vstr	s15, [r3]
        *pMid2++ = m2 + m3;
 80042fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042fe:	1d1a      	adds	r2, r3, #4
 8004300:	67ba      	str	r2, [r7, #120]	; 0x78
 8004302:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004306:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800430a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800430e:	edc3 7a00 	vstr	s15, [r3]
    for ( l = L >> 2; l > 0; l-- )
 8004312:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004314:	3b01      	subs	r3, #1
 8004316:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004318:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800431a:	2b00      	cmp	r3, #0
 800431c:	f47f ae45 	bne.w	8003faa <arm_cfft_radix8by2_f32+0x4a>
    }

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 2U);
 8004320:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004322:	b299      	uxth	r1, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685a      	ldr	r2, [r3, #4]
 8004328:	2302      	movs	r3, #2
 800432a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800432c:	f000 fef2 	bl	8005114 <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 2U);
 8004330:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004332:	b299      	uxth	r1, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685a      	ldr	r2, [r3, #4]
 8004338:	2302      	movs	r3, #2
 800433a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800433c:	f000 feea 	bl	8005114 <arm_radix8_butterfly_f32>
}
 8004340:	bf00      	nop
 8004342:	3780      	adds	r7, #128	; 0x80
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32( arm_cfft_instance_f32 * S, float32_t * p1)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b0ac      	sub	sp, #176	; 0xb0
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	881b      	ldrh	r3, [r3, #0]
 8004356:	085b      	lsrs	r3, r3, #1
 8004358:	b29b      	uxth	r3, r3
 800435a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 800435e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	683a      	ldr	r2, [r7, #0]
 8004366:	4413      	add	r3, r2
 8004368:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float32_t * p3 = p2 + L;
 800436c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004376:	4413      	add	r3, r2
 8004378:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float32_t * p4 = p3 + L;
 800437c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004386:	4413      	add	r3, r2
 8004388:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         // points to real values by default
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	67fb      	str	r3, [r7, #124]	; 0x7c
    pCol2 = p2;
 8004390:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004394:	67bb      	str	r3, [r7, #120]	; 0x78
    pCol3 = p3;
 8004396:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800439a:	677b      	str	r3, [r7, #116]	; 0x74
    pCol4 = p4;
 800439c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80043a0:	673b      	str	r3, [r7, #112]	; 0x70
    pEnd1 = p2 - 1;     // points to imaginary values by default
 80043a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80043a6:	3b04      	subs	r3, #4
 80043a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    pEnd2 = p3 - 1;
 80043ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043b0:	3b04      	subs	r3, #4
 80043b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    pEnd3 = p4 - 1;
 80043b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80043ba:	3b04      	subs	r3, #4
 80043bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    pEnd4 = pEnd3 + L;
 80043c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80043ca:	4413      	add	r3, r2
 80043cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80043d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80043dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80043e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80043e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    L >>= 1;
 80043e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80043ec:	085b      	lsrs	r3, r3, #1
 80043ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    // do four dot Fourier transform

    twMod2 = 2;
 80043f2:	2302      	movs	r3, #2
 80043f4:	66fb      	str	r3, [r7, #108]	; 0x6c
    twMod3 = 4;
 80043f6:	2304      	movs	r3, #4
 80043f8:	66bb      	str	r3, [r7, #104]	; 0x68
    twMod4 = 6;
 80043fa:	2306      	movs	r3, #6
 80043fc:	667b      	str	r3, [r7, #100]	; 0x64

    // TOP
    p1ap3_0 = p1[0] + p3[0];
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	ed93 7a00 	vldr	s14, [r3]
 8004404:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004408:	edd3 7a00 	vldr	s15, [r3]
 800440c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004410:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	ed93 7a00 	vldr	s14, [r3]
 800441a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800441e:	edd3 7a00 	vldr	s15, [r3]
 8004422:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004426:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	3304      	adds	r3, #4
 800442e:	ed93 7a00 	vldr	s14, [r3]
 8004432:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004436:	3304      	adds	r3, #4
 8004438:	edd3 7a00 	vldr	s15, [r3]
 800443c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004440:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	3304      	adds	r3, #4
 8004448:	ed93 7a00 	vldr	s14, [r3]
 800444c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004450:	3304      	adds	r3, #4
 8004452:	edd3 7a00 	vldr	s15, [r3]
 8004456:	ee77 7a67 	vsub.f32	s15, s14, s15
 800445a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 800445e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004462:	3304      	adds	r3, #4
 8004464:	ed93 7a00 	vldr	s14, [r3]
 8004468:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800446c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004470:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004474:	3304      	adds	r3, #4
 8004476:	edd3 7a00 	vldr	s15, [r3]
 800447a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800447e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8004482:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004486:	edd3 7a00 	vldr	s15, [r3]
 800448a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800448e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004492:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004496:	edd3 7a00 	vldr	s15, [r3]
 800449a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800449e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 80044a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80044a6:	edd3 7a00 	vldr	s15, [r3]
 80044aa:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80044ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80044b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80044b6:	edd3 7a00 	vldr	s15, [r3]
 80044ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044be:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 80044c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80044c6:	3304      	adds	r3, #4
 80044c8:	edd3 7a00 	vldr	s15, [r3]
 80044cc:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80044d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80044d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80044d8:	3304      	adds	r3, #4
 80044da:	edd3 7a00 	vldr	s15, [r3]
 80044de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044e2:	edc7 7a08 	vstr	s15, [r7, #32]
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 80044e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80044ea:	3304      	adds	r3, #4
 80044ec:	edd3 7a00 	vldr	s15, [r3]
 80044f0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80044f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80044f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80044fc:	3304      	adds	r3, #4
 80044fe:	edd3 7a00 	vldr	s15, [r3]
 8004502:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004506:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 800450a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800450e:	ed93 7a00 	vldr	s14, [r3]
 8004512:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8004516:	ee37 7a27 	vadd.f32	s14, s14, s15
 800451a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800451e:	edd3 7a00 	vldr	s15, [r3]
 8004522:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004526:	edc7 7a04 	vstr	s15, [r7, #16]
    // col 1
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 800452a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800452e:	ed93 7a00 	vldr	s14, [r3]
 8004532:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8004536:	ee37 7a27 	vadd.f32	s14, s14, s15
 800453a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800453e:	edd3 7a00 	vldr	s15, [r3]
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	1d1a      	adds	r2, r3, #4
 8004546:	603a      	str	r2, [r7, #0]
 8004548:	ee77 7a27 	vadd.f32	s15, s14, s15
 800454c:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8004550:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004554:	3304      	adds	r3, #4
 8004556:	ed93 7a00 	vldr	s14, [r3]
 800455a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800455e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004562:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004566:	3304      	adds	r3, #4
 8004568:	edd3 7a00 	vldr	s15, [r3]
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	1d1a      	adds	r2, r3, #4
 8004570:	603a      	str	r2, [r7, #0]
 8004572:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004576:	edc3 7a00 	vstr	s15, [r3]

    // Twiddle factors are ones
    *p2++ = t2[0];
 800457a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800457e:	1d1a      	adds	r2, r3, #4
 8004580:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8004584:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004586:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 8004588:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800458c:	1d1a      	adds	r2, r3, #4
 800458e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8004592:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004594:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 8004596:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800459a:	1d1a      	adds	r2, r3, #4
 800459c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80045a0:	69fa      	ldr	r2, [r7, #28]
 80045a2:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 80045a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045a8:	1d1a      	adds	r2, r3, #4
 80045aa:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80045ae:	6a3a      	ldr	r2, [r7, #32]
 80045b0:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 80045b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80045b6:	1d1a      	adds	r2, r3, #4
 80045b8:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80045bc:	68fa      	ldr	r2, [r7, #12]
 80045be:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 80045c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80045c4:	1d1a      	adds	r2, r3, #4
 80045c6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 80045ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80045d6:	4413      	add	r3, r2
 80045d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    tw3 += twMod3;
 80045dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80045e4:	4413      	add	r3, r2
 80045e6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tw4 += twMod4;
 80045ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80045f2:	4413      	add	r3, r2
 80045f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    for (l = (L - 2) >> 1; l > 0; l-- )
 80045f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80045fc:	3b02      	subs	r3, #2
 80045fe:	085b      	lsrs	r3, r3, #1
 8004600:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004604:	e31a      	b.n	8004c3c <arm_cfft_radix8by4_f32+0x8f4>
    {
        // TOP
        p1ap3_0 = p1[0] + p3[0];
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	ed93 7a00 	vldr	s14, [r3]
 800460c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004610:	edd3 7a00 	vldr	s15, [r3]
 8004614:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004618:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        p1sp3_0 = p1[0] - p3[0];
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	ed93 7a00 	vldr	s14, [r3]
 8004622:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004626:	edd3 7a00 	vldr	s15, [r3]
 800462a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800462e:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        p1ap3_1 = p1[1] + p3[1];
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	3304      	adds	r3, #4
 8004636:	ed93 7a00 	vldr	s14, [r3]
 800463a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800463e:	3304      	adds	r3, #4
 8004640:	edd3 7a00 	vldr	s15, [r3]
 8004644:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004648:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        p1sp3_1 = p1[1] - p3[1];
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	3304      	adds	r3, #4
 8004650:	ed93 7a00 	vldr	s14, [r3]
 8004654:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004658:	3304      	adds	r3, #4
 800465a:	edd3 7a00 	vldr	s15, [r3]
 800465e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004662:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        // col 2
        t2[0] = p1sp3_0 + p2[1] - p4[1];
 8004666:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800466a:	3304      	adds	r3, #4
 800466c:	ed93 7a00 	vldr	s14, [r3]
 8004670:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8004674:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004678:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800467c:	3304      	adds	r3, #4
 800467e:	edd3 7a00 	vldr	s15, [r3]
 8004682:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004686:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        t2[1] = p1sp3_1 - p2[0] + p4[0];
 800468a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800468e:	edd3 7a00 	vldr	s15, [r3]
 8004692:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8004696:	ee37 7a67 	vsub.f32	s14, s14, s15
 800469a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800469e:	edd3 7a00 	vldr	s15, [r3]
 80046a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046a6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        // col 3
        t3[0] = p1ap3_0 - p2[0] - p4[0];
 80046aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80046ae:	edd3 7a00 	vldr	s15, [r3]
 80046b2:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80046b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80046ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80046be:	edd3 7a00 	vldr	s15, [r3]
 80046c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046c6:	edc7 7a07 	vstr	s15, [r7, #28]
        t3[1] = p1ap3_1 - p2[1] - p4[1];
 80046ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80046ce:	3304      	adds	r3, #4
 80046d0:	edd3 7a00 	vldr	s15, [r3]
 80046d4:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80046d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80046dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80046e0:	3304      	adds	r3, #4
 80046e2:	edd3 7a00 	vldr	s15, [r3]
 80046e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046ea:	edc7 7a08 	vstr	s15, [r7, #32]
        // col 4
        t4[0] = p1sp3_0 - p2[1] + p4[1];
 80046ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80046f2:	3304      	adds	r3, #4
 80046f4:	edd3 7a00 	vldr	s15, [r3]
 80046f8:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80046fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004700:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004704:	3304      	adds	r3, #4
 8004706:	edd3 7a00 	vldr	s15, [r3]
 800470a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800470e:	edc7 7a03 	vstr	s15, [r7, #12]
        t4[1] = p1sp3_1 + p2[0] - p4[0];
 8004712:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004716:	ed93 7a00 	vldr	s14, [r3]
 800471a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800471e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004722:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004726:	edd3 7a00 	vldr	s15, [r3]
 800472a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800472e:	edc7 7a04 	vstr	s15, [r7, #16]
        // col 1 - top
        *p1++ = p1ap3_0 + p2[0] + p4[0];
 8004732:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004736:	ed93 7a00 	vldr	s14, [r3]
 800473a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800473e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004742:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004746:	edd3 7a00 	vldr	s15, [r3]
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	1d1a      	adds	r2, r3, #4
 800474e:	603a      	str	r2, [r7, #0]
 8004750:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004754:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = p1ap3_1 + p2[1] + p4[1];
 8004758:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800475c:	3304      	adds	r3, #4
 800475e:	ed93 7a00 	vldr	s14, [r3]
 8004762:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8004766:	ee37 7a27 	vadd.f32	s14, s14, s15
 800476a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800476e:	3304      	adds	r3, #4
 8004770:	edd3 7a00 	vldr	s15, [r3]
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	1d1a      	adds	r2, r3, #4
 8004778:	603a      	str	r2, [r7, #0]
 800477a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800477e:	edc3 7a00 	vstr	s15, [r3]

        // BOTTOM
        p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 8004782:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004786:	3b04      	subs	r3, #4
 8004788:	ed93 7a00 	vldr	s14, [r3]
 800478c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004790:	3b04      	subs	r3, #4
 8004792:	edd3 7a00 	vldr	s15, [r3]
 8004796:	ee77 7a27 	vadd.f32	s15, s14, s15
 800479a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 800479e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80047a2:	3b04      	subs	r3, #4
 80047a4:	ed93 7a00 	vldr	s14, [r3]
 80047a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80047ac:	3b04      	subs	r3, #4
 80047ae:	edd3 7a00 	vldr	s15, [r3]
 80047b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047b6:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        p1ap3_0 = pEnd1[0] + pEnd3[0];
 80047ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80047be:	ed93 7a00 	vldr	s14, [r3]
 80047c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80047c6:	edd3 7a00 	vldr	s15, [r3]
 80047ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047ce:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        p1sp3_0 = pEnd1[0] - pEnd3[0];
 80047d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80047d6:	ed93 7a00 	vldr	s14, [r3]
 80047da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80047de:	edd3 7a00 	vldr	s15, [r3]
 80047e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047e6:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        // col 2
        t2[2] = pEnd2[0]  - pEnd4[0] + p1sp3_1;
 80047ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80047ee:	ed93 7a00 	vldr	s14, [r3]
 80047f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80047f6:	edd3 7a00 	vldr	s15, [r3]
 80047fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80047fe:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8004802:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004806:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 800480a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800480e:	ed93 7a00 	vldr	s14, [r3]
 8004812:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004816:	edd3 7a00 	vldr	s15, [r3]
 800481a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800481e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004822:	3b04      	subs	r3, #4
 8004824:	edd3 7a00 	vldr	s15, [r3]
 8004828:	ee37 7a67 	vsub.f32	s14, s14, s15
 800482c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004830:	3b04      	subs	r3, #4
 8004832:	edd3 7a00 	vldr	s15, [r3]
 8004836:	ee77 7a27 	vadd.f32	s15, s14, s15
 800483a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        // col 3
        t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 800483e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004842:	3b04      	subs	r3, #4
 8004844:	edd3 7a00 	vldr	s15, [r3]
 8004848:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800484c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004850:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004854:	3b04      	subs	r3, #4
 8004856:	edd3 7a00 	vldr	s15, [r3]
 800485a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800485e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        t3[3] = p1ap3_0 - pEnd2[0]  - pEnd4[0];
 8004862:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004866:	edd3 7a00 	vldr	s15, [r3]
 800486a:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800486e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004872:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004876:	edd3 7a00 	vldr	s15, [r3]
 800487a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800487e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        // col 4
        t4[2] = pEnd2[0]  - pEnd4[0]  - p1sp3_1;
 8004882:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004886:	ed93 7a00 	vldr	s14, [r3]
 800488a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800488e:	edd3 7a00 	vldr	s15, [r3]
 8004892:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004896:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800489a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800489e:	edc7 7a05 	vstr	s15, [r7, #20]
        t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 80048a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80048a6:	3b04      	subs	r3, #4
 80048a8:	ed93 7a00 	vldr	s14, [r3]
 80048ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80048b0:	3b04      	subs	r3, #4
 80048b2:	edd3 7a00 	vldr	s15, [r3]
 80048b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80048ba:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80048be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80048c2:	edc7 7a06 	vstr	s15, [r7, #24]
        // col 1 - Bottom
        *pEnd1-- = p1ap3_0 + pEnd2[0] + pEnd4[0];
 80048c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80048ca:	ed93 7a00 	vldr	s14, [r3]
 80048ce:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80048d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80048d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80048da:	edd3 7a00 	vldr	s15, [r3]
 80048de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80048e2:	1f1a      	subs	r2, r3, #4
 80048e4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80048e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048ec:	edc3 7a00 	vstr	s15, [r3]
        *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 80048f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80048f4:	3b04      	subs	r3, #4
 80048f6:	ed93 7a00 	vldr	s14, [r3]
 80048fa:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80048fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004902:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004906:	3b04      	subs	r3, #4
 8004908:	edd3 7a00 	vldr	s15, [r3]
 800490c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004910:	1f1a      	subs	r2, r3, #4
 8004912:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004916:	ee77 7a27 	vadd.f32	s15, s14, s15
 800491a:	edc3 7a00 	vstr	s15, [r3]

        // COL 2
        // read twiddle factors
        twR = *tw2++;
 800491e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004922:	1d1a      	adds	r2, r3, #4
 8004924:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	653b      	str	r3, [r7, #80]	; 0x50
        twI = *tw2++;
 800492c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004930:	1d1a      	adds	r2, r3, #4
 8004932:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	64fb      	str	r3, [r7, #76]	; 0x4c
        // multiply by twiddle factors
        //  let    Z1 = a + i(b),   Z2 = c + i(d)
        //   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d)

        // Top
        m0 = t2[0] * twR;
 800493a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800493e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004942:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004946:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t2[1] * twI;
 800494a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800494e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004952:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004956:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t2[1] * twR;
 800495a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800495e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004962:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004966:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t2[0] * twI;
 800496a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800496e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004972:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004976:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *p2++ = m0 + m1;
 800497a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800497e:	1d1a      	adds	r2, r3, #4
 8004980:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8004984:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8004988:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800498c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004990:	edc3 7a00 	vstr	s15, [r3]
        *p2++ = m2 - m3;
 8004994:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004998:	1d1a      	adds	r2, r3, #4
 800499a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800499e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80049a2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80049a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80049aa:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 2
        // 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i
        // Bottom
        m0 = t2[3] * twI;
 80049ae:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80049b2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80049b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ba:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t2[2] * twR;
 80049be:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80049c2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80049c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ca:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t2[2] * twI;
 80049ce:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80049d2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80049d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049da:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t2[3] * twR;
 80049de:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80049e2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80049e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ea:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *pEnd2-- = m0 - m1;
 80049ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80049f2:	1f1a      	subs	r2, r3, #4
 80049f4:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80049f8:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80049fc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004a00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a04:	edc3 7a00 	vstr	s15, [r3]
        *pEnd2-- = m2 + m3;
 8004a08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004a0c:	1f1a      	subs	r2, r3, #4
 8004a0e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004a12:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004a16:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004a1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a1e:	edc3 7a00 	vstr	s15, [r3]

        // COL 3
        twR = tw3[0];
 8004a22:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	653b      	str	r3, [r7, #80]	; 0x50
        twI = tw3[1];
 8004a2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	64fb      	str	r3, [r7, #76]	; 0x4c
        tw3 += twMod3;
 8004a32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8004a3a:	4413      	add	r3, r2
 8004a3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        // Top
        m0 = t3[0] * twR;
 8004a40:	edd7 7a07 	vldr	s15, [r7, #28]
 8004a44:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004a48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a4c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t3[1] * twI;
 8004a50:	edd7 7a08 	vldr	s15, [r7, #32]
 8004a54:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004a58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a5c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t3[1] * twR;
 8004a60:	edd7 7a08 	vldr	s15, [r7, #32]
 8004a64:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004a68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a6c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t3[0] * twI;
 8004a70:	edd7 7a07 	vldr	s15, [r7, #28]
 8004a74:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004a78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a7c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *p3++ = m0 + m1;
 8004a80:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a84:	1d1a      	adds	r2, r3, #4
 8004a86:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004a8a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8004a8e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004a92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a96:	edc3 7a00 	vstr	s15, [r3]
        *p3++ = m2 - m3;
 8004a9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a9e:	1d1a      	adds	r2, r3, #4
 8004aa0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004aa4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004aa8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004aac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ab0:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 3
        // 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i
        // Bottom
        m0 = -t3[3] * twR;
 8004ab4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004ab8:	eef1 7a67 	vneg.f32	s15, s15
 8004abc:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004ac0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ac4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t3[2] * twI;
 8004ac8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004acc:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004ad0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ad4:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t3[2] * twR;
 8004ad8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004adc:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004ae0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ae4:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t3[3] * twI;
 8004ae8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004aec:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004af0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004af4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *pEnd3-- = m0 - m1;
 8004af8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004afc:	1f1a      	subs	r2, r3, #4
 8004afe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004b02:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8004b06:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004b0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b0e:	edc3 7a00 	vstr	s15, [r3]
        *pEnd3-- = m3 - m2;
 8004b12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004b16:	1f1a      	subs	r2, r3, #4
 8004b18:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004b1c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8004b20:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8004b24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b28:	edc3 7a00 	vstr	s15, [r3]

        // COL 4
        twR = tw4[0];
 8004b2c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	653b      	str	r3, [r7, #80]	; 0x50
        twI = tw4[1];
 8004b34:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	64fb      	str	r3, [r7, #76]	; 0x4c
        tw4 += twMod4;
 8004b3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004b44:	4413      	add	r3, r2
 8004b46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        // Top
        m0 = t4[0] * twR;
 8004b4a:	edd7 7a03 	vldr	s15, [r7, #12]
 8004b4e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004b52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b56:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t4[1] * twI;
 8004b5a:	edd7 7a04 	vldr	s15, [r7, #16]
 8004b5e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b66:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t4[1] * twR;
 8004b6a:	edd7 7a04 	vldr	s15, [r7, #16]
 8004b6e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004b72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b76:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t4[0] * twI;
 8004b7a:	edd7 7a03 	vldr	s15, [r7, #12]
 8004b7e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004b82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b86:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *p4++ = m0 + m1;
 8004b8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b8e:	1d1a      	adds	r2, r3, #4
 8004b90:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004b94:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8004b98:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004b9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ba0:	edc3 7a00 	vstr	s15, [r3]
        *p4++ = m2 - m3;
 8004ba4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ba8:	1d1a      	adds	r2, r3, #4
 8004baa:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004bae:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004bb2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004bb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004bba:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 4
        // 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i
        // Bottom
        m0 = t4[3] * twI;
 8004bbe:	edd7 7a06 	vldr	s15, [r7, #24]
 8004bc2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004bc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bca:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t4[2] * twR;
 8004bce:	edd7 7a05 	vldr	s15, [r7, #20]
 8004bd2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004bd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bda:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t4[2] * twI;
 8004bde:	edd7 7a05 	vldr	s15, [r7, #20]
 8004be2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bea:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t4[3] * twR;
 8004bee:	edd7 7a06 	vldr	s15, [r7, #24]
 8004bf2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bfa:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *pEnd4-- = m0 - m1;
 8004bfe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004c02:	1f1a      	subs	r2, r3, #4
 8004c04:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8004c08:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8004c0c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004c10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c14:	edc3 7a00 	vstr	s15, [r3]
        *pEnd4-- = m2 + m3;
 8004c18:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004c1c:	1f1a      	subs	r2, r3, #4
 8004c1e:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8004c22:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004c26:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004c2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c2e:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- )
 8004c32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c36:	3b01      	subs	r3, #1
 8004c38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004c3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	f47f ace0 	bne.w	8004606 <arm_cfft_radix8by4_f32+0x2be>
    }

    //MIDDLE
    // Twiddle factors are
    //  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i
    p1ap3_0 = p1[0] + p3[0];
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	ed93 7a00 	vldr	s14, [r3]
 8004c4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c50:	edd3 7a00 	vldr	s15, [r3]
 8004c54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c58:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	ed93 7a00 	vldr	s14, [r3]
 8004c62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c66:	edd3 7a00 	vldr	s15, [r3]
 8004c6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c6e:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	3304      	adds	r3, #4
 8004c76:	ed93 7a00 	vldr	s14, [r3]
 8004c7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c7e:	3304      	adds	r3, #4
 8004c80:	edd3 7a00 	vldr	s15, [r3]
 8004c84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c88:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	3304      	adds	r3, #4
 8004c90:	ed93 7a00 	vldr	s14, [r3]
 8004c94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c98:	3304      	adds	r3, #4
 8004c9a:	edd3 7a00 	vldr	s15, [r3]
 8004c9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ca2:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8004ca6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004caa:	3304      	adds	r3, #4
 8004cac:	ed93 7a00 	vldr	s14, [r3]
 8004cb0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8004cb4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004cb8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004cbc:	3304      	adds	r3, #4
 8004cbe:	edd3 7a00 	vldr	s15, [r3]
 8004cc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004cc6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8004cca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004cce:	edd3 7a00 	vldr	s15, [r3]
 8004cd2:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8004cd6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004cda:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004cde:	edd3 7a00 	vldr	s15, [r3]
 8004ce2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ce6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8004cea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004cee:	edd3 7a00 	vldr	s15, [r3]
 8004cf2:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8004cf6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004cfa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004cfe:	edd3 7a00 	vldr	s15, [r3]
 8004d02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d06:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8004d0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004d0e:	3304      	adds	r3, #4
 8004d10:	edd3 7a00 	vldr	s15, [r3]
 8004d14:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8004d18:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004d1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d20:	3304      	adds	r3, #4
 8004d22:	edd3 7a00 	vldr	s15, [r3]
 8004d26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d2a:	edc7 7a08 	vstr	s15, [r7, #32]
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8004d2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004d32:	3304      	adds	r3, #4
 8004d34:	edd3 7a00 	vldr	s15, [r3]
 8004d38:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8004d3c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004d40:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d44:	3304      	adds	r3, #4
 8004d46:	edd3 7a00 	vldr	s15, [r3]
 8004d4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d4e:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8004d52:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004d56:	ed93 7a00 	vldr	s14, [r3]
 8004d5a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8004d5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004d62:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d66:	edd3 7a00 	vldr	s15, [r3]
 8004d6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d6e:	edc7 7a04 	vstr	s15, [r7, #16]
    // col 1 - Top
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8004d72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004d76:	ed93 7a00 	vldr	s14, [r3]
 8004d7a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8004d7e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004d82:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d86:	edd3 7a00 	vldr	s15, [r3]
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	1d1a      	adds	r2, r3, #4
 8004d8e:	603a      	str	r2, [r7, #0]
 8004d90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d94:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8004d98:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004d9c:	3304      	adds	r3, #4
 8004d9e:	ed93 7a00 	vldr	s14, [r3]
 8004da2:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8004da6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004daa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004dae:	3304      	adds	r3, #4
 8004db0:	edd3 7a00 	vldr	s15, [r3]
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	1d1a      	adds	r2, r3, #4
 8004db8:	603a      	str	r2, [r7, #0]
 8004dba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004dbe:	edc3 7a00 	vstr	s15, [r3]

    // COL 2
    twR = tw2[0];
 8004dc2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw2[1];
 8004dca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t2[0] * twR;
 8004dd2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004dd6:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004dda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dde:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t2[1] * twI;
 8004de2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8004de6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004dea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dee:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t2[1] * twR;
 8004df2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8004df6:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004dfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dfe:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t2[0] * twI;
 8004e02:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004e06:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e0e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p2++ = m0 + m1;
 8004e12:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004e16:	1d1a      	adds	r2, r3, #4
 8004e18:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8004e1c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8004e20:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004e24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e28:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 8004e2c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004e30:	1d1a      	adds	r2, r3, #4
 8004e32:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8004e36:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004e3a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004e3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e42:	edc3 7a00 	vstr	s15, [r3]
    // COL 3
    twR = tw3[0];
 8004e46:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw3[1];
 8004e4e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t3[0] * twR;
 8004e56:	edd7 7a07 	vldr	s15, [r7, #28]
 8004e5a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e62:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t3[1] * twI;
 8004e66:	edd7 7a08 	vldr	s15, [r7, #32]
 8004e6a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004e6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e72:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t3[1] * twR;
 8004e76:	edd7 7a08 	vldr	s15, [r7, #32]
 8004e7a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004e7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e82:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t3[0] * twI;
 8004e86:	edd7 7a07 	vldr	s15, [r7, #28]
 8004e8a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e92:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p3++ = m0 + m1;
 8004e96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e9a:	1d1a      	adds	r2, r3, #4
 8004e9c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004ea0:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8004ea4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004ea8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004eac:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 8004eb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004eb4:	1d1a      	adds	r2, r3, #4
 8004eb6:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004eba:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004ebe:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004ec2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ec6:	edc3 7a00 	vstr	s15, [r3]
    // COL 4
    twR = tw4[0];
 8004eca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw4[1];
 8004ed2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t4[0] * twR;
 8004eda:	edd7 7a03 	vldr	s15, [r7, #12]
 8004ede:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004ee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ee6:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t4[1] * twI;
 8004eea:	edd7 7a04 	vldr	s15, [r7, #16]
 8004eee:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ef6:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t4[1] * twR;
 8004efa:	edd7 7a04 	vldr	s15, [r7, #16]
 8004efe:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004f02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f06:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t4[0] * twI;
 8004f0a:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f0e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f16:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p4++ = m0 + m1;
 8004f1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004f1e:	1d1a      	adds	r2, r3, #4
 8004f20:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004f24:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8004f28:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004f2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f30:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 8004f34:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004f38:	1d1a      	adds	r2, r3, #4
 8004f3a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004f3e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004f42:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004f46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f4a:	edc3 7a00 	vstr	s15, [r3]

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 4U);
 8004f4e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f52:	b299      	uxth	r1, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	685a      	ldr	r2, [r3, #4]
 8004f58:	2304      	movs	r3, #4
 8004f5a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8004f5c:	f000 f8da 	bl	8005114 <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 4U);
 8004f60:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f64:	b299      	uxth	r1, r3
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685a      	ldr	r2, [r3, #4]
 8004f6a:	2304      	movs	r3, #4
 8004f6c:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8004f6e:	f000 f8d1 	bl	8005114 <arm_radix8_butterfly_f32>
    // third col
    arm_radix8_butterfly_f32( pCol3, L, (float32_t *) S->pTwiddle, 4U);
 8004f72:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f76:	b299      	uxth	r1, r3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685a      	ldr	r2, [r3, #4]
 8004f7c:	2304      	movs	r3, #4
 8004f7e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8004f80:	f000 f8c8 	bl	8005114 <arm_radix8_butterfly_f32>
    // fourth col
    arm_radix8_butterfly_f32( pCol4, L, (float32_t *) S->pTwiddle, 4U);
 8004f84:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f88:	b299      	uxth	r1, r3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	685a      	ldr	r2, [r3, #4]
 8004f8e:	2304      	movs	r3, #4
 8004f90:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8004f92:	f000 f8bf 	bl	8005114 <arm_radix8_butterfly_f32>
}
 8004f96:	bf00      	nop
 8004f98:	37b0      	adds	r7, #176	; 0xb0
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}

08004f9e <arm_cfft_f32>:
void arm_cfft_f32(
    const arm_cfft_instance_f32 * S,
    float32_t * p1,
    uint8_t ifftFlag,
    uint8_t bitReverseFlag)
{
 8004f9e:	b580      	push	{r7, lr}
 8004fa0:	b088      	sub	sp, #32
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	60f8      	str	r0, [r7, #12]
 8004fa6:	60b9      	str	r1, [r7, #8]
 8004fa8:	4611      	mov	r1, r2
 8004faa:	461a      	mov	r2, r3
 8004fac:	460b      	mov	r3, r1
 8004fae:	71fb      	strb	r3, [r7, #7]
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	71bb      	strb	r3, [r7, #6]
    uint32_t  L = S->fftLen, l;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	881b      	ldrh	r3, [r3, #0]
 8004fb8:	617b      	str	r3, [r7, #20]
    float32_t invL, * pSrc;

    if (ifftFlag == 1U)
 8004fba:	79fb      	ldrb	r3, [r7, #7]
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d117      	bne.n	8004ff0 <arm_cfft_f32+0x52>
    {
        /*  Conjugate input data  */
        pSrc = p1 + 1;
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	3304      	adds	r3, #4
 8004fc4:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++)
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	61fb      	str	r3, [r7, #28]
 8004fca:	e00d      	b.n	8004fe8 <arm_cfft_f32+0x4a>
        {
            *pSrc = -*pSrc;
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	edd3 7a00 	vldr	s15, [r3]
 8004fd2:	eef1 7a67 	vneg.f32	s15, s15
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	edc3 7a00 	vstr	s15, [r3]
            pSrc += 2;
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	3308      	adds	r3, #8
 8004fe0:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++)
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	3301      	adds	r3, #1
 8004fe6:	61fb      	str	r3, [r7, #28]
 8004fe8:	69fa      	ldr	r2, [r7, #28]
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d3ed      	bcc.n	8004fcc <arm_cfft_f32+0x2e>
        }
    }

    switch (L)
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ff6:	d040      	beq.n	800507a <arm_cfft_f32+0xdc>
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ffe:	d845      	bhi.n	800508c <arm_cfft_f32+0xee>
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005006:	d033      	beq.n	8005070 <arm_cfft_f32+0xd2>
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800500e:	d83d      	bhi.n	800508c <arm_cfft_f32+0xee>
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005016:	d026      	beq.n	8005066 <arm_cfft_f32+0xc8>
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800501e:	d835      	bhi.n	800508c <arm_cfft_f32+0xee>
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005026:	d028      	beq.n	800507a <arm_cfft_f32+0xdc>
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800502e:	d82d      	bhi.n	800508c <arm_cfft_f32+0xee>
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005036:	d01b      	beq.n	8005070 <arm_cfft_f32+0xd2>
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800503e:	d825      	bhi.n	800508c <arm_cfft_f32+0xee>
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	2b80      	cmp	r3, #128	; 0x80
 8005044:	d00f      	beq.n	8005066 <arm_cfft_f32+0xc8>
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	2b80      	cmp	r3, #128	; 0x80
 800504a:	d81f      	bhi.n	800508c <arm_cfft_f32+0xee>
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	2b40      	cmp	r3, #64	; 0x40
 8005050:	d013      	beq.n	800507a <arm_cfft_f32+0xdc>
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	2b40      	cmp	r3, #64	; 0x40
 8005056:	d819      	bhi.n	800508c <arm_cfft_f32+0xee>
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	2b10      	cmp	r3, #16
 800505c:	d003      	beq.n	8005066 <arm_cfft_f32+0xc8>
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	2b20      	cmp	r3, #32
 8005062:	d005      	beq.n	8005070 <arm_cfft_f32+0xd2>
 8005064:	e012      	b.n	800508c <arm_cfft_f32+0xee>
    {
    case 16:
    case 128:
    case 1024:
        arm_cfft_radix8by2_f32  ( (arm_cfft_instance_f32 *) S, p1);
 8005066:	68b9      	ldr	r1, [r7, #8]
 8005068:	68f8      	ldr	r0, [r7, #12]
 800506a:	f7fe ff79 	bl	8003f60 <arm_cfft_radix8by2_f32>
        break;
 800506e:	e00d      	b.n	800508c <arm_cfft_f32+0xee>
    case 32:
    case 256:
    case 2048:
        arm_cfft_radix8by4_f32  ( (arm_cfft_instance_f32 *) S, p1);
 8005070:	68b9      	ldr	r1, [r7, #8]
 8005072:	68f8      	ldr	r0, [r7, #12]
 8005074:	f7ff f968 	bl	8004348 <arm_cfft_radix8by4_f32>
        break;
 8005078:	e008      	b.n	800508c <arm_cfft_f32+0xee>
    case 64:
    case 512:
    case 4096:
        arm_radix8_butterfly_f32( p1, L, (float32_t *) S->pTwiddle, 1);
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	b299      	uxth	r1, r3
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	685a      	ldr	r2, [r3, #4]
 8005082:	2301      	movs	r3, #1
 8005084:	68b8      	ldr	r0, [r7, #8]
 8005086:	f000 f845 	bl	8005114 <arm_radix8_butterfly_f32>
        break;
 800508a:	bf00      	nop
    }

    if ( bitReverseFlag )
 800508c:	79bb      	ldrb	r3, [r7, #6]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d007      	beq.n	80050a2 <arm_cfft_f32+0x104>
        arm_bitreversal_32((uint32_t*)p1,S->bitRevLength,S->pBitRevTable);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	8999      	ldrh	r1, [r3, #12]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	461a      	mov	r2, r3
 800509c:	68b8      	ldr	r0, [r7, #8]
 800509e:	f7fb f8cf 	bl	8000240 <arm_bitreversal_32>

    if (ifftFlag == 1U)
 80050a2:	79fb      	ldrb	r3, [r7, #7]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d130      	bne.n	800510a <arm_cfft_f32+0x16c>
    {
        invL = 1.0f/(float32_t)L;
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	ee07 3a90 	vmov	s15, r3
 80050ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80050b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050ba:	edc7 7a04 	vstr	s15, [r7, #16]
        /*  Conjugate and scale output data */
        pSrc = p1;
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++)
 80050c2:	2300      	movs	r3, #0
 80050c4:	61fb      	str	r3, [r7, #28]
 80050c6:	e01c      	b.n	8005102 <arm_cfft_f32+0x164>
        {
            *pSrc++ *=   invL ;
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	1d1a      	adds	r2, r3, #4
 80050cc:	61ba      	str	r2, [r7, #24]
 80050ce:	ed93 7a00 	vldr	s14, [r3]
 80050d2:	edd7 7a04 	vldr	s15, [r7, #16]
 80050d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050da:	edc3 7a00 	vstr	s15, [r3]
            *pSrc  = -(*pSrc) * invL;
 80050de:	69bb      	ldr	r3, [r7, #24]
 80050e0:	edd3 7a00 	vldr	s15, [r3]
 80050e4:	eeb1 7a67 	vneg.f32	s14, s15
 80050e8:	edd7 7a04 	vldr	s15, [r7, #16]
 80050ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	edc3 7a00 	vstr	s15, [r3]
            pSrc++;
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	3304      	adds	r3, #4
 80050fa:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++)
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	3301      	adds	r3, #1
 8005100:	61fb      	str	r3, [r7, #28]
 8005102:	69fa      	ldr	r2, [r7, #28]
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	429a      	cmp	r2, r3
 8005108:	d3de      	bcc.n	80050c8 <arm_cfft_f32+0x12a>
        }
    }
}
 800510a:	bf00      	nop
 800510c:	3720      	adds	r7, #32
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
	...

08005114 <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
float32_t * pSrc,
uint16_t fftLen,
const float32_t * pCoef,
uint16_t twidCoefModifier)
{
 8005114:	b480      	push	{r7}
 8005116:	b0bd      	sub	sp, #244	; 0xf4
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	607a      	str	r2, [r7, #4]
 800511e:	461a      	mov	r2, r3
 8005120:	460b      	mov	r3, r1
 8005122:	817b      	strh	r3, [r7, #10]
 8005124:	4613      	mov	r3, r2
 8005126:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 8005128:	4b09      	ldr	r3, [pc, #36]	; (8005150 <arm_radix8_butterfly_f32+0x3c>)
 800512a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

   n2 = fftLen;
 800512e:	897b      	ldrh	r3, [r7, #10]
 8005130:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

   do
   {
      n1 = n2;
 8005134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005138:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      n2 = n2 >> 3;
 800513c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005140:	08db      	lsrs	r3, r3, #3
 8005142:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      i1 = 0;
 8005146:	2300      	movs	r3, #0
 8005148:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800514c:	e002      	b.n	8005154 <arm_radix8_butterfly_f32+0x40>
 800514e:	bf00      	nop
 8005150:	3f3504f3 	.word	0x3f3504f3

      do
      {
         i2 = i1 + n2;
 8005154:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8005158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800515c:	4413      	add	r3, r2
 800515e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
         i3 = i2 + n2;
 8005162:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8005166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800516a:	4413      	add	r3, r2
 800516c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
         i4 = i3 + n2;
 8005170:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005174:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005178:	4413      	add	r3, r2
 800517a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
         i5 = i4 + n2;
 800517e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8005182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005186:	4413      	add	r3, r2
 8005188:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
         i6 = i5 + n2;
 800518c:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005190:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005194:	4413      	add	r3, r2
 8005196:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
         i7 = i6 + n2;
 800519a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800519e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051a2:	4413      	add	r3, r2
 80051a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
         i8 = i7 + n2;
 80051a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80051ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051b0:	4413      	add	r3, r2
 80051b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 80051b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80051ba:	00db      	lsls	r3, r3, #3
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	4413      	add	r3, r2
 80051c0:	ed93 7a00 	vldr	s14, [r3]
 80051c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80051c8:	00db      	lsls	r3, r3, #3
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	4413      	add	r3, r2
 80051ce:	edd3 7a00 	vldr	s15, [r3]
 80051d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051d6:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 80051da:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80051de:	00db      	lsls	r3, r3, #3
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	4413      	add	r3, r2
 80051e4:	ed93 7a00 	vldr	s14, [r3]
 80051e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80051ec:	00db      	lsls	r3, r3, #3
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	4413      	add	r3, r2
 80051f2:	edd3 7a00 	vldr	s15, [r3]
 80051f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80051fa:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 80051fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005202:	00db      	lsls	r3, r3, #3
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	4413      	add	r3, r2
 8005208:	ed93 7a00 	vldr	s14, [r3]
 800520c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005210:	00db      	lsls	r3, r3, #3
 8005212:	68fa      	ldr	r2, [r7, #12]
 8005214:	4413      	add	r3, r2
 8005216:	edd3 7a00 	vldr	s15, [r3]
 800521a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800521e:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8005222:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005226:	00db      	lsls	r3, r3, #3
 8005228:	68fa      	ldr	r2, [r7, #12]
 800522a:	4413      	add	r3, r2
 800522c:	ed93 7a00 	vldr	s14, [r3]
 8005230:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005234:	00db      	lsls	r3, r3, #3
 8005236:	68fa      	ldr	r2, [r7, #12]
 8005238:	4413      	add	r3, r2
 800523a:	edd3 7a00 	vldr	s15, [r3]
 800523e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005242:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8005246:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800524a:	00db      	lsls	r3, r3, #3
 800524c:	68fa      	ldr	r2, [r7, #12]
 800524e:	4413      	add	r3, r2
 8005250:	ed93 7a00 	vldr	s14, [r3]
 8005254:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005258:	00db      	lsls	r3, r3, #3
 800525a:	68fa      	ldr	r2, [r7, #12]
 800525c:	4413      	add	r3, r2
 800525e:	edd3 7a00 	vldr	s15, [r3]
 8005262:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005266:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 800526a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800526e:	00db      	lsls	r3, r3, #3
 8005270:	68fa      	ldr	r2, [r7, #12]
 8005272:	4413      	add	r3, r2
 8005274:	ed93 7a00 	vldr	s14, [r3]
 8005278:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800527c:	00db      	lsls	r3, r3, #3
 800527e:	68fa      	ldr	r2, [r7, #12]
 8005280:	4413      	add	r3, r2
 8005282:	edd3 7a00 	vldr	s15, [r3]
 8005286:	ee77 7a67 	vsub.f32	s15, s14, s15
 800528a:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 800528e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005292:	00db      	lsls	r3, r3, #3
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	4413      	add	r3, r2
 8005298:	ed93 7a00 	vldr	s14, [r3]
 800529c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80052a0:	00db      	lsls	r3, r3, #3
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	4413      	add	r3, r2
 80052a6:	edd3 7a00 	vldr	s15, [r3]
 80052aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052ae:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 80052b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80052b6:	00db      	lsls	r3, r3, #3
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	4413      	add	r3, r2
 80052bc:	ed93 7a00 	vldr	s14, [r3]
 80052c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80052c4:	00db      	lsls	r3, r3, #3
 80052c6:	68fa      	ldr	r2, [r7, #12]
 80052c8:	4413      	add	r3, r2
 80052ca:	edd3 7a00 	vldr	s15, [r3]
 80052ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80052d2:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         t1 = r1 - r3;
 80052d6:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80052da:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80052de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80052e2:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r1 = r1 + r3;
 80052e6:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80052ea:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80052ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052f2:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r3 = r2 - r4;
 80052f6:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80052fa:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80052fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005302:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r2 = r2 + r4;
 8005306:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800530a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800530e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005312:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1] = r1 + r2;
 8005316:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800531a:	00db      	lsls	r3, r3, #3
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	4413      	add	r3, r2
 8005320:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8005324:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8005328:	ee77 7a27 	vadd.f32	s15, s14, s15
 800532c:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 8005330:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005334:	00db      	lsls	r3, r3, #3
 8005336:	68fa      	ldr	r2, [r7, #12]
 8005338:	4413      	add	r3, r2
 800533a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800533e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8005342:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005346:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 800534a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800534e:	00db      	lsls	r3, r3, #3
 8005350:	3304      	adds	r3, #4
 8005352:	68fa      	ldr	r2, [r7, #12]
 8005354:	4413      	add	r3, r2
 8005356:	ed93 7a00 	vldr	s14, [r3]
 800535a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800535e:	00db      	lsls	r3, r3, #3
 8005360:	3304      	adds	r3, #4
 8005362:	68fa      	ldr	r2, [r7, #12]
 8005364:	4413      	add	r3, r2
 8005366:	edd3 7a00 	vldr	s15, [r3]
 800536a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800536e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8005372:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005376:	00db      	lsls	r3, r3, #3
 8005378:	3304      	adds	r3, #4
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	4413      	add	r3, r2
 800537e:	ed93 7a00 	vldr	s14, [r3]
 8005382:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005386:	00db      	lsls	r3, r3, #3
 8005388:	3304      	adds	r3, #4
 800538a:	68fa      	ldr	r2, [r7, #12]
 800538c:	4413      	add	r3, r2
 800538e:	edd3 7a00 	vldr	s15, [r3]
 8005392:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005396:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 800539a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800539e:	00db      	lsls	r3, r3, #3
 80053a0:	3304      	adds	r3, #4
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	4413      	add	r3, r2
 80053a6:	ed93 7a00 	vldr	s14, [r3]
 80053aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80053ae:	00db      	lsls	r3, r3, #3
 80053b0:	3304      	adds	r3, #4
 80053b2:	68fa      	ldr	r2, [r7, #12]
 80053b4:	4413      	add	r3, r2
 80053b6:	edd3 7a00 	vldr	s15, [r3]
 80053ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053be:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 80053c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80053c6:	00db      	lsls	r3, r3, #3
 80053c8:	3304      	adds	r3, #4
 80053ca:	68fa      	ldr	r2, [r7, #12]
 80053cc:	4413      	add	r3, r2
 80053ce:	ed93 7a00 	vldr	s14, [r3]
 80053d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80053d6:	00db      	lsls	r3, r3, #3
 80053d8:	3304      	adds	r3, #4
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	4413      	add	r3, r2
 80053de:	edd3 7a00 	vldr	s15, [r3]
 80053e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053e6:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 80053ea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80053ee:	00db      	lsls	r3, r3, #3
 80053f0:	3304      	adds	r3, #4
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	4413      	add	r3, r2
 80053f6:	ed93 7a00 	vldr	s14, [r3]
 80053fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80053fe:	00db      	lsls	r3, r3, #3
 8005400:	3304      	adds	r3, #4
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	4413      	add	r3, r2
 8005406:	edd3 7a00 	vldr	s15, [r3]
 800540a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800540e:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8005412:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005416:	00db      	lsls	r3, r3, #3
 8005418:	3304      	adds	r3, #4
 800541a:	68fa      	ldr	r2, [r7, #12]
 800541c:	4413      	add	r3, r2
 800541e:	ed93 7a00 	vldr	s14, [r3]
 8005422:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005426:	00db      	lsls	r3, r3, #3
 8005428:	3304      	adds	r3, #4
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	4413      	add	r3, r2
 800542e:	edd3 7a00 	vldr	s15, [r3]
 8005432:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005436:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 800543a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800543e:	00db      	lsls	r3, r3, #3
 8005440:	3304      	adds	r3, #4
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	4413      	add	r3, r2
 8005446:	ed93 7a00 	vldr	s14, [r3]
 800544a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800544e:	00db      	lsls	r3, r3, #3
 8005450:	3304      	adds	r3, #4
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	4413      	add	r3, r2
 8005456:	edd3 7a00 	vldr	s15, [r3]
 800545a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800545e:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8005462:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005466:	00db      	lsls	r3, r3, #3
 8005468:	3304      	adds	r3, #4
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	4413      	add	r3, r2
 800546e:	ed93 7a00 	vldr	s14, [r3]
 8005472:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005476:	00db      	lsls	r3, r3, #3
 8005478:	3304      	adds	r3, #4
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	4413      	add	r3, r2
 800547e:	edd3 7a00 	vldr	s15, [r3]
 8005482:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005486:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         t2 = r1 - s3;
 800548a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800548e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005492:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005496:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         r1 = r1 + s3;
 800549a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800549e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80054a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054a6:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s3 = r2 - r4;
 80054aa:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80054ae:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80054b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80054b6:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         r2 = r2 + r4;
 80054ba:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80054be:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80054c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054c6:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 80054ca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80054ce:	00db      	lsls	r3, r3, #3
 80054d0:	3304      	adds	r3, #4
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	4413      	add	r3, r2
 80054d6:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80054da:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80054de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054e2:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 80054e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80054ea:	00db      	lsls	r3, r3, #3
 80054ec:	3304      	adds	r3, #4
 80054ee:	68fa      	ldr	r2, [r7, #12]
 80054f0:	4413      	add	r3, r2
 80054f2:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80054f6:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80054fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80054fe:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 8005502:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005506:	00db      	lsls	r3, r3, #3
 8005508:	68fa      	ldr	r2, [r7, #12]
 800550a:	4413      	add	r3, r2
 800550c:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8005510:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005514:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005518:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 800551c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005520:	00db      	lsls	r3, r3, #3
 8005522:	68fa      	ldr	r2, [r7, #12]
 8005524:	4413      	add	r3, r2
 8005526:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800552a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800552e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005532:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 8005536:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800553a:	00db      	lsls	r3, r3, #3
 800553c:	3304      	adds	r3, #4
 800553e:	68fa      	ldr	r2, [r7, #12]
 8005540:	4413      	add	r3, r2
 8005542:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8005546:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800554a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800554e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 8005552:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005556:	00db      	lsls	r3, r3, #3
 8005558:	3304      	adds	r3, #4
 800555a:	68fa      	ldr	r2, [r7, #12]
 800555c:	4413      	add	r3, r2
 800555e:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8005562:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8005566:	ee77 7a27 	vadd.f32	s15, s14, s15
 800556a:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 800556e:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8005572:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005576:	ee77 7a67 	vsub.f32	s15, s14, s15
 800557a:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800557e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005582:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r6 = (r6 + r8) * C81;
 8005586:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800558a:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800558e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005592:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8005596:	ee67 7a27 	vmul.f32	s15, s14, s15
 800559a:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r2 = (s6 - s8) * C81;
 800559e:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80055a2:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80055a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80055aa:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80055ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055b2:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = (s6 + s8) * C81;
 80055b6:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80055ba:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80055be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055c2:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80055c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055ca:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         t1 = r5 - r1;
 80055ce:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80055d2:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80055d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80055da:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r5 = r5 + r1;
 80055de:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80055e2:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80055e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055ea:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r8 = r7 - r6;
 80055ee:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80055f2:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80055f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80055fa:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         r7 = r7 + r6;
 80055fe:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8005602:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8005606:	ee77 7a27 	vadd.f32	s15, s14, s15
 800560a:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         t2 = s5 - r2;
 800560e:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8005612:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8005616:	ee77 7a67 	vsub.f32	s15, s14, s15
 800561a:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         s5 = s5 + r2;
 800561e:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8005622:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8005626:	ee77 7a27 	vadd.f32	s15, s14, s15
 800562a:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         s8 = s7 - s6;
 800562e:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8005632:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005636:	ee77 7a67 	vsub.f32	s15, s14, s15
 800563a:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         s7 = s7 + s6;
 800563e:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8005642:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005646:	ee77 7a27 	vadd.f32	s15, s14, s15
 800564a:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         pSrc[2 * i2]     = r5 + s7;
 800564e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005652:	00db      	lsls	r3, r3, #3
 8005654:	68fa      	ldr	r2, [r7, #12]
 8005656:	4413      	add	r3, r2
 8005658:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800565c:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8005660:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005664:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 8005668:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800566c:	00db      	lsls	r3, r3, #3
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	4413      	add	r3, r2
 8005672:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8005676:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800567a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800567e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 8005682:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005686:	00db      	lsls	r3, r3, #3
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	4413      	add	r3, r2
 800568c:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8005690:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8005694:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005698:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 800569c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80056a0:	00db      	lsls	r3, r3, #3
 80056a2:	68fa      	ldr	r2, [r7, #12]
 80056a4:	4413      	add	r3, r2
 80056a6:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80056aa:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80056ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80056b2:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 80056b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80056ba:	00db      	lsls	r3, r3, #3
 80056bc:	3304      	adds	r3, #4
 80056be:	68fa      	ldr	r2, [r7, #12]
 80056c0:	4413      	add	r3, r2
 80056c2:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80056c6:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80056ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80056ce:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 80056d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80056d6:	00db      	lsls	r3, r3, #3
 80056d8:	3304      	adds	r3, #4
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	4413      	add	r3, r2
 80056de:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80056e2:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80056e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80056ea:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 80056ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80056f2:	00db      	lsls	r3, r3, #3
 80056f4:	3304      	adds	r3, #4
 80056f6:	68fa      	ldr	r2, [r7, #12]
 80056f8:	4413      	add	r3, r2
 80056fa:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80056fe:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005702:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005706:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 800570a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800570e:	00db      	lsls	r3, r3, #3
 8005710:	3304      	adds	r3, #4
 8005712:	68fa      	ldr	r2, [r7, #12]
 8005714:	4413      	add	r3, r2
 8005716:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800571a:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800571e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005722:	edc3 7a00 	vstr	s15, [r3]

         i1 += n1;
 8005726:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800572a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800572e:	4413      	add	r3, r2
 8005730:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      } while (i1 < fftLen);
 8005734:	897b      	ldrh	r3, [r7, #10]
 8005736:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800573a:	429a      	cmp	r2, r3
 800573c:	f4ff ad0a 	bcc.w	8005154 <arm_radix8_butterfly_f32+0x40>

      if (n2 < 8)
 8005740:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005744:	2b07      	cmp	r3, #7
 8005746:	f240 84e3 	bls.w	8006110 <arm_radix8_butterfly_f32+0xffc>
         break;

      ia1 = 0;
 800574a:	2300      	movs	r3, #0
 800574c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      j = 1;
 8005750:	2301      	movs	r3, #1
 8005752:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 8005756:	893b      	ldrh	r3, [r7, #8]
 8005758:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800575c:	4413      	add	r3, r2
 800575e:	67fb      	str	r3, [r7, #124]	; 0x7c
         ia1 = id;
 8005760:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005762:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
         ia2 = ia1 + id;
 8005766:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800576a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800576c:	4413      	add	r3, r2
 800576e:	67bb      	str	r3, [r7, #120]	; 0x78
         ia3 = ia2 + id;
 8005770:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005772:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005774:	4413      	add	r3, r2
 8005776:	677b      	str	r3, [r7, #116]	; 0x74
         ia4 = ia3 + id;
 8005778:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800577a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800577c:	4413      	add	r3, r2
 800577e:	673b      	str	r3, [r7, #112]	; 0x70
         ia5 = ia4 + id;
 8005780:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005782:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005784:	4413      	add	r3, r2
 8005786:	66fb      	str	r3, [r7, #108]	; 0x6c
         ia6 = ia5 + id;
 8005788:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800578a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800578c:	4413      	add	r3, r2
 800578e:	66bb      	str	r3, [r7, #104]	; 0x68
         ia7 = ia6 + id;
 8005790:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005792:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005794:	4413      	add	r3, r2
 8005796:	667b      	str	r3, [r7, #100]	; 0x64

         co2 = pCoef[2 * ia1];
 8005798:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800579c:	00db      	lsls	r3, r3, #3
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	4413      	add	r3, r2
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	663b      	str	r3, [r7, #96]	; 0x60
         co3 = pCoef[2 * ia2];
 80057a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057a8:	00db      	lsls	r3, r3, #3
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	4413      	add	r3, r2
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	65fb      	str	r3, [r7, #92]	; 0x5c
         co4 = pCoef[2 * ia3];
 80057b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057b4:	00db      	lsls	r3, r3, #3
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	4413      	add	r3, r2
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	65bb      	str	r3, [r7, #88]	; 0x58
         co5 = pCoef[2 * ia4];
 80057be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80057c0:	00db      	lsls	r3, r3, #3
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	4413      	add	r3, r2
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	657b      	str	r3, [r7, #84]	; 0x54
         co6 = pCoef[2 * ia5];
 80057ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057cc:	00db      	lsls	r3, r3, #3
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	4413      	add	r3, r2
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	653b      	str	r3, [r7, #80]	; 0x50
         co7 = pCoef[2 * ia6];
 80057d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80057d8:	00db      	lsls	r3, r3, #3
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	4413      	add	r3, r2
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	64fb      	str	r3, [r7, #76]	; 0x4c
         co8 = pCoef[2 * ia7];
 80057e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057e4:	00db      	lsls	r3, r3, #3
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	4413      	add	r3, r2
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	64bb      	str	r3, [r7, #72]	; 0x48
         si2 = pCoef[2 * ia1 + 1];
 80057ee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80057f2:	00db      	lsls	r3, r3, #3
 80057f4:	3304      	adds	r3, #4
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	4413      	add	r3, r2
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	647b      	str	r3, [r7, #68]	; 0x44
         si3 = pCoef[2 * ia2 + 1];
 80057fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005800:	00db      	lsls	r3, r3, #3
 8005802:	3304      	adds	r3, #4
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	4413      	add	r3, r2
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	643b      	str	r3, [r7, #64]	; 0x40
         si4 = pCoef[2 * ia3 + 1];
 800580c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800580e:	00db      	lsls	r3, r3, #3
 8005810:	3304      	adds	r3, #4
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	4413      	add	r3, r2
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	63fb      	str	r3, [r7, #60]	; 0x3c
         si5 = pCoef[2 * ia4 + 1];
 800581a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800581c:	00db      	lsls	r3, r3, #3
 800581e:	3304      	adds	r3, #4
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	4413      	add	r3, r2
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	63bb      	str	r3, [r7, #56]	; 0x38
         si6 = pCoef[2 * ia5 + 1];
 8005828:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800582a:	00db      	lsls	r3, r3, #3
 800582c:	3304      	adds	r3, #4
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	4413      	add	r3, r2
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	637b      	str	r3, [r7, #52]	; 0x34
         si7 = pCoef[2 * ia6 + 1];
 8005836:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005838:	00db      	lsls	r3, r3, #3
 800583a:	3304      	adds	r3, #4
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	4413      	add	r3, r2
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	633b      	str	r3, [r7, #48]	; 0x30
         si8 = pCoef[2 * ia7 + 1];
 8005844:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005846:	00db      	lsls	r3, r3, #3
 8005848:	3304      	adds	r3, #4
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	4413      	add	r3, r2
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	62fb      	str	r3, [r7, #44]	; 0x2c

         i1 = j;
 8005852:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005856:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 800585a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800585e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005862:	4413      	add	r3, r2
 8005864:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            i3 = i2 + n2;
 8005868:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800586c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005870:	4413      	add	r3, r2
 8005872:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
            i4 = i3 + n2;
 8005876:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800587a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800587e:	4413      	add	r3, r2
 8005880:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            i5 = i4 + n2;
 8005884:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8005888:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800588c:	4413      	add	r3, r2
 800588e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            i6 = i5 + n2;
 8005892:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800589a:	4413      	add	r3, r2
 800589c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            i7 = i6 + n2;
 80058a0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80058a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058a8:	4413      	add	r3, r2
 80058aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            i8 = i7 + n2;
 80058ae:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80058b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058b6:	4413      	add	r3, r2
 80058b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 80058bc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80058c0:	00db      	lsls	r3, r3, #3
 80058c2:	68fa      	ldr	r2, [r7, #12]
 80058c4:	4413      	add	r3, r2
 80058c6:	ed93 7a00 	vldr	s14, [r3]
 80058ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80058ce:	00db      	lsls	r3, r3, #3
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	4413      	add	r3, r2
 80058d4:	edd3 7a00 	vldr	s15, [r3]
 80058d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80058dc:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 80058e0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80058e4:	00db      	lsls	r3, r3, #3
 80058e6:	68fa      	ldr	r2, [r7, #12]
 80058e8:	4413      	add	r3, r2
 80058ea:	ed93 7a00 	vldr	s14, [r3]
 80058ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80058f2:	00db      	lsls	r3, r3, #3
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	4413      	add	r3, r2
 80058f8:	edd3 7a00 	vldr	s15, [r3]
 80058fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005900:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8005904:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005908:	00db      	lsls	r3, r3, #3
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	4413      	add	r3, r2
 800590e:	ed93 7a00 	vldr	s14, [r3]
 8005912:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005916:	00db      	lsls	r3, r3, #3
 8005918:	68fa      	ldr	r2, [r7, #12]
 800591a:	4413      	add	r3, r2
 800591c:	edd3 7a00 	vldr	s15, [r3]
 8005920:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005924:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8005928:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800592c:	00db      	lsls	r3, r3, #3
 800592e:	68fa      	ldr	r2, [r7, #12]
 8005930:	4413      	add	r3, r2
 8005932:	ed93 7a00 	vldr	s14, [r3]
 8005936:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800593a:	00db      	lsls	r3, r3, #3
 800593c:	68fa      	ldr	r2, [r7, #12]
 800593e:	4413      	add	r3, r2
 8005940:	edd3 7a00 	vldr	s15, [r3]
 8005944:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005948:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 800594c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005950:	00db      	lsls	r3, r3, #3
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	4413      	add	r3, r2
 8005956:	ed93 7a00 	vldr	s14, [r3]
 800595a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800595e:	00db      	lsls	r3, r3, #3
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	4413      	add	r3, r2
 8005964:	edd3 7a00 	vldr	s15, [r3]
 8005968:	ee77 7a27 	vadd.f32	s15, s14, s15
 800596c:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8005970:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005974:	00db      	lsls	r3, r3, #3
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	4413      	add	r3, r2
 800597a:	ed93 7a00 	vldr	s14, [r3]
 800597e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005982:	00db      	lsls	r3, r3, #3
 8005984:	68fa      	ldr	r2, [r7, #12]
 8005986:	4413      	add	r3, r2
 8005988:	edd3 7a00 	vldr	s15, [r3]
 800598c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005990:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8005994:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005998:	00db      	lsls	r3, r3, #3
 800599a:	68fa      	ldr	r2, [r7, #12]
 800599c:	4413      	add	r3, r2
 800599e:	ed93 7a00 	vldr	s14, [r3]
 80059a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80059a6:	00db      	lsls	r3, r3, #3
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	4413      	add	r3, r2
 80059ac:	edd3 7a00 	vldr	s15, [r3]
 80059b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059b4:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 80059b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80059bc:	00db      	lsls	r3, r3, #3
 80059be:	68fa      	ldr	r2, [r7, #12]
 80059c0:	4413      	add	r3, r2
 80059c2:	ed93 7a00 	vldr	s14, [r3]
 80059c6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80059ca:	00db      	lsls	r3, r3, #3
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	4413      	add	r3, r2
 80059d0:	edd3 7a00 	vldr	s15, [r3]
 80059d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80059d8:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            t1 = r1 - r3;
 80059dc:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80059e0:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80059e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80059e8:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r1 = r1 + r3;
 80059ec:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80059f0:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80059f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059f8:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r3 = r2 - r4;
 80059fc:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8005a00:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005a04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a08:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r2 = r2 + r4;
 8005a0c:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8005a10:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005a14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a18:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            pSrc[2 * i1] = r1 + r2;
 8005a1c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a20:	00db      	lsls	r3, r3, #3
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	4413      	add	r3, r2
 8005a26:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8005a2a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8005a2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a32:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 8005a36:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8005a3a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8005a3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a42:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8005a46:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a4a:	00db      	lsls	r3, r3, #3
 8005a4c:	3304      	adds	r3, #4
 8005a4e:	68fa      	ldr	r2, [r7, #12]
 8005a50:	4413      	add	r3, r2
 8005a52:	ed93 7a00 	vldr	s14, [r3]
 8005a56:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005a5a:	00db      	lsls	r3, r3, #3
 8005a5c:	3304      	adds	r3, #4
 8005a5e:	68fa      	ldr	r2, [r7, #12]
 8005a60:	4413      	add	r3, r2
 8005a62:	edd3 7a00 	vldr	s15, [r3]
 8005a66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a6a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8005a6e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a72:	00db      	lsls	r3, r3, #3
 8005a74:	3304      	adds	r3, #4
 8005a76:	68fa      	ldr	r2, [r7, #12]
 8005a78:	4413      	add	r3, r2
 8005a7a:	ed93 7a00 	vldr	s14, [r3]
 8005a7e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005a82:	00db      	lsls	r3, r3, #3
 8005a84:	3304      	adds	r3, #4
 8005a86:	68fa      	ldr	r2, [r7, #12]
 8005a88:	4413      	add	r3, r2
 8005a8a:	edd3 7a00 	vldr	s15, [r3]
 8005a8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a92:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8005a96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a9a:	00db      	lsls	r3, r3, #3
 8005a9c:	3304      	adds	r3, #4
 8005a9e:	68fa      	ldr	r2, [r7, #12]
 8005aa0:	4413      	add	r3, r2
 8005aa2:	ed93 7a00 	vldr	s14, [r3]
 8005aa6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005aaa:	00db      	lsls	r3, r3, #3
 8005aac:	3304      	adds	r3, #4
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	4413      	add	r3, r2
 8005ab2:	edd3 7a00 	vldr	s15, [r3]
 8005ab6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005aba:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8005abe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ac2:	00db      	lsls	r3, r3, #3
 8005ac4:	3304      	adds	r3, #4
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	4413      	add	r3, r2
 8005aca:	ed93 7a00 	vldr	s14, [r3]
 8005ace:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005ad2:	00db      	lsls	r3, r3, #3
 8005ad4:	3304      	adds	r3, #4
 8005ad6:	68fa      	ldr	r2, [r7, #12]
 8005ad8:	4413      	add	r3, r2
 8005ada:	edd3 7a00 	vldr	s15, [r3]
 8005ade:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ae2:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8005ae6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005aea:	00db      	lsls	r3, r3, #3
 8005aec:	3304      	adds	r3, #4
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	4413      	add	r3, r2
 8005af2:	ed93 7a00 	vldr	s14, [r3]
 8005af6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005afa:	00db      	lsls	r3, r3, #3
 8005afc:	3304      	adds	r3, #4
 8005afe:	68fa      	ldr	r2, [r7, #12]
 8005b00:	4413      	add	r3, r2
 8005b02:	edd3 7a00 	vldr	s15, [r3]
 8005b06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b0a:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8005b0e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005b12:	00db      	lsls	r3, r3, #3
 8005b14:	3304      	adds	r3, #4
 8005b16:	68fa      	ldr	r2, [r7, #12]
 8005b18:	4413      	add	r3, r2
 8005b1a:	ed93 7a00 	vldr	s14, [r3]
 8005b1e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005b22:	00db      	lsls	r3, r3, #3
 8005b24:	3304      	adds	r3, #4
 8005b26:	68fa      	ldr	r2, [r7, #12]
 8005b28:	4413      	add	r3, r2
 8005b2a:	edd3 7a00 	vldr	s15, [r3]
 8005b2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b32:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8005b36:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005b3a:	00db      	lsls	r3, r3, #3
 8005b3c:	3304      	adds	r3, #4
 8005b3e:	68fa      	ldr	r2, [r7, #12]
 8005b40:	4413      	add	r3, r2
 8005b42:	ed93 7a00 	vldr	s14, [r3]
 8005b46:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005b4a:	00db      	lsls	r3, r3, #3
 8005b4c:	3304      	adds	r3, #4
 8005b4e:	68fa      	ldr	r2, [r7, #12]
 8005b50:	4413      	add	r3, r2
 8005b52:	edd3 7a00 	vldr	s15, [r3]
 8005b56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b5a:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8005b5e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005b62:	00db      	lsls	r3, r3, #3
 8005b64:	3304      	adds	r3, #4
 8005b66:	68fa      	ldr	r2, [r7, #12]
 8005b68:	4413      	add	r3, r2
 8005b6a:	ed93 7a00 	vldr	s14, [r3]
 8005b6e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005b72:	00db      	lsls	r3, r3, #3
 8005b74:	3304      	adds	r3, #4
 8005b76:	68fa      	ldr	r2, [r7, #12]
 8005b78:	4413      	add	r3, r2
 8005b7a:	edd3 7a00 	vldr	s15, [r3]
 8005b7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b82:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            t2 = s1 - s3;
 8005b86:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8005b8a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005b8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b92:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s1 = s1 + s3;
 8005b96:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8005b9a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005b9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ba2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s3 = s2 - s4;
 8005ba6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005baa:	edd7 7a08 	vldr	s15, [r7, #32]
 8005bae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005bb2:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s2 = s2 + s4;
 8005bb6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005bba:	edd7 7a08 	vldr	s15, [r7, #32]
 8005bbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005bc2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            r1 = t1 + s3;
 8005bc6:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8005bca:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005bce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005bd2:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            t1 = t1 - s3;
 8005bd6:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8005bda:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005bde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005be2:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 8005be6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005bea:	00db      	lsls	r3, r3, #3
 8005bec:	3304      	adds	r3, #4
 8005bee:	68fa      	ldr	r2, [r7, #12]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8005bf6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005bfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005bfe:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 8005c02:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8005c06:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005c0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c0e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s1 = t2 - r3;
 8005c12:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8005c16:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8005c1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c1e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            t2 = t2 + r3;
 8005c22:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8005c26:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8005c2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c2e:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co5 * r2;
 8005c32:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8005c36:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8005c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c3e:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 8005c42:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8005c46:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005c4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c4e:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 8005c52:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8005c56:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c5e:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 8005c62:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8005c66:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8005c6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c6e:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 8005c72:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005c76:	00db      	lsls	r3, r3, #3
 8005c78:	68fa      	ldr	r2, [r7, #12]
 8005c7a:	4413      	add	r3, r2
 8005c7c:	ed97 7a07 	vldr	s14, [r7, #28]
 8005c80:	edd7 7a06 	vldr	s15, [r7, #24]
 8005c84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c88:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 8005c8c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005c90:	00db      	lsls	r3, r3, #3
 8005c92:	3304      	adds	r3, #4
 8005c94:	68fa      	ldr	r2, [r7, #12]
 8005c96:	4413      	add	r3, r2
 8005c98:	ed97 7a05 	vldr	s14, [r7, #20]
 8005c9c:	edd7 7a04 	vldr	s15, [r7, #16]
 8005ca0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ca4:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 8005ca8:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8005cac:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005cb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cb4:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 8005cb8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8005cbc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005cc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cc4:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 8005cc8:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8005ccc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005cd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cd4:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 8005cd8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8005cdc:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005ce0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ce4:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 8005ce8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005cec:	00db      	lsls	r3, r3, #3
 8005cee:	68fa      	ldr	r2, [r7, #12]
 8005cf0:	4413      	add	r3, r2
 8005cf2:	ed97 7a07 	vldr	s14, [r7, #28]
 8005cf6:	edd7 7a06 	vldr	s15, [r7, #24]
 8005cfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005cfe:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 8005d02:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005d06:	00db      	lsls	r3, r3, #3
 8005d08:	3304      	adds	r3, #4
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	ed97 7a05 	vldr	s14, [r7, #20]
 8005d12:	edd7 7a04 	vldr	s15, [r7, #16]
 8005d16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d1a:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 8005d1e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8005d22:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d2a:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 8005d2e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8005d32:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d3a:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 8005d3e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8005d42:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005d46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d4a:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 8005d4e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8005d52:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005d56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d5a:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 8005d5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005d62:	00db      	lsls	r3, r3, #3
 8005d64:	68fa      	ldr	r2, [r7, #12]
 8005d66:	4413      	add	r3, r2
 8005d68:	ed97 7a07 	vldr	s14, [r7, #28]
 8005d6c:	edd7 7a06 	vldr	s15, [r7, #24]
 8005d70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d74:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 8005d78:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005d7c:	00db      	lsls	r3, r3, #3
 8005d7e:	3304      	adds	r3, #4
 8005d80:	68fa      	ldr	r2, [r7, #12]
 8005d82:	4413      	add	r3, r2
 8005d84:	ed97 7a05 	vldr	s14, [r7, #20]
 8005d88:	edd7 7a04 	vldr	s15, [r7, #16]
 8005d8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d90:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 8005d94:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8005d98:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005d9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005da0:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8005da4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005da8:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r6 = (r6 + r8) * C81;
 8005dac:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8005db0:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005db4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005db8:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8005dbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dc0:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            s1 = (s6 - s8) * C81;
 8005dc4:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8005dc8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8005dcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005dd0:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8005dd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dd8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s6 = (s6 + s8) * C81;
 8005ddc:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8005de0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8005de4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005de8:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8005dec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005df0:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t1 = r5 - r1;
 8005df4:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8005df8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005dfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e00:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r5 = r5 + r1;
 8005e04:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8005e08:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005e0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e10:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r8 = r7 - r6;
 8005e14:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8005e18:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8005e1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e20:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            r7 = r7 + r6;
 8005e24:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8005e28:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8005e2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e30:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            t2 = s5 - s1;
 8005e34:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8005e38:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005e3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e40:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s5 = s5 + s1;
 8005e44:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8005e48:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005e4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e50:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s8 = s7 - s6;
 8005e54:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8005e58:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005e5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e60:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            s7 = s7 + s6;
 8005e64:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8005e68:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005e6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e70:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            r1 = r5 + s7;
 8005e74:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8005e78:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8005e7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e80:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = r5 - s7;
 8005e84:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8005e88:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8005e8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e90:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r6 = t1 + s8;
 8005e94:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8005e98:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8005e9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ea0:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            t1 = t1 - s8;
 8005ea4:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8005ea8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8005eac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005eb0:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            s1 = s5 - r7;
 8005eb4:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8005eb8:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005ebc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ec0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = s5 + r7;
 8005ec4:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8005ec8:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005ecc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ed0:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s6 = t2 - r8;
 8005ed4:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8005ed8:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005edc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ee0:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t2 = t2 + r8;
 8005ee4:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8005ee8:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005eec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ef0:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co2 * r1;
 8005ef4:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8005ef8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005efc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f00:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 8005f04:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8005f08:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005f0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f10:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 8005f14:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8005f18:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005f1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f20:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 8005f24:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8005f28:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005f2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f30:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 8005f34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f38:	00db      	lsls	r3, r3, #3
 8005f3a:	68fa      	ldr	r2, [r7, #12]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	ed97 7a07 	vldr	s14, [r7, #28]
 8005f42:	edd7 7a06 	vldr	s15, [r7, #24]
 8005f46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f4a:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 8005f4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f52:	00db      	lsls	r3, r3, #3
 8005f54:	3304      	adds	r3, #4
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	4413      	add	r3, r2
 8005f5a:	ed97 7a05 	vldr	s14, [r7, #20]
 8005f5e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005f62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f66:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 8005f6a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8005f6e:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8005f72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f76:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 8005f7a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8005f7e:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f86:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 8005f8a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8005f8e:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f96:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 8005f9a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8005f9e:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8005fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fa6:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 8005faa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005fae:	00db      	lsls	r3, r3, #3
 8005fb0:	68fa      	ldr	r2, [r7, #12]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	ed97 7a07 	vldr	s14, [r7, #28]
 8005fb8:	edd7 7a06 	vldr	s15, [r7, #24]
 8005fbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005fc0:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 8005fc4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005fc8:	00db      	lsls	r3, r3, #3
 8005fca:	3304      	adds	r3, #4
 8005fcc:	68fa      	ldr	r2, [r7, #12]
 8005fce:	4413      	add	r3, r2
 8005fd0:	ed97 7a05 	vldr	s14, [r7, #20]
 8005fd4:	edd7 7a04 	vldr	s15, [r7, #16]
 8005fd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005fdc:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 8005fe0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8005fe4:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8005fe8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fec:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 8005ff0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8005ff4:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005ff8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ffc:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 8006000:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8006004:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8006008:	ee67 7a27 	vmul.f32	s15, s14, s15
 800600c:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 8006010:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8006014:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8006018:	ee67 7a27 	vmul.f32	s15, s14, s15
 800601c:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 8006020:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006024:	00db      	lsls	r3, r3, #3
 8006026:	68fa      	ldr	r2, [r7, #12]
 8006028:	4413      	add	r3, r2
 800602a:	ed97 7a07 	vldr	s14, [r7, #28]
 800602e:	edd7 7a06 	vldr	s15, [r7, #24]
 8006032:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006036:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 800603a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800603e:	00db      	lsls	r3, r3, #3
 8006040:	3304      	adds	r3, #4
 8006042:	68fa      	ldr	r2, [r7, #12]
 8006044:	4413      	add	r3, r2
 8006046:	ed97 7a05 	vldr	s14, [r7, #20]
 800604a:	edd7 7a04 	vldr	s15, [r7, #16]
 800604e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006052:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 8006056:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800605a:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800605e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006062:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 8006066:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800606a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800606e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006072:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 8006076:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800607a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800607e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006082:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 8006086:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800608a:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800608e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006092:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 8006096:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800609a:	00db      	lsls	r3, r3, #3
 800609c:	68fa      	ldr	r2, [r7, #12]
 800609e:	4413      	add	r3, r2
 80060a0:	ed97 7a07 	vldr	s14, [r7, #28]
 80060a4:	edd7 7a06 	vldr	s15, [r7, #24]
 80060a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80060ac:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 80060b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80060b4:	00db      	lsls	r3, r3, #3
 80060b6:	3304      	adds	r3, #4
 80060b8:	68fa      	ldr	r2, [r7, #12]
 80060ba:	4413      	add	r3, r2
 80060bc:	ed97 7a05 	vldr	s14, [r7, #20]
 80060c0:	edd7 7a04 	vldr	s15, [r7, #16]
 80060c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80060c8:	edc3 7a00 	vstr	s15, [r3]

            i1 += n1;
 80060cc:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80060d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80060d4:	4413      	add	r3, r2
 80060d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         } while (i1 < fftLen);
 80060da:	897b      	ldrh	r3, [r7, #10]
 80060dc:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80060e0:	429a      	cmp	r2, r3
 80060e2:	f4ff abba 	bcc.w	800585a <arm_radix8_butterfly_f32+0x746>

         j++;
 80060e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060ea:	3301      	adds	r3, #1
 80060ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      } while (j < n2);
 80060f0:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80060f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060f8:	429a      	cmp	r2, r3
 80060fa:	f4ff ab2c 	bcc.w	8005756 <arm_radix8_butterfly_f32+0x642>

      twidCoefModifier <<= 3;
 80060fe:	893b      	ldrh	r3, [r7, #8]
 8006100:	00db      	lsls	r3, r3, #3
 8006102:	813b      	strh	r3, [r7, #8]
   } while (n2 > 7);
 8006104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006108:	2b07      	cmp	r3, #7
 800610a:	f63f a813 	bhi.w	8005134 <arm_radix8_butterfly_f32+0x20>
}
 800610e:	e000      	b.n	8006112 <arm_radix8_butterfly_f32+0xffe>
         break;
 8006110:	bf00      	nop
}
 8006112:	bf00      	nop
 8006114:	37f4      	adds	r7, #244	; 0xf4
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr
 800611e:	bf00      	nop

08006120 <stage_rfft_f32>:
#include "arm_math.h"

void stage_rfft_f32(
  arm_rfft_fast_instance_f32 * S,
  float32_t * p, float32_t * pOut)
{
 8006120:	b480      	push	{r7}
 8006122:	b095      	sub	sp, #84	; 0x54
 8006124:	af00      	add	r7, sp, #0
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	60b9      	str	r1, [r7, #8]
 800612a:	607a      	str	r2, [r7, #4]
   uint32_t  k;								   /* Loop Counter                     */
   float32_t twR, twI;						   /* RFFT Twiddle coefficients        */
   float32_t * pCoeff = S->pTwiddleRFFT;  /* Points to RFFT Twiddle factors   */
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	695b      	ldr	r3, [r3, #20]
 8006130:	64bb      	str	r3, [r7, #72]	; 0x48
   float32_t *pA = p;						   /* increasing pointer               */
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	647b      	str	r3, [r7, #68]	; 0x44
   float32_t *pB = p;						   /* decreasing pointer               */
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	643b      	str	r3, [r7, #64]	; 0x40
   float32_t xAR, xAI, xBR, xBI;				/* temporary variables              */
   float32_t t1a, t1b;				         /* temporary variables              */
   float32_t p0, p1, p2, p3;				   /* temporary variables              */


   k = (S->Sint).fftLen - 1;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	881b      	ldrh	r3, [r3, #0]
 800613e:	3b01      	subs	r3, #1
 8006140:	64fb      	str	r3, [r7, #76]	; 0x4c

   /* Pack first and last sample of the frequency domain together */

   xBR = pB[0];
 8006142:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	63fb      	str	r3, [r7, #60]	; 0x3c
   xBI = pB[1];
 8006148:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	63bb      	str	r3, [r7, #56]	; 0x38
   xAR = pA[0];
 800614e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	637b      	str	r3, [r7, #52]	; 0x34
   xAI = pA[1];
 8006154:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	633b      	str	r3, [r7, #48]	; 0x30

   twR = *pCoeff++ ;
 800615a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800615c:	1d1a      	adds	r2, r3, #4
 800615e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	62fb      	str	r3, [r7, #44]	; 0x2c
   twI = *pCoeff++ ;
 8006164:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006166:	1d1a      	adds	r2, r3, #4
 8006168:	64ba      	str	r2, [r7, #72]	; 0x48
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	62bb      	str	r3, [r7, #40]	; 0x28

   // U1 = XA(1) + XB(1); % It is real
   t1a = xBR + xAR  ;
 800616e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8006172:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8006176:	ee77 7a27 	vadd.f32	s15, s14, s15
 800617a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

   // U2 = XB(1) - XA(1); % It is imaginary
   t1b = xBI + xAI  ;
 800617e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8006182:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8006186:	ee77 7a27 	vadd.f32	s15, s14, s15
 800618a:	edc7 7a08 	vstr	s15, [r7, #32]

   // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
   // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
   *pOut++ = 0.5f * ( t1a + t1b );
 800618e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8006192:	edd7 7a08 	vldr	s15, [r7, #32]
 8006196:	ee77 7a27 	vadd.f32	s15, s14, s15
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	1d1a      	adds	r2, r3, #4
 800619e:	607a      	str	r2, [r7, #4]
 80061a0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80061a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80061a8:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( t1a - t1b );
 80061ac:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80061b0:	edd7 7a08 	vldr	s15, [r7, #32]
 80061b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	1d1a      	adds	r2, r3, #4
 80061bc:	607a      	str	r2, [r7, #4]
 80061be:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80061c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80061c6:	edc3 7a00 	vstr	s15, [r3]

   // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
   pB  = p + 2*k;
 80061ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061cc:	00db      	lsls	r3, r3, #3
 80061ce:	68ba      	ldr	r2, [r7, #8]
 80061d0:	4413      	add	r3, r2
 80061d2:	643b      	str	r3, [r7, #64]	; 0x40
   pA += 2;
 80061d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061d6:	3308      	adds	r3, #8
 80061d8:	647b      	str	r3, [r7, #68]	; 0x44
         end
         XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(1) - XB(1))));
         X = XA;
      */

      xBI = pB[1];
 80061da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	63bb      	str	r3, [r7, #56]	; 0x38
      xBR = pB[0];
 80061e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAR = pA[0];
 80061e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	637b      	str	r3, [r7, #52]	; 0x34
      xAI = pA[1];
 80061ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	633b      	str	r3, [r7, #48]	; 0x30

      twR = *pCoeff++;
 80061f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061f4:	1d1a      	adds	r2, r3, #4
 80061f6:	64ba      	str	r2, [r7, #72]	; 0x48
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 80061fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061fe:	1d1a      	adds	r2, r3, #4
 8006200:	64ba      	str	r2, [r7, #72]	; 0x48
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xBR - xAR ;
 8006206:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800620a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800620e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006212:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xBI + xAI ;
 8006216:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800621a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800621e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006222:	edc7 7a08 	vstr	s15, [r7, #32]

      // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
      // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
      p0 = twR * t1a;
 8006226:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800622a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800622e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006232:	edc7 7a07 	vstr	s15, [r7, #28]
      p1 = twI * t1a;
 8006236:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800623a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800623e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006242:	edc7 7a06 	vstr	s15, [r7, #24]
      p2 = twR * t1b;
 8006246:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800624a:	edd7 7a08 	vldr	s15, [r7, #32]
 800624e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006252:	edc7 7a05 	vstr	s15, [r7, #20]
      p3 = twI * t1b;
 8006256:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800625a:	edd7 7a08 	vldr	s15, [r7, #32]
 800625e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006262:	edc7 7a04 	vstr	s15, [r7, #16]

      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 8006266:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800626a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800626e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006272:	edd7 7a07 	vldr	s15, [r7, #28]
 8006276:	ee37 7a27 	vadd.f32	s14, s14, s15
 800627a:	edd7 7a04 	vldr	s15, [r7, #16]
 800627e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	1d1a      	adds	r2, r3, #4
 8006286:	607a      	str	r2, [r7, #4]
 8006288:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800628c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006290:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 8006294:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8006298:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800629c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80062a0:	edd7 7a06 	vldr	s15, [r7, #24]
 80062a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80062a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80062ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	1d1a      	adds	r2, r3, #4
 80062b4:	607a      	str	r2, [r7, #4]
 80062b6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80062ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80062be:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 80062c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062c4:	3308      	adds	r3, #8
 80062c6:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 80062c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062ca:	3b08      	subs	r3, #8
 80062cc:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 80062ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062d0:	3b01      	subs	r3, #1
 80062d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   } while (k > 0U);
 80062d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	f47f af7f 	bne.w	80061da <stage_rfft_f32+0xba>
}
 80062dc:	bf00      	nop
 80062de:	bf00      	nop
 80062e0:	3754      	adds	r7, #84	; 0x54
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr

080062ea <merge_rfft_f32>:

/* Prepares data for inverse cfft */
void merge_rfft_f32(
arm_rfft_fast_instance_f32 * S,
float32_t * p, float32_t * pOut)
{
 80062ea:	b480      	push	{r7}
 80062ec:	b095      	sub	sp, #84	; 0x54
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	60f8      	str	r0, [r7, #12]
 80062f2:	60b9      	str	r1, [r7, #8]
 80062f4:	607a      	str	r2, [r7, #4]
   uint32_t  k;								/* Loop Counter                     */
   float32_t twR, twI;						/* RFFT Twiddle coefficients        */
   float32_t *pCoeff = S->pTwiddleRFFT;		/* Points to RFFT Twiddle factors   */
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	695b      	ldr	r3, [r3, #20]
 80062fa:	64bb      	str	r3, [r7, #72]	; 0x48
   float32_t *pA = p;						/* increasing pointer               */
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	647b      	str	r3, [r7, #68]	; 0x44
   float32_t *pB = p;						/* decreasing pointer               */
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	643b      	str	r3, [r7, #64]	; 0x40
   float32_t xAR, xAI, xBR, xBI;			/* temporary variables              */
   float32_t t1a, t1b, r, s, t, u;			/* temporary variables              */

   k = (S->Sint).fftLen - 1;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	881b      	ldrh	r3, [r3, #0]
 8006308:	3b01      	subs	r3, #1
 800630a:	64fb      	str	r3, [r7, #76]	; 0x4c

   xAR = pA[0];
 800630c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	63fb      	str	r3, [r7, #60]	; 0x3c
   xAI = pA[1];
 8006312:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	63bb      	str	r3, [r7, #56]	; 0x38

   pCoeff += 2 ;
 8006318:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800631a:	3308      	adds	r3, #8
 800631c:	64bb      	str	r3, [r7, #72]	; 0x48

   *pOut++ = 0.5f * ( xAR + xAI );
 800631e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8006322:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8006326:	ee77 7a27 	vadd.f32	s15, s14, s15
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	1d1a      	adds	r2, r3, #4
 800632e:	607a      	str	r2, [r7, #4]
 8006330:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006334:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006338:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( xAR - xAI );
 800633c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8006340:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8006344:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	1d1a      	adds	r2, r3, #4
 800634c:	607a      	str	r2, [r7, #4]
 800634e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006352:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006356:	edc3 7a00 	vstr	s15, [r3]

   pB  =  p + 2*k ;
 800635a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800635c:	00db      	lsls	r3, r3, #3
 800635e:	68ba      	ldr	r2, [r7, #8]
 8006360:	4413      	add	r3, r2
 8006362:	643b      	str	r3, [r7, #64]	; 0x40
   pA +=  2	   ;
 8006364:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006366:	3308      	adds	r3, #8
 8006368:	647b      	str	r3, [r7, #68]	; 0x44

   while (k > 0U)
 800636a:	e07c      	b.n	8006466 <merge_rfft_f32+0x17c>
   {
      /* G is half of the frequency complex spectrum */
      //for k = 2:N
      //    Xk(k) = 1/2 * (G(k) + conj(G(N-k+2)) + Tw(k)*( G(k) - conj(G(N-k+2))));
      xBI =   pB[1]    ;
 800636c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	637b      	str	r3, [r7, #52]	; 0x34
      xBR =   pB[0]    ;
 8006372:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	633b      	str	r3, [r7, #48]	; 0x30
      xAR =  pA[0];
 8006378:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAI =  pA[1];
 800637e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	63bb      	str	r3, [r7, #56]	; 0x38

      twR = *pCoeff++;
 8006384:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006386:	1d1a      	adds	r2, r3, #4
 8006388:	64ba      	str	r2, [r7, #72]	; 0x48
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 800638e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006390:	1d1a      	adds	r2, r3, #4
 8006392:	64ba      	str	r2, [r7, #72]	; 0x48
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xAR - xBR ;
 8006398:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800639c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80063a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80063a4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xAI + xBI ;
 80063a8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80063ac:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80063b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80063b4:	edc7 7a08 	vstr	s15, [r7, #32]

      r = twR * t1a;
 80063b8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80063bc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80063c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063c4:	edc7 7a07 	vstr	s15, [r7, #28]
      s = twI * t1b;
 80063c8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80063cc:	edd7 7a08 	vldr	s15, [r7, #32]
 80063d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063d4:	edc7 7a06 	vstr	s15, [r7, #24]
      t = twI * t1a;
 80063d8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80063dc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80063e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063e4:	edc7 7a05 	vstr	s15, [r7, #20]
      u = twR * t1b;
 80063e8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80063ec:	edd7 7a08 	vldr	s15, [r7, #32]
 80063f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063f4:	edc7 7a04 	vstr	s15, [r7, #16]

      // real(tw * (xA - xB)) = twR * (xAR - xBR) - twI * (xAI - xBI);
      // imag(tw * (xA - xB)) = twI * (xAR - xBR) + twR * (xAI - xBI);
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 80063f8:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80063fc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8006400:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006404:	edd7 7a07 	vldr	s15, [r7, #28]
 8006408:	ee37 7a67 	vsub.f32	s14, s14, s15
 800640c:	edd7 7a06 	vldr	s15, [r7, #24]
 8006410:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	1d1a      	adds	r2, r3, #4
 8006418:	607a      	str	r2, [r7, #4]
 800641a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800641e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006422:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 8006426:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800642a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800642e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006432:	edd7 7a05 	vldr	s15, [r7, #20]
 8006436:	ee37 7a27 	vadd.f32	s14, s14, s15
 800643a:	edd7 7a04 	vldr	s15, [r7, #16]
 800643e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	1d1a      	adds	r2, r3, #4
 8006446:	607a      	str	r2, [r7, #4]
 8006448:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800644c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006450:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 8006454:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006456:	3308      	adds	r3, #8
 8006458:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 800645a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800645c:	3b08      	subs	r3, #8
 800645e:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 8006460:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006462:	3b01      	subs	r3, #1
 8006464:	64fb      	str	r3, [r7, #76]	; 0x4c
   while (k > 0U)
 8006466:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006468:	2b00      	cmp	r3, #0
 800646a:	f47f af7f 	bne.w	800636c <merge_rfft_f32+0x82>
   }

}
 800646e:	bf00      	nop
 8006470:	bf00      	nop
 8006472:	3754      	adds	r7, #84	; 0x54
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr

0800647c <arm_rfft_fast_f32>:

void arm_rfft_fast_f32(
arm_rfft_fast_instance_f32 * S,
float32_t * p, float32_t * pOut,
uint8_t ifftFlag)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b086      	sub	sp, #24
 8006480:	af00      	add	r7, sp, #0
 8006482:	60f8      	str	r0, [r7, #12]
 8006484:	60b9      	str	r1, [r7, #8]
 8006486:	607a      	str	r2, [r7, #4]
 8006488:	70fb      	strb	r3, [r7, #3]
   arm_cfft_instance_f32 * Sint = &(S->Sint);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	617b      	str	r3, [r7, #20]
   Sint->fftLen = S->fftLenRFFT / 2;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	8a1b      	ldrh	r3, [r3, #16]
 8006492:	085b      	lsrs	r3, r3, #1
 8006494:	b29a      	uxth	r2, r3
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	801a      	strh	r2, [r3, #0]

   /* Calculation of Real FFT */
   if (ifftFlag)
 800649a:	78fb      	ldrb	r3, [r7, #3]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d00b      	beq.n	80064b8 <arm_rfft_fast_f32+0x3c>
   {
      /*  Real FFT compression */
      merge_rfft_f32(S, p, pOut);
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	68b9      	ldr	r1, [r7, #8]
 80064a4:	68f8      	ldr	r0, [r7, #12]
 80064a6:	f7ff ff20 	bl	80062ea <merge_rfft_f32>

      /* Complex radix-4 IFFT process */
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 80064aa:	78fa      	ldrb	r2, [r7, #3]
 80064ac:	2301      	movs	r3, #1
 80064ae:	6879      	ldr	r1, [r7, #4]
 80064b0:	6978      	ldr	r0, [r7, #20]
 80064b2:	f7fe fd74 	bl	8004f9e <arm_cfft_f32>
      arm_cfft_f32( Sint, p, ifftFlag, 1);

      /*  Real FFT extraction */
      stage_rfft_f32(S, p, pOut);
   }
}
 80064b6:	e00a      	b.n	80064ce <arm_rfft_fast_f32+0x52>
      arm_cfft_f32( Sint, p, ifftFlag, 1);
 80064b8:	78fa      	ldrb	r2, [r7, #3]
 80064ba:	2301      	movs	r3, #1
 80064bc:	68b9      	ldr	r1, [r7, #8]
 80064be:	6978      	ldr	r0, [r7, #20]
 80064c0:	f7fe fd6d 	bl	8004f9e <arm_cfft_f32>
      stage_rfft_f32(S, p, pOut);
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	68b9      	ldr	r1, [r7, #8]
 80064c8:	68f8      	ldr	r0, [r7, #12]
 80064ca:	f7ff fe29 	bl	8006120 <stage_rfft_f32>
}
 80064ce:	bf00      	nop
 80064d0:	3718      	adds	r7, #24
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
	...

080064d8 <arm_rfft_fast_init_f32>:
* This Function also initializes Twiddle factor table pointer and Bit reversal table pointer.
*/
arm_status arm_rfft_fast_init_f32(
  arm_rfft_fast_instance_f32 * S,
  uint16_t fftLen)
{
 80064d8:	b480      	push	{r7}
 80064da:	b085      	sub	sp, #20
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	460b      	mov	r3, r1
 80064e2:	807b      	strh	r3, [r7, #2]
  arm_cfft_instance_f32 * Sint;
  /*  Initialise the default arm status */
  arm_status status = ARM_MATH_SUCCESS;
 80064e4:	2300      	movs	r3, #0
 80064e6:	73fb      	strb	r3, [r7, #15]
  /*  Initialise the FFT length */
  Sint = &(S->Sint);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	60bb      	str	r3, [r7, #8]
  Sint->fftLen = fftLen/2;
 80064ec:	887b      	ldrh	r3, [r7, #2]
 80064ee:	085b      	lsrs	r3, r3, #1
 80064f0:	b29a      	uxth	r2, r3
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	801a      	strh	r2, [r3, #0]
  S->fftLenRFFT = fftLen;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	887a      	ldrh	r2, [r7, #2]
 80064fa:	821a      	strh	r2, [r3, #16]

  /*  Initializations of structure parameters depending on the FFT length */
  switch (Sint->fftLen)
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	881b      	ldrh	r3, [r3, #0]
 8006500:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006504:	d023      	beq.n	800654e <arm_rfft_fast_init_f32+0x76>
 8006506:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800650a:	f300 808c 	bgt.w	8006626 <arm_rfft_fast_init_f32+0x14e>
 800650e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006512:	d02a      	beq.n	800656a <arm_rfft_fast_init_f32+0x92>
 8006514:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006518:	f300 8085 	bgt.w	8006626 <arm_rfft_fast_init_f32+0x14e>
 800651c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006520:	d031      	beq.n	8006586 <arm_rfft_fast_init_f32+0xae>
 8006522:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006526:	dc7e      	bgt.n	8006626 <arm_rfft_fast_init_f32+0x14e>
 8006528:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800652c:	d039      	beq.n	80065a2 <arm_rfft_fast_init_f32+0xca>
 800652e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006532:	dc78      	bgt.n	8006626 <arm_rfft_fast_init_f32+0x14e>
 8006534:	2b80      	cmp	r3, #128	; 0x80
 8006536:	d042      	beq.n	80065be <arm_rfft_fast_init_f32+0xe6>
 8006538:	2b80      	cmp	r3, #128	; 0x80
 800653a:	dc74      	bgt.n	8006626 <arm_rfft_fast_init_f32+0x14e>
 800653c:	2b40      	cmp	r3, #64	; 0x40
 800653e:	d04b      	beq.n	80065d8 <arm_rfft_fast_init_f32+0x100>
 8006540:	2b40      	cmp	r3, #64	; 0x40
 8006542:	dc70      	bgt.n	8006626 <arm_rfft_fast_init_f32+0x14e>
 8006544:	2b10      	cmp	r3, #16
 8006546:	d061      	beq.n	800660c <arm_rfft_fast_init_f32+0x134>
 8006548:	2b20      	cmp	r3, #32
 800654a:	d052      	beq.n	80065f2 <arm_rfft_fast_init_f32+0x11a>
 800654c:	e06b      	b.n	8006626 <arm_rfft_fast_init_f32+0x14e>
  {
  case 2048U:
    /*  Initializations of structure parameters for 2048 point FFT */
    /*  Initialise the bit reversal table length */
    Sint->bitRevLength = ARMBITREVINDEXTABLE_2048_TABLE_LENGTH;
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	f44f 626e 	mov.w	r2, #3808	; 0xee0
 8006554:	819a      	strh	r2, [r3, #12]
    /*  Initialise the bit reversal table pointer */
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable2048;
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	4a38      	ldr	r2, [pc, #224]	; (800663c <arm_rfft_fast_init_f32+0x164>)
 800655a:	609a      	str	r2, [r3, #8]
    /*  Initialise the Twiddle coefficient pointers */
		Sint->pTwiddle     = (float32_t *) twiddleCoef_2048;
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	4a38      	ldr	r2, [pc, #224]	; (8006640 <arm_rfft_fast_init_f32+0x168>)
 8006560:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_4096;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4a37      	ldr	r2, [pc, #220]	; (8006644 <arm_rfft_fast_init_f32+0x16c>)
 8006566:	615a      	str	r2, [r3, #20]
    break;
 8006568:	e060      	b.n	800662c <arm_rfft_fast_init_f32+0x154>
  case 1024U:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_1024_TABLE_LENGTH;
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8006570:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable1024;
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	4a34      	ldr	r2, [pc, #208]	; (8006648 <arm_rfft_fast_init_f32+0x170>)
 8006576:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_1024;
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	4a34      	ldr	r2, [pc, #208]	; (800664c <arm_rfft_fast_init_f32+0x174>)
 800657c:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_2048;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4a33      	ldr	r2, [pc, #204]	; (8006650 <arm_rfft_fast_init_f32+0x178>)
 8006582:	615a      	str	r2, [r3, #20]
    break;
 8006584:	e052      	b.n	800662c <arm_rfft_fast_init_f32+0x154>
  case 512U:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_512_TABLE_LENGTH;
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800658c:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable512;
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	4a30      	ldr	r2, [pc, #192]	; (8006654 <arm_rfft_fast_init_f32+0x17c>)
 8006592:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_512;
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	4a30      	ldr	r2, [pc, #192]	; (8006658 <arm_rfft_fast_init_f32+0x180>)
 8006598:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_1024;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4a2f      	ldr	r2, [pc, #188]	; (800665c <arm_rfft_fast_init_f32+0x184>)
 800659e:	615a      	str	r2, [r3, #20]
    break;
 80065a0:	e044      	b.n	800662c <arm_rfft_fast_init_f32+0x154>
  case 256U:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_256_TABLE_LENGTH;
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80065a8:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable256;
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	4a2c      	ldr	r2, [pc, #176]	; (8006660 <arm_rfft_fast_init_f32+0x188>)
 80065ae:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_256;
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	4a2c      	ldr	r2, [pc, #176]	; (8006664 <arm_rfft_fast_init_f32+0x18c>)
 80065b4:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_512;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	4a2b      	ldr	r2, [pc, #172]	; (8006668 <arm_rfft_fast_init_f32+0x190>)
 80065ba:	615a      	str	r2, [r3, #20]
    break;
 80065bc:	e036      	b.n	800662c <arm_rfft_fast_init_f32+0x154>
  case 128U:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_128_TABLE_LENGTH;
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	22d0      	movs	r2, #208	; 0xd0
 80065c2:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable128;
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	4a29      	ldr	r2, [pc, #164]	; (800666c <arm_rfft_fast_init_f32+0x194>)
 80065c8:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_128;
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	4a28      	ldr	r2, [pc, #160]	; (8006670 <arm_rfft_fast_init_f32+0x198>)
 80065ce:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_256;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4a28      	ldr	r2, [pc, #160]	; (8006674 <arm_rfft_fast_init_f32+0x19c>)
 80065d4:	615a      	str	r2, [r3, #20]
    break;
 80065d6:	e029      	b.n	800662c <arm_rfft_fast_init_f32+0x154>
  case 64U:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_64_TABLE_LENGTH;
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	2238      	movs	r2, #56	; 0x38
 80065dc:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable64;
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	4a25      	ldr	r2, [pc, #148]	; (8006678 <arm_rfft_fast_init_f32+0x1a0>)
 80065e2:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_64;
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	4a25      	ldr	r2, [pc, #148]	; (800667c <arm_rfft_fast_init_f32+0x1a4>)
 80065e8:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_128;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	4a24      	ldr	r2, [pc, #144]	; (8006680 <arm_rfft_fast_init_f32+0x1a8>)
 80065ee:	615a      	str	r2, [r3, #20]
    break;
 80065f0:	e01c      	b.n	800662c <arm_rfft_fast_init_f32+0x154>
  case 32U:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_32_TABLE_LENGTH;
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	2230      	movs	r2, #48	; 0x30
 80065f6:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable32;
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	4a22      	ldr	r2, [pc, #136]	; (8006684 <arm_rfft_fast_init_f32+0x1ac>)
 80065fc:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_32;
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	4a21      	ldr	r2, [pc, #132]	; (8006688 <arm_rfft_fast_init_f32+0x1b0>)
 8006602:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_64;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	4a21      	ldr	r2, [pc, #132]	; (800668c <arm_rfft_fast_init_f32+0x1b4>)
 8006608:	615a      	str	r2, [r3, #20]
    break;
 800660a:	e00f      	b.n	800662c <arm_rfft_fast_init_f32+0x154>
  case 16U:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_16_TABLE_LENGTH;
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	2214      	movs	r2, #20
 8006610:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable16;
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	4a1e      	ldr	r2, [pc, #120]	; (8006690 <arm_rfft_fast_init_f32+0x1b8>)
 8006616:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_16;
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	4a1e      	ldr	r2, [pc, #120]	; (8006694 <arm_rfft_fast_init_f32+0x1bc>)
 800661c:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_32;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4a1d      	ldr	r2, [pc, #116]	; (8006698 <arm_rfft_fast_init_f32+0x1c0>)
 8006622:	615a      	str	r2, [r3, #20]
    break;
 8006624:	e002      	b.n	800662c <arm_rfft_fast_init_f32+0x154>
  default:
    /*  Reporting argument error if fftSize is not valid value */
    status = ARM_MATH_ARGUMENT_ERROR;
 8006626:	23ff      	movs	r3, #255	; 0xff
 8006628:	73fb      	strb	r3, [r7, #15]
    break;
 800662a:	bf00      	nop
  }

  return (status);
 800662c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006630:	4618      	mov	r0, r3
 8006632:	3714      	adds	r7, #20
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr
 800663c:	0801ed30 	.word	0x0801ed30
 8006640:	08019598 	.word	0x08019598
 8006644:	08024a70 	.word	0x08024a70
 8006648:	0801df20 	.word	0x0801df20
 800664c:	08017598 	.word	0x08017598
 8006650:	08022a70 	.word	0x08022a70
 8006654:	0801dba0 	.word	0x0801dba0
 8006658:	08016598 	.word	0x08016598
 800665c:	08021a70 	.word	0x08021a70
 8006660:	0801d830 	.word	0x0801d830
 8006664:	08015d98 	.word	0x08015d98
 8006668:	08021270 	.word	0x08021270
 800666c:	0801d690 	.word	0x0801d690
 8006670:	08015998 	.word	0x08015998
 8006674:	08020e70 	.word	0x08020e70
 8006678:	0801d620 	.word	0x0801d620
 800667c:	08015798 	.word	0x08015798
 8006680:	08020c70 	.word	0x08020c70
 8006684:	0801d5c0 	.word	0x0801d5c0
 8006688:	08015698 	.word	0x08015698
 800668c:	08020b70 	.word	0x08020b70
 8006690:	0801d598 	.word	0x0801d598
 8006694:	08015618 	.word	0x08015618
 8006698:	08020af0 	.word	0x08020af0

0800669c <arm_relu_q7>:
   * Optimized relu with QSUB instructions.
   *
   */

void arm_relu_q7(q7_t * data, uint16_t size)
{
 800669c:	b480      	push	{r7}
 800669e:	b08f      	sub	sp, #60	; 0x3c
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	460b      	mov	r3, r1
 80066a6:	807b      	strh	r3, [r7, #2]

#if defined (ARM_MATH_DSP)
    /* Run the following code for Cortex-M4 and Cortex-M7 */

    uint16_t  i = size >> 2;
 80066a8:	887b      	ldrh	r3, [r7, #2]
 80066aa:	089b      	lsrs	r3, r3, #2
 80066ac:	86fb      	strh	r3, [r7, #54]	; 0x36
    q7_t     *pIn = data;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	613b      	str	r3, [r7, #16]
    q7_t     *pOut = data;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	60fb      	str	r3, [r7, #12]
    q31_t     in;
    q31_t     buf;
    q31_t     mask;

    while (i)
 80066b6:	e032      	b.n	800671e <arm_relu_q7+0x82>
    {
        in = *__SIMD32(pIn)++;
 80066b8:	f107 0210 	add.w	r2, r7, #16
 80066bc:	6813      	ldr	r3, [r2, #0]
 80066be:	1d19      	adds	r1, r3, #4
 80066c0:	6011      	str	r1, [r2, #0]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	633b      	str	r3, [r7, #48]	; 0x30

        /* extract the first bit */
        buf = __ROR(in & 0x80808080, 7);
 80066c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c8:	f003 3380 	and.w	r3, r3, #2155905152	; 0x80808080
 80066cc:	61bb      	str	r3, [r7, #24]
 80066ce:	2307      	movs	r3, #7
 80066d0:	617b      	str	r3, [r7, #20]
  op2 %= 32U;
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	f003 031f 	and.w	r3, r3, #31
 80066d8:	617b      	str	r3, [r7, #20]
  if (op2 == 0U)
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d101      	bne.n	80066e4 <arm_relu_q7+0x48>
    return op1;
 80066e0:	69bb      	ldr	r3, [r7, #24]
 80066e2:	e003      	b.n	80066ec <arm_relu_q7+0x50>
  return (op1 >> op2) | (op1 << (32U - op2));
 80066e4:	69ba      	ldr	r2, [r7, #24]
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	fa62 f303 	ror.w	r3, r2, r3
 80066ec:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* if MSB=1, mask will be 0xFF, 0x0 otherwise */
        mask = __QSUB8(0x00000000, buf);
 80066ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f0:	2200      	movs	r2, #0
 80066f2:	627a      	str	r2, [r7, #36]	; 0x24
 80066f4:	623b      	str	r3, [r7, #32]

__STATIC_FORCEINLINE uint32_t __QSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM volatile ("qsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80066f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f8:	6a3a      	ldr	r2, [r7, #32]
 80066fa:	fac3 f312 	qsub8	r3, r3, r2
 80066fe:	61fb      	str	r3, [r7, #28]
  return(result);
 8006700:	69fb      	ldr	r3, [r7, #28]
 8006702:	62bb      	str	r3, [r7, #40]	; 0x28

        *__SIMD32(pOut)++ = in & (~mask);
 8006704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006706:	43d9      	mvns	r1, r3
 8006708:	f107 020c 	add.w	r2, r7, #12
 800670c:	6813      	ldr	r3, [r2, #0]
 800670e:	1d18      	adds	r0, r3, #4
 8006710:	6010      	str	r0, [r2, #0]
 8006712:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006714:	400a      	ands	r2, r1
 8006716:	601a      	str	r2, [r3, #0]
        i--;
 8006718:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800671a:	3b01      	subs	r3, #1
 800671c:	86fb      	strh	r3, [r7, #54]	; 0x36
    while (i)
 800671e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006720:	2b00      	cmp	r3, #0
 8006722:	d1c9      	bne.n	80066b8 <arm_relu_q7+0x1c>
    }

    i = size & 0x3;
 8006724:	887b      	ldrh	r3, [r7, #2]
 8006726:	f003 0303 	and.w	r3, r3, #3
 800672a:	86fb      	strh	r3, [r7, #54]	; 0x36
    while (i)
 800672c:	e00d      	b.n	800674a <arm_relu_q7+0xae>
    {
        if (*pIn < 0)
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	f993 3000 	ldrsb.w	r3, [r3]
 8006734:	2b00      	cmp	r3, #0
 8006736:	da02      	bge.n	800673e <arm_relu_q7+0xa2>
        {
            *pIn = 0;
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	2200      	movs	r2, #0
 800673c:	701a      	strb	r2, [r3, #0]
        }
        pIn++;
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	3301      	adds	r3, #1
 8006742:	613b      	str	r3, [r7, #16]
        i--;
 8006744:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006746:	3b01      	subs	r3, #1
 8006748:	86fb      	strh	r3, [r7, #54]	; 0x36
    while (i)
 800674a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800674c:	2b00      	cmp	r3, #0
 800674e:	d1ee      	bne.n	800672e <arm_relu_q7+0x92>
            data[i] = 0;
    }

#endif                          /* ARM_MATH_DSP */

}
 8006750:	bf00      	nop
 8006752:	bf00      	nop
 8006754:	373c      	adds	r7, #60	; 0x3c
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr

0800675e <arm_convolve_1x1_HWC_q7_fast_nonsquare>:
                                                  q7_t * Im_out,
                                                  const uint16_t dim_im_out_x,
                                                  const uint16_t dim_im_out_y, 
                                                  q15_t * bufferA, 
                                                  q7_t * bufferB)
{
 800675e:	b580      	push	{r7, lr}
 8006760:	b0aa      	sub	sp, #168	; 0xa8
 8006762:	af04      	add	r7, sp, #16
 8006764:	60f8      	str	r0, [r7, #12]
 8006766:	4608      	mov	r0, r1
 8006768:	4611      	mov	r1, r2
 800676a:	461a      	mov	r2, r3
 800676c:	4603      	mov	r3, r0
 800676e:	817b      	strh	r3, [r7, #10]
 8006770:	460b      	mov	r3, r1
 8006772:	813b      	strh	r3, [r7, #8]
 8006774:	4613      	mov	r3, r2
 8006776:	80fb      	strh	r3, [r7, #6]
    /* -----------------------
     *  Here we use bufferA as q15_t internally as computation are done with q15_t level
     *  im2col are done to output in q15_t format from q7_t input
     */

    q15_t    *pBuffer = bufferA;
 8006778:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800677c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    q7_t     *pOut = Im_out;
 8006780:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006784:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    if (ch_im_in % 4 != 0 || ch_im_out % 2 != 0 || dim_kernel_x != 1 || dim_kernel_y != 1
 8006788:	88fb      	ldrh	r3, [r7, #6]
 800678a:	f003 0303 	and.w	r3, r3, #3
 800678e:	b29b      	uxth	r3, r3
 8006790:	2b00      	cmp	r3, #0
 8006792:	d11e      	bne.n	80067d2 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x74>
 8006794:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8006798:	f003 0301 	and.w	r3, r3, #1
 800679c:	b29b      	uxth	r3, r3
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d117      	bne.n	80067d2 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x74>
 80067a2:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d113      	bne.n	80067d2 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x74>
 80067aa:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d10f      	bne.n	80067d2 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x74>
        || padding_x != 0 || padding_y != 0 || stride_x != 1 || stride_y != 1)
 80067b2:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d10b      	bne.n	80067d2 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x74>
 80067ba:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d107      	bne.n	80067d2 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x74>
 80067c2:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	d103      	bne.n	80067d2 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x74>
 80067ca:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d002      	beq.n	80067d8 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x7a>
    {
        /* check if the input dimension meets the constraints */
        return ARM_MATH_SIZE_MISMATCH;
 80067d2:	f06f 0302 	mvn.w	r3, #2
 80067d6:	e162      	b.n	8006a9e <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x340>
    }

    for (i_out_y = 0; i_out_y < dim_im_out_y; i_out_y++)
 80067d8:	2300      	movs	r3, #0
 80067da:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 80067de:	e05f      	b.n	80068a0 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x142>
    {
        for (i_out_x = 0; i_out_x < dim_im_out_x; i_out_x++)
 80067e0:	2300      	movs	r3, #0
 80067e2:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80067e6:	e04e      	b.n	8006886 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x128>
        {
            /* This part implements the im2col function */
            arm_q7_to_q15_reordered_no_shift((q7_t *) Im_in + (i_out_y * dim_im_in_x + i_out_x) * ch_im_in, pBuffer,
 80067e8:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 80067ec:	897a      	ldrh	r2, [r7, #10]
 80067ee:	fb02 f203 	mul.w	r2, r2, r3
 80067f2:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 80067f6:	4413      	add	r3, r2
 80067f8:	88fa      	ldrh	r2, [r7, #6]
 80067fa:	fb02 f303 	mul.w	r3, r2, r3
 80067fe:	461a      	mov	r2, r3
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	4413      	add	r3, r2
 8006804:	88fa      	ldrh	r2, [r7, #6]
 8006806:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800680a:	4618      	mov	r0, r3
 800680c:	f002 fbd4 	bl	8008fb8 <arm_q7_to_q15_reordered_no_shift>
                                             ch_im_in);
            pBuffer += ch_im_in;
 8006810:	88fb      	ldrh	r3, [r7, #6]
 8006812:	005b      	lsls	r3, r3, #1
 8006814:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8006818:	4413      	add	r3, r2
 800681a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel_x * dim_kernel_y)
 800681e:	88fb      	ldrh	r3, [r7, #6]
 8006820:	f8b7 20a8 	ldrh.w	r2, [r7, #168]	; 0xa8
 8006824:	fb02 f303 	mul.w	r3, r2, r3
 8006828:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 800682c:	fb02 f303 	mul.w	r3, r2, r3
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8006836:	4413      	add	r3, r2
 8006838:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800683c:	429a      	cmp	r2, r3
 800683e:	d11b      	bne.n	8006878 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x11a>
            {
                pOut =
                    arm_nn_mat_mult_kernel_q7_q15_reordered(wt, bufferA, ch_im_out, ch_im_in, bias_shift, out_shift, bias, pOut);
 8006840:	88f9      	ldrh	r1, [r7, #6]
 8006842:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8006846:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800684a:	9303      	str	r3, [sp, #12]
 800684c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006850:	9302      	str	r3, [sp, #8]
 8006852:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8006856:	9301      	str	r3, [sp, #4]
 8006858:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 800685c:	9300      	str	r3, [sp, #0]
 800685e:	460b      	mov	r3, r1
 8006860:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8006864:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8006868:	f001 fcea 	bl	8008240 <arm_nn_mat_mult_kernel_q7_q15_reordered>
 800686c:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
                /* counter reset */
                pBuffer = bufferA;
 8006870:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006874:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        for (i_out_x = 0; i_out_x < dim_im_out_x; i_out_x++)
 8006878:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 800687c:	b29b      	uxth	r3, r3
 800687e:	3301      	adds	r3, #1
 8006880:	b29b      	uxth	r3, r3
 8006882:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8006886:	f9b7 2094 	ldrsh.w	r2, [r7, #148]	; 0x94
 800688a:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
 800688e:	429a      	cmp	r2, r3
 8006890:	dbaa      	blt.n	80067e8 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x8a>
    for (i_out_y = 0; i_out_y < dim_im_out_y; i_out_y++)
 8006892:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8006896:	b29b      	uxth	r3, r3
 8006898:	3301      	adds	r3, #1
 800689a:	b29b      	uxth	r3, r3
 800689c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 80068a0:	f9b7 2096 	ldrsh.w	r2, [r7, #150]	; 0x96
 80068a4:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 80068a8:	429a      	cmp	r2, r3
 80068aa:	db99      	blt.n	80067e0 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x82>
            }
        }
    }

    /* check if there is left-over for compute */
    if (pBuffer != bufferA)
 80068ac:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80068b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80068b4:	429a      	cmp	r2, r3
 80068b6:	f000 80f1 	beq.w	8006a9c <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x33e>
    {
        const q7_t *pA = wt;
 80068ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80068be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        for (i_ch_out = 0; i_ch_out < ch_im_out; i_ch_out++)
 80068c2:	2300      	movs	r3, #0
 80068c4:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 80068c8:	e0e1      	b.n	8006a8e <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x330>
        {
            q31_t     sum = ((q31_t)(bias[i_ch_out]) << bias_shift) + NN_ROUND(out_shift);
 80068ca:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 80068ce:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80068d2:	4413      	add	r3, r2
 80068d4:	f993 3000 	ldrsb.w	r3, [r3]
 80068d8:	461a      	mov	r2, r3
 80068da:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 80068de:	409a      	lsls	r2, r3
 80068e0:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 80068e4:	3b01      	subs	r3, #1
 80068e6:	2101      	movs	r1, #1
 80068e8:	fa01 f303 	lsl.w	r3, r1, r3
 80068ec:	4413      	add	r3, r2
 80068ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            q15_t    *pB = bufferA;
 80068f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80068f6:	623b      	str	r3, [r7, #32]
            /* basically each time it process 4 entries */
            uint16_t  colCnt = ch_im_in * dim_kernel_x * dim_kernel_y >> 2;
 80068f8:	88fb      	ldrh	r3, [r7, #6]
 80068fa:	f8b7 20a8 	ldrh.w	r2, [r7, #168]	; 0xa8
 80068fe:	fb02 f303 	mul.w	r3, r2, r3
 8006902:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 8006906:	fb02 f303 	mul.w	r3, r2, r3
 800690a:	109b      	asrs	r3, r3, #2
 800690c:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

            while (colCnt)
 8006910:	e06b      	b.n	80069ea <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x28c>
 8006912:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006916:	617b      	str	r3, [r7, #20]
 8006918:	f107 031c 	add.w	r3, r7, #28
 800691c:	647b      	str	r3, [r7, #68]	; 0x44
 800691e:	f107 0318 	add.w	r3, r7, #24
 8006922:	643b      	str	r3, [r7, #64]	; 0x40
 * @brief read and expand one Q7 word into two Q15 words with reordering
 */

__STATIC_FORCEINLINE void *read_and_pad_reordered(void *source, q31_t * out1, q31_t * out2)
{
        q31_t     inA = *__SIMD32(source)++;
 8006924:	f107 0214 	add.w	r2, r7, #20
 8006928:	6813      	ldr	r3, [r2, #0]
 800692a:	1d19      	adds	r1, r3, #4
 800692c:	6011      	str	r1, [r2, #0]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	63fb      	str	r3, [r7, #60]	; 0x3c
#ifndef ARM_MATH_BIG_ENDIAN
        *out2 = __SXTB16(__ROR(inA, 8));
 8006932:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006934:	63bb      	str	r3, [r7, #56]	; 0x38
 8006936:	2308      	movs	r3, #8
 8006938:	637b      	str	r3, [r7, #52]	; 0x34
  op2 %= 32U;
 800693a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800693c:	f003 031f 	and.w	r3, r3, #31
 8006940:	637b      	str	r3, [r7, #52]	; 0x34
  if (op2 == 0U)
 8006942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006944:	2b00      	cmp	r3, #0
 8006946:	d101      	bne.n	800694c <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x1ee>
    return op1;
 8006948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800694a:	e003      	b.n	8006954 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x1f6>
  return (op1 >> op2) | (op1 << (32U - op2));
 800694c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800694e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006950:	fa62 f303 	ror.w	r3, r2, r3
 8006954:	633b      	str	r3, [r7, #48]	; 0x30

__STATIC_FORCEINLINE uint32_t __SXTB16(uint32_t op1)
{
  uint32_t result;

  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8006956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006958:	fa2f f383 	sxtb16	r3, r3
 800695c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 800695e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006960:	461a      	mov	r2, r3
 8006962:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006964:	601a      	str	r2, [r3, #0]
        *out1 = __SXTB16(inA);
 8006966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006968:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800696a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800696c:	fa2f f383 	sxtb16	r3, r3
 8006970:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006974:	461a      	mov	r2, r3
 8006976:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006978:	601a      	str	r2, [r3, #0]
#else
        *out1 = __SXTB16(__ROR(inA, 8));
        *out2 = __SXTB16(inA);
#endif

        return source;
 800697a:	697b      	ldr	r3, [r7, #20]
            {

                q31_t     inA1, inA2;
                q31_t     inB1, inB2;

                pA = (const q7_t *)read_and_pad_reordered((void *)pA, &inA1, &inA2);
 800697c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

                inB1 = *__SIMD32(pB)++;
 8006980:	f107 0220 	add.w	r2, r7, #32
 8006984:	6813      	ldr	r3, [r2, #0]
 8006986:	1d19      	adds	r1, r3, #4
 8006988:	6011      	str	r1, [r2, #0]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	66fb      	str	r3, [r7, #108]	; 0x6c
                sum = __SMLAD(inA1, inB1, sum);
 800698e:	69fb      	ldr	r3, [r7, #28]
 8006990:	4619      	mov	r1, r3
 8006992:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006994:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006998:	6579      	str	r1, [r7, #84]	; 0x54
 800699a:	653a      	str	r2, [r7, #80]	; 0x50
 800699c:	64fb      	str	r3, [r7, #76]	; 0x4c

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800699e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80069a2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80069a4:	fb23 1302 	smlad	r3, r3, r2, r1
 80069a8:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80069aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                inB2 = *__SIMD32(pB)++;
 80069b0:	f107 0220 	add.w	r2, r7, #32
 80069b4:	6813      	ldr	r3, [r2, #0]
 80069b6:	1d19      	adds	r1, r3, #4
 80069b8:	6011      	str	r1, [r2, #0]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	66bb      	str	r3, [r7, #104]	; 0x68
                sum = __SMLAD(inA2, inB2, sum);
 80069be:	69bb      	ldr	r3, [r7, #24]
 80069c0:	4619      	mov	r1, r3
 80069c2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80069c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80069c8:	6679      	str	r1, [r7, #100]	; 0x64
 80069ca:	663a      	str	r2, [r7, #96]	; 0x60
 80069cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80069ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80069d2:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80069d4:	fb23 1302 	smlad	r3, r3, r2, r1
 80069d8:	65bb      	str	r3, [r7, #88]	; 0x58
  return(result);
 80069da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80069dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                colCnt--;
 80069e0:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80069e4:	3b01      	subs	r3, #1
 80069e6:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
            while (colCnt)
 80069ea:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d18f      	bne.n	8006912 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x1b4>
            }
            colCnt = ch_im_in * dim_kernel_y * dim_kernel_x & 0x3;
 80069f2:	88fa      	ldrh	r2, [r7, #6]
 80069f4:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 80069f8:	fb12 f303 	smulbb	r3, r2, r3
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	f8b7 20a8 	ldrh.w	r2, [r7, #168]	; 0xa8
 8006a02:	fb12 f303 	smulbb	r3, r2, r3
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	f003 0303 	and.w	r3, r3, #3
 8006a0c:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
            while (colCnt)
 8006a10:	e01d      	b.n	8006a4e <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x2f0>
            {
                q7_t      inA1 = *pA++;
 8006a12:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006a16:	1c5a      	adds	r2, r3, #1
 8006a18:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8006a1c:	781b      	ldrb	r3, [r3, #0]
 8006a1e:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
                q15_t     inB1 = *pB++;
 8006a22:	6a3b      	ldr	r3, [r7, #32]
 8006a24:	1c9a      	adds	r2, r3, #2
 8006a26:	623a      	str	r2, [r7, #32]
 8006a28:	881b      	ldrh	r3, [r3, #0]
 8006a2a:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
                sum += inA1 * inB1;
 8006a2e:	f997 3073 	ldrsb.w	r3, [r7, #115]	; 0x73
 8006a32:	f9b7 2070 	ldrsh.w	r2, [r7, #112]	; 0x70
 8006a36:	fb02 f303 	mul.w	r3, r2, r3
 8006a3a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006a3e:	4413      	add	r3, r2
 8006a40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                colCnt--;
 8006a44:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8006a48:	3b01      	subs	r3, #1
 8006a4a:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
            while (colCnt)
 8006a4e:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d1dd      	bne.n	8006a12 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x2b4>
            }
            *pOut = (q7_t) __SSAT((sum >> out_shift), 8);
 8006a56:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8006a5a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006a5e:	fa42 f303 	asr.w	r3, r2, r3
 8006a62:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a66:	f303 0307 	ssat	r3, #8, r3
 8006a6a:	677b      	str	r3, [r7, #116]	; 0x74
 8006a6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a6e:	b25a      	sxtb	r2, r3
 8006a70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006a74:	701a      	strb	r2, [r3, #0]
            pOut++;
 8006a76:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (i_ch_out = 0; i_ch_out < ch_im_out; i_ch_out++)
 8006a80:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	3301      	adds	r3, #1
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 8006a8e:	f9b7 2092 	ldrsh.w	r2, [r7, #146]	; 0x92
 8006a92:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8006a96:	429a      	cmp	r2, r3
 8006a98:	f6ff af17 	blt.w	80068ca <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x16c>
    }

#endif                          /* ARM_MATH_DSP */

    /* Return to application */
    return ARM_MATH_SUCCESS;
 8006a9c:	2300      	movs	r3, #0
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3798      	adds	r7, #152	; 0x98
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
	...

08006aa8 <arm_convolve_HWC_q7_basic_nonsquare>:
                                               q7_t * Im_out,
                                               const uint16_t dim_im_out_x,
                                               const uint16_t dim_im_out_y,
                                               q15_t * bufferA,
                                               q7_t * bufferB)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b0ac      	sub	sp, #176	; 0xb0
 8006aac:	af04      	add	r7, sp, #16
 8006aae:	60f8      	str	r0, [r7, #12]
 8006ab0:	4608      	mov	r0, r1
 8006ab2:	4611      	mov	r1, r2
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	817b      	strh	r3, [r7, #10]
 8006aba:	460b      	mov	r3, r1
 8006abc:	813b      	strh	r3, [r7, #8]
 8006abe:	4613      	mov	r3, r2
 8006ac0:	80fb      	strh	r3, [r7, #6]

    /* 
     *  Here we use bufferA as q15_t internally as computation are done with q15_t level
     *  im2col are done to output in q15_t format from q7_t input
     */
    q15_t    *pBuffer = bufferA;
 8006ac2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ac6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    q7_t     *pOut = Im_out;
 8006aca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ace:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

    /* This part implements the im2col function */
    for (i_out_y = 0; i_out_y < dim_im_out_y; i_out_y++)
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 8006ad8:	e0cf      	b.n	8006c7a <arm_convolve_HWC_q7_basic_nonsquare+0x1d2>
    {
        for (i_out_x = 0; i_out_x < dim_im_out_x; i_out_x++)
 8006ada:	2300      	movs	r3, #0
 8006adc:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8006ae0:	e0bd      	b.n	8006c5e <arm_convolve_HWC_q7_basic_nonsquare+0x1b6>
        {
            for (i_ker_y = i_out_y * stride_y - padding_y; i_ker_y < i_out_y * stride_y - padding_y + dim_kernel_y; i_ker_y++)
 8006ae2:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8006ae6:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	; 0xc4
 8006aea:	fb12 f303 	smulbb	r3, r2, r3
 8006aee:	b29a      	uxth	r2, r3
 8006af0:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8006af4:	1ad3      	subs	r3, r2, r3
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8006afc:	e061      	b.n	8006bc2 <arm_convolve_HWC_q7_basic_nonsquare+0x11a>
            {
                for (i_ker_x = i_out_x * stride_x - padding_x; i_ker_x < i_out_x * stride_x - padding_x + dim_kernel_x; i_ker_x++)
 8006afe:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8006b02:	f8b7 20c0 	ldrh.w	r2, [r7, #192]	; 0xc0
 8006b06:	fb12 f303 	smulbb	r3, r2, r3
 8006b0a:	b29a      	uxth	r2, r3
 8006b0c:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8006b10:	1ad3      	subs	r3, r2, r3
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8006b18:	e03c      	b.n	8006b94 <arm_convolve_HWC_q7_basic_nonsquare+0xec>
                {
                    if (i_ker_y < 0 || i_ker_y >= dim_im_in_y || i_ker_x < 0 || i_ker_x >= dim_im_in_x)
 8006b1a:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	db0d      	blt.n	8006b3e <arm_convolve_HWC_q7_basic_nonsquare+0x96>
 8006b22:	f9b7 209a 	ldrsh.w	r2, [r7, #154]	; 0x9a
 8006b26:	893b      	ldrh	r3, [r7, #8]
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	da08      	bge.n	8006b3e <arm_convolve_HWC_q7_basic_nonsquare+0x96>
 8006b2c:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	db04      	blt.n	8006b3e <arm_convolve_HWC_q7_basic_nonsquare+0x96>
 8006b34:	f9b7 2098 	ldrsh.w	r2, [r7, #152]	; 0x98
 8006b38:	897b      	ldrh	r3, [r7, #10]
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	db08      	blt.n	8006b50 <arm_convolve_HWC_q7_basic_nonsquare+0xa8>
                    {
                        /* Filling 0 for out-of-bound paddings */
                        /* arm_fill_q15(0, pBuffer, ch_im_in); */
                        memset(pBuffer, 0, sizeof(q15_t)*ch_im_in);
 8006b3e:	88fb      	ldrh	r3, [r7, #6]
 8006b40:	005b      	lsls	r3, r3, #1
 8006b42:	461a      	mov	r2, r3
 8006b44:	2100      	movs	r1, #0
 8006b46:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8006b4a:	f008 fc29 	bl	800f3a0 <memset>
 8006b4e:	e013      	b.n	8006b78 <arm_convolve_HWC_q7_basic_nonsquare+0xd0>
                    } else
                    {
                        /* Copying the pixel data to column */
                        arm_q7_to_q15_no_shift((q7_t *)
                                               Im_in + (i_ker_y * dim_im_in_x + i_ker_x) * ch_im_in, pBuffer, ch_im_in);
 8006b50:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 8006b54:	897a      	ldrh	r2, [r7, #10]
 8006b56:	fb02 f203 	mul.w	r2, r2, r3
 8006b5a:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8006b5e:	4413      	add	r3, r2
 8006b60:	88fa      	ldrh	r2, [r7, #6]
 8006b62:	fb02 f303 	mul.w	r3, r2, r3
 8006b66:	461a      	mov	r2, r3
                        arm_q7_to_q15_no_shift((q7_t *)
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	4413      	add	r3, r2
 8006b6c:	88fa      	ldrh	r2, [r7, #6]
 8006b6e:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8006b72:	4618      	mov	r0, r3
 8006b74:	f002 f9ae 	bl	8008ed4 <arm_q7_to_q15_no_shift>
                    }
                    pBuffer += ch_im_in;
 8006b78:	88fb      	ldrh	r3, [r7, #6]
 8006b7a:	005b      	lsls	r3, r3, #1
 8006b7c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006b80:	4413      	add	r3, r2
 8006b82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                for (i_ker_x = i_out_x * stride_x - padding_x; i_ker_x < i_out_x * stride_x - padding_x + dim_kernel_x; i_ker_x++)
 8006b86:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	3301      	adds	r3, #1
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8006b94:	f9b7 2098 	ldrsh.w	r2, [r7, #152]	; 0x98
 8006b98:	f9b7 309c 	ldrsh.w	r3, [r7, #156]	; 0x9c
 8006b9c:	f8b7 10c0 	ldrh.w	r1, [r7, #192]	; 0xc0
 8006ba0:	fb01 f103 	mul.w	r1, r1, r3
 8006ba4:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8006ba8:	1ac9      	subs	r1, r1, r3
 8006baa:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8006bae:	440b      	add	r3, r1
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	dbb2      	blt.n	8006b1a <arm_convolve_HWC_q7_basic_nonsquare+0x72>
            for (i_ker_y = i_out_y * stride_y - padding_y; i_ker_y < i_out_y * stride_y - padding_y + dim_kernel_y; i_ker_y++)
 8006bb4:	f9b7 309a 	ldrsh.w	r3, [r7, #154]	; 0x9a
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	3301      	adds	r3, #1
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8006bc2:	f9b7 209a 	ldrsh.w	r2, [r7, #154]	; 0x9a
 8006bc6:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	; 0x9e
 8006bca:	f8b7 10c4 	ldrh.w	r1, [r7, #196]	; 0xc4
 8006bce:	fb01 f103 	mul.w	r1, r1, r3
 8006bd2:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8006bd6:	1ac9      	subs	r1, r1, r3
 8006bd8:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006bdc:	440b      	add	r3, r1
 8006bde:	429a      	cmp	r2, r3
 8006be0:	db8d      	blt.n	8006afe <arm_convolve_HWC_q7_basic_nonsquare+0x56>
                }
            }

            /* Computation is filed for every 2 columns */
            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel_y * dim_kernel_x)
 8006be2:	88fb      	ldrh	r3, [r7, #6]
 8006be4:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	; 0xb4
 8006be8:	fb02 f303 	mul.w	r3, r2, r3
 8006bec:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 8006bf0:	fb02 f303 	mul.w	r3, r2, r3
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006bfa:	4413      	add	r3, r2
 8006bfc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d125      	bne.n	8006c50 <arm_convolve_HWC_q7_basic_nonsquare+0x1a8>
            {
                pOut =
                    arm_nn_mat_mult_kernel_q7_q15(wt, bufferA,
 8006c04:	88fa      	ldrh	r2, [r7, #6]
 8006c06:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006c0a:	fb12 f303 	smulbb	r3, r2, r3
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 8006c14:	fb12 f303 	smulbb	r3, r2, r3
 8006c18:	b299      	uxth	r1, r3
 8006c1a:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 8006c1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006c22:	9303      	str	r3, [sp, #12]
 8006c24:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006c28:	9302      	str	r3, [sp, #8]
 8006c2a:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
 8006c2e:	9301      	str	r3, [sp, #4]
 8006c30:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 8006c34:	9300      	str	r3, [sp, #0]
 8006c36:	460b      	mov	r3, r1
 8006c38:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8006c3c:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8006c40:	f000 fd8c 	bl	800775c <arm_nn_mat_mult_kernel_q7_q15>
 8006c44:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
                                                  ch_im_out,
                                                  ch_im_in *
                                                  dim_kernel_y * dim_kernel_x, bias_shift, out_shift, bias, pOut);

                /* counter reset */
                pBuffer = bufferA;
 8006c48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c4c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        for (i_out_x = 0; i_out_x < dim_im_out_x; i_out_x++)
 8006c50:	f9b7 309c 	ldrsh.w	r3, [r7, #156]	; 0x9c
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	3301      	adds	r3, #1
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8006c5e:	f9b7 209c 	ldrsh.w	r2, [r7, #156]	; 0x9c
 8006c62:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 8006c66:	429a      	cmp	r2, r3
 8006c68:	f6ff af3b 	blt.w	8006ae2 <arm_convolve_HWC_q7_basic_nonsquare+0x3a>
    for (i_out_y = 0; i_out_y < dim_im_out_y; i_out_y++)
 8006c6c:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	; 0x9e
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	3301      	adds	r3, #1
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 8006c7a:	f9b7 209e 	ldrsh.w	r2, [r7, #158]	; 0x9e
 8006c7e:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	; 0xdc
 8006c82:	429a      	cmp	r2, r3
 8006c84:	f6ff af29 	blt.w	8006ada <arm_convolve_HWC_q7_basic_nonsquare+0x32>
            }
        }
    }

    /* left-over because odd number of output pixels */
    if (pBuffer != bufferA)
 8006c88:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006c8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c90:	429a      	cmp	r2, r3
 8006c92:	f000 80fa 	beq.w	8006e8a <arm_convolve_HWC_q7_basic_nonsquare+0x3e2>
    {
        const q7_t *pA = wt;
 8006c96:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006c9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        int       i;

        for (i = 0; i < ch_im_out; i++)
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006ca4:	e0ea      	b.n	8006e7c <arm_convolve_HWC_q7_basic_nonsquare+0x3d4>
        {
            /* Load the accumulator with bias first */
            q31_t     sum = ((q31_t)bias[i] << bias_shift) + NN_ROUND(out_shift);
 8006ca6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006caa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006cae:	4413      	add	r3, r2
 8006cb0:	f993 3000 	ldrsb.w	r3, [r3]
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 8006cba:	409a      	lsls	r2, r3
 8006cbc:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
 8006cc0:	3b01      	subs	r3, #1
 8006cc2:	2101      	movs	r1, #1
 8006cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8006cc8:	4413      	add	r3, r2
 8006cca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

            /* Point to the beging of the im2col buffer */
            q15_t    *pB = bufferA;
 8006cce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cd2:	61fb      	str	r3, [r7, #28]

            /* Each time it process 4 entries */
            uint16_t  colCnt = ch_im_in * dim_kernel_y * dim_kernel_x >> 2;
 8006cd4:	88fb      	ldrh	r3, [r7, #6]
 8006cd6:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	; 0xb4
 8006cda:	fb02 f303 	mul.w	r3, r2, r3
 8006cde:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 8006ce2:	fb02 f303 	mul.w	r3, r2, r3
 8006ce6:	109b      	asrs	r3, r3, #2
 8006ce8:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82

            while (colCnt)
 8006cec:	e078      	b.n	8006de0 <arm_convolve_HWC_q7_basic_nonsquare+0x338>
 8006cee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006cf2:	613b      	str	r3, [r7, #16]
 8006cf4:	f107 0318 	add.w	r3, r7, #24
 8006cf8:	64bb      	str	r3, [r7, #72]	; 0x48
 8006cfa:	f107 0314 	add.w	r3, r7, #20
 8006cfe:	647b      	str	r3, [r7, #68]	; 0x44
        q31_t     inA = *__SIMD32(source)++;
 8006d00:	f107 0210 	add.w	r2, r7, #16
 8006d04:	6813      	ldr	r3, [r2, #0]
 8006d06:	1d19      	adds	r1, r3, #4
 8006d08:	6011      	str	r1, [r2, #0]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	643b      	str	r3, [r7, #64]	; 0x40
        q31_t     inAbuf1 = __SXTB16(__ROR(inA, 8));
 8006d0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d12:	2308      	movs	r3, #8
 8006d14:	63bb      	str	r3, [r7, #56]	; 0x38
  op2 %= 32U;
 8006d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d18:	f003 031f 	and.w	r3, r3, #31
 8006d1c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (op2 == 0U)
 8006d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d101      	bne.n	8006d28 <arm_convolve_HWC_q7_basic_nonsquare+0x280>
    return op1;
 8006d24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d26:	e003      	b.n	8006d30 <arm_convolve_HWC_q7_basic_nonsquare+0x288>
  return (op1 >> op2) | (op1 << (32U - op2));
 8006d28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d2c:	fa62 f303 	ror.w	r3, r2, r3
 8006d30:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8006d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d34:	fa2f f383 	sxtb16	r3, r3
 8006d38:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8006d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        q31_t     inAbuf2 = __SXTB16(inA);
 8006d3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d40:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8006d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d44:	fa2f f383 	sxtb16	r3, r3
 8006d48:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4c:	623b      	str	r3, [r7, #32]
        *out2 = __PKHTB(inAbuf1, inAbuf2, 16);
 8006d4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d50:	4b50      	ldr	r3, [pc, #320]	; (8006e94 <arm_convolve_HWC_q7_basic_nonsquare+0x3ec>)
 8006d52:	4013      	ands	r3, r2
 8006d54:	6a3a      	ldr	r2, [r7, #32]
 8006d56:	0c12      	lsrs	r2, r2, #16
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d5e:	601a      	str	r2, [r3, #0]
        *out1 = __PKHBT(inAbuf2, inAbuf1, 16);
 8006d60:	6a3b      	ldr	r3, [r7, #32]
 8006d62:	b29a      	uxth	r2, r3
 8006d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d66:	041b      	lsls	r3, r3, #16
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d6e:	601a      	str	r2, [r3, #0]
        return source;
 8006d70:	693b      	ldr	r3, [r7, #16]
            {
                q31_t     inA1, inA2;
                q31_t     inB1, inB2;

                pA = (q7_t *) read_and_pad((void *)pA, &inA1, &inA2);
 8006d72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

                inB1 = *__SIMD32(pB)++;
 8006d76:	f107 021c 	add.w	r2, r7, #28
 8006d7a:	6813      	ldr	r3, [r2, #0]
 8006d7c:	1d19      	adds	r1, r3, #4
 8006d7e:	6011      	str	r1, [r2, #0]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	673b      	str	r3, [r7, #112]	; 0x70
                sum = __SMLAD(inA1, inB1, sum);
 8006d84:	69bb      	ldr	r3, [r7, #24]
 8006d86:	4619      	mov	r1, r3
 8006d88:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006d8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d8e:	65b9      	str	r1, [r7, #88]	; 0x58
 8006d90:	657a      	str	r2, [r7, #84]	; 0x54
 8006d92:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8006d94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d96:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006d98:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006d9a:	fb23 1302 	smlad	r3, r3, r2, r1
 8006d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 8006da0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006da2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                inB2 = *__SIMD32(pB)++;
 8006da6:	f107 021c 	add.w	r2, r7, #28
 8006daa:	6813      	ldr	r3, [r2, #0]
 8006dac:	1d19      	adds	r1, r3, #4
 8006dae:	6011      	str	r1, [r2, #0]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	66fb      	str	r3, [r7, #108]	; 0x6c
                sum = __SMLAD(inA2, inB2, sum);
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	4619      	mov	r1, r3
 8006db8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006dba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006dbe:	66b9      	str	r1, [r7, #104]	; 0x68
 8006dc0:	667a      	str	r2, [r7, #100]	; 0x64
 8006dc2:	663b      	str	r3, [r7, #96]	; 0x60
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8006dc4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006dc6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006dc8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8006dca:	fb23 1302 	smlad	r3, r3, r2, r1
 8006dce:	65fb      	str	r3, [r7, #92]	; 0x5c
  return(result);
 8006dd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006dd2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

                colCnt--;
 8006dd6:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8006dda:	3b01      	subs	r3, #1
 8006ddc:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
            while (colCnt)
 8006de0:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d182      	bne.n	8006cee <arm_convolve_HWC_q7_basic_nonsquare+0x246>
            }
            colCnt = ch_im_in * dim_kernel_y * dim_kernel_x & 0x3;
 8006de8:	88fa      	ldrh	r2, [r7, #6]
 8006dea:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006dee:	fb12 f303 	smulbb	r3, r2, r3
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 8006df8:	fb12 f303 	smulbb	r3, r2, r3
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	f003 0303 	and.w	r3, r3, #3
 8006e02:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
            while (colCnt)
 8006e06:	e01d      	b.n	8006e44 <arm_convolve_HWC_q7_basic_nonsquare+0x39c>
            {
                q7_t      inA1 = *pA++;
 8006e08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e0c:	1c5a      	adds	r2, r3, #1
 8006e0e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
                q15_t     inB1 = *pB++;
 8006e18:	69fb      	ldr	r3, [r7, #28]
 8006e1a:	1c9a      	adds	r2, r3, #2
 8006e1c:	61fa      	str	r2, [r7, #28]
 8006e1e:	881b      	ldrh	r3, [r3, #0]
 8006e20:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
                sum += inA1 * inB1;
 8006e24:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 8006e28:	f9b7 2074 	ldrsh.w	r2, [r7, #116]	; 0x74
 8006e2c:	fb02 f303 	mul.w	r3, r2, r3
 8006e30:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006e34:	4413      	add	r3, r2
 8006e36:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                colCnt--;
 8006e3a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8006e3e:	3b01      	subs	r3, #1
 8006e40:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
            while (colCnt)
 8006e44:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d1dd      	bne.n	8006e08 <arm_convolve_HWC_q7_basic_nonsquare+0x360>
            }
            *pOut++ = (q7_t) __SSAT((sum >> out_shift), 8);
 8006e4c:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
 8006e50:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006e54:	fa42 f303 	asr.w	r3, r2, r3
 8006e58:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006e5a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006e5c:	f303 0307 	ssat	r3, #8, r3
 8006e60:	67bb      	str	r3, [r7, #120]	; 0x78
 8006e62:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8006e64:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e68:	1c5a      	adds	r2, r3, #1
 8006e6a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8006e6e:	b24a      	sxtb	r2, r1
 8006e70:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < ch_im_out; i++)
 8006e72:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006e76:	3301      	adds	r3, #1
 8006e78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006e7c:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8006e80:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006e84:	429a      	cmp	r2, r3
 8006e86:	f6ff af0e 	blt.w	8006ca6 <arm_convolve_HWC_q7_basic_nonsquare+0x1fe>
    }

#endif                          /* ARM_MATH_DSP */

    /* Return to application */
    return ARM_MATH_SUCCESS;
 8006e8a:	2300      	movs	r3, #0
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	37a0      	adds	r7, #160	; 0xa0
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}
 8006e94:	ffff0000 	.word	0xffff0000

08006e98 <arm_depthwise_separable_conv_HWC_q7_nonsquare>:
                                                         q7_t * Im_out,
                                                         const uint16_t dim_im_out_x,
                                                         const uint16_t dim_im_out_y, 
                                                         q15_t * bufferA, 
                                                         q7_t * bufferB)
{
 8006e98:	b590      	push	{r4, r7, lr}
 8006e9a:	b0d3      	sub	sp, #332	; 0x14c
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	f107 040c 	add.w	r4, r7, #12
 8006ea2:	6020      	str	r0, [r4, #0]
 8006ea4:	460c      	mov	r4, r1
 8006ea6:	4610      	mov	r0, r2
 8006ea8:	4619      	mov	r1, r3
 8006eaa:	f107 030a 	add.w	r3, r7, #10
 8006eae:	4622      	mov	r2, r4
 8006eb0:	801a      	strh	r2, [r3, #0]
 8006eb2:	f107 0308 	add.w	r3, r7, #8
 8006eb6:	4602      	mov	r2, r0
 8006eb8:	801a      	strh	r2, [r3, #0]
 8006eba:	1dbb      	adds	r3, r7, #6
 8006ebc:	460a      	mov	r2, r1
 8006ebe:	801a      	strh	r2, [r3, #0]
 *
 */

    int16_t   i_out_y, i_out_x;
    int16_t   i_ker_y, i_ker_x;
    q7_t     *colBuffer = (q7_t *) bufferA;
 8006ec0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8006ec4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    q7_t     *pBuffer = colBuffer;
 8006ec8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ecc:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    const q7_t *pBias = bias;
 8006ed0:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8006ed4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    q7_t     *pOut = Im_out;
 8006ed8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8006edc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    uint16_t  rowCnt;
    uint16_t  row_shift;

    /* do some checking here, basically ch_im_in == ch_im_out */
    if (ch_im_in != ch_im_out)
 8006ee0:	1dbb      	adds	r3, r7, #6
 8006ee2:	881a      	ldrh	r2, [r3, #0]
 8006ee4:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d003      	beq.n	8006ef4 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x5c>
    {
        return ARM_MATH_SIZE_MISMATCH;
 8006eec:	f06f 0302 	mvn.w	r3, #2
 8006ef0:	f000 bc2f 	b.w	8007752 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x8ba>
    }

    for (i_out_y = 0; i_out_y < dim_im_out_y; i_out_y++)
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
 8006efa:	f000 bc22 	b.w	8007742 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x8aa>
    {
        for (i_out_x = 0; i_out_x < dim_im_out_x; i_out_x++)
 8006efe:	2300      	movs	r3, #0
 8006f00:	f8a7 3144 	strh.w	r3, [r7, #324]	; 0x144
 8006f04:	f000 bc0f 	b.w	8007726 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x88e>
        {
            /* we first do im2col here */
            for (i_ker_y = i_out_y * stride_y - padding_y; i_ker_y < i_out_y * stride_y - padding_y + dim_kernel_y;
 8006f08:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8006f0c:	f8b7 2174 	ldrh.w	r2, [r7, #372]	; 0x174
 8006f10:	fb12 f303 	smulbb	r3, r2, r3
 8006f14:	b29a      	uxth	r2, r3
 8006f16:	f8b7 316c 	ldrh.w	r3, [r7, #364]	; 0x16c
 8006f1a:	1ad3      	subs	r3, r2, r3
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142
 8006f22:	e06b      	b.n	8006ffc <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x164>
                 i_ker_y++)
            {
                for (i_ker_x = i_out_x * stride_x - padding_x; i_ker_x < i_out_x * stride_x - padding_x + dim_kernel_x;
 8006f24:	f8b7 3144 	ldrh.w	r3, [r7, #324]	; 0x144
 8006f28:	f8b7 2170 	ldrh.w	r2, [r7, #368]	; 0x170
 8006f2c:	fb12 f303 	smulbb	r3, r2, r3
 8006f30:	b29a      	uxth	r2, r3
 8006f32:	f8b7 3168 	ldrh.w	r3, [r7, #360]	; 0x168
 8006f36:	1ad3      	subs	r3, r2, r3
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	f8a7 3140 	strh.w	r3, [r7, #320]	; 0x140
 8006f3e:	e046      	b.n	8006fce <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x136>
                     i_ker_x++)
                {
                    if (i_ker_y < 0 || i_ker_y >= dim_im_in_y || i_ker_x < 0 || i_ker_x >= dim_im_in_x)
 8006f40:	f9b7 3142 	ldrsh.w	r3, [r7, #322]	; 0x142
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	db11      	blt.n	8006f6c <arm_depthwise_separable_conv_HWC_q7_nonsquare+0xd4>
 8006f48:	f9b7 2142 	ldrsh.w	r2, [r7, #322]	; 0x142
 8006f4c:	f107 0308 	add.w	r3, r7, #8
 8006f50:	881b      	ldrh	r3, [r3, #0]
 8006f52:	429a      	cmp	r2, r3
 8006f54:	da0a      	bge.n	8006f6c <arm_depthwise_separable_conv_HWC_q7_nonsquare+0xd4>
 8006f56:	f9b7 3140 	ldrsh.w	r3, [r7, #320]	; 0x140
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	db06      	blt.n	8006f6c <arm_depthwise_separable_conv_HWC_q7_nonsquare+0xd4>
 8006f5e:	f9b7 2140 	ldrsh.w	r2, [r7, #320]	; 0x140
 8006f62:	f107 030a 	add.w	r3, r7, #10
 8006f66:	881b      	ldrh	r3, [r3, #0]
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	db08      	blt.n	8006f7e <arm_depthwise_separable_conv_HWC_q7_nonsquare+0xe6>
                    {
                        /* arm_fill_q7(0, pBuffer, ch_im_in); */
                        memset(pBuffer, 0, ch_im_in);
 8006f6c:	1dbb      	adds	r3, r7, #6
 8006f6e:	881b      	ldrh	r3, [r3, #0]
 8006f70:	461a      	mov	r2, r3
 8006f72:	2100      	movs	r1, #0
 8006f74:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8006f78:	f008 fa12 	bl	800f3a0 <memset>
 8006f7c:	e019      	b.n	8006fb2 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x11a>
                    } else
                    {
                        /* arm_copy_q7((q7_t *) Im_in + (i_ker_y * dim_im_in_x + i_ker_x) * ch_im_in, pBuffer, ch_im_in); */
                        memcpy(pBuffer, (q7_t *) Im_in + (i_ker_y * dim_im_in_x + i_ker_x) * ch_im_in, ch_im_in);
 8006f7e:	f9b7 3142 	ldrsh.w	r3, [r7, #322]	; 0x142
 8006f82:	f107 020a 	add.w	r2, r7, #10
 8006f86:	8812      	ldrh	r2, [r2, #0]
 8006f88:	fb02 f203 	mul.w	r2, r2, r3
 8006f8c:	f9b7 3140 	ldrsh.w	r3, [r7, #320]	; 0x140
 8006f90:	4413      	add	r3, r2
 8006f92:	1dba      	adds	r2, r7, #6
 8006f94:	8812      	ldrh	r2, [r2, #0]
 8006f96:	fb02 f303 	mul.w	r3, r2, r3
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	f107 030c 	add.w	r3, r7, #12
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	1899      	adds	r1, r3, r2
 8006fa4:	1dbb      	adds	r3, r7, #6
 8006fa6:	881b      	ldrh	r3, [r3, #0]
 8006fa8:	461a      	mov	r2, r3
 8006faa:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8006fae:	f008 f9cf 	bl	800f350 <memcpy>
                    }
                    pBuffer += ch_im_in;
 8006fb2:	1dbb      	adds	r3, r7, #6
 8006fb4:	881b      	ldrh	r3, [r3, #0]
 8006fb6:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8006fba:	4413      	add	r3, r2
 8006fbc:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
                     i_ker_x++)
 8006fc0:	f9b7 3140 	ldrsh.w	r3, [r7, #320]	; 0x140
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	3301      	adds	r3, #1
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	f8a7 3140 	strh.w	r3, [r7, #320]	; 0x140
                for (i_ker_x = i_out_x * stride_x - padding_x; i_ker_x < i_out_x * stride_x - padding_x + dim_kernel_x;
 8006fce:	f9b7 2140 	ldrsh.w	r2, [r7, #320]	; 0x140
 8006fd2:	f9b7 3144 	ldrsh.w	r3, [r7, #324]	; 0x144
 8006fd6:	f8b7 1170 	ldrh.w	r1, [r7, #368]	; 0x170
 8006fda:	fb01 f103 	mul.w	r1, r1, r3
 8006fde:	f8b7 3168 	ldrh.w	r3, [r7, #360]	; 0x168
 8006fe2:	1ac9      	subs	r1, r1, r3
 8006fe4:	f8b7 3160 	ldrh.w	r3, [r7, #352]	; 0x160
 8006fe8:	440b      	add	r3, r1
 8006fea:	429a      	cmp	r2, r3
 8006fec:	dba8      	blt.n	8006f40 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0xa8>
                 i_ker_y++)
 8006fee:	f9b7 3142 	ldrsh.w	r3, [r7, #322]	; 0x142
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	3301      	adds	r3, #1
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142
            for (i_ker_y = i_out_y * stride_y - padding_y; i_ker_y < i_out_y * stride_y - padding_y + dim_kernel_y;
 8006ffc:	f9b7 2142 	ldrsh.w	r2, [r7, #322]	; 0x142
 8007000:	f9b7 3146 	ldrsh.w	r3, [r7, #326]	; 0x146
 8007004:	f8b7 1174 	ldrh.w	r1, [r7, #372]	; 0x174
 8007008:	fb01 f103 	mul.w	r1, r1, r3
 800700c:	f8b7 316c 	ldrh.w	r3, [r7, #364]	; 0x16c
 8007010:	1ac9      	subs	r1, r1, r3
 8007012:	f8b7 3164 	ldrh.w	r3, [r7, #356]	; 0x164
 8007016:	440b      	add	r3, r1
 8007018:	429a      	cmp	r2, r3
 800701a:	db83      	blt.n	8006f24 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x8c>
                }
            }

            /* we will do the computation here for each channel */
            rowCnt = ch_im_out >> 2;
 800701c:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8007020:	089b      	lsrs	r3, r3, #2
 8007022:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132
            row_shift = 0;
 8007026:	2300      	movs	r3, #0
 8007028:	f8a7 3130 	strh.w	r3, [r7, #304]	; 0x130
            pBias = bias;
 800702c:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8007030:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138

            while (rowCnt)
 8007034:	e2e4      	b.n	8007600 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x768>
            {
                q31_t     sum =  ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8007036:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800703a:	1c5a      	adds	r2, r3, #1
 800703c:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
 8007040:	f993 3000 	ldrsb.w	r3, [r3]
 8007044:	461a      	mov	r2, r3
 8007046:	f8b7 317c 	ldrh.w	r3, [r7, #380]	; 0x17c
 800704a:	409a      	lsls	r2, r3
 800704c:	f8b7 3180 	ldrh.w	r3, [r7, #384]	; 0x180
 8007050:	3b01      	subs	r3, #1
 8007052:	2101      	movs	r1, #1
 8007054:	fa01 f303 	lsl.w	r3, r1, r3
 8007058:	4413      	add	r3, r2
 800705a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                q31_t     sum2 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 800705e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007062:	1c5a      	adds	r2, r3, #1
 8007064:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
 8007068:	f993 3000 	ldrsb.w	r3, [r3]
 800706c:	461a      	mov	r2, r3
 800706e:	f8b7 317c 	ldrh.w	r3, [r7, #380]	; 0x17c
 8007072:	409a      	lsls	r2, r3
 8007074:	f8b7 3180 	ldrh.w	r3, [r7, #384]	; 0x180
 8007078:	3b01      	subs	r3, #1
 800707a:	2101      	movs	r1, #1
 800707c:	fa01 f303 	lsl.w	r3, r1, r3
 8007080:	4413      	add	r3, r2
 8007082:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
                q31_t     sum3 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8007086:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800708a:	1c5a      	adds	r2, r3, #1
 800708c:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
 8007090:	f993 3000 	ldrsb.w	r3, [r3]
 8007094:	461a      	mov	r2, r3
 8007096:	f8b7 317c 	ldrh.w	r3, [r7, #380]	; 0x17c
 800709a:	409a      	lsls	r2, r3
 800709c:	f8b7 3180 	ldrh.w	r3, [r7, #384]	; 0x180
 80070a0:	3b01      	subs	r3, #1
 80070a2:	2101      	movs	r1, #1
 80070a4:	fa01 f303 	lsl.w	r3, r1, r3
 80070a8:	4413      	add	r3, r2
 80070aa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
                q31_t     sum4 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 80070ae:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80070b2:	1c5a      	adds	r2, r3, #1
 80070b4:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
 80070b8:	f993 3000 	ldrsb.w	r3, [r3]
 80070bc:	461a      	mov	r2, r3
 80070be:	f8b7 317c 	ldrh.w	r3, [r7, #380]	; 0x17c
 80070c2:	409a      	lsls	r2, r3
 80070c4:	f8b7 3180 	ldrh.w	r3, [r7, #384]	; 0x180
 80070c8:	3b01      	subs	r3, #1
 80070ca:	2101      	movs	r1, #1
 80070cc:	fa01 f303 	lsl.w	r3, r1, r3
 80070d0:	4413      	add	r3, r2
 80070d2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

                uint16_t  colCnt = (dim_kernel_x * dim_kernel_y) >> 1;
 80070d6:	f8b7 3160 	ldrh.w	r3, [r7, #352]	; 0x160
 80070da:	f8b7 2164 	ldrh.w	r2, [r7, #356]	; 0x164
 80070de:	fb02 f303 	mul.w	r3, r2, r3
 80070e2:	105b      	asrs	r3, r3, #1
 80070e4:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
                q7_t     *pB = colBuffer + row_shift;
 80070e8:	f8b7 3130 	ldrh.w	r3, [r7, #304]	; 0x130
 80070ec:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80070f0:	441a      	add	r2, r3
 80070f2:	f107 0320 	add.w	r3, r7, #32
 80070f6:	601a      	str	r2, [r3, #0]
                const q7_t *pA = wt + row_shift;
 80070f8:	f8b7 3130 	ldrh.w	r3, [r7, #304]	; 0x130
 80070fc:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8007100:	441a      	add	r2, r3
 8007102:	f107 031c 	add.w	r3, r7, #28
 8007106:	601a      	str	r2, [r3, #0]
                row_shift += 4;
 8007108:	f8b7 3130 	ldrh.w	r3, [r7, #304]	; 0x130
 800710c:	3304      	adds	r3, #4
 800710e:	f8a7 3130 	strh.w	r3, [r7, #304]	; 0x130

#ifdef USE_INTRINSIC

#ifndef ARM_MATH_BIG_ENDIAN

                while (colCnt)
 8007112:	e198      	b.n	8007446 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x5ae>
                {
                    q31_t     inA1, inA2, inB1, inB2, opA, opB;

                    inB1 = *__SIMD32(pB);
 8007114:	f107 0320 	add.w	r3, r7, #32
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
                    pB += ch_im_in;
 8007120:	f107 0320 	add.w	r3, r7, #32
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	1dbb      	adds	r3, r7, #6
 8007128:	881b      	ldrh	r3, [r3, #0]
 800712a:	441a      	add	r2, r3
 800712c:	f107 0320 	add.w	r3, r7, #32
 8007130:	601a      	str	r2, [r3, #0]
                    opB = *__SIMD32(pB);
 8007132:	f107 0320 	add.w	r3, r7, #32
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                    pB += ch_im_in;
 800713e:	f107 0320 	add.w	r3, r7, #32
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	1dbb      	adds	r3, r7, #6
 8007146:	881b      	ldrh	r3, [r3, #0]
 8007148:	441a      	add	r2, r3
 800714a:	f107 0320 	add.w	r3, r7, #32
 800714e:	601a      	str	r2, [r3, #0]
                    inB2 = __PKHTB(opB, inB1, 16);
 8007150:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8007154:	4bc4      	ldr	r3, [pc, #784]	; (8007468 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x5d0>)
 8007156:	4013      	ands	r3, r2
 8007158:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800715c:	0c12      	lsrs	r2, r2, #16
 800715e:	4313      	orrs	r3, r2
 8007160:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
                    inB1 = __PKHBT(inB1, opB, 16);
 8007164:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007168:	b29a      	uxth	r2, r3
 800716a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800716e:	041b      	lsls	r3, r3, #16
 8007170:	4313      	orrs	r3, r2
 8007172:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
                    inA1 = *__SIMD32(pA);
 8007176:	f107 031c 	add.w	r3, r7, #28
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                    pA += ch_im_in;
 8007182:	f107 031c 	add.w	r3, r7, #28
 8007186:	681a      	ldr	r2, [r3, #0]
 8007188:	1dbb      	adds	r3, r7, #6
 800718a:	881b      	ldrh	r3, [r3, #0]
 800718c:	441a      	add	r2, r3
 800718e:	f107 031c 	add.w	r3, r7, #28
 8007192:	601a      	str	r2, [r3, #0]
                    opB = *__SIMD32(pA);
 8007194:	f107 031c 	add.w	r3, r7, #28
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                    pA += ch_im_in;
 80071a0:	f107 031c 	add.w	r3, r7, #28
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	1dbb      	adds	r3, r7, #6
 80071a8:	881b      	ldrh	r3, [r3, #0]
 80071aa:	441a      	add	r2, r3
 80071ac:	f107 031c 	add.w	r3, r7, #28
 80071b0:	601a      	str	r2, [r3, #0]
                    inA2 = __PKHTB(opB, inA1, 16);
 80071b2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80071b6:	4bac      	ldr	r3, [pc, #688]	; (8007468 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x5d0>)
 80071b8:	4013      	ands	r3, r2
 80071ba:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80071be:	0c12      	lsrs	r2, r2, #16
 80071c0:	4313      	orrs	r3, r2
 80071c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
                    inA1 = __PKHBT(inA1, opB, 16);
 80071c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80071ca:	b29a      	uxth	r2, r3
 80071cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80071d0:	041b      	lsls	r3, r3, #16
 80071d2:	4313      	orrs	r3, r2
 80071d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                    opA = __SXTB16(inA1);
 80071d8:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80071dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80071e0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80071e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	fa2f f283 	sxtb16	r2, r3
 80071ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071f0:	601a      	str	r2, [r3, #0]
  return(result);
 80071f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                    opB = __SXTB16(inB1);
 80071fc:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8007200:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007204:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8007206:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	fa2f f283 	sxtb16	r2, r3
 8007210:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007214:	601a      	str	r2, [r3, #0]
  return(result);
 8007216:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                    sum = __SMLAD(opA, opB, sum);
 8007220:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8007224:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8007228:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800722c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007230:	6018      	str	r0, [r3, #0]
 8007232:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007236:	6019      	str	r1, [r3, #0]
 8007238:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800723c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800723e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8007248:	6812      	ldr	r2, [r2, #0]
 800724a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800724e:	6809      	ldr	r1, [r1, #0]
 8007250:	fb23 1202 	smlad	r2, r3, r2, r1
 8007254:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007258:	601a      	str	r2, [r3, #0]
  return(result);
 800725a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    opA = __SXTB16(__ROR(inA1, 8));
 8007264:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8007268:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800726c:	601a      	str	r2, [r3, #0]
 800726e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007272:	2208      	movs	r2, #8
 8007274:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8007276:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800727a:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800727e:	6812      	ldr	r2, [r2, #0]
 8007280:	f002 021f 	and.w	r2, r2, #31
 8007284:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8007286:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d103      	bne.n	8007298 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x400>
    return op1;
 8007290:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	e007      	b.n	80072a8 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x410>
  return (op1 >> op2) | (op1 << (32U - op2));
 8007298:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800729c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80072a0:	6812      	ldr	r2, [r2, #0]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	fa62 f303 	ror.w	r3, r2, r3
 80072a8:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80072aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072ac:	fa2f f383 	sxtb16	r3, r3
 80072b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 80072b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                    opB = __SXTB16(__ROR(inB1, 8));
 80072b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80072bc:	65bb      	str	r3, [r7, #88]	; 0x58
 80072be:	2308      	movs	r3, #8
 80072c0:	657b      	str	r3, [r7, #84]	; 0x54
  op2 %= 32U;
 80072c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072c4:	f003 031f 	and.w	r3, r3, #31
 80072c8:	657b      	str	r3, [r7, #84]	; 0x54
  if (op2 == 0U)
 80072ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d101      	bne.n	80072d4 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x43c>
    return op1;
 80072d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80072d2:	e003      	b.n	80072dc <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x444>
  return (op1 >> op2) | (op1 << (32U - op2));
 80072d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80072d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072d8:	fa62 f303 	ror.w	r3, r2, r3
 80072dc:	663b      	str	r3, [r7, #96]	; 0x60
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80072de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072e0:	fa2f f383 	sxtb16	r3, r3
 80072e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  return(result);
 80072e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                    sum2 = __SMLAD(opA, opB, sum2);
 80072ec:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 80072f0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80072f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80072f8:	6739      	str	r1, [r7, #112]	; 0x70
 80072fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80072fc:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80072fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007300:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007302:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007304:	fb23 1302 	smlad	r3, r3, r2, r1
 8007308:	667b      	str	r3, [r7, #100]	; 0x64
  return(result);
 800730a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800730c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
                    opA = __SXTB16(inA2);
 8007310:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007314:	67bb      	str	r3, [r7, #120]	; 0x78
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8007316:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007318:	fa2f f383 	sxtb16	r3, r3
 800731c:	677b      	str	r3, [r7, #116]	; 0x74
  return(result);
 800731e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007320:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                    opB = __SXTB16(inB2);
 8007324:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007328:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800732c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007330:	fa2f f383 	sxtb16	r3, r3
 8007334:	67fb      	str	r3, [r7, #124]	; 0x7c
  return(result);
 8007336:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007338:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                    sum3 = __SMLAD(opA, opB, sum3);
 800733c:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8007340:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8007344:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007348:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 800734c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007350:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8007354:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007358:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800735c:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8007360:	fb23 1302 	smlad	r3, r3, r2, r1
 8007364:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return(result);
 8007368:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800736c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
                    opA = __SXTB16(__ROR(inA2, 8));
 8007370:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007374:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007378:	2308      	movs	r3, #8
 800737a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  op2 %= 32U;
 800737e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007382:	f003 031f 	and.w	r3, r3, #31
 8007386:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (op2 == 0U)
 800738a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800738e:	2b00      	cmp	r3, #0
 8007390:	d102      	bne.n	8007398 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x500>
    return op1;
 8007392:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007396:	e005      	b.n	80073a4 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x50c>
  return (op1 >> op2) | (op1 << (32U - op2));
 8007398:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800739c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80073a0:	fa62 f303 	ror.w	r3, r2, r3
 80073a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80073a8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80073ac:	fa2f f383 	sxtb16	r3, r3
 80073b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return(result);
 80073b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80073b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                    opB = __SXTB16(__ROR(inB2, 8));
 80073bc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80073c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80073c4:	2308      	movs	r3, #8
 80073c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  op2 %= 32U;
 80073ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80073ce:	f003 031f 	and.w	r3, r3, #31
 80073d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (op2 == 0U)
 80073d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d102      	bne.n	80073e4 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x54c>
    return op1;
 80073de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80073e2:	e005      	b.n	80073f0 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x558>
  return (op1 >> op2) | (op1 << (32U - op2));
 80073e4:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80073e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80073ec:	fa62 f303 	ror.w	r3, r2, r3
 80073f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80073f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80073f8:	fa2f f383 	sxtb16	r3, r3
 80073fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return(result);
 8007400:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007404:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                    sum4 = __SMLAD(opA, opB, sum4);
 8007408:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 800740c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8007410:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007414:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8007418:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800741c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8007420:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007424:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8007428:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800742c:	fb23 1302 	smlad	r3, r3, r2, r1
 8007430:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return(result);
 8007434:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007438:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
                    colCnt--;
 800743c:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 8007440:	3b01      	subs	r3, #1
 8007442:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
                while (colCnt)
 8007446:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 800744a:	2b00      	cmp	r3, #0
 800744c:	f47f ae62 	bne.w	8007114 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x27c>
                              [ch_im_in] "r"(ch_im_in):"r0", "r1", "r2", "r3", "r4", "r5");
#endif                          /*ARM_MATH_BIG_ENDIAN */

#endif                          /* USE_INTRINSIC */

                colCnt = (dim_kernel_x * dim_kernel_y) & 0x1;
 8007450:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8007454:	f8b7 3164 	ldrh.w	r3, [r7, #356]	; 0x164
 8007458:	fb12 f303 	smulbb	r3, r2, r3
 800745c:	b29b      	uxth	r3, r3
 800745e:	f003 0301 	and.w	r3, r3, #1
 8007462:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
                while (colCnt)
 8007466:	e066      	b.n	8007536 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x69e>
 8007468:	ffff0000 	.word	0xffff0000
                {
                    union arm_nnword inA, inB;
                    inA.word = *__SIMD32(pA);
 800746c:	f107 031c 	add.w	r3, r7, #28
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	f107 0318 	add.w	r3, r7, #24
 8007478:	601a      	str	r2, [r3, #0]
                    pA += ch_im_in;
 800747a:	f107 031c 	add.w	r3, r7, #28
 800747e:	681a      	ldr	r2, [r3, #0]
 8007480:	1dbb      	adds	r3, r7, #6
 8007482:	881b      	ldrh	r3, [r3, #0]
 8007484:	441a      	add	r2, r3
 8007486:	f107 031c 	add.w	r3, r7, #28
 800748a:	601a      	str	r2, [r3, #0]
                    inB.word = *__SIMD32(pB);
 800748c:	f107 0320 	add.w	r3, r7, #32
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	681a      	ldr	r2, [r3, #0]
 8007494:	f107 0314 	add.w	r3, r7, #20
 8007498:	601a      	str	r2, [r3, #0]
                    pB += ch_im_in;
 800749a:	f107 0320 	add.w	r3, r7, #32
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	1dbb      	adds	r3, r7, #6
 80074a2:	881b      	ldrh	r3, [r3, #0]
 80074a4:	441a      	add	r2, r3
 80074a6:	f107 0320 	add.w	r3, r7, #32
 80074aa:	601a      	str	r2, [r3, #0]
                    sum += inA.bytes[0] * inB.bytes[0];
 80074ac:	f107 0318 	add.w	r3, r7, #24
 80074b0:	f993 3000 	ldrsb.w	r3, [r3]
 80074b4:	461a      	mov	r2, r3
 80074b6:	f107 0314 	add.w	r3, r7, #20
 80074ba:	f993 3000 	ldrsb.w	r3, [r3]
 80074be:	fb03 f302 	mul.w	r3, r3, r2
 80074c2:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80074c6:	4413      	add	r3, r2
 80074c8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    sum2 += inA.bytes[1] * inB.bytes[1];
 80074cc:	f107 0318 	add.w	r3, r7, #24
 80074d0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80074d4:	461a      	mov	r2, r3
 80074d6:	f107 0314 	add.w	r3, r7, #20
 80074da:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80074de:	fb03 f302 	mul.w	r3, r3, r2
 80074e2:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80074e6:	4413      	add	r3, r2
 80074e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
                    sum3 += inA.bytes[2] * inB.bytes[2];
 80074ec:	f107 0318 	add.w	r3, r7, #24
 80074f0:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80074f4:	461a      	mov	r2, r3
 80074f6:	f107 0314 	add.w	r3, r7, #20
 80074fa:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80074fe:	fb03 f302 	mul.w	r3, r3, r2
 8007502:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8007506:	4413      	add	r3, r2
 8007508:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
                    sum4 += inA.bytes[3] * inB.bytes[3];
 800750c:	f107 0318 	add.w	r3, r7, #24
 8007510:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8007514:	461a      	mov	r2, r3
 8007516:	f107 0314 	add.w	r3, r7, #20
 800751a:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800751e:	fb03 f302 	mul.w	r3, r3, r2
 8007522:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8007526:	4413      	add	r3, r2
 8007528:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
                    colCnt--;
 800752c:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 8007530:	3b01      	subs	r3, #1
 8007532:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
                while (colCnt)
 8007536:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 800753a:	2b00      	cmp	r3, #0
 800753c:	d196      	bne.n	800746c <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x5d4>
                }

                *pOut++ = (q7_t) __SSAT((sum >> out_shift), 8);
 800753e:	f8b7 3180 	ldrh.w	r3, [r7, #384]	; 0x180
 8007542:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8007546:	fa42 f303 	asr.w	r3, r2, r3
 800754a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800754e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007552:	f303 0307 	ssat	r3, #8, r3
 8007556:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800755a:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 800755e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007562:	1c5a      	adds	r2, r3, #1
 8007564:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8007568:	b24a      	sxtb	r2, r1
 800756a:	701a      	strb	r2, [r3, #0]
                *pOut++ = (q7_t) __SSAT((sum2 >> out_shift), 8);
 800756c:	f8b7 3180 	ldrh.w	r3, [r7, #384]	; 0x180
 8007570:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007574:	fa42 f303 	asr.w	r3, r2, r3
 8007578:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800757c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007580:	f303 0307 	ssat	r3, #8, r3
 8007584:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007588:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800758c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007590:	1c5a      	adds	r2, r3, #1
 8007592:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8007596:	b24a      	sxtb	r2, r1
 8007598:	701a      	strb	r2, [r3, #0]
                *pOut++ = (q7_t) __SSAT((sum3 >> out_shift), 8);
 800759a:	f8b7 3180 	ldrh.w	r3, [r7, #384]	; 0x180
 800759e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80075a2:	fa42 f303 	asr.w	r3, r2, r3
 80075a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80075aa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80075ae:	f303 0307 	ssat	r3, #8, r3
 80075b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80075b6:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 80075ba:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80075be:	1c5a      	adds	r2, r3, #1
 80075c0:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 80075c4:	b24a      	sxtb	r2, r1
 80075c6:	701a      	strb	r2, [r3, #0]
                *pOut++ = (q7_t) __SSAT((sum4 >> out_shift), 8);
 80075c8:	f8b7 3180 	ldrh.w	r3, [r7, #384]	; 0x180
 80075cc:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80075d0:	fa42 f303 	asr.w	r3, r2, r3
 80075d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80075d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075dc:	f303 0307 	ssat	r3, #8, r3
 80075e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80075e4:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80075e8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80075ec:	1c5a      	adds	r2, r3, #1
 80075ee:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 80075f2:	b24a      	sxtb	r2, r1
 80075f4:	701a      	strb	r2, [r3, #0]

                rowCnt--;
 80075f6:	f8b7 3132 	ldrh.w	r3, [r7, #306]	; 0x132
 80075fa:	3b01      	subs	r3, #1
 80075fc:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132
            while (rowCnt)
 8007600:	f8b7 3132 	ldrh.w	r3, [r7, #306]	; 0x132
 8007604:	2b00      	cmp	r3, #0
 8007606:	f47f ad16 	bne.w	8007036 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x19e>
            }

            rowCnt = ch_im_out & 0x3;
 800760a:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 800760e:	f003 0303 	and.w	r3, r3, #3
 8007612:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132
            while (rowCnt)
 8007616:	e077      	b.n	8007708 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x870>
            {
                q7_t     *pB = colBuffer + row_shift;
 8007618:	f8b7 3130 	ldrh.w	r3, [r7, #304]	; 0x130
 800761c:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8007620:	4413      	add	r3, r2
 8007622:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
                const q7_t *pA = wt + row_shift;
 8007626:	f8b7 3130 	ldrh.w	r3, [r7, #304]	; 0x130
 800762a:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 800762e:	4413      	add	r3, r2
 8007630:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
                q31_t     sum = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8007634:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007638:	1c5a      	adds	r2, r3, #1
 800763a:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
 800763e:	f993 3000 	ldrsb.w	r3, [r3]
 8007642:	461a      	mov	r2, r3
 8007644:	f8b7 317c 	ldrh.w	r3, [r7, #380]	; 0x17c
 8007648:	409a      	lsls	r2, r3
 800764a:	f8b7 3180 	ldrh.w	r3, [r7, #384]	; 0x180
 800764e:	3b01      	subs	r3, #1
 8007650:	2101      	movs	r1, #1
 8007652:	fa01 f303 	lsl.w	r3, r1, r3
 8007656:	4413      	add	r3, r2
 8007658:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
                uint16_t  colCnt = (dim_kernel_x * dim_kernel_y);
 800765c:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8007660:	f8b7 3164 	ldrh.w	r3, [r7, #356]	; 0x164
 8007664:	fb12 f303 	smulbb	r3, r2, r3
 8007668:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

                row_shift += 1;
 800766c:	f8b7 3130 	ldrh.w	r3, [r7, #304]	; 0x130
 8007670:	3301      	adds	r3, #1
 8007672:	f8a7 3130 	strh.w	r3, [r7, #304]	; 0x130

                while (colCnt)
 8007676:	e027      	b.n	80076c8 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x830>
                {
                    q7_t      A1 = *pA;
 8007678:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
                    q7_t      B1 = *pB;
 8007682:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007686:	781b      	ldrb	r3, [r3, #0]
 8007688:	f887 30fe 	strb.w	r3, [r7, #254]	; 0xfe
                    pA += ch_im_in;
 800768c:	1dbb      	adds	r3, r7, #6
 800768e:	881b      	ldrh	r3, [r3, #0]
 8007690:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8007694:	4413      	add	r3, r2
 8007696:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
                    pB += ch_im_in;
 800769a:	1dbb      	adds	r3, r7, #6
 800769c:	881b      	ldrh	r3, [r3, #0]
 800769e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80076a2:	4413      	add	r3, r2
 80076a4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
                    sum += A1 * B1;
 80076a8:	f997 30ff 	ldrsb.w	r3, [r7, #255]	; 0xff
 80076ac:	f997 20fe 	ldrsb.w	r2, [r7, #254]	; 0xfe
 80076b0:	fb02 f303 	mul.w	r3, r2, r3
 80076b4:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80076b8:	4413      	add	r3, r2
 80076ba:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

                    colCnt--;
 80076be:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80076c2:	3b01      	subs	r3, #1
 80076c4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
                while (colCnt)
 80076c8:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d1d3      	bne.n	8007678 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x7e0>
                }
                *pOut++ = (q7_t) __SSAT((sum >> out_shift), 8);
 80076d0:	f8b7 3180 	ldrh.w	r3, [r7, #384]	; 0x180
 80076d4:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80076d8:	fa42 f303 	asr.w	r3, r2, r3
 80076dc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80076e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076e4:	f303 0307 	ssat	r3, #8, r3
 80076e8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80076ec:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 80076f0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80076f4:	1c5a      	adds	r2, r3, #1
 80076f6:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 80076fa:	b24a      	sxtb	r2, r1
 80076fc:	701a      	strb	r2, [r3, #0]
                rowCnt--;
 80076fe:	f8b7 3132 	ldrh.w	r3, [r7, #306]	; 0x132
 8007702:	3b01      	subs	r3, #1
 8007704:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132
            while (rowCnt)
 8007708:	f8b7 3132 	ldrh.w	r3, [r7, #306]	; 0x132
 800770c:	2b00      	cmp	r3, #0
 800770e:	d183      	bne.n	8007618 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x780>
            }

            // clear counter and pointers
            pBuffer = colBuffer;
 8007710:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007714:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
        for (i_out_x = 0; i_out_x < dim_im_out_x; i_out_x++)
 8007718:	f9b7 3144 	ldrsh.w	r3, [r7, #324]	; 0x144
 800771c:	b29b      	uxth	r3, r3
 800771e:	3301      	adds	r3, #1
 8007720:	b29b      	uxth	r3, r3
 8007722:	f8a7 3144 	strh.w	r3, [r7, #324]	; 0x144
 8007726:	f9b7 2144 	ldrsh.w	r2, [r7, #324]	; 0x144
 800772a:	f8b7 3188 	ldrh.w	r3, [r7, #392]	; 0x188
 800772e:	429a      	cmp	r2, r3
 8007730:	f6ff abea 	blt.w	8006f08 <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x70>
    for (i_out_y = 0; i_out_y < dim_im_out_y; i_out_y++)
 8007734:	f9b7 3146 	ldrsh.w	r3, [r7, #326]	; 0x146
 8007738:	b29b      	uxth	r3, r3
 800773a:	3301      	adds	r3, #1
 800773c:	b29b      	uxth	r3, r3
 800773e:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
 8007742:	f9b7 2146 	ldrsh.w	r2, [r7, #326]	; 0x146
 8007746:	f8b7 318c 	ldrh.w	r3, [r7, #396]	; 0x18c
 800774a:	429a      	cmp	r2, r3
 800774c:	f6ff abd7 	blt.w	8006efe <arm_depthwise_separable_conv_HWC_q7_nonsquare+0x66>

#endif                          /* ARM_MATH_DSP */


    /* Return to application */
    return ARM_MATH_SUCCESS;
 8007750:	2300      	movs	r3, #0

}
 8007752:	4618      	mov	r0, r3
 8007754:	f507 77a6 	add.w	r7, r7, #332	; 0x14c
 8007758:	46bd      	mov	sp, r7
 800775a:	bd90      	pop	{r4, r7, pc}

0800775c <arm_nn_mat_mult_kernel_q7_q15>:
                                        const uint16_t numCol_A,
                                        const uint16_t bias_shift,
                                        const uint16_t out_shift, 
                                        const q7_t * bias, 
                                        q7_t * pOut)
{
 800775c:	b490      	push	{r4, r7}
 800775e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8007762:	af00      	add	r7, sp, #0
 8007764:	f107 040c 	add.w	r4, r7, #12
 8007768:	6020      	str	r0, [r4, #0]
 800776a:	f107 0008 	add.w	r0, r7, #8
 800776e:	6001      	str	r1, [r0, #0]
 8007770:	4619      	mov	r1, r3
 8007772:	1dbb      	adds	r3, r7, #6
 8007774:	801a      	strh	r2, [r3, #0]
 8007776:	1d3b      	adds	r3, r7, #4
 8007778:	460a      	mov	r2, r1
 800777a:	801a      	strh	r2, [r3, #0]
#if defined (ARM_MATH_DSP)
    /* set up the second output pointers */
    q7_t     *pOut2 = pOut + ch_im_out;
 800777c:	1dbb      	adds	r3, r7, #6
 800777e:	881b      	ldrh	r3, [r3, #0]
 8007780:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8007784:	4413      	add	r3, r2
 8007786:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
    const q7_t *pBias = bias;
 800778a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800778e:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200

    uint16_t  rowCnt = ch_im_out >> 1;
 8007792:	1dbb      	adds	r3, r7, #6
 8007794:	881b      	ldrh	r3, [r3, #0]
 8007796:	085b      	lsrs	r3, r3, #1
 8007798:	f8a7 31fe 	strh.w	r3, [r7, #510]	; 0x1fe
    /* this loop over rows in A */
    while (rowCnt)
 800779c:	e347      	b.n	8007e2e <arm_nn_mat_mult_kernel_q7_q15+0x6d2>
    {
        /* setup pointers for B */
        const q15_t *pB = pInBuffer;
 800779e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80077a2:	f107 0208 	add.w	r2, r7, #8
 80077a6:	6812      	ldr	r2, [r2, #0]
 80077a8:	601a      	str	r2, [r3, #0]
        const q15_t *pB2 = pB + numCol_A;
 80077aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80077ae:	681a      	ldr	r2, [r3, #0]
 80077b0:	1d3b      	adds	r3, r7, #4
 80077b2:	881b      	ldrh	r3, [r3, #0]
 80077b4:	005b      	lsls	r3, r3, #1
 80077b6:	441a      	add	r2, r3
 80077b8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80077bc:	601a      	str	r2, [r3, #0]

        /* align the second pointer for A */
        const q7_t *pA2 = pA + numCol_A;
 80077be:	1d3b      	adds	r3, r7, #4
 80077c0:	881b      	ldrh	r3, [r3, #0]
 80077c2:	f107 020c 	add.w	r2, r7, #12
 80077c6:	6812      	ldr	r2, [r2, #0]
 80077c8:	4413      	add	r3, r2
 80077ca:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8

        /* init the sum with bias */
        q31_t     sum =  ((q31_t)(*pBias) << bias_shift) + NN_ROUND(out_shift);
 80077ce:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80077d2:	f993 3000 	ldrsb.w	r3, [r3]
 80077d6:	461a      	mov	r2, r3
 80077d8:	f8b7 3210 	ldrh.w	r3, [r7, #528]	; 0x210
 80077dc:	409a      	lsls	r2, r3
 80077de:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 80077e2:	3b01      	subs	r3, #1
 80077e4:	2101      	movs	r1, #1
 80077e6:	fa01 f303 	lsl.w	r3, r1, r3
 80077ea:	4413      	add	r3, r2
 80077ec:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        q31_t     sum2 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 80077f0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80077f4:	1c5a      	adds	r2, r3, #1
 80077f6:	f8c7 2200 	str.w	r2, [r7, #512]	; 0x200
 80077fa:	f993 3000 	ldrsb.w	r3, [r3]
 80077fe:	461a      	mov	r2, r3
 8007800:	f8b7 3210 	ldrh.w	r3, [r7, #528]	; 0x210
 8007804:	409a      	lsls	r2, r3
 8007806:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 800780a:	3b01      	subs	r3, #1
 800780c:	2101      	movs	r1, #1
 800780e:	fa01 f303 	lsl.w	r3, r1, r3
 8007812:	4413      	add	r3, r2
 8007814:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
        q31_t     sum3 = ((q31_t)(*pBias) << bias_shift) + NN_ROUND(out_shift);
 8007818:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800781c:	f993 3000 	ldrsb.w	r3, [r3]
 8007820:	461a      	mov	r2, r3
 8007822:	f8b7 3210 	ldrh.w	r3, [r7, #528]	; 0x210
 8007826:	409a      	lsls	r2, r3
 8007828:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 800782c:	3b01      	subs	r3, #1
 800782e:	2101      	movs	r1, #1
 8007830:	fa01 f303 	lsl.w	r3, r1, r3
 8007834:	4413      	add	r3, r2
 8007836:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
        q31_t     sum4 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 800783a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800783e:	1c5a      	adds	r2, r3, #1
 8007840:	f8c7 2200 	str.w	r2, [r7, #512]	; 0x200
 8007844:	f993 3000 	ldrsb.w	r3, [r3]
 8007848:	461a      	mov	r2, r3
 800784a:	f8b7 3210 	ldrh.w	r3, [r7, #528]	; 0x210
 800784e:	409a      	lsls	r2, r3
 8007850:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8007854:	3b01      	subs	r3, #1
 8007856:	2101      	movs	r1, #1
 8007858:	fa01 f303 	lsl.w	r3, r1, r3
 800785c:	4413      	add	r3, r2
 800785e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

        uint16_t  colCnt = numCol_A >> 2;
 8007862:	1d3b      	adds	r3, r7, #4
 8007864:	881b      	ldrh	r3, [r3, #0]
 8007866:	089b      	lsrs	r3, r3, #2
 8007868:	f8a7 31e6 	strh.w	r3, [r7, #486]	; 0x1e6
        /* accumulate over the vector */
        while (colCnt)
 800786c:	e20c      	b.n	8007c88 <arm_nn_mat_mult_kernel_q7_q15+0x52c>
        {
            q31_t     inA11, inA12, inA21, inA22;
            q31_t     inB1 = *__SIMD32(pB)++;
 800786e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8007872:	6813      	ldr	r3, [r2, #0]
 8007874:	1d19      	adds	r1, r3, #4
 8007876:	6011      	str	r1, [r2, #0]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
            q31_t     inB2 = *__SIMD32(pB2)++;
 800787e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8007882:	6813      	ldr	r3, [r2, #0]
 8007884:	1d19      	adds	r1, r3, #4
 8007886:	6011      	str	r1, [r2, #0]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800788e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007892:	f107 020c 	add.w	r2, r7, #12
 8007896:	6812      	ldr	r2, [r2, #0]
 8007898:	601a      	str	r2, [r3, #0]
 800789a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800789e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80078a2:	601a      	str	r2, [r3, #0]
 80078a4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80078a8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80078ac:	601a      	str	r2, [r3, #0]
        q31_t     inA = *__SIMD32(source)++;
 80078ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80078b2:	6813      	ldr	r3, [r2, #0]
 80078b4:	1d19      	adds	r1, r3, #4
 80078b6:	6011      	str	r1, [r2, #0]
 80078b8:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	6013      	str	r3, [r2, #0]
        q31_t     inAbuf1 = __SXTB16(__ROR(inA, 8));
 80078c0:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80078ca:	601a      	str	r2, [r3, #0]
 80078cc:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80078d0:	2208      	movs	r2, #8
 80078d2:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 80078d4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80078d8:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 80078dc:	6812      	ldr	r2, [r2, #0]
 80078de:	f002 021f 	and.w	r2, r2, #31
 80078e2:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 80078e4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d103      	bne.n	80078f6 <arm_nn_mat_mult_kernel_q7_q15+0x19a>
    return op1;
 80078ee:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	e007      	b.n	8007906 <arm_nn_mat_mult_kernel_q7_q15+0x1aa>
  return (op1 >> op2) | (op1 << (32U - op2));
 80078f6:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 80078fa:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80078fe:	6812      	ldr	r2, [r2, #0]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	fa62 f303 	ror.w	r3, r2, r3
 8007906:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 800790a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800790c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	fa2f f283 	sxtb16	r2, r3
 8007916:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800791a:	601a      	str	r2, [r3, #0]
  return(result);
 800791c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8007926:	601a      	str	r2, [r3, #0]
        q31_t     inAbuf2 = __SXTB16(inA);
 8007928:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800792c:	681a      	ldr	r2, [r3, #0]
 800792e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8007932:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8007934:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	fa2f f283 	sxtb16	r2, r3
 800793e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8007942:	601a      	str	r2, [r3, #0]
  return(result);
 8007944:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8007948:	681a      	ldr	r2, [r3, #0]
 800794a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800794e:	601a      	str	r2, [r3, #0]
        *out2 = __PKHTB(inAbuf1, inAbuf2, 16);
 8007950:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8007954:	681a      	ldr	r2, [r3, #0]
 8007956:	4bd2      	ldr	r3, [pc, #840]	; (8007ca0 <arm_nn_mat_mult_kernel_q7_q15+0x544>)
 8007958:	4013      	ands	r3, r2
 800795a:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800795e:	6812      	ldr	r2, [r2, #0]
 8007960:	0c12      	lsrs	r2, r2, #16
 8007962:	4313      	orrs	r3, r2
 8007964:	461a      	mov	r2, r3
 8007966:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	601a      	str	r2, [r3, #0]
        *out1 = __PKHBT(inAbuf2, inAbuf1, 16);
 800796e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	b29a      	uxth	r2, r3
 8007976:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	041b      	lsls	r3, r3, #16
 800797e:	4313      	orrs	r3, r2
 8007980:	461a      	mov	r2, r3
 8007982:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	601a      	str	r2, [r3, #0]
        return source;
 800798a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800798e:	681a      	ldr	r2, [r3, #0]

            pA = (q7_t *) read_and_pad((void *)pA, &inA11, &inA12);
 8007990:	f107 030c 	add.w	r3, r7, #12
 8007994:	601a      	str	r2, [r3, #0]
 8007996:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800799a:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
 800799e:	601a      	str	r2, [r3, #0]
 80079a0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80079a4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80079a8:	601a      	str	r2, [r3, #0]
 80079aa:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80079ae:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80079b2:	601a      	str	r2, [r3, #0]
        q31_t     inA = *__SIMD32(source)++;
 80079b4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80079b8:	6813      	ldr	r3, [r2, #0]
 80079ba:	1d19      	adds	r1, r3, #4
 80079bc:	6011      	str	r1, [r2, #0]
 80079be:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	6013      	str	r3, [r2, #0]
        q31_t     inAbuf1 = __SXTB16(__ROR(inA, 8));
 80079c6:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80079ca:	681a      	ldr	r2, [r3, #0]
 80079cc:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80079d0:	601a      	str	r2, [r3, #0]
 80079d2:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80079d6:	2208      	movs	r2, #8
 80079d8:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 80079da:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80079de:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 80079e2:	6812      	ldr	r2, [r2, #0]
 80079e4:	f002 021f 	and.w	r2, r2, #31
 80079e8:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 80079ea:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d103      	bne.n	80079fc <arm_nn_mat_mult_kernel_q7_q15+0x2a0>
    return op1;
 80079f4:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	e007      	b.n	8007a0c <arm_nn_mat_mult_kernel_q7_q15+0x2b0>
  return (op1 >> op2) | (op1 << (32U - op2));
 80079fc:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8007a00:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8007a04:	6812      	ldr	r2, [r2, #0]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	fa62 f303 	ror.w	r3, r2, r3
 8007a0c:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8007a10:	6013      	str	r3, [r2, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8007a12:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	fa2f f283 	sxtb16	r2, r3
 8007a1c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8007a20:	601a      	str	r2, [r3, #0]
  return(result);
 8007a22:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8007a26:	681a      	ldr	r2, [r3, #0]
 8007a28:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8007a2c:	601a      	str	r2, [r3, #0]
        q31_t     inAbuf2 = __SXTB16(inA);
 8007a2e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8007a32:	681a      	ldr	r2, [r3, #0]
 8007a34:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8007a38:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8007a3a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	fa2f f283 	sxtb16	r2, r3
 8007a44:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8007a48:	601a      	str	r2, [r3, #0]
  return(result);
 8007a4a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8007a4e:	681a      	ldr	r2, [r3, #0]
 8007a50:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8007a54:	601a      	str	r2, [r3, #0]
        *out2 = __PKHTB(inAbuf1, inAbuf2, 16);
 8007a56:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8007a5a:	681a      	ldr	r2, [r3, #0]
 8007a5c:	4b90      	ldr	r3, [pc, #576]	; (8007ca0 <arm_nn_mat_mult_kernel_q7_q15+0x544>)
 8007a5e:	4013      	ands	r3, r2
 8007a60:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 8007a64:	6812      	ldr	r2, [r2, #0]
 8007a66:	0c12      	lsrs	r2, r2, #16
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	601a      	str	r2, [r3, #0]
        *out1 = __PKHBT(inAbuf2, inAbuf1, 16);
 8007a74:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	b29a      	uxth	r2, r3
 8007a7c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	041b      	lsls	r3, r3, #16
 8007a84:	4313      	orrs	r3, r2
 8007a86:	461a      	mov	r2, r3
 8007a88:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	601a      	str	r2, [r3, #0]
        return source;
 8007a90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a94:	681b      	ldr	r3, [r3, #0]
            pA2 = (q7_t *) read_and_pad((void *)pA2, &inA21, &inA22);
 8007a96:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8

            sum = __SMLAD(inA11, inB1, sum);
 8007a9a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8007aa6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8007aaa:	f8c7 1114 	str.w	r1, [r7, #276]	; 0x114
 8007aae:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 8007ab2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8007ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007aba:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8007abe:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8007ac2:	fb23 1202 	smlad	r2, r3, r2, r1
 8007ac6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007aca:	601a      	str	r2, [r3, #0]
  return(result);
 8007acc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
            sum2 = __SMLAD(inA11, inB2, sum2);
 8007ad6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4619      	mov	r1, r3
 8007ade:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8007ae2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8007ae6:	f8c7 1124 	str.w	r1, [r7, #292]	; 0x124
 8007aea:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
 8007aee:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8007af2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007af6:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8007afa:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8007afe:	fb23 1302 	smlad	r3, r3, r2, r1
 8007b02:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  return(result);
 8007b06:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007b0a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
            sum3 = __SMLAD(inA21, inB1, sum3);
 8007b0e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4619      	mov	r1, r3
 8007b16:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8007b1a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8007b1e:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 8007b22:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 8007b26:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8007b2a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007b2e:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8007b32:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8007b36:	fb23 1302 	smlad	r3, r3, r2, r1
 8007b3a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  return(result);
 8007b3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b42:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
            sum4 = __SMLAD(inA21, inB2, sum4);
 8007b46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8007b52:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8007b56:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
 8007b5a:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 8007b5e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8007b62:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8007b66:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8007b6a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8007b6e:	fb23 1302 	smlad	r3, r3, r2, r1
 8007b72:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 8007b76:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007b7a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

            inB1 = *__SIMD32(pB)++;
 8007b7e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8007b82:	6813      	ldr	r3, [r2, #0]
 8007b84:	1d19      	adds	r1, r3, #4
 8007b86:	6011      	str	r1, [r2, #0]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
            inB2 = *__SIMD32(pB2)++;
 8007b8e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8007b92:	6813      	ldr	r3, [r2, #0]
 8007b94:	1d19      	adds	r1, r3, #4
 8007b96:	6011      	str	r1, [r2, #0]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188

            sum = __SMLAD(inA12, inB1, sum);
 8007b9e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4619      	mov	r1, r3
 8007ba6:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8007baa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8007bae:	f8c7 1154 	str.w	r1, [r7, #340]	; 0x154
 8007bb2:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 8007bb6:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8007bba:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8007bbe:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8007bc2:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 8007bc6:	fb23 1302 	smlad	r3, r3, r2, r1
 8007bca:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
  return(result);
 8007bce:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8007bd2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
            sum2 = __SMLAD(inA12, inB2, sum2);
 8007bd6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4619      	mov	r1, r3
 8007bde:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8007be2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8007be6:	f8c7 1164 	str.w	r1, [r7, #356]	; 0x164
 8007bea:	f8c7 2160 	str.w	r2, [r7, #352]	; 0x160
 8007bee:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8007bf2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8007bf6:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8007bfa:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 8007bfe:	fb23 1302 	smlad	r3, r3, r2, r1
 8007c02:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
  return(result);
 8007c06:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8007c0a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
            sum3 = __SMLAD(inA22, inB1, sum3);
 8007c0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4619      	mov	r1, r3
 8007c16:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8007c1a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8007c1e:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
 8007c22:	f8c7 2170 	str.w	r2, [r7, #368]	; 0x170
 8007c26:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8007c2a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8007c2e:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 8007c32:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8007c36:	fb23 1302 	smlad	r3, r3, r2, r1
 8007c3a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 8007c3e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8007c42:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
            sum4 = __SMLAD(inA22, inB2, sum4);
 8007c46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4619      	mov	r1, r3
 8007c4e:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8007c52:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8007c56:	f8c7 1184 	str.w	r1, [r7, #388]	; 0x184
 8007c5a:	f8c7 2180 	str.w	r2, [r7, #384]	; 0x180
 8007c5e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8007c62:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8007c66:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8007c6a:	f8d7 117c 	ldr.w	r1, [r7, #380]	; 0x17c
 8007c6e:	fb23 1302 	smlad	r3, r3, r2, r1
 8007c72:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
  return(result);
 8007c76:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8007c7a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

            colCnt--;
 8007c7e:	f8b7 31e6 	ldrh.w	r3, [r7, #486]	; 0x1e6
 8007c82:	3b01      	subs	r3, #1
 8007c84:	f8a7 31e6 	strh.w	r3, [r7, #486]	; 0x1e6
        while (colCnt)
 8007c88:	f8b7 31e6 	ldrh.w	r3, [r7, #486]	; 0x1e6
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	f47f adee 	bne.w	800786e <arm_nn_mat_mult_kernel_q7_q15+0x112>
        }                       /* while over colCnt */
        colCnt = numCol_A & 0x3;
 8007c92:	1d3b      	adds	r3, r7, #4
 8007c94:	881b      	ldrh	r3, [r3, #0]
 8007c96:	f003 0303 	and.w	r3, r3, #3
 8007c9a:	f8a7 31e6 	strh.w	r3, [r7, #486]	; 0x1e6
        while (colCnt)
 8007c9e:	e058      	b.n	8007d52 <arm_nn_mat_mult_kernel_q7_q15+0x5f6>
 8007ca0:	ffff0000 	.word	0xffff0000
        {
            q7_t      inA1 = *pA++;
 8007ca4:	f107 030c 	add.w	r3, r7, #12
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f107 020c 	add.w	r2, r7, #12
 8007cae:	1c59      	adds	r1, r3, #1
 8007cb0:	6011      	str	r1, [r2, #0]
 8007cb2:	781b      	ldrb	r3, [r3, #0]
 8007cb4:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
            q15_t     inB1 = *pB++;
 8007cb8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	1c99      	adds	r1, r3, #2
 8007cc0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8007cc4:	6011      	str	r1, [r2, #0]
 8007cc6:	881b      	ldrh	r3, [r3, #0]
 8007cc8:	f8a7 3194 	strh.w	r3, [r7, #404]	; 0x194
            q7_t      inA2 = *pA2++;
 8007ccc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007cd0:	1c5a      	adds	r2, r3, #1
 8007cd2:	f8c7 21f8 	str.w	r2, [r7, #504]	; 0x1f8
 8007cd6:	781b      	ldrb	r3, [r3, #0]
 8007cd8:	f887 3193 	strb.w	r3, [r7, #403]	; 0x193
            q15_t     inB2 = *pB2++;
 8007cdc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	1c99      	adds	r1, r3, #2
 8007ce4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8007ce8:	6011      	str	r1, [r2, #0]
 8007cea:	881b      	ldrh	r3, [r3, #0]
 8007cec:	f8a7 3190 	strh.w	r3, [r7, #400]	; 0x190

            sum += inA1 * inB1;
 8007cf0:	f997 3197 	ldrsb.w	r3, [r7, #407]	; 0x197
 8007cf4:	f9b7 2194 	ldrsh.w	r2, [r7, #404]	; 0x194
 8007cf8:	fb02 f303 	mul.w	r3, r2, r3
 8007cfc:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8007d00:	4413      	add	r3, r2
 8007d02:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
            sum2 += inA1 * inB2;
 8007d06:	f997 3197 	ldrsb.w	r3, [r7, #407]	; 0x197
 8007d0a:	f9b7 2190 	ldrsh.w	r2, [r7, #400]	; 0x190
 8007d0e:	fb02 f303 	mul.w	r3, r2, r3
 8007d12:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 8007d16:	4413      	add	r3, r2
 8007d18:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
            sum3 += inA2 * inB1;
 8007d1c:	f997 3193 	ldrsb.w	r3, [r7, #403]	; 0x193
 8007d20:	f9b7 2194 	ldrsh.w	r2, [r7, #404]	; 0x194
 8007d24:	fb02 f303 	mul.w	r3, r2, r3
 8007d28:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8007d2c:	4413      	add	r3, r2
 8007d2e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
            sum4 += inA2 * inB2;
 8007d32:	f997 3193 	ldrsb.w	r3, [r7, #403]	; 0x193
 8007d36:	f9b7 2190 	ldrsh.w	r2, [r7, #400]	; 0x190
 8007d3a:	fb02 f303 	mul.w	r3, r2, r3
 8007d3e:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 8007d42:	4413      	add	r3, r2
 8007d44:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
            colCnt--;
 8007d48:	f8b7 31e6 	ldrh.w	r3, [r7, #486]	; 0x1e6
 8007d4c:	3b01      	subs	r3, #1
 8007d4e:	f8a7 31e6 	strh.w	r3, [r7, #486]	; 0x1e6
        while (colCnt)
 8007d52:	f8b7 31e6 	ldrh.w	r3, [r7, #486]	; 0x1e6
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d1a4      	bne.n	8007ca4 <arm_nn_mat_mult_kernel_q7_q15+0x548>
        }                       /* while over colCnt */
        *pOut++ = (q7_t) __SSAT((sum >> out_shift), 8);
 8007d5a:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8007d5e:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8007d62:	fa42 f303 	asr.w	r3, r2, r3
 8007d66:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8007d6a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8007d6e:	f303 0307 	ssat	r3, #8, r3
 8007d72:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8007d76:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 8007d7a:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8007d7e:	1c5a      	adds	r2, r3, #1
 8007d80:	f8c7 221c 	str.w	r2, [r7, #540]	; 0x21c
 8007d84:	b24a      	sxtb	r2, r1
 8007d86:	701a      	strb	r2, [r3, #0]
        *pOut++ = (q7_t) __SSAT((sum3 >> out_shift), 8);
 8007d88:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8007d8c:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8007d90:	fa42 f303 	asr.w	r3, r2, r3
 8007d94:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8007d98:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8007d9c:	f303 0307 	ssat	r3, #8, r3
 8007da0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8007da4:	f8d7 11a8 	ldr.w	r1, [r7, #424]	; 0x1a8
 8007da8:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8007dac:	1c5a      	adds	r2, r3, #1
 8007dae:	f8c7 221c 	str.w	r2, [r7, #540]	; 0x21c
 8007db2:	b24a      	sxtb	r2, r1
 8007db4:	701a      	strb	r2, [r3, #0]
        *pOut2++ = (q7_t) __SSAT((sum2 >> out_shift), 8);
 8007db6:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8007dba:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 8007dbe:	fa42 f303 	asr.w	r3, r2, r3
 8007dc2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8007dc6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8007dca:	f303 0307 	ssat	r3, #8, r3
 8007dce:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8007dd2:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 8007dd6:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8007dda:	1c5a      	adds	r2, r3, #1
 8007ddc:	f8c7 2204 	str.w	r2, [r7, #516]	; 0x204
 8007de0:	b24a      	sxtb	r2, r1
 8007de2:	701a      	strb	r2, [r3, #0]
        *pOut2++ = (q7_t) __SSAT((sum4 >> out_shift), 8);
 8007de4:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8007de8:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 8007dec:	fa42 f303 	asr.w	r3, r2, r3
 8007df0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8007df4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8007df8:	f303 0307 	ssat	r3, #8, r3
 8007dfc:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8007e00:	f8d7 1198 	ldr.w	r1, [r7, #408]	; 0x198
 8007e04:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8007e08:	1c5a      	adds	r2, r3, #1
 8007e0a:	f8c7 2204 	str.w	r2, [r7, #516]	; 0x204
 8007e0e:	b24a      	sxtb	r2, r1
 8007e10:	701a      	strb	r2, [r3, #0]

        /* skip the row computed with A2 */
        pA += numCol_A;
 8007e12:	1d3b      	adds	r3, r7, #4
 8007e14:	881a      	ldrh	r2, [r3, #0]
 8007e16:	f107 030c 	add.w	r3, r7, #12
 8007e1a:	f107 010c 	add.w	r1, r7, #12
 8007e1e:	6809      	ldr	r1, [r1, #0]
 8007e20:	440a      	add	r2, r1
 8007e22:	601a      	str	r2, [r3, #0]
        rowCnt--;
 8007e24:	f8b7 31fe 	ldrh.w	r3, [r7, #510]	; 0x1fe
 8007e28:	3b01      	subs	r3, #1
 8007e2a:	f8a7 31fe 	strh.w	r3, [r7, #510]	; 0x1fe
    while (rowCnt)
 8007e2e:	f8b7 31fe 	ldrh.w	r3, [r7, #510]	; 0x1fe
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	f47f acb3 	bne.w	800779e <arm_nn_mat_mult_kernel_q7_q15+0x42>
    }                           /* for over ch_im_out */

    /* compute left-over row if any */
    if (ch_im_out & 0x1)
 8007e38:	1dbb      	adds	r3, r7, #6
 8007e3a:	881b      	ldrh	r3, [r3, #0]
 8007e3c:	f003 0301 	and.w	r3, r3, #1
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	f000 81eb 	beq.w	800821c <arm_nn_mat_mult_kernel_q7_q15+0xac0>
    {
        /* setup pointers for B */
        const q15_t *pB = pInBuffer;
 8007e46:	f107 0320 	add.w	r3, r7, #32
 8007e4a:	f107 0208 	add.w	r2, r7, #8
 8007e4e:	6812      	ldr	r2, [r2, #0]
 8007e50:	601a      	str	r2, [r3, #0]
        const q15_t *pB2 = pB + numCol_A;
 8007e52:	f107 0320 	add.w	r3, r7, #32
 8007e56:	681a      	ldr	r2, [r3, #0]
 8007e58:	1d3b      	adds	r3, r7, #4
 8007e5a:	881b      	ldrh	r3, [r3, #0]
 8007e5c:	005b      	lsls	r3, r3, #1
 8007e5e:	441a      	add	r2, r3
 8007e60:	f107 031c 	add.w	r3, r7, #28
 8007e64:	601a      	str	r2, [r3, #0]

        /* load the bias */
        q31_t     sum = ((q31_t)(*pBias) << bias_shift) + NN_ROUND(out_shift);
 8007e66:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007e6a:	f993 3000 	ldrsb.w	r3, [r3]
 8007e6e:	461a      	mov	r2, r3
 8007e70:	f8b7 3210 	ldrh.w	r3, [r7, #528]	; 0x210
 8007e74:	409a      	lsls	r2, r3
 8007e76:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8007e7a:	3b01      	subs	r3, #1
 8007e7c:	2101      	movs	r1, #1
 8007e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8007e82:	4413      	add	r3, r2
 8007e84:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
        q31_t     sum2 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8007e88:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007e8c:	1c5a      	adds	r2, r3, #1
 8007e8e:	f8c7 2200 	str.w	r2, [r7, #512]	; 0x200
 8007e92:	f993 3000 	ldrsb.w	r3, [r3]
 8007e96:	461a      	mov	r2, r3
 8007e98:	f8b7 3210 	ldrh.w	r3, [r7, #528]	; 0x210
 8007e9c:	409a      	lsls	r2, r3
 8007e9e:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8007ea2:	3b01      	subs	r3, #1
 8007ea4:	2101      	movs	r1, #1
 8007ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8007eaa:	4413      	add	r3, r2
 8007eac:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc

        uint16_t  colCnt = numCol_A >> 2;
 8007eb0:	1d3b      	adds	r3, r7, #4
 8007eb2:	881b      	ldrh	r3, [r3, #0]
 8007eb4:	089b      	lsrs	r3, r3, #2
 8007eb6:	f8a7 31da 	strh.w	r3, [r7, #474]	; 0x1da
        while (colCnt)
 8007eba:	e138      	b.n	800812e <arm_nn_mat_mult_kernel_q7_q15+0x9d2>
        {
            q31_t     inA11, inA12;
            q31_t     inB1 = *__SIMD32(pB)++;
 8007ebc:	f107 0220 	add.w	r2, r7, #32
 8007ec0:	6813      	ldr	r3, [r2, #0]
 8007ec2:	1d19      	adds	r1, r3, #4
 8007ec4:	6011      	str	r1, [r2, #0]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
            q31_t     inB2 = *__SIMD32(pB2)++;
 8007ecc:	f107 021c 	add.w	r2, r7, #28
 8007ed0:	6813      	ldr	r3, [r2, #0]
 8007ed2:	1d19      	adds	r1, r3, #4
 8007ed4:	6011      	str	r1, [r2, #0]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8007edc:	f107 0310 	add.w	r3, r7, #16
 8007ee0:	f107 020c 	add.w	r2, r7, #12
 8007ee4:	6812      	ldr	r2, [r2, #0]
 8007ee6:	601a      	str	r2, [r3, #0]
 8007ee8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007eec:	f107 0218 	add.w	r2, r7, #24
 8007ef0:	601a      	str	r2, [r3, #0]
 8007ef2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007ef6:	f107 0214 	add.w	r2, r7, #20
 8007efa:	601a      	str	r2, [r3, #0]
        q31_t     inA = *__SIMD32(source)++;
 8007efc:	f107 0210 	add.w	r2, r7, #16
 8007f00:	6813      	ldr	r3, [r2, #0]
 8007f02:	1d19      	adds	r1, r3, #4
 8007f04:	6011      	str	r1, [r2, #0]
 8007f06:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	6013      	str	r3, [r2, #0]
        q31_t     inAbuf1 = __SXTB16(__ROR(inA, 8));
 8007f0e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007f12:	681a      	ldr	r2, [r3, #0]
 8007f14:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007f18:	601a      	str	r2, [r3, #0]
 8007f1a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007f1e:	2208      	movs	r2, #8
 8007f20:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8007f22:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007f26:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8007f2a:	6812      	ldr	r2, [r2, #0]
 8007f2c:	f002 021f 	and.w	r2, r2, #31
 8007f30:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8007f32:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d103      	bne.n	8007f44 <arm_nn_mat_mult_kernel_q7_q15+0x7e8>
    return op1;
 8007f3c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	e007      	b.n	8007f54 <arm_nn_mat_mult_kernel_q7_q15+0x7f8>
  return (op1 >> op2) | (op1 << (32U - op2));
 8007f44:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8007f48:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007f4c:	6812      	ldr	r2, [r2, #0]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	fa62 f303 	ror.w	r3, r2, r3
 8007f54:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007f58:	6013      	str	r3, [r2, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8007f5a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	fa2f f283 	sxtb16	r2, r3
 8007f64:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007f68:	601a      	str	r2, [r3, #0]
  return(result);
 8007f6a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007f6e:	681a      	ldr	r2, [r3, #0]
 8007f70:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007f74:	601a      	str	r2, [r3, #0]
        q31_t     inAbuf2 = __SXTB16(inA);
 8007f76:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007f7a:	681a      	ldr	r2, [r3, #0]
 8007f7c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007f80:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8007f82:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	fa2f f283 	sxtb16	r2, r3
 8007f8c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007f90:	601a      	str	r2, [r3, #0]
  return(result);
 8007f92:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007f96:	681a      	ldr	r2, [r3, #0]
 8007f98:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007f9c:	601a      	str	r2, [r3, #0]
        *out2 = __PKHTB(inAbuf1, inAbuf2, 16);
 8007f9e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	4ba5      	ldr	r3, [pc, #660]	; (800823c <arm_nn_mat_mult_kernel_q7_q15+0xae0>)
 8007fa6:	4013      	ands	r3, r2
 8007fa8:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8007fac:	6812      	ldr	r2, [r2, #0]
 8007fae:	0c12      	lsrs	r2, r2, #16
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	601a      	str	r2, [r3, #0]
        *out1 = __PKHBT(inAbuf2, inAbuf1, 16);
 8007fbc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	b29a      	uxth	r2, r3
 8007fc4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	041b      	lsls	r3, r3, #16
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	461a      	mov	r2, r3
 8007fd0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	601a      	str	r2, [r3, #0]
        return source;
 8007fd8:	f107 0310 	add.w	r3, r7, #16
 8007fdc:	681a      	ldr	r2, [r3, #0]

            pA = (q7_t *) read_and_pad((void *)pA, &inA11, &inA12);
 8007fde:	f107 030c 	add.w	r3, r7, #12
 8007fe2:	601a      	str	r2, [r3, #0]

            sum = __SMLAD(inA11, inB1, sum);
 8007fe4:	f107 0318 	add.w	r3, r7, #24
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4618      	mov	r0, r3
 8007fec:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 8007ff0:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 8007ff4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8007ff8:	6018      	str	r0, [r3, #0]
 8007ffa:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8007ffe:	6019      	str	r1, [r3, #0]
 8008000:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008004:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008006:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8008010:	6812      	ldr	r2, [r2, #0]
 8008012:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8008016:	6809      	ldr	r1, [r1, #0]
 8008018:	fb23 1202 	smlad	r2, r3, r2, r1
 800801c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8008020:	601a      	str	r2, [r3, #0]
  return(result);
 8008022:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
            sum2 = __SMLAD(inA11, inB2, sum2);
 800802c:	f107 0318 	add.w	r3, r7, #24
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4618      	mov	r0, r3
 8008034:	f8d7 11b8 	ldr.w	r1, [r7, #440]	; 0x1b8
 8008038:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800803c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008040:	6018      	str	r0, [r3, #0]
 8008042:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8008046:	6019      	str	r1, [r3, #0]
 8008048:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800804c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800804e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8008058:	6812      	ldr	r2, [r2, #0]
 800805a:	f107 0184 	add.w	r1, r7, #132	; 0x84
 800805e:	6809      	ldr	r1, [r1, #0]
 8008060:	fb23 1202 	smlad	r2, r3, r2, r1
 8008064:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8008068:	601a      	str	r2, [r3, #0]
  return(result);
 800806a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc

            inB1 = *__SIMD32(pB)++;
 8008074:	f107 0220 	add.w	r2, r7, #32
 8008078:	6813      	ldr	r3, [r2, #0]
 800807a:	1d19      	adds	r1, r3, #4
 800807c:	6011      	str	r1, [r2, #0]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
            inB2 = *__SIMD32(pB2)++;
 8008084:	f107 021c 	add.w	r2, r7, #28
 8008088:	6813      	ldr	r3, [r2, #0]
 800808a:	1d19      	adds	r1, r3, #4
 800808c:	6011      	str	r1, [r2, #0]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
            sum = __SMLAD(inA12, inB1, sum);
 8008094:	f107 0314 	add.w	r3, r7, #20
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4618      	mov	r0, r3
 800809c:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 80080a0:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 80080a4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80080a8:	6018      	str	r0, [r3, #0]
 80080aa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80080ae:	6019      	str	r1, [r3, #0]
 80080b0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80080b4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80080b6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80080c0:	6812      	ldr	r2, [r2, #0]
 80080c2:	f107 0194 	add.w	r1, r7, #148	; 0x94
 80080c6:	6809      	ldr	r1, [r1, #0]
 80080c8:	fb23 1202 	smlad	r2, r3, r2, r1
 80080cc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80080d0:	601a      	str	r2, [r3, #0]
  return(result);
 80080d2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
            sum2 = __SMLAD(inA12, inB2, sum2);
 80080dc:	f107 0314 	add.w	r3, r7, #20
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4618      	mov	r0, r3
 80080e4:	f8d7 11b8 	ldr.w	r1, [r7, #440]	; 0x1b8
 80080e8:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80080ec:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80080f0:	6018      	str	r0, [r3, #0]
 80080f2:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80080f6:	6019      	str	r1, [r3, #0]
 80080f8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80080fc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80080fe:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8008108:	6812      	ldr	r2, [r2, #0]
 800810a:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 800810e:	6809      	ldr	r1, [r1, #0]
 8008110:	fb23 1202 	smlad	r2, r3, r2, r1
 8008114:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008118:	601a      	str	r2, [r3, #0]
  return(result);
 800811a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc

            colCnt--;
 8008124:	f8b7 31da 	ldrh.w	r3, [r7, #474]	; 0x1da
 8008128:	3b01      	subs	r3, #1
 800812a:	f8a7 31da 	strh.w	r3, [r7, #474]	; 0x1da
        while (colCnt)
 800812e:	f8b7 31da 	ldrh.w	r3, [r7, #474]	; 0x1da
 8008132:	2b00      	cmp	r3, #0
 8008134:	f47f aec2 	bne.w	8007ebc <arm_nn_mat_mult_kernel_q7_q15+0x760>
        }
        colCnt = numCol_A & 0x3;
 8008138:	1d3b      	adds	r3, r7, #4
 800813a:	881b      	ldrh	r3, [r3, #0]
 800813c:	f003 0303 	and.w	r3, r3, #3
 8008140:	f8a7 31da 	strh.w	r3, [r7, #474]	; 0x1da
        while (colCnt)
 8008144:	e038      	b.n	80081b8 <arm_nn_mat_mult_kernel_q7_q15+0xa5c>
        {
            q7_t      inA1 = *pA++;
 8008146:	f107 030c 	add.w	r3, r7, #12
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f107 020c 	add.w	r2, r7, #12
 8008150:	1c59      	adds	r1, r3, #1
 8008152:	6011      	str	r1, [r2, #0]
 8008154:	781b      	ldrb	r3, [r3, #0]
 8008156:	f887 31c7 	strb.w	r3, [r7, #455]	; 0x1c7
            q15_t     inB1 = *pB++;
 800815a:	f107 0320 	add.w	r3, r7, #32
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	1c99      	adds	r1, r3, #2
 8008162:	f107 0220 	add.w	r2, r7, #32
 8008166:	6011      	str	r1, [r2, #0]
 8008168:	881b      	ldrh	r3, [r3, #0]
 800816a:	f8a7 31c4 	strh.w	r3, [r7, #452]	; 0x1c4
            q15_t     inB2 = *pB2++;
 800816e:	f107 031c 	add.w	r3, r7, #28
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	1c99      	adds	r1, r3, #2
 8008176:	f107 021c 	add.w	r2, r7, #28
 800817a:	6011      	str	r1, [r2, #0]
 800817c:	881b      	ldrh	r3, [r3, #0]
 800817e:	f8a7 31c2 	strh.w	r3, [r7, #450]	; 0x1c2

            sum += inA1 * inB1;
 8008182:	f997 31c7 	ldrsb.w	r3, [r7, #455]	; 0x1c7
 8008186:	f9b7 21c4 	ldrsh.w	r2, [r7, #452]	; 0x1c4
 800818a:	fb02 f303 	mul.w	r3, r2, r3
 800818e:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 8008192:	4413      	add	r3, r2
 8008194:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
            sum2 += inA1 * inB2;
 8008198:	f997 31c7 	ldrsb.w	r3, [r7, #455]	; 0x1c7
 800819c:	f9b7 21c2 	ldrsh.w	r2, [r7, #450]	; 0x1c2
 80081a0:	fb02 f303 	mul.w	r3, r2, r3
 80081a4:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80081a8:	4413      	add	r3, r2
 80081aa:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
            colCnt--;
 80081ae:	f8b7 31da 	ldrh.w	r3, [r7, #474]	; 0x1da
 80081b2:	3b01      	subs	r3, #1
 80081b4:	f8a7 31da 	strh.w	r3, [r7, #474]	; 0x1da
        while (colCnt)
 80081b8:	f8b7 31da 	ldrh.w	r3, [r7, #474]	; 0x1da
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d1c2      	bne.n	8008146 <arm_nn_mat_mult_kernel_q7_q15+0x9ea>
        }

        *pOut++ = (q7_t) __SSAT((sum >> out_shift), 8);
 80081c0:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 80081c4:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 80081c8:	fa42 f303 	asr.w	r3, r2, r3
 80081cc:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 80081d0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80081d4:	f303 0307 	ssat	r3, #8, r3
 80081d8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 80081dc:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 80081e0:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80081e4:	1c5a      	adds	r2, r3, #1
 80081e6:	f8c7 221c 	str.w	r2, [r7, #540]	; 0x21c
 80081ea:	b24a      	sxtb	r2, r1
 80081ec:	701a      	strb	r2, [r3, #0]
        *pOut2++ = (q7_t) __SSAT((sum2 >> out_shift), 8);
 80081ee:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 80081f2:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80081f6:	fa42 f303 	asr.w	r3, r2, r3
 80081fa:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 80081fe:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8008202:	f303 0307 	ssat	r3, #8, r3
 8008206:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800820a:	f8d7 11c8 	ldr.w	r1, [r7, #456]	; 0x1c8
 800820e:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8008212:	1c5a      	adds	r2, r3, #1
 8008214:	f8c7 2204 	str.w	r2, [r7, #516]	; 0x204
 8008218:	b24a      	sxtb	r2, r1
 800821a:	701a      	strb	r2, [r3, #0]
    }

    pOut += ch_im_out;
 800821c:	1dbb      	adds	r3, r7, #6
 800821e:	881b      	ldrh	r3, [r3, #0]
 8008220:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8008224:	4413      	add	r3, r2
 8008226:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c

    /* return the new output pointer with offset */
    return pOut;
 800822a:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
#else
    /* To be completed */
    return NULL;
#endif                          /* ARM_MATH_DSP */

}
 800822e:	4618      	mov	r0, r3
 8008230:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8008234:	46bd      	mov	sp, r7
 8008236:	bc90      	pop	{r4, r7}
 8008238:	4770      	bx	lr
 800823a:	bf00      	nop
 800823c:	ffff0000 	.word	0xffff0000

08008240 <arm_nn_mat_mult_kernel_q7_q15_reordered>:
                                                  const uint16_t numCol_A,
                                                  const uint16_t bias_shift,
                                                  const uint16_t out_shift, 
                                                  const q7_t * bias, 
                                                  q7_t * pOut)
{
 8008240:	b490      	push	{r4, r7}
 8008242:	b0d2      	sub	sp, #328	; 0x148
 8008244:	af00      	add	r7, sp, #0
 8008246:	f107 040c 	add.w	r4, r7, #12
 800824a:	6020      	str	r0, [r4, #0]
 800824c:	f107 0008 	add.w	r0, r7, #8
 8008250:	6001      	str	r1, [r0, #0]
 8008252:	4619      	mov	r1, r3
 8008254:	1dbb      	adds	r3, r7, #6
 8008256:	801a      	strh	r2, [r3, #0]
 8008258:	1d3b      	adds	r3, r7, #4
 800825a:	460a      	mov	r2, r1
 800825c:	801a      	strh	r2, [r3, #0]

#if defined (ARM_MATH_DSP)
    /* set up the second output pointers */
    q7_t     *pOut2 = pOut + ch_im_out;
 800825e:	1dbb      	adds	r3, r7, #6
 8008260:	881b      	ldrh	r3, [r3, #0]
 8008262:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8008266:	4413      	add	r3, r2
 8008268:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    int       i;

    /* this loop over rows in A */
    for (i = 0; i < ch_im_out; i += 2)
 800826c:	2300      	movs	r3, #0
 800826e:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8008272:	e2df      	b.n	8008834 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x5f4>
    {
        /* setup pointers for B */
        const q15_t *pB = pInBuffer;
 8008274:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008278:	f107 0208 	add.w	r2, r7, #8
 800827c:	6812      	ldr	r2, [r2, #0]
 800827e:	601a      	str	r2, [r3, #0]
        const q15_t *pB2 = pB + numCol_A;
 8008280:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008284:	681a      	ldr	r2, [r3, #0]
 8008286:	1d3b      	adds	r3, r7, #4
 8008288:	881b      	ldrh	r3, [r3, #0]
 800828a:	005b      	lsls	r3, r3, #1
 800828c:	441a      	add	r2, r3
 800828e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008292:	601a      	str	r2, [r3, #0]

        /* align the second pointer for A */
        const q7_t *pA2 = pA + numCol_A;
 8008294:	1d3b      	adds	r3, r7, #4
 8008296:	881b      	ldrh	r3, [r3, #0]
 8008298:	f107 020c 	add.w	r2, r7, #12
 800829c:	6812      	ldr	r2, [r2, #0]
 800829e:	4413      	add	r3, r2
 80082a0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

        /* init the sum with bias */
        q31_t     sum =  ((q31_t)(bias[i]) << bias_shift) + NN_ROUND(out_shift);
 80082a4:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80082a8:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 80082ac:	4413      	add	r3, r2
 80082ae:	f993 3000 	ldrsb.w	r3, [r3]
 80082b2:	461a      	mov	r2, r3
 80082b4:	f8b7 3150 	ldrh.w	r3, [r7, #336]	; 0x150
 80082b8:	409a      	lsls	r2, r3
 80082ba:	f8b7 3154 	ldrh.w	r3, [r7, #340]	; 0x154
 80082be:	3b01      	subs	r3, #1
 80082c0:	2101      	movs	r1, #1
 80082c2:	fa01 f303 	lsl.w	r3, r1, r3
 80082c6:	4413      	add	r3, r2
 80082c8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
        q31_t     sum2 = ((q31_t)(bias[i]) << bias_shift) + NN_ROUND(out_shift);
 80082cc:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80082d0:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 80082d4:	4413      	add	r3, r2
 80082d6:	f993 3000 	ldrsb.w	r3, [r3]
 80082da:	461a      	mov	r2, r3
 80082dc:	f8b7 3150 	ldrh.w	r3, [r7, #336]	; 0x150
 80082e0:	409a      	lsls	r2, r3
 80082e2:	f8b7 3154 	ldrh.w	r3, [r7, #340]	; 0x154
 80082e6:	3b01      	subs	r3, #1
 80082e8:	2101      	movs	r1, #1
 80082ea:	fa01 f303 	lsl.w	r3, r1, r3
 80082ee:	4413      	add	r3, r2
 80082f0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
        q31_t     sum3 = ((q31_t)(bias[i + 1]) << bias_shift) + NN_ROUND(out_shift);
 80082f4:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80082f8:	3301      	adds	r3, #1
 80082fa:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 80082fe:	4413      	add	r3, r2
 8008300:	f993 3000 	ldrsb.w	r3, [r3]
 8008304:	461a      	mov	r2, r3
 8008306:	f8b7 3150 	ldrh.w	r3, [r7, #336]	; 0x150
 800830a:	409a      	lsls	r2, r3
 800830c:	f8b7 3154 	ldrh.w	r3, [r7, #340]	; 0x154
 8008310:	3b01      	subs	r3, #1
 8008312:	2101      	movs	r1, #1
 8008314:	fa01 f303 	lsl.w	r3, r1, r3
 8008318:	4413      	add	r3, r2
 800831a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
        q31_t     sum4 = ((q31_t)(bias[i + 1]) << bias_shift) + NN_ROUND(out_shift);
 800831e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8008322:	3301      	adds	r3, #1
 8008324:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8008328:	4413      	add	r3, r2
 800832a:	f993 3000 	ldrsb.w	r3, [r3]
 800832e:	461a      	mov	r2, r3
 8008330:	f8b7 3150 	ldrh.w	r3, [r7, #336]	; 0x150
 8008334:	409a      	lsls	r2, r3
 8008336:	f8b7 3154 	ldrh.w	r3, [r7, #340]	; 0x154
 800833a:	3b01      	subs	r3, #1
 800833c:	2101      	movs	r1, #1
 800833e:	fa01 f303 	lsl.w	r3, r1, r3
 8008342:	4413      	add	r3, r2
 8008344:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

        uint16_t  colCnt = numCol_A >> 2;
 8008348:	1d3b      	adds	r3, r7, #4
 800834a:	881b      	ldrh	r3, [r3, #0]
 800834c:	089b      	lsrs	r3, r3, #2
 800834e:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
        /* accumulate over the vector */
        while (colCnt)
 8008352:	e19e      	b.n	8008692 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x452>
        {
            q31_t     inA11, inA12, inA21, inA22;
            q31_t     inB1 = *__SIMD32(pB)++;
 8008354:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8008358:	6813      	ldr	r3, [r2, #0]
 800835a:	1d19      	adds	r1, r3, #4
 800835c:	6011      	str	r1, [r2, #0]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
            q31_t     inB2 = *__SIMD32(pB2)++;
 8008364:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008368:	6813      	ldr	r3, [r2, #0]
 800836a:	1d19      	adds	r1, r3, #4
 800836c:	6011      	str	r1, [r2, #0]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008374:	f107 0314 	add.w	r3, r7, #20
 8008378:	f107 020c 	add.w	r2, r7, #12
 800837c:	6812      	ldr	r2, [r2, #0]
 800837e:	601a      	str	r2, [r3, #0]
 8008380:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008384:	653b      	str	r3, [r7, #80]	; 0x50
 8008386:	f107 0320 	add.w	r3, r7, #32
 800838a:	64fb      	str	r3, [r7, #76]	; 0x4c
        q31_t     inA = *__SIMD32(source)++;
 800838c:	f107 0214 	add.w	r2, r7, #20
 8008390:	6813      	ldr	r3, [r2, #0]
 8008392:	1d19      	adds	r1, r3, #4
 8008394:	6011      	str	r1, [r2, #0]
 8008396:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	6013      	str	r3, [r2, #0]
        *out2 = __SXTB16(__ROR(inA, 8));
 800839e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80083a2:	681a      	ldr	r2, [r3, #0]
 80083a4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80083a8:	601a      	str	r2, [r3, #0]
 80083aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80083ae:	2208      	movs	r2, #8
 80083b0:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 80083b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80083b6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80083ba:	6812      	ldr	r2, [r2, #0]
 80083bc:	f002 021f 	and.w	r2, r2, #31
 80083c0:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 80083c2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d103      	bne.n	80083d4 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x194>
    return op1;
 80083cc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	e007      	b.n	80083e4 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x1a4>
  return (op1 >> op2) | (op1 << (32U - op2));
 80083d4:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80083d8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80083dc:	6812      	ldr	r2, [r2, #0]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	fa62 f303 	ror.w	r3, r2, r3
 80083e4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80083e8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80083ea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	fa2f f283 	sxtb16	r2, r3
 80083f4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80083f8:	601a      	str	r2, [r3, #0]
  return(result);
 80083fa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	461a      	mov	r2, r3
 8008402:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008404:	601a      	str	r2, [r3, #0]
        *out1 = __SXTB16(inA);
 8008406:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800840a:	681a      	ldr	r2, [r3, #0]
 800840c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008410:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008412:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	fa2f f283 	sxtb16	r2, r3
 800841c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008420:	601a      	str	r2, [r3, #0]
  return(result);
 8008422:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	461a      	mov	r2, r3
 800842a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800842c:	601a      	str	r2, [r3, #0]
        return source;
 800842e:	f107 0314 	add.w	r3, r7, #20
 8008432:	681a      	ldr	r2, [r3, #0]

            pA = (q7_t *) read_and_pad_reordered((void *)pA, &inA11, &inA12);
 8008434:	f107 030c 	add.w	r3, r7, #12
 8008438:	601a      	str	r2, [r3, #0]
 800843a:	f107 0310 	add.w	r3, r7, #16
 800843e:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8008442:	601a      	str	r2, [r3, #0]
 8008444:	f107 031c 	add.w	r3, r7, #28
 8008448:	677b      	str	r3, [r7, #116]	; 0x74
 800844a:	f107 0318 	add.w	r3, r7, #24
 800844e:	673b      	str	r3, [r7, #112]	; 0x70
        q31_t     inA = *__SIMD32(source)++;
 8008450:	f107 0210 	add.w	r2, r7, #16
 8008454:	6813      	ldr	r3, [r2, #0]
 8008456:	1d19      	adds	r1, r3, #4
 8008458:	6011      	str	r1, [r2, #0]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	66fb      	str	r3, [r7, #108]	; 0x6c
        *out2 = __SXTB16(__ROR(inA, 8));
 800845e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008460:	66bb      	str	r3, [r7, #104]	; 0x68
 8008462:	2308      	movs	r3, #8
 8008464:	667b      	str	r3, [r7, #100]	; 0x64
  op2 %= 32U;
 8008466:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008468:	f003 031f 	and.w	r3, r3, #31
 800846c:	667b      	str	r3, [r7, #100]	; 0x64
  if (op2 == 0U)
 800846e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008470:	2b00      	cmp	r3, #0
 8008472:	d101      	bne.n	8008478 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x238>
    return op1;
 8008474:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008476:	e003      	b.n	8008480 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x240>
  return (op1 >> op2) | (op1 << (32U - op2));
 8008478:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800847a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800847c:	fa62 f303 	ror.w	r3, r2, r3
 8008480:	663b      	str	r3, [r7, #96]	; 0x60
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008482:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008484:	fa2f f383 	sxtb16	r3, r3
 8008488:	65fb      	str	r3, [r7, #92]	; 0x5c
  return(result);
 800848a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800848c:	461a      	mov	r2, r3
 800848e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008490:	601a      	str	r2, [r3, #0]
        *out1 = __SXTB16(inA);
 8008492:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008494:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008496:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008498:	fa2f f383 	sxtb16	r3, r3
 800849c:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800849e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80084a0:	461a      	mov	r2, r3
 80084a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084a4:	601a      	str	r2, [r3, #0]
        return source;
 80084a6:	f107 0310 	add.w	r3, r7, #16
 80084aa:	681b      	ldr	r3, [r3, #0]
            pA2 = (q7_t *) read_and_pad_reordered((void *)pA2, &inA21, &inA22);
 80084ac:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

            sum = __SMLAD(inA11, inB1, sum);
 80084b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4619      	mov	r1, r3
 80084b8:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 80084bc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80084c0:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 80084c4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80084c8:	67fb      	str	r3, [r7, #124]	; 0x7c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80084ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80084ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80084d2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80084d4:	fb23 1302 	smlad	r3, r3, r2, r1
 80084d8:	67bb      	str	r3, [r7, #120]	; 0x78
  return(result);
 80084da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80084dc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
            sum2 = __SMLAD(inA11, inB2, sum2);
 80084e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	4619      	mov	r1, r3
 80084e8:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 80084ec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80084f0:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 80084f4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80084f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80084fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008500:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8008504:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8008508:	fb23 1302 	smlad	r3, r3, r2, r1
 800850c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return(result);
 8008510:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008514:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            sum3 = __SMLAD(inA21, inB1, sum3);
 8008518:	f107 031c 	add.w	r3, r7, #28
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4619      	mov	r1, r3
 8008520:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8008524:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008528:	f8c7 10a4 	str.w	r1, [r7, #164]	; 0xa4
 800852c:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8008530:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008534:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008538:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800853c:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8008540:	fb23 1302 	smlad	r3, r3, r2, r1
 8008544:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  return(result);
 8008548:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800854c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            sum4 = __SMLAD(inA21, inB2, sum4);
 8008550:	f107 031c 	add.w	r3, r7, #28
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4619      	mov	r1, r3
 8008558:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800855c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008560:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
 8008564:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 8008568:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800856c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008570:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008574:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8008578:	fb23 1302 	smlad	r3, r3, r2, r1
 800857c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return(result);
 8008580:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008584:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

            inB1 = *__SIMD32(pB)++;
 8008588:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800858c:	6813      	ldr	r3, [r2, #0]
 800858e:	1d19      	adds	r1, r3, #4
 8008590:	6011      	str	r1, [r2, #0]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
            inB2 = *__SIMD32(pB2)++;
 8008598:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800859c:	6813      	ldr	r3, [r2, #0]
 800859e:	1d19      	adds	r1, r3, #4
 80085a0:	6011      	str	r1, [r2, #0]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

            sum = __SMLAD(inA12, inB1, sum);
 80085a8:	f107 0320 	add.w	r3, r7, #32
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4619      	mov	r1, r3
 80085b0:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 80085b4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80085b8:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 80085bc:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 80085c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80085c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80085c8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80085cc:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 80085d0:	fb23 1302 	smlad	r3, r3, r2, r1
 80085d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return(result);
 80085d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80085dc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
            sum2 = __SMLAD(inA12, inB2, sum2);
 80085e0:	f107 0320 	add.w	r3, r7, #32
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4619      	mov	r1, r3
 80085e8:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 80085ec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80085f0:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 80085f4:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80085f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80085fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008600:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008604:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8008608:	fb23 1302 	smlad	r3, r3, r2, r1
 800860c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  return(result);
 8008610:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008614:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            sum3 = __SMLAD(inA22, inB1, sum3);
 8008618:	f107 0318 	add.w	r3, r7, #24
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4619      	mov	r1, r3
 8008620:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8008624:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008628:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 800862c:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8008630:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008634:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008638:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800863c:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8008640:	fb23 1302 	smlad	r3, r3, r2, r1
 8008644:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  return(result);
 8008648:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800864c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            sum4 = __SMLAD(inA22, inB2, sum4);
 8008650:	f107 0318 	add.w	r3, r7, #24
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4619      	mov	r1, r3
 8008658:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800865c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008660:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 8008664:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8008668:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800866c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008670:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8008674:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8008678:	fb23 1302 	smlad	r3, r3, r2, r1
 800867c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  return(result);
 8008680:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008684:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

            colCnt--;
 8008688:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 800868c:	3b01      	subs	r3, #1
 800868e:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
        while (colCnt)
 8008692:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 8008696:	2b00      	cmp	r3, #0
 8008698:	f47f ae5c 	bne.w	8008354 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x114>
        }                       /* while over colCnt */
        colCnt = numCol_A & 0x3;
 800869c:	1d3b      	adds	r3, r7, #4
 800869e:	881b      	ldrh	r3, [r3, #0]
 80086a0:	f003 0303 	and.w	r3, r3, #3
 80086a4:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
        while (colCnt)
 80086a8:	e056      	b.n	8008758 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x518>
        {
            q7_t      inA1 = *pA++;
 80086aa:	f107 030c 	add.w	r3, r7, #12
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f107 020c 	add.w	r2, r7, #12
 80086b4:	1c59      	adds	r1, r3, #1
 80086b6:	6011      	str	r1, [r2, #0]
 80086b8:	781b      	ldrb	r3, [r3, #0]
 80086ba:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            q15_t     inB1 = *pB++;
 80086be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	1c99      	adds	r1, r3, #2
 80086c6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80086ca:	6011      	str	r1, [r2, #0]
 80086cc:	881b      	ldrh	r3, [r3, #0]
 80086ce:	f8a7 3104 	strh.w	r3, [r7, #260]	; 0x104
            q7_t      inA2 = *pA2++;
 80086d2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80086d6:	1c5a      	adds	r2, r3, #1
 80086d8:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 80086dc:	781b      	ldrb	r3, [r3, #0]
 80086de:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
            q15_t     inB2 = *pB2++;
 80086e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	1c99      	adds	r1, r3, #2
 80086ea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80086ee:	6011      	str	r1, [r2, #0]
 80086f0:	881b      	ldrh	r3, [r3, #0]
 80086f2:	f8a7 3100 	strh.w	r3, [r7, #256]	; 0x100

            sum += inA1 * inB1;
 80086f6:	f997 3107 	ldrsb.w	r3, [r7, #263]	; 0x107
 80086fa:	f9b7 2104 	ldrsh.w	r2, [r7, #260]	; 0x104
 80086fe:	fb02 f303 	mul.w	r3, r2, r3
 8008702:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8008706:	4413      	add	r3, r2
 8008708:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
            sum2 += inA1 * inB2;
 800870c:	f997 3107 	ldrsb.w	r3, [r7, #263]	; 0x107
 8008710:	f9b7 2100 	ldrsh.w	r2, [r7, #256]	; 0x100
 8008714:	fb02 f303 	mul.w	r3, r2, r3
 8008718:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800871c:	4413      	add	r3, r2
 800871e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            sum3 += inA2 * inB1;
 8008722:	f997 3103 	ldrsb.w	r3, [r7, #259]	; 0x103
 8008726:	f9b7 2104 	ldrsh.w	r2, [r7, #260]	; 0x104
 800872a:	fb02 f303 	mul.w	r3, r2, r3
 800872e:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8008732:	4413      	add	r3, r2
 8008734:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            sum4 += inA2 * inB2;
 8008738:	f997 3103 	ldrsb.w	r3, [r7, #259]	; 0x103
 800873c:	f9b7 2100 	ldrsh.w	r2, [r7, #256]	; 0x100
 8008740:	fb02 f303 	mul.w	r3, r2, r3
 8008744:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8008748:	4413      	add	r3, r2
 800874a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            colCnt--;
 800874e:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 8008752:	3b01      	subs	r3, #1
 8008754:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
        while (colCnt)
 8008758:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 800875c:	2b00      	cmp	r3, #0
 800875e:	d1a4      	bne.n	80086aa <arm_nn_mat_mult_kernel_q7_q15_reordered+0x46a>
        }                       /* while over colCnt */
        *pOut++ = (q7_t) __SSAT((sum >> out_shift), 8);
 8008760:	f8b7 3154 	ldrh.w	r3, [r7, #340]	; 0x154
 8008764:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8008768:	fa42 f303 	asr.w	r3, r2, r3
 800876c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008770:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008774:	f303 0307 	ssat	r3, #8, r3
 8008778:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800877c:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8008780:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8008784:	1c5a      	adds	r2, r3, #1
 8008786:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 800878a:	b24a      	sxtb	r2, r1
 800878c:	701a      	strb	r2, [r3, #0]
        *pOut++ = (q7_t) __SSAT((sum3 >> out_shift), 8);
 800878e:	f8b7 3154 	ldrh.w	r3, [r7, #340]	; 0x154
 8008792:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8008796:	fa42 f303 	asr.w	r3, r2, r3
 800879a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800879e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80087a2:	f303 0307 	ssat	r3, #8, r3
 80087a6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80087aa:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 80087ae:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80087b2:	1c5a      	adds	r2, r3, #1
 80087b4:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 80087b8:	b24a      	sxtb	r2, r1
 80087ba:	701a      	strb	r2, [r3, #0]
        *pOut2++ = (q7_t) __SSAT((sum2 >> out_shift), 8);
 80087bc:	f8b7 3154 	ldrh.w	r3, [r7, #340]	; 0x154
 80087c0:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80087c4:	fa42 f303 	asr.w	r3, r2, r3
 80087c8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80087cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087d0:	f303 0307 	ssat	r3, #8, r3
 80087d4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80087d8:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 80087dc:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80087e0:	1c5a      	adds	r2, r3, #1
 80087e2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
 80087e6:	b24a      	sxtb	r2, r1
 80087e8:	701a      	strb	r2, [r3, #0]
        *pOut2++ = (q7_t) __SSAT((sum4 >> out_shift), 8);
 80087ea:	f8b7 3154 	ldrh.w	r3, [r7, #340]	; 0x154
 80087ee:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80087f2:	fa42 f303 	asr.w	r3, r2, r3
 80087f6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80087fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80087fe:	f303 0307 	ssat	r3, #8, r3
 8008802:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008806:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 800880a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800880e:	1c5a      	adds	r2, r3, #1
 8008810:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
 8008814:	b24a      	sxtb	r2, r1
 8008816:	701a      	strb	r2, [r3, #0]

        /* skip the row computed with A2 */
        pA += numCol_A;
 8008818:	1d3b      	adds	r3, r7, #4
 800881a:	881a      	ldrh	r2, [r3, #0]
 800881c:	f107 030c 	add.w	r3, r7, #12
 8008820:	f107 010c 	add.w	r1, r7, #12
 8008824:	6809      	ldr	r1, [r1, #0]
 8008826:	440a      	add	r2, r1
 8008828:	601a      	str	r2, [r3, #0]
    for (i = 0; i < ch_im_out; i += 2)
 800882a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800882e:	3302      	adds	r3, #2
 8008830:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8008834:	1dbb      	adds	r3, r7, #6
 8008836:	881b      	ldrh	r3, [r3, #0]
 8008838:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 800883c:	429a      	cmp	r2, r3
 800883e:	f6ff ad19 	blt.w	8008274 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x34>
    }                           /* for over ch_im_out */

    pOut += ch_im_out;
 8008842:	1dbb      	adds	r3, r7, #6
 8008844:	881b      	ldrh	r3, [r3, #0]
 8008846:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 800884a:	4413      	add	r3, r2
 800884c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

    /* return the new output pointer with offset */
    return pOut;
 8008850:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
#else
    /* To be completed */
    return NULL;
#endif                          /* ARM_MATH_DSP */
}
 8008854:	4618      	mov	r0, r3
 8008856:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 800885a:	46bd      	mov	sp, r7
 800885c:	bc90      	pop	{r4, r7}
 800885e:	4770      	bx	lr

08008860 <arm_fully_connected_q7>:
                       const q7_t * pM,
                       const uint16_t dim_vec,
                       const uint16_t num_of_rows,
                       const uint16_t bias_shift,
                       const uint16_t out_shift, const q7_t * bias, q7_t * pOut, q15_t * vec_buffer)
{
 8008860:	b590      	push	{r4, r7, lr}
 8008862:	b0d7      	sub	sp, #348	; 0x15c
 8008864:	af00      	add	r7, sp, #0
 8008866:	f107 040c 	add.w	r4, r7, #12
 800886a:	6020      	str	r0, [r4, #0]
 800886c:	f107 0008 	add.w	r0, r7, #8
 8008870:	6001      	str	r1, [r0, #0]
 8008872:	4619      	mov	r1, r3
 8008874:	1dbb      	adds	r3, r7, #6
 8008876:	801a      	strh	r2, [r3, #0]
 8008878:	1d3b      	adds	r3, r7, #4
 800887a:	460a      	mov	r2, r1
 800887c:	801a      	strh	r2, [r3, #0]

#if defined (ARM_MATH_DSP)
    /* Run the following code for Cortex-M4 and Cortex-M7 */

    const q7_t *pB = pM;
 800887e:	f107 0308 	add.w	r3, r7, #8
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    const q7_t *pB2;
    q7_t     *pO = pOut;
 8008888:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800888c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    const q7_t *pBias = bias;
 8008890:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8008894:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
    q15_t    *pA;
    uint16_t  rowCnt = num_of_rows >> 1;
 8008898:	1d3b      	adds	r3, r7, #4
 800889a:	881b      	ldrh	r3, [r3, #0]
 800889c:	085b      	lsrs	r3, r3, #1
 800889e:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146

    /* expand the vector into the buffer */
    arm_q7_to_q15_reordered_no_shift(pV, vec_buffer, dim_vec);
 80088a2:	1dbb      	adds	r3, r7, #6
 80088a4:	881a      	ldrh	r2, [r3, #0]
 80088a6:	f107 030c 	add.w	r3, r7, #12
 80088aa:	f8d7 1178 	ldr.w	r1, [r7, #376]	; 0x178
 80088ae:	6818      	ldr	r0, [r3, #0]
 80088b0:	f000 fb82 	bl	8008fb8 <arm_q7_to_q15_reordered_no_shift>

    while (rowCnt)
 80088b4:	e1e2      	b.n	8008c7c <arm_fully_connected_q7+0x41c>
    {
        q31_t     sum =  ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 80088b6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80088ba:	1c5a      	adds	r2, r3, #1
 80088bc:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80088c0:	f993 3000 	ldrsb.w	r3, [r3]
 80088c4:	461a      	mov	r2, r3
 80088c6:	f8b7 3168 	ldrh.w	r3, [r7, #360]	; 0x168
 80088ca:	409a      	lsls	r2, r3
 80088cc:	f8b7 316c 	ldrh.w	r3, [r7, #364]	; 0x16c
 80088d0:	3b01      	subs	r3, #1
 80088d2:	2101      	movs	r1, #1
 80088d4:	fa01 f303 	lsl.w	r3, r1, r3
 80088d8:	4413      	add	r3, r2
 80088da:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
        q31_t     sum2 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 80088de:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80088e2:	1c5a      	adds	r2, r3, #1
 80088e4:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80088e8:	f993 3000 	ldrsb.w	r3, [r3]
 80088ec:	461a      	mov	r2, r3
 80088ee:	f8b7 3168 	ldrh.w	r3, [r7, #360]	; 0x168
 80088f2:	409a      	lsls	r2, r3
 80088f4:	f8b7 316c 	ldrh.w	r3, [r7, #364]	; 0x16c
 80088f8:	3b01      	subs	r3, #1
 80088fa:	2101      	movs	r1, #1
 80088fc:	fa01 f303 	lsl.w	r3, r1, r3
 8008900:	4413      	add	r3, r2
 8008902:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
        uint16_t  colCnt = dim_vec >> 2;
 8008906:	1dbb      	adds	r3, r7, #6
 8008908:	881b      	ldrh	r3, [r3, #0]
 800890a:	089b      	lsrs	r3, r3, #2
 800890c:	f8a7 313a 	strh.w	r3, [r7, #314]	; 0x13a

        pA = vec_buffer;
 8008910:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008914:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8008918:	601a      	str	r2, [r3, #0]
        pB2 = pB + dim_vec;
 800891a:	1dbb      	adds	r3, r7, #6
 800891c:	881b      	ldrh	r3, [r3, #0]
 800891e:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8008922:	4413      	add	r3, r2
 8008924:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

        while (colCnt)
 8008928:	e126      	b.n	8008b78 <arm_fully_connected_q7+0x318>
 800892a:	f107 0320 	add.w	r3, r7, #32
 800892e:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8008932:	601a      	str	r2, [r3, #0]
 8008934:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008938:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800893c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008940:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        q31_t     inA = *__SIMD32(source)++;
 8008944:	f107 0220 	add.w	r2, r7, #32
 8008948:	6813      	ldr	r3, [r2, #0]
 800894a:	1d19      	adds	r1, r3, #4
 800894c:	6011      	str	r1, [r2, #0]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        *out2 = __SXTB16(__ROR(inA, 8));
 8008954:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008958:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800895c:	2308      	movs	r3, #8
 800895e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  op2 %= 32U;
 8008962:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008966:	f003 031f 	and.w	r3, r3, #31
 800896a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (op2 == 0U)
 800896e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008972:	2b00      	cmp	r3, #0
 8008974:	d102      	bne.n	800897c <arm_fully_connected_q7+0x11c>
    return op1;
 8008976:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800897a:	e005      	b.n	8008988 <arm_fully_connected_q7+0x128>
  return (op1 >> op2) | (op1 << (32U - op2));
 800897c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8008980:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008984:	fa62 f303 	ror.w	r3, r2, r3
 8008988:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800898c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008990:	fa2f f383 	sxtb16	r3, r3
 8008994:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return(result);
 8008998:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800899c:	461a      	mov	r2, r3
 800899e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80089a2:	601a      	str	r2, [r3, #0]
        *out1 = __SXTB16(inA);
 80089a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80089a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80089ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80089b0:	fa2f f383 	sxtb16	r3, r3
 80089b4:	67fb      	str	r3, [r7, #124]	; 0x7c
  return(result);
 80089b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80089b8:	461a      	mov	r2, r3
 80089ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80089be:	601a      	str	r2, [r3, #0]
        return source;
 80089c0:	f107 0320 	add.w	r3, r7, #32
 80089c4:	681b      	ldr	r3, [r3, #0]
        {
            q31_t     inV, inM11, inM12, inM21, inM22;
            pB = (q7_t *) read_and_pad_reordered((void *)pB, &inM11, &inM12);
 80089c6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80089ca:	f107 031c 	add.w	r3, r7, #28
 80089ce:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 80089d2:	601a      	str	r2, [r3, #0]
 80089d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80089d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80089dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80089e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
        q31_t     inA = *__SIMD32(source)++;
 80089e4:	f107 021c 	add.w	r2, r7, #28
 80089e8:	6813      	ldr	r3, [r2, #0]
 80089ea:	1d19      	adds	r1, r3, #4
 80089ec:	6011      	str	r1, [r2, #0]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
        *out2 = __SXTB16(__ROR(inA, 8));
 80089f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80089f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80089fc:	2308      	movs	r3, #8
 80089fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  op2 %= 32U;
 8008a02:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008a06:	f003 031f 	and.w	r3, r3, #31
 8008a0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (op2 == 0U)
 8008a0e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d102      	bne.n	8008a1c <arm_fully_connected_q7+0x1bc>
    return op1;
 8008a16:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008a1a:	e005      	b.n	8008a28 <arm_fully_connected_q7+0x1c8>
  return (op1 >> op2) | (op1 << (32U - op2));
 8008a1c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008a20:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008a24:	fa62 f303 	ror.w	r3, r2, r3
 8008a28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008a2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008a30:	fa2f f383 	sxtb16	r3, r3
 8008a34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return(result);
 8008a38:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008a3c:	461a      	mov	r2, r3
 8008a3e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008a42:	601a      	str	r2, [r3, #0]
        *out1 = __SXTB16(inA);
 8008a44:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008a48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008a4c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008a50:	fa2f f383 	sxtb16	r3, r3
 8008a54:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return(result);
 8008a58:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008a5c:	461a      	mov	r2, r3
 8008a5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008a62:	601a      	str	r2, [r3, #0]
        return source;
 8008a64:	f107 031c 	add.w	r3, r7, #28
 8008a68:	681b      	ldr	r3, [r3, #0]
            pB2 = (q7_t *) read_and_pad_reordered((void *)pB2, &inM21, &inM22);
 8008a6a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

            inV = *__SIMD32(pA)++;
 8008a6e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8008a72:	6813      	ldr	r3, [r2, #0]
 8008a74:	1d19      	adds	r1, r3, #4
 8008a76:	6011      	str	r1, [r2, #0]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

            sum = __SMLAD(inV, inM11, sum);
 8008a7e:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8008a82:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	4619      	mov	r1, r3
 8008a8a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8008a8e:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8008a92:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 8008a96:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008a9a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008a9e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8008aa2:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8008aa6:	fb23 1302 	smlad	r3, r3, r2, r1
 8008aaa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  return(result);
 8008aae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008ab2:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
            sum2 = __SMLAD(inV, inM21, sum2);
 8008ab6:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8008aba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4619      	mov	r1, r3
 8008ac2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8008ac6:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8008aca:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 8008ace:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008ad2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ad6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008ada:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8008ade:	fb23 1302 	smlad	r3, r3, r2, r1
 8008ae2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  return(result);
 8008ae6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008aea:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

            inV = *__SIMD32(pA)++;
 8008aee:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8008af2:	6813      	ldr	r3, [r2, #0]
 8008af4:	1d19      	adds	r1, r3, #4
 8008af6:	6011      	str	r1, [r2, #0]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

            sum = __SMLAD(inV, inM12, sum);
 8008afe:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8008b02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4619      	mov	r1, r3
 8008b0a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8008b0e:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8008b12:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
 8008b16:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008b1a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008b1e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8008b22:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8008b26:	fb23 1302 	smlad	r3, r3, r2, r1
 8008b2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  return(result);
 8008b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b32:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
            sum2 = __SMLAD(inV, inM22, sum2);
 8008b36:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8008b3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4619      	mov	r1, r3
 8008b42:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8008b46:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 8008b4a:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
 8008b4e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008b52:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008b56:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8008b5a:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8008b5e:	fb23 1302 	smlad	r3, r3, r2, r1
 8008b62:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  return(result);
 8008b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b6a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

            colCnt--;
 8008b6e:	f8b7 313a 	ldrh.w	r3, [r7, #314]	; 0x13a
 8008b72:	3b01      	subs	r3, #1
 8008b74:	f8a7 313a 	strh.w	r3, [r7, #314]	; 0x13a
        while (colCnt)
 8008b78:	f8b7 313a 	ldrh.w	r3, [r7, #314]	; 0x13a
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	f47f aed4 	bne.w	800892a <arm_fully_connected_q7+0xca>
        }
        colCnt = dim_vec & 0x3;
 8008b82:	1dbb      	adds	r3, r7, #6
 8008b84:	881b      	ldrh	r3, [r3, #0]
 8008b86:	f003 0303 	and.w	r3, r3, #3
 8008b8a:	f8a7 313a 	strh.w	r3, [r7, #314]	; 0x13a
        while (colCnt)
 8008b8e:	e037      	b.n	8008c00 <arm_fully_connected_q7+0x3a0>
        {
            q7_t      inV = *pA++;
 8008b90:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	1c99      	adds	r1, r3, #2
 8008b98:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8008b9c:	6011      	str	r1, [r2, #0]
 8008b9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008ba2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
            q15_t     inM = *pB++;
 8008ba6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8008baa:	1c5a      	adds	r2, r3, #1
 8008bac:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8008bb0:	f993 3000 	ldrsb.w	r3, [r3]
 8008bb4:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
            q15_t     inM2 = *pB2++;
 8008bb8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8008bbc:	1c5a      	adds	r2, r3, #1
 8008bbe:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 8008bc2:	f993 3000 	ldrsb.w	r3, [r3]
 8008bc6:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            sum += inV * inM;
 8008bca:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 8008bce:	f9b7 210c 	ldrsh.w	r2, [r7, #268]	; 0x10c
 8008bd2:	fb02 f303 	mul.w	r3, r2, r3
 8008bd6:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8008bda:	4413      	add	r3, r2
 8008bdc:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
            sum2 += inV * inM2;
 8008be0:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 8008be4:	f9b7 210a 	ldrsh.w	r2, [r7, #266]	; 0x10a
 8008be8:	fb02 f303 	mul.w	r3, r2, r3
 8008bec:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8008bf0:	4413      	add	r3, r2
 8008bf2:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
            colCnt--;
 8008bf6:	f8b7 313a 	ldrh.w	r3, [r7, #314]	; 0x13a
 8008bfa:	3b01      	subs	r3, #1
 8008bfc:	f8a7 313a 	strh.w	r3, [r7, #314]	; 0x13a
        while (colCnt)
 8008c00:	f8b7 313a 	ldrh.w	r3, [r7, #314]	; 0x13a
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d1c3      	bne.n	8008b90 <arm_fully_connected_q7+0x330>
        }                       /* while over colCnt */
        *pO++ = (q7_t) (__SSAT((sum >> out_shift), 8));
 8008c08:	f8b7 316c 	ldrh.w	r3, [r7, #364]	; 0x16c
 8008c0c:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8008c10:	fa42 f303 	asr.w	r3, r2, r3
 8008c14:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008c18:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008c1c:	f303 0307 	ssat	r3, #8, r3
 8008c20:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008c24:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8008c28:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008c2c:	1c5a      	adds	r2, r3, #1
 8008c2e:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8008c32:	b24a      	sxtb	r2, r1
 8008c34:	701a      	strb	r2, [r3, #0]
        *pO++ = (q7_t) (__SSAT((sum2 >> out_shift), 8));
 8008c36:	f8b7 316c 	ldrh.w	r3, [r7, #364]	; 0x16c
 8008c3a:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8008c3e:	fa42 f303 	asr.w	r3, r2, r3
 8008c42:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c4a:	f303 0307 	ssat	r3, #8, r3
 8008c4e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008c52:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8008c56:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008c5a:	1c5a      	adds	r2, r3, #1
 8008c5c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8008c60:	b24a      	sxtb	r2, r1
 8008c62:	701a      	strb	r2, [r3, #0]

        /* adjust the pointers and counters */
        pB += dim_vec;
 8008c64:	1dbb      	adds	r3, r7, #6
 8008c66:	881b      	ldrh	r3, [r3, #0]
 8008c68:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8008c6c:	4413      	add	r3, r2
 8008c6e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
        rowCnt--;
 8008c72:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8008c76:	3b01      	subs	r3, #1
 8008c78:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
    while (rowCnt)
 8008c7c:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	f47f ae18 	bne.w	80088b6 <arm_fully_connected_q7+0x56>
    }

    /* left-over part of the rows */
    rowCnt = num_of_rows & 0x1;
 8008c86:	1d3b      	adds	r3, r7, #4
 8008c88:	881b      	ldrh	r3, [r3, #0]
 8008c8a:	f003 0301 	and.w	r3, r3, #1
 8008c8e:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146

    while (rowCnt)
 8008c92:	e114      	b.n	8008ebe <arm_fully_connected_q7+0x65e>
    {
        uint16_t  colCnt = dim_vec >> 2;
 8008c94:	1dbb      	adds	r3, r7, #6
 8008c96:	881b      	ldrh	r3, [r3, #0]
 8008c98:	089b      	lsrs	r3, r3, #2
 8008c9a:	f8a7 3138 	strh.w	r3, [r7, #312]	; 0x138
        q31_t     sum = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8008c9e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008ca2:	1c5a      	adds	r2, r3, #1
 8008ca4:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8008ca8:	f993 3000 	ldrsb.w	r3, [r3]
 8008cac:	461a      	mov	r2, r3
 8008cae:	f8b7 3168 	ldrh.w	r3, [r7, #360]	; 0x168
 8008cb2:	409a      	lsls	r2, r3
 8008cb4:	f8b7 316c 	ldrh.w	r3, [r7, #364]	; 0x16c
 8008cb8:	3b01      	subs	r3, #1
 8008cba:	2101      	movs	r1, #1
 8008cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8008cc0:	4413      	add	r3, r2
 8008cc2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

        pA = vec_buffer;
 8008cc6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008cca:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8008cce:	601a      	str	r2, [r3, #0]

        while (colCnt)
 8008cd0:	e0a5      	b.n	8008e1e <arm_fully_connected_q7+0x5be>
 8008cd2:	f107 0310 	add.w	r3, r7, #16
 8008cd6:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8008cda:	601a      	str	r2, [r3, #0]
 8008cdc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008ce0:	f107 0218 	add.w	r2, r7, #24
 8008ce4:	601a      	str	r2, [r3, #0]
 8008ce6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008cea:	f107 0214 	add.w	r2, r7, #20
 8008cee:	601a      	str	r2, [r3, #0]
        q31_t     inA = *__SIMD32(source)++;
 8008cf0:	f107 0210 	add.w	r2, r7, #16
 8008cf4:	6813      	ldr	r3, [r2, #0]
 8008cf6:	1d19      	adds	r1, r3, #4
 8008cf8:	6011      	str	r1, [r2, #0]
 8008cfa:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	6013      	str	r3, [r2, #0]
        *out2 = __SXTB16(__ROR(inA, 8));
 8008d02:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008d06:	681a      	ldr	r2, [r3, #0]
 8008d08:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008d0c:	601a      	str	r2, [r3, #0]
 8008d0e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008d12:	2208      	movs	r2, #8
 8008d14:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8008d16:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008d1a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008d1e:	6812      	ldr	r2, [r2, #0]
 8008d20:	f002 021f 	and.w	r2, r2, #31
 8008d24:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8008d26:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d103      	bne.n	8008d38 <arm_fully_connected_q7+0x4d8>
    return op1;
 8008d30:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	e007      	b.n	8008d48 <arm_fully_connected_q7+0x4e8>
  return (op1 >> op2) | (op1 << (32U - op2));
 8008d38:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8008d3c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008d40:	6812      	ldr	r2, [r2, #0]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	fa62 f303 	ror.w	r3, r2, r3
 8008d48:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8008d4c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008d4e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	fa2f f283 	sxtb16	r2, r3
 8008d58:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008d5c:	601a      	str	r2, [r3, #0]
  return(result);
 8008d5e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	461a      	mov	r2, r3
 8008d66:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	601a      	str	r2, [r3, #0]
        *out1 = __SXTB16(inA);
 8008d6e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008d72:	681a      	ldr	r2, [r3, #0]
 8008d74:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008d78:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008d7a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	fa2f f283 	sxtb16	r2, r3
 8008d84:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008d88:	601a      	str	r2, [r3, #0]
  return(result);
 8008d8a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	461a      	mov	r2, r3
 8008d92:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	601a      	str	r2, [r3, #0]
        return source;
 8008d9a:	f107 0310 	add.w	r3, r7, #16
 8008d9e:	681b      	ldr	r3, [r3, #0]
        {
            q31_t     inV1, inV2, inM11, inM12;

            pB = (q7_t *) read_and_pad_reordered((void *)pB, &inM11, &inM12);
 8008da0:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154

            inV1 = *__SIMD32(pA)++;
 8008da4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8008da8:	6813      	ldr	r3, [r2, #0]
 8008daa:	1d19      	adds	r1, r3, #4
 8008dac:	6011      	str	r1, [r2, #0]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
            sum = __SMLAD(inV1, inM11, sum);
 8008db4:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8008db8:	f107 0318 	add.w	r3, r7, #24
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4619      	mov	r1, r3
 8008dc0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008dc4:	66ba      	str	r2, [r7, #104]	; 0x68
 8008dc6:	6679      	str	r1, [r7, #100]	; 0x64
 8008dc8:	663b      	str	r3, [r7, #96]	; 0x60
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008dca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008dcc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008dce:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008dd0:	fb23 1302 	smlad	r3, r3, r2, r1
 8008dd4:	65fb      	str	r3, [r7, #92]	; 0x5c
  return(result);
 8008dd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008dd8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

            inV2 = *__SIMD32(pA)++;
 8008ddc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8008de0:	6813      	ldr	r3, [r2, #0]
 8008de2:	1d19      	adds	r1, r3, #4
 8008de4:	6011      	str	r1, [r2, #0]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            sum = __SMLAD(inV2, inM12, sum);
 8008dec:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8008df0:	f107 0314 	add.w	r3, r7, #20
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	4619      	mov	r1, r3
 8008df8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008dfc:	67ba      	str	r2, [r7, #120]	; 0x78
 8008dfe:	6779      	str	r1, [r7, #116]	; 0x74
 8008e00:	673b      	str	r3, [r7, #112]	; 0x70
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8008e02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e04:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008e06:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8008e08:	fb23 1302 	smlad	r3, r3, r2, r1
 8008e0c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 8008e0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e10:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

            colCnt--;
 8008e14:	f8b7 3138 	ldrh.w	r3, [r7, #312]	; 0x138
 8008e18:	3b01      	subs	r3, #1
 8008e1a:	f8a7 3138 	strh.w	r3, [r7, #312]	; 0x138
        while (colCnt)
 8008e1e:	f8b7 3138 	ldrh.w	r3, [r7, #312]	; 0x138
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	f47f af55 	bne.w	8008cd2 <arm_fully_connected_q7+0x472>
        }

        /* left-over of the vector */
        colCnt = dim_vec & 0x3;
 8008e28:	1dbb      	adds	r3, r7, #6
 8008e2a:	881b      	ldrh	r3, [r3, #0]
 8008e2c:	f003 0303 	and.w	r3, r3, #3
 8008e30:	f8a7 3138 	strh.w	r3, [r7, #312]	; 0x138
        while (colCnt)
 8008e34:	e023      	b.n	8008e7e <arm_fully_connected_q7+0x61e>
        {
            q7_t      inV = *pA++;
 8008e36:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	1c99      	adds	r1, r3, #2
 8008e3e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8008e42:	6011      	str	r1, [r2, #0]
 8008e44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008e48:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
            q15_t     inM = *pB++;
 8008e4c:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8008e50:	1c5a      	adds	r2, r3, #1
 8008e52:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8008e56:	f993 3000 	ldrsb.w	r3, [r3]
 8008e5a:	f8a7 3128 	strh.w	r3, [r7, #296]	; 0x128
            sum += inV * inM;
 8008e5e:	f997 312b 	ldrsb.w	r3, [r7, #299]	; 0x12b
 8008e62:	f9b7 2128 	ldrsh.w	r2, [r7, #296]	; 0x128
 8008e66:	fb02 f303 	mul.w	r3, r2, r3
 8008e6a:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8008e6e:	4413      	add	r3, r2
 8008e70:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            colCnt--;
 8008e74:	f8b7 3138 	ldrh.w	r3, [r7, #312]	; 0x138
 8008e78:	3b01      	subs	r3, #1
 8008e7a:	f8a7 3138 	strh.w	r3, [r7, #312]	; 0x138
        while (colCnt)
 8008e7e:	f8b7 3138 	ldrh.w	r3, [r7, #312]	; 0x138
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d1d7      	bne.n	8008e36 <arm_fully_connected_q7+0x5d6>
        }

        *pO++ = (q7_t) (__SSAT((sum >> out_shift), 8));
 8008e86:	f8b7 316c 	ldrh.w	r3, [r7, #364]	; 0x16c
 8008e8a:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8008e8e:	fa42 f303 	asr.w	r3, r2, r3
 8008e92:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8008e96:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008e9a:	f303 0307 	ssat	r3, #8, r3
 8008e9e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8008ea2:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8008ea6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008eaa:	1c5a      	adds	r2, r3, #1
 8008eac:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8008eb0:	b24a      	sxtb	r2, r1
 8008eb2:	701a      	strb	r2, [r3, #0]

        rowCnt--;
 8008eb4:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8008eb8:	3b01      	subs	r3, #1
 8008eba:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
    while (rowCnt)
 8008ebe:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	f47f aee6 	bne.w	8008c94 <arm_fully_connected_q7+0x434>
    }

#endif                          /* ARM_MATH_DSP */

    /* Return to ARM_MATH_SUCCESS */
    return (ARM_MATH_SUCCESS);
 8008ec8:	2300      	movs	r3, #0

}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd90      	pop	{r4, r7, pc}

08008ed4 <arm_q7_to_q15_no_shift>:
 * </pre>    
 *   
 */

void arm_q7_to_q15_no_shift(const q7_t * pSrc, q15_t * pDst, uint32_t blockSize)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b093      	sub	sp, #76	; 0x4c
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	60f8      	str	r0, [r7, #12]
 8008edc:	60b9      	str	r1, [r7, #8]
 8008ede:	607a      	str	r2, [r7, #4]
    const q7_t *pIn = pSrc;     /* Src pointer */
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	617b      	str	r3, [r7, #20]
    q31_t     out1, out2;

    /* Run the below code for Cortex-M4 and Cortex-M3 */

    /*loop Unrolling */
    blkCnt = blockSize >> 2u;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	089b      	lsrs	r3, r3, #2
 8008ee8:	647b      	str	r3, [r7, #68]	; 0x44

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
     ** a second loop below computes the remaining 1 to 3 samples. */
    while (blkCnt > 0u)
 8008eea:	e044      	b.n	8008f76 <arm_q7_to_q15_no_shift+0xa2>
    {
        /* C = (q15_t) A << 8 */
        /* convert from q7 to q15 and then store the results in the destination buffer */
        in = *__SIMD32(pIn)++;
 8008eec:	f107 0214 	add.w	r2, r7, #20
 8008ef0:	6813      	ldr	r3, [r2, #0]
 8008ef2:	1d19      	adds	r1, r3, #4
 8008ef4:	6011      	str	r1, [r2, #0]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	643b      	str	r3, [r7, #64]	; 0x40

        /* rotatate in by 8 and extend two q7_t values to q15_t values */
        in1 = __SXTB16(__ROR(in, 8));
 8008efa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008efc:	61fb      	str	r3, [r7, #28]
 8008efe:	2308      	movs	r3, #8
 8008f00:	61bb      	str	r3, [r7, #24]
  op2 %= 32U;
 8008f02:	69bb      	ldr	r3, [r7, #24]
 8008f04:	f003 031f 	and.w	r3, r3, #31
 8008f08:	61bb      	str	r3, [r7, #24]
  if (op2 == 0U)
 8008f0a:	69bb      	ldr	r3, [r7, #24]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d101      	bne.n	8008f14 <arm_q7_to_q15_no_shift+0x40>
    return op1;
 8008f10:	69fb      	ldr	r3, [r7, #28]
 8008f12:	e003      	b.n	8008f1c <arm_q7_to_q15_no_shift+0x48>
  return (op1 >> op2) | (op1 << (32U - op2));
 8008f14:	69fa      	ldr	r2, [r7, #28]
 8008f16:	69bb      	ldr	r3, [r7, #24]
 8008f18:	fa62 f303 	ror.w	r3, r2, r3
 8008f1c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f20:	fa2f f383 	sxtb16	r3, r3
 8008f24:	623b      	str	r3, [r7, #32]
  return(result);
 8008f26:	6a3b      	ldr	r3, [r7, #32]
 8008f28:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* extend remainig two q7_t values to q15_t values */
        in2 = __SXTB16(in);
 8008f2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8008f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f30:	fa2f f383 	sxtb16	r3, r3
 8008f34:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8008f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f38:	63bb      	str	r3, [r7, #56]	; 0x38

#ifndef ARM_MATH_BIG_ENDIAN

        out2 = __PKHTB(in1, in2, 16);
 8008f3a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008f3c:	4b1d      	ldr	r3, [pc, #116]	; (8008fb4 <arm_q7_to_q15_no_shift+0xe0>)
 8008f3e:	4013      	ands	r3, r2
 8008f40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f42:	0c12      	lsrs	r2, r2, #16
 8008f44:	4313      	orrs	r3, r2
 8008f46:	637b      	str	r3, [r7, #52]	; 0x34
        out1 = __PKHBT(in2, in1, 16);
 8008f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f4a:	b29a      	uxth	r2, r3
 8008f4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f4e:	041b      	lsls	r3, r3, #16
 8008f50:	4313      	orrs	r3, r2
 8008f52:	633b      	str	r3, [r7, #48]	; 0x30
        out1 = __PKHTB(in1, in2, 16);
        out2 = __PKHBT(in2, in1, 16);

#endif

        *__SIMD32(pDst)++ = out1;
 8008f54:	f107 0208 	add.w	r2, r7, #8
 8008f58:	6813      	ldr	r3, [r2, #0]
 8008f5a:	1d19      	adds	r1, r3, #4
 8008f5c:	6011      	str	r1, [r2, #0]
 8008f5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f60:	601a      	str	r2, [r3, #0]
        *__SIMD32(pDst)++ = out2;
 8008f62:	f107 0208 	add.w	r2, r7, #8
 8008f66:	6813      	ldr	r3, [r2, #0]
 8008f68:	1d19      	adds	r1, r3, #4
 8008f6a:	6011      	str	r1, [r2, #0]
 8008f6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f6e:	601a      	str	r2, [r3, #0]

        /* Decrement the loop counter */
        blkCnt--;
 8008f70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f72:	3b01      	subs	r3, #1
 8008f74:	647b      	str	r3, [r7, #68]	; 0x44
    while (blkCnt > 0u)
 8008f76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d1b7      	bne.n	8008eec <arm_q7_to_q15_no_shift+0x18>
    }

    /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
     ** No loop unrolling is used. */
    blkCnt = blockSize % 0x4u;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f003 0303 	and.w	r3, r3, #3
 8008f82:	647b      	str	r3, [r7, #68]	; 0x44
    /* Loop over blockSize number of values */
    blkCnt = blockSize;

#endif                          /* #ifndef ARM_MATH_CM0_FAMILY */

    while (blkCnt > 0u)
 8008f84:	e00c      	b.n	8008fa0 <arm_q7_to_q15_no_shift+0xcc>
    {
        /* C = (q15_t) A << 8 */
        /* convert from q7 to q15 and then store the results in the destination buffer */
        *pDst++ = (q15_t) * pIn++;
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	1c5a      	adds	r2, r3, #1
 8008f8a:	617a      	str	r2, [r7, #20]
 8008f8c:	f993 1000 	ldrsb.w	r1, [r3]
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	1c9a      	adds	r2, r3, #2
 8008f94:	60ba      	str	r2, [r7, #8]
 8008f96:	b20a      	sxth	r2, r1
 8008f98:	801a      	strh	r2, [r3, #0]

        /* Decrement the loop counter */
        blkCnt--;
 8008f9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f9c:	3b01      	subs	r3, #1
 8008f9e:	647b      	str	r3, [r7, #68]	; 0x44
    while (blkCnt > 0u)
 8008fa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d1ef      	bne.n	8008f86 <arm_q7_to_q15_no_shift+0xb2>
    }

}
 8008fa6:	bf00      	nop
 8008fa8:	bf00      	nop
 8008faa:	374c      	adds	r7, #76	; 0x4c
 8008fac:	46bd      	mov	sp, r7
 8008fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb2:	4770      	bx	lr
 8008fb4:	ffff0000 	.word	0xffff0000

08008fb8 <arm_q7_to_q15_reordered_no_shift>:
 * The tail (i.e., last (N % 4) elements) will still be in original order.
 *   
 */

void arm_q7_to_q15_reordered_no_shift(const q7_t * pSrc, q15_t * pDst, uint32_t blockSize)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b091      	sub	sp, #68	; 0x44
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	60f8      	str	r0, [r7, #12]
 8008fc0:	60b9      	str	r1, [r7, #8]
 8008fc2:	607a      	str	r2, [r7, #4]
    const q7_t *pIn = pSrc;     /* Src pointer */
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	617b      	str	r3, [r7, #20]
    q31_t     in1, in2;

    /* Run the below code for Cortex-M4 and Cortex-M3 */

    /*loop Unrolling */
    blkCnt = blockSize >> 2u;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	089b      	lsrs	r3, r3, #2
 8008fcc:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
     ** a second loop below computes the remaining 1 to 3 samples. */
    while (blkCnt > 0u)
 8008fce:	e037      	b.n	8009040 <arm_q7_to_q15_reordered_no_shift+0x88>
    {
        /* C = (q15_t) A << 8 */
        /* convert from q7 to q15 and then store the results in the destination buffer */
        in = *__SIMD32(pIn)++;
 8008fd0:	f107 0214 	add.w	r2, r7, #20
 8008fd4:	6813      	ldr	r3, [r2, #0]
 8008fd6:	1d19      	adds	r1, r3, #4
 8008fd8:	6011      	str	r1, [r2, #0]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	63bb      	str	r3, [r7, #56]	; 0x38

        /* rotatate in by 8 and extend two q7_t values to q15_t values */
        in1 = __SXTB16(__ROR(in, 8));
 8008fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fe0:	61fb      	str	r3, [r7, #28]
 8008fe2:	2308      	movs	r3, #8
 8008fe4:	61bb      	str	r3, [r7, #24]
  op2 %= 32U;
 8008fe6:	69bb      	ldr	r3, [r7, #24]
 8008fe8:	f003 031f 	and.w	r3, r3, #31
 8008fec:	61bb      	str	r3, [r7, #24]
  if (op2 == 0U)
 8008fee:	69bb      	ldr	r3, [r7, #24]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d101      	bne.n	8008ff8 <arm_q7_to_q15_reordered_no_shift+0x40>
    return op1;
 8008ff4:	69fb      	ldr	r3, [r7, #28]
 8008ff6:	e003      	b.n	8009000 <arm_q7_to_q15_reordered_no_shift+0x48>
  return (op1 >> op2) | (op1 << (32U - op2));
 8008ff8:	69fa      	ldr	r2, [r7, #28]
 8008ffa:	69bb      	ldr	r3, [r7, #24]
 8008ffc:	fa62 f303 	ror.w	r3, r2, r3
 8009000:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8009002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009004:	fa2f f383 	sxtb16	r3, r3
 8009008:	623b      	str	r3, [r7, #32]
  return(result);
 800900a:	6a3b      	ldr	r3, [r7, #32]
 800900c:	637b      	str	r3, [r7, #52]	; 0x34

        /* extend remainig two q7_t values to q15_t values */
        in2 = __SXTB16(in);
 800900e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009010:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8009012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009014:	fa2f f383 	sxtb16	r3, r3
 8009018:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800901a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800901c:	633b      	str	r3, [r7, #48]	; 0x30

#ifndef ARM_MATH_BIG_ENDIAN
        *__SIMD32(pDst)++ = in2;
 800901e:	f107 0208 	add.w	r2, r7, #8
 8009022:	6813      	ldr	r3, [r2, #0]
 8009024:	1d19      	adds	r1, r3, #4
 8009026:	6011      	str	r1, [r2, #0]
 8009028:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800902a:	601a      	str	r2, [r3, #0]
        *__SIMD32(pDst)++ = in1;
 800902c:	f107 0208 	add.w	r2, r7, #8
 8009030:	6813      	ldr	r3, [r2, #0]
 8009032:	1d19      	adds	r1, r3, #4
 8009034:	6011      	str	r1, [r2, #0]
 8009036:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009038:	601a      	str	r2, [r3, #0]
        *__SIMD32(pDst)++ = in1;
        *__SIMD32(pDst)++ = in2;
#endif

        /* Decrement the loop counter */
        blkCnt--;
 800903a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800903c:	3b01      	subs	r3, #1
 800903e:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (blkCnt > 0u)
 8009040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009042:	2b00      	cmp	r3, #0
 8009044:	d1c4      	bne.n	8008fd0 <arm_q7_to_q15_reordered_no_shift+0x18>
    }

    /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
     ** No loop unrolling is used. */
    blkCnt = blockSize % 0x4u;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f003 0303 	and.w	r3, r3, #3
 800904c:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* Loop over blockSize number of values */
    blkCnt = blockSize;

#endif                          /* #ifndef ARM_MATH_CM0_FAMILY */

    while (blkCnt > 0u)
 800904e:	e00c      	b.n	800906a <arm_q7_to_q15_reordered_no_shift+0xb2>
    {
        /* C = (q15_t) A << 8 */
        /* convert from q7 to q15 and then store the results in the destination buffer */
        *pDst++ = (q15_t) * pIn++;
 8009050:	697b      	ldr	r3, [r7, #20]
 8009052:	1c5a      	adds	r2, r3, #1
 8009054:	617a      	str	r2, [r7, #20]
 8009056:	f993 1000 	ldrsb.w	r1, [r3]
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	1c9a      	adds	r2, r3, #2
 800905e:	60ba      	str	r2, [r7, #8]
 8009060:	b20a      	sxth	r2, r1
 8009062:	801a      	strh	r2, [r3, #0]

        /* Decrement the loop counter */
        blkCnt--;
 8009064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009066:	3b01      	subs	r3, #1
 8009068:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (blkCnt > 0u)
 800906a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800906c:	2b00      	cmp	r3, #0
 800906e:	d1ef      	bne.n	8009050 <arm_q7_to_q15_reordered_no_shift+0x98>
    }

}
 8009070:	bf00      	nop
 8009072:	bf00      	nop
 8009074:	3744      	adds	r7, #68	; 0x44
 8009076:	46bd      	mov	sp, r7
 8009078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907c:	4770      	bx	lr

0800907e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800907e:	b580      	push	{r7, lr}
 8009080:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009082:	2003      	movs	r0, #3
 8009084:	f000 f8f9 	bl	800927a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009088:	200f      	movs	r0, #15
 800908a:	f7fa fdcf 	bl	8003c2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800908e:	f7fa faab 	bl	80035e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009092:	2300      	movs	r3, #0
}
 8009094:	4618      	mov	r0, r3
 8009096:	bd80      	pop	{r7, pc}

08009098 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009098:	b480      	push	{r7}
 800909a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800909c:	4b06      	ldr	r3, [pc, #24]	; (80090b8 <HAL_IncTick+0x20>)
 800909e:	781b      	ldrb	r3, [r3, #0]
 80090a0:	461a      	mov	r2, r3
 80090a2:	4b06      	ldr	r3, [pc, #24]	; (80090bc <HAL_IncTick+0x24>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	4413      	add	r3, r2
 80090a8:	4a04      	ldr	r2, [pc, #16]	; (80090bc <HAL_IncTick+0x24>)
 80090aa:	6013      	str	r3, [r2, #0]
}
 80090ac:	bf00      	nop
 80090ae:	46bd      	mov	sp, r7
 80090b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b4:	4770      	bx	lr
 80090b6:	bf00      	nop
 80090b8:	20000010 	.word	0x20000010
 80090bc:	20000464 	.word	0x20000464

080090c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80090c0:	b480      	push	{r7}
 80090c2:	af00      	add	r7, sp, #0
  return uwTick;
 80090c4:	4b03      	ldr	r3, [pc, #12]	; (80090d4 <HAL_GetTick+0x14>)
 80090c6:	681b      	ldr	r3, [r3, #0]
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	46bd      	mov	sp, r7
 80090cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d0:	4770      	bx	lr
 80090d2:	bf00      	nop
 80090d4:	20000464 	.word	0x20000464

080090d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b084      	sub	sp, #16
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80090e0:	f7ff ffee 	bl	80090c0 <HAL_GetTick>
 80090e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090f0:	d005      	beq.n	80090fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80090f2:	4b0a      	ldr	r3, [pc, #40]	; (800911c <HAL_Delay+0x44>)
 80090f4:	781b      	ldrb	r3, [r3, #0]
 80090f6:	461a      	mov	r2, r3
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	4413      	add	r3, r2
 80090fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80090fe:	bf00      	nop
 8009100:	f7ff ffde 	bl	80090c0 <HAL_GetTick>
 8009104:	4602      	mov	r2, r0
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	1ad3      	subs	r3, r2, r3
 800910a:	68fa      	ldr	r2, [r7, #12]
 800910c:	429a      	cmp	r2, r3
 800910e:	d8f7      	bhi.n	8009100 <HAL_Delay+0x28>
  {
  }
}
 8009110:	bf00      	nop
 8009112:	bf00      	nop
 8009114:	3710      	adds	r7, #16
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}
 800911a:	bf00      	nop
 800911c:	20000010 	.word	0x20000010

08009120 <__NVIC_SetPriorityGrouping>:
{
 8009120:	b480      	push	{r7}
 8009122:	b085      	sub	sp, #20
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f003 0307 	and.w	r3, r3, #7
 800912e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009130:	4b0b      	ldr	r3, [pc, #44]	; (8009160 <__NVIC_SetPriorityGrouping+0x40>)
 8009132:	68db      	ldr	r3, [r3, #12]
 8009134:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009136:	68ba      	ldr	r2, [r7, #8]
 8009138:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800913c:	4013      	ands	r3, r2
 800913e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8009148:	4b06      	ldr	r3, [pc, #24]	; (8009164 <__NVIC_SetPriorityGrouping+0x44>)
 800914a:	4313      	orrs	r3, r2
 800914c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800914e:	4a04      	ldr	r2, [pc, #16]	; (8009160 <__NVIC_SetPriorityGrouping+0x40>)
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	60d3      	str	r3, [r2, #12]
}
 8009154:	bf00      	nop
 8009156:	3714      	adds	r7, #20
 8009158:	46bd      	mov	sp, r7
 800915a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915e:	4770      	bx	lr
 8009160:	e000ed00 	.word	0xe000ed00
 8009164:	05fa0000 	.word	0x05fa0000

08009168 <__NVIC_GetPriorityGrouping>:
{
 8009168:	b480      	push	{r7}
 800916a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800916c:	4b04      	ldr	r3, [pc, #16]	; (8009180 <__NVIC_GetPriorityGrouping+0x18>)
 800916e:	68db      	ldr	r3, [r3, #12]
 8009170:	0a1b      	lsrs	r3, r3, #8
 8009172:	f003 0307 	and.w	r3, r3, #7
}
 8009176:	4618      	mov	r0, r3
 8009178:	46bd      	mov	sp, r7
 800917a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917e:	4770      	bx	lr
 8009180:	e000ed00 	.word	0xe000ed00

08009184 <__NVIC_EnableIRQ>:
{
 8009184:	b480      	push	{r7}
 8009186:	b083      	sub	sp, #12
 8009188:	af00      	add	r7, sp, #0
 800918a:	4603      	mov	r3, r0
 800918c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800918e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009192:	2b00      	cmp	r3, #0
 8009194:	db0b      	blt.n	80091ae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009196:	79fb      	ldrb	r3, [r7, #7]
 8009198:	f003 021f 	and.w	r2, r3, #31
 800919c:	4907      	ldr	r1, [pc, #28]	; (80091bc <__NVIC_EnableIRQ+0x38>)
 800919e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80091a2:	095b      	lsrs	r3, r3, #5
 80091a4:	2001      	movs	r0, #1
 80091a6:	fa00 f202 	lsl.w	r2, r0, r2
 80091aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80091ae:	bf00      	nop
 80091b0:	370c      	adds	r7, #12
 80091b2:	46bd      	mov	sp, r7
 80091b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b8:	4770      	bx	lr
 80091ba:	bf00      	nop
 80091bc:	e000e100 	.word	0xe000e100

080091c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b083      	sub	sp, #12
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	4603      	mov	r3, r0
 80091c8:	6039      	str	r1, [r7, #0]
 80091ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80091cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	db0a      	blt.n	80091ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	b2da      	uxtb	r2, r3
 80091d8:	490c      	ldr	r1, [pc, #48]	; (800920c <__NVIC_SetPriority+0x4c>)
 80091da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80091de:	0112      	lsls	r2, r2, #4
 80091e0:	b2d2      	uxtb	r2, r2
 80091e2:	440b      	add	r3, r1
 80091e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80091e8:	e00a      	b.n	8009200 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	b2da      	uxtb	r2, r3
 80091ee:	4908      	ldr	r1, [pc, #32]	; (8009210 <__NVIC_SetPriority+0x50>)
 80091f0:	79fb      	ldrb	r3, [r7, #7]
 80091f2:	f003 030f 	and.w	r3, r3, #15
 80091f6:	3b04      	subs	r3, #4
 80091f8:	0112      	lsls	r2, r2, #4
 80091fa:	b2d2      	uxtb	r2, r2
 80091fc:	440b      	add	r3, r1
 80091fe:	761a      	strb	r2, [r3, #24]
}
 8009200:	bf00      	nop
 8009202:	370c      	adds	r7, #12
 8009204:	46bd      	mov	sp, r7
 8009206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920a:	4770      	bx	lr
 800920c:	e000e100 	.word	0xe000e100
 8009210:	e000ed00 	.word	0xe000ed00

08009214 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009214:	b480      	push	{r7}
 8009216:	b089      	sub	sp, #36	; 0x24
 8009218:	af00      	add	r7, sp, #0
 800921a:	60f8      	str	r0, [r7, #12]
 800921c:	60b9      	str	r1, [r7, #8]
 800921e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	f003 0307 	and.w	r3, r3, #7
 8009226:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009228:	69fb      	ldr	r3, [r7, #28]
 800922a:	f1c3 0307 	rsb	r3, r3, #7
 800922e:	2b04      	cmp	r3, #4
 8009230:	bf28      	it	cs
 8009232:	2304      	movcs	r3, #4
 8009234:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009236:	69fb      	ldr	r3, [r7, #28]
 8009238:	3304      	adds	r3, #4
 800923a:	2b06      	cmp	r3, #6
 800923c:	d902      	bls.n	8009244 <NVIC_EncodePriority+0x30>
 800923e:	69fb      	ldr	r3, [r7, #28]
 8009240:	3b03      	subs	r3, #3
 8009242:	e000      	b.n	8009246 <NVIC_EncodePriority+0x32>
 8009244:	2300      	movs	r3, #0
 8009246:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009248:	f04f 32ff 	mov.w	r2, #4294967295
 800924c:	69bb      	ldr	r3, [r7, #24]
 800924e:	fa02 f303 	lsl.w	r3, r2, r3
 8009252:	43da      	mvns	r2, r3
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	401a      	ands	r2, r3
 8009258:	697b      	ldr	r3, [r7, #20]
 800925a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800925c:	f04f 31ff 	mov.w	r1, #4294967295
 8009260:	697b      	ldr	r3, [r7, #20]
 8009262:	fa01 f303 	lsl.w	r3, r1, r3
 8009266:	43d9      	mvns	r1, r3
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800926c:	4313      	orrs	r3, r2
         );
}
 800926e:	4618      	mov	r0, r3
 8009270:	3724      	adds	r7, #36	; 0x24
 8009272:	46bd      	mov	sp, r7
 8009274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009278:	4770      	bx	lr

0800927a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800927a:	b580      	push	{r7, lr}
 800927c:	b082      	sub	sp, #8
 800927e:	af00      	add	r7, sp, #0
 8009280:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f7ff ff4c 	bl	8009120 <__NVIC_SetPriorityGrouping>
}
 8009288:	bf00      	nop
 800928a:	3708      	adds	r7, #8
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}

08009290 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009290:	b580      	push	{r7, lr}
 8009292:	b086      	sub	sp, #24
 8009294:	af00      	add	r7, sp, #0
 8009296:	4603      	mov	r3, r0
 8009298:	60b9      	str	r1, [r7, #8]
 800929a:	607a      	str	r2, [r7, #4]
 800929c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800929e:	2300      	movs	r3, #0
 80092a0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80092a2:	f7ff ff61 	bl	8009168 <__NVIC_GetPriorityGrouping>
 80092a6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80092a8:	687a      	ldr	r2, [r7, #4]
 80092aa:	68b9      	ldr	r1, [r7, #8]
 80092ac:	6978      	ldr	r0, [r7, #20]
 80092ae:	f7ff ffb1 	bl	8009214 <NVIC_EncodePriority>
 80092b2:	4602      	mov	r2, r0
 80092b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80092b8:	4611      	mov	r1, r2
 80092ba:	4618      	mov	r0, r3
 80092bc:	f7ff ff80 	bl	80091c0 <__NVIC_SetPriority>
}
 80092c0:	bf00      	nop
 80092c2:	3718      	adds	r7, #24
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}

080092c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b082      	sub	sp, #8
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	4603      	mov	r3, r0
 80092d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80092d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80092d6:	4618      	mov	r0, r3
 80092d8:	f7ff ff54 	bl	8009184 <__NVIC_EnableIRQ>
}
 80092dc:	bf00      	nop
 80092de:	3708      	adds	r7, #8
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}

080092e4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b082      	sub	sp, #8
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d101      	bne.n	80092f6 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80092f2:	2301      	movs	r3, #1
 80092f4:	e014      	b.n	8009320 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	791b      	ldrb	r3, [r3, #4]
 80092fa:	b2db      	uxtb	r3, r3
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d105      	bne.n	800930c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2200      	movs	r2, #0
 8009304:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f7fa f992 	bl	8003630 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2202      	movs	r2, #2
 8009310:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2200      	movs	r2, #0
 8009316:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2201      	movs	r2, #1
 800931c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800931e:	2300      	movs	r3, #0
}
 8009320:	4618      	mov	r0, r3
 8009322:	3708      	adds	r7, #8
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}

08009328 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b086      	sub	sp, #24
 800932c:	af00      	add	r7, sp, #0
 800932e:	60f8      	str	r0, [r7, #12]
 8009330:	60b9      	str	r1, [r7, #8]
 8009332:	607a      	str	r2, [r7, #4]
 8009334:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8009336:	2300      	movs	r3, #0
 8009338:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	795b      	ldrb	r3, [r3, #5]
 800933e:	2b01      	cmp	r3, #1
 8009340:	d101      	bne.n	8009346 <HAL_DAC_Start_DMA+0x1e>
 8009342:	2302      	movs	r3, #2
 8009344:	e0ab      	b.n	800949e <HAL_DAC_Start_DMA+0x176>
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	2201      	movs	r2, #1
 800934a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	2202      	movs	r2, #2
 8009350:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d12f      	bne.n	80093b8 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	689b      	ldr	r3, [r3, #8]
 800935c:	4a52      	ldr	r2, [pc, #328]	; (80094a8 <HAL_DAC_Start_DMA+0x180>)
 800935e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	689b      	ldr	r3, [r3, #8]
 8009364:	4a51      	ldr	r2, [pc, #324]	; (80094ac <HAL_DAC_Start_DMA+0x184>)
 8009366:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	689b      	ldr	r3, [r3, #8]
 800936c:	4a50      	ldr	r2, [pc, #320]	; (80094b0 <HAL_DAC_Start_DMA+0x188>)
 800936e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	681a      	ldr	r2, [r3, #0]
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800937e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8009380:	6a3b      	ldr	r3, [r7, #32]
 8009382:	2b08      	cmp	r3, #8
 8009384:	d013      	beq.n	80093ae <HAL_DAC_Start_DMA+0x86>
 8009386:	6a3b      	ldr	r3, [r7, #32]
 8009388:	2b08      	cmp	r3, #8
 800938a:	d845      	bhi.n	8009418 <HAL_DAC_Start_DMA+0xf0>
 800938c:	6a3b      	ldr	r3, [r7, #32]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d003      	beq.n	800939a <HAL_DAC_Start_DMA+0x72>
 8009392:	6a3b      	ldr	r3, [r7, #32]
 8009394:	2b04      	cmp	r3, #4
 8009396:	d005      	beq.n	80093a4 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8009398:	e03e      	b.n	8009418 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	3308      	adds	r3, #8
 80093a0:	613b      	str	r3, [r7, #16]
        break;
 80093a2:	e03c      	b.n	800941e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	330c      	adds	r3, #12
 80093aa:	613b      	str	r3, [r7, #16]
        break;
 80093ac:	e037      	b.n	800941e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	3310      	adds	r3, #16
 80093b4:	613b      	str	r3, [r7, #16]
        break;
 80093b6:	e032      	b.n	800941e <HAL_DAC_Start_DMA+0xf6>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	68db      	ldr	r3, [r3, #12]
 80093bc:	4a3d      	ldr	r2, [pc, #244]	; (80094b4 <HAL_DAC_Start_DMA+0x18c>)
 80093be:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	68db      	ldr	r3, [r3, #12]
 80093c4:	4a3c      	ldr	r2, [pc, #240]	; (80094b8 <HAL_DAC_Start_DMA+0x190>)
 80093c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	68db      	ldr	r3, [r3, #12]
 80093cc:	4a3b      	ldr	r2, [pc, #236]	; (80094bc <HAL_DAC_Start_DMA+0x194>)
 80093ce:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	681a      	ldr	r2, [r3, #0]
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80093de:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80093e0:	6a3b      	ldr	r3, [r7, #32]
 80093e2:	2b08      	cmp	r3, #8
 80093e4:	d013      	beq.n	800940e <HAL_DAC_Start_DMA+0xe6>
 80093e6:	6a3b      	ldr	r3, [r7, #32]
 80093e8:	2b08      	cmp	r3, #8
 80093ea:	d817      	bhi.n	800941c <HAL_DAC_Start_DMA+0xf4>
 80093ec:	6a3b      	ldr	r3, [r7, #32]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d003      	beq.n	80093fa <HAL_DAC_Start_DMA+0xd2>
 80093f2:	6a3b      	ldr	r3, [r7, #32]
 80093f4:	2b04      	cmp	r3, #4
 80093f6:	d005      	beq.n	8009404 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80093f8:	e010      	b.n	800941c <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	3314      	adds	r3, #20
 8009400:	613b      	str	r3, [r7, #16]
        break;
 8009402:	e00c      	b.n	800941e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	3318      	adds	r3, #24
 800940a:	613b      	str	r3, [r7, #16]
        break;
 800940c:	e007      	b.n	800941e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	331c      	adds	r3, #28
 8009414:	613b      	str	r3, [r7, #16]
        break;
 8009416:	e002      	b.n	800941e <HAL_DAC_Start_DMA+0xf6>
        break;
 8009418:	bf00      	nop
 800941a:	e000      	b.n	800941e <HAL_DAC_Start_DMA+0xf6>
        break;
 800941c:	bf00      	nop
    }
  }


  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d111      	bne.n	8009448 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	681a      	ldr	r2, [r3, #0]
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009432:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	6898      	ldr	r0, [r3, #8]
 8009438:	6879      	ldr	r1, [r7, #4]
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	693a      	ldr	r2, [r7, #16]
 800943e:	f000 fdcf 	bl	8009fe0 <HAL_DMA_Start_IT>
 8009442:	4603      	mov	r3, r0
 8009444:	75fb      	strb	r3, [r7, #23]
 8009446:	e010      	b.n	800946a <HAL_DAC_Start_DMA+0x142>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	681a      	ldr	r2, [r3, #0]
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8009456:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	68d8      	ldr	r0, [r3, #12]
 800945c:	6879      	ldr	r1, [r7, #4]
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	693a      	ldr	r2, [r7, #16]
 8009462:	f000 fdbd 	bl	8009fe0 <HAL_DMA_Start_IT>
 8009466:	4603      	mov	r3, r0
 8009468:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	2200      	movs	r2, #0
 800946e:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8009470:	7dfb      	ldrb	r3, [r7, #23]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d10c      	bne.n	8009490 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	6819      	ldr	r1, [r3, #0]
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	f003 0310 	and.w	r3, r3, #16
 8009482:	2201      	movs	r2, #1
 8009484:	409a      	lsls	r2, r3
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	430a      	orrs	r2, r1
 800948c:	601a      	str	r2, [r3, #0]
 800948e:	e005      	b.n	800949c <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	691b      	ldr	r3, [r3, #16]
 8009494:	f043 0204 	orr.w	r2, r3, #4
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800949c:	7dfb      	ldrb	r3, [r7, #23]
}
 800949e:	4618      	mov	r0, r3
 80094a0:	3718      	adds	r7, #24
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}
 80094a6:	bf00      	nop
 80094a8:	08009603 	.word	0x08009603
 80094ac:	08009625 	.word	0x08009625
 80094b0:	08009641 	.word	0x08009641
 80094b4:	080096ab 	.word	0x080096ab
 80094b8:	080096cd 	.word	0x080096cd
 80094bc:	080096e9 	.word	0x080096e9

080094c0 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b082      	sub	sp, #8
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
 80094c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	6819      	ldr	r1, [r3, #0]
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	f003 0310 	and.w	r3, r3, #16
 80094d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80094da:	fa02 f303 	lsl.w	r3, r2, r3
 80094de:	43da      	mvns	r2, r3
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	400a      	ands	r2, r1
 80094e6:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	6819      	ldr	r1, [r3, #0]
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	f003 0310 	and.w	r3, r3, #16
 80094f4:	2201      	movs	r2, #1
 80094f6:	fa02 f303 	lsl.w	r3, r2, r3
 80094fa:	43da      	mvns	r2, r3
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	400a      	ands	r2, r1
 8009502:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d10d      	bne.n	8009526 <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	689b      	ldr	r3, [r3, #8]
 800950e:	4618      	mov	r0, r3
 8009510:	f000 fdc6 	bl	800a0a0 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	681a      	ldr	r2, [r3, #0]
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009522:	601a      	str	r2, [r3, #0]
 8009524:	e00c      	b.n	8009540 <HAL_DAC_Stop_DMA+0x80>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	68db      	ldr	r3, [r3, #12]
 800952a:	4618      	mov	r0, r3
 800952c:	f000 fdb8 	bl	800a0a0 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	681a      	ldr	r2, [r3, #0]
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800953e:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2201      	movs	r2, #1
 8009544:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8009546:	2300      	movs	r3, #0
}
 8009548:	4618      	mov	r0, r3
 800954a:	3708      	adds	r7, #8
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}

08009550 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8009550:	b480      	push	{r7}
 8009552:	b083      	sub	sp, #12
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8009558:	bf00      	nop
 800955a:	370c      	adds	r7, #12
 800955c:	46bd      	mov	sp, r7
 800955e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009562:	4770      	bx	lr

08009564 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8009564:	b480      	push	{r7}
 8009566:	b087      	sub	sp, #28
 8009568:	af00      	add	r7, sp, #0
 800956a:	60f8      	str	r0, [r7, #12]
 800956c:	60b9      	str	r1, [r7, #8]
 800956e:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	795b      	ldrb	r3, [r3, #5]
 8009574:	2b01      	cmp	r3, #1
 8009576:	d101      	bne.n	800957c <HAL_DAC_ConfigChannel+0x18>
 8009578:	2302      	movs	r3, #2
 800957a:	e03c      	b.n	80095f6 <HAL_DAC_ConfigChannel+0x92>
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	2201      	movs	r2, #1
 8009580:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	2202      	movs	r2, #2
 8009586:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f003 0310 	and.w	r3, r3, #16
 8009596:	f640 72fe 	movw	r2, #4094	; 0xffe
 800959a:	fa02 f303 	lsl.w	r3, r2, r3
 800959e:	43db      	mvns	r3, r3
 80095a0:	697a      	ldr	r2, [r7, #20]
 80095a2:	4013      	ands	r3, r2
 80095a4:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	681a      	ldr	r2, [r3, #0]
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	685b      	ldr	r3, [r3, #4]
 80095ae:	4313      	orrs	r3, r2
 80095b0:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f003 0310 	and.w	r3, r3, #16
 80095b8:	693a      	ldr	r2, [r7, #16]
 80095ba:	fa02 f303 	lsl.w	r3, r2, r3
 80095be:	697a      	ldr	r2, [r7, #20]
 80095c0:	4313      	orrs	r3, r2
 80095c2:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	697a      	ldr	r2, [r7, #20]
 80095ca:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	6819      	ldr	r1, [r3, #0]
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f003 0310 	and.w	r3, r3, #16
 80095d8:	22c0      	movs	r2, #192	; 0xc0
 80095da:	fa02 f303 	lsl.w	r3, r2, r3
 80095de:	43da      	mvns	r2, r3
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	400a      	ands	r2, r1
 80095e6:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	2201      	movs	r2, #1
 80095ec:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	2200      	movs	r2, #0
 80095f2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80095f4:	2300      	movs	r3, #0
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	371c      	adds	r7, #28
 80095fa:	46bd      	mov	sp, r7
 80095fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009600:	4770      	bx	lr

08009602 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8009602:	b580      	push	{r7, lr}
 8009604:	b084      	sub	sp, #16
 8009606:	af00      	add	r7, sp, #0
 8009608:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800960e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8009610:	68f8      	ldr	r0, [r7, #12]
 8009612:	f7f9 f8c9 	bl	80027a8 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	2201      	movs	r2, #1
 800961a:	711a      	strb	r2, [r3, #4]
}
 800961c:	bf00      	nop
 800961e:	3710      	adds	r7, #16
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}

08009624 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b084      	sub	sp, #16
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009630:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8009632:	68f8      	ldr	r0, [r7, #12]
 8009634:	f7f9 f87e 	bl	8002734 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8009638:	bf00      	nop
 800963a:	3710      	adds	r7, #16
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}

08009640 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b084      	sub	sp, #16
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800964c:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	691b      	ldr	r3, [r3, #16]
 8009652:	f043 0204 	orr.w	r2, r3, #4
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800965a:	68f8      	ldr	r0, [r7, #12]
 800965c:	f7ff ff78 	bl	8009550 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	2201      	movs	r2, #1
 8009664:	711a      	strb	r2, [r3, #4]
}
 8009666:	bf00      	nop
 8009668:	3710      	adds	r7, #16
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}

0800966e <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800966e:	b480      	push	{r7}
 8009670:	b083      	sub	sp, #12
 8009672:	af00      	add	r7, sp, #0
 8009674:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8009676:	bf00      	nop
 8009678:	370c      	adds	r7, #12
 800967a:	46bd      	mov	sp, r7
 800967c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009680:	4770      	bx	lr

08009682 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8009682:	b480      	push	{r7}
 8009684:	b083      	sub	sp, #12
 8009686:	af00      	add	r7, sp, #0
 8009688:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800968a:	bf00      	nop
 800968c:	370c      	adds	r7, #12
 800968e:	46bd      	mov	sp, r7
 8009690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009694:	4770      	bx	lr

08009696 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8009696:	b480      	push	{r7}
 8009698:	b083      	sub	sp, #12
 800969a:	af00      	add	r7, sp, #0
 800969c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800969e:	bf00      	nop
 80096a0:	370c      	adds	r7, #12
 80096a2:	46bd      	mov	sp, r7
 80096a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a8:	4770      	bx	lr

080096aa <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80096aa:	b580      	push	{r7, lr}
 80096ac:	b084      	sub	sp, #16
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096b6:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80096b8:	68f8      	ldr	r0, [r7, #12]
 80096ba:	f7ff ffd8 	bl	800966e <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	2201      	movs	r2, #1
 80096c2:	711a      	strb	r2, [r3, #4]
}
 80096c4:	bf00      	nop
 80096c6:	3710      	adds	r7, #16
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}

080096cc <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b084      	sub	sp, #16
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096d8:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80096da:	68f8      	ldr	r0, [r7, #12]
 80096dc:	f7ff ffd1 	bl	8009682 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80096e0:	bf00      	nop
 80096e2:	3710      	adds	r7, #16
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}

080096e8 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b084      	sub	sp, #16
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096f4:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	691b      	ldr	r3, [r3, #16]
 80096fa:	f043 0204 	orr.w	r2, r3, #4
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8009702:	68f8      	ldr	r0, [r7, #12]
 8009704:	f7ff ffc7 	bl	8009696 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	2201      	movs	r2, #1
 800970c:	711a      	strb	r2, [r3, #4]
}
 800970e:	bf00      	nop
 8009710:	3710      	adds	r7, #16
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}
	...

08009718 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b082      	sub	sp, #8
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d101      	bne.n	800972a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8009726:	2301      	movs	r3, #1
 8009728:	e0ac      	b.n	8009884 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));
  
  /* Check that channel has not been already initialized */
  if(a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	4618      	mov	r0, r3
 8009730:	f000 fab8 	bl	8009ca4 <DFSDM_GetChannelFromInstance>
 8009734:	4603      	mov	r3, r0
 8009736:	4a55      	ldr	r2, [pc, #340]	; (800988c <HAL_DFSDM_ChannelInit+0x174>)
 8009738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d001      	beq.n	8009744 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8009740:	2301      	movs	r3, #1
 8009742:	e09f      	b.n	8009884 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	f7fa f899 	bl	800387c <HAL_DFSDM_ChannelMspInit>
#endif
  
  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800974a:	4b51      	ldr	r3, [pc, #324]	; (8009890 <HAL_DFSDM_ChannelInit+0x178>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	3301      	adds	r3, #1
 8009750:	4a4f      	ldr	r2, [pc, #316]	; (8009890 <HAL_DFSDM_ChannelInit+0x178>)
 8009752:	6013      	str	r3, [r2, #0]
  
  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(v_dfsdm1ChannelCounter == 1)
 8009754:	4b4e      	ldr	r3, [pc, #312]	; (8009890 <HAL_DFSDM_ChannelInit+0x178>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	2b01      	cmp	r3, #1
 800975a:	d125      	bne.n	80097a8 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800975c:	4b4d      	ldr	r3, [pc, #308]	; (8009894 <HAL_DFSDM_ChannelInit+0x17c>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	4a4c      	ldr	r2, [pc, #304]	; (8009894 <HAL_DFSDM_ChannelInit+0x17c>)
 8009762:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009766:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8009768:	4b4a      	ldr	r3, [pc, #296]	; (8009894 <HAL_DFSDM_ChannelInit+0x17c>)
 800976a:	681a      	ldr	r2, [r3, #0]
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	689b      	ldr	r3, [r3, #8]
 8009770:	4948      	ldr	r1, [pc, #288]	; (8009894 <HAL_DFSDM_ChannelInit+0x17c>)
 8009772:	4313      	orrs	r3, r2
 8009774:	600b      	str	r3, [r1, #0]
    
    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8009776:	4b47      	ldr	r3, [pc, #284]	; (8009894 <HAL_DFSDM_ChannelInit+0x17c>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	4a46      	ldr	r2, [pc, #280]	; (8009894 <HAL_DFSDM_ChannelInit+0x17c>)
 800977c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8009780:	6013      	str	r3, [r2, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	791b      	ldrb	r3, [r3, #4]
 8009786:	2b01      	cmp	r3, #1
 8009788:	d108      	bne.n	800979c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1) << 
 800978a:	4b42      	ldr	r3, [pc, #264]	; (8009894 <HAL_DFSDM_ChannelInit+0x17c>)
 800978c:	681a      	ldr	r2, [r3, #0]
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	68db      	ldr	r3, [r3, #12]
 8009792:	3b01      	subs	r3, #1
 8009794:	041b      	lsls	r3, r3, #16
 8009796:	493f      	ldr	r1, [pc, #252]	; (8009894 <HAL_DFSDM_ChannelInit+0x17c>)
 8009798:	4313      	orrs	r3, r2
 800979a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }
    
    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800979c:	4b3d      	ldr	r3, [pc, #244]	; (8009894 <HAL_DFSDM_ChannelInit+0x17c>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	4a3c      	ldr	r2, [pc, #240]	; (8009894 <HAL_DFSDM_ChannelInit+0x17c>)
 80097a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80097a6:	6013      	str	r3, [r2, #0]
  }
  
  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	681a      	ldr	r2, [r3, #0]
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80097b6:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	6819      	ldr	r1, [r3, #0]
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 80097c6:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 80097cc:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	430a      	orrs	r2, r1
 80097d4:	601a      	str	r2, [r3, #0]
  
  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	681a      	ldr	r2, [r3, #0]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f022 020f 	bic.w	r2, r2, #15
 80097e4:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	6819      	ldr	r1, [r3, #0]
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 80097f4:	431a      	orrs	r2, r3
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	430a      	orrs	r2, r1
 80097fc:	601a      	str	r2, [r3, #0]
  
  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	689a      	ldr	r2, [r3, #8]
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 800980c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	6899      	ldr	r1, [r3, #8]
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800981c:	3b01      	subs	r3, #1
 800981e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8009820:	431a      	orrs	r2, r3
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	430a      	orrs	r2, r1
 8009828:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	685a      	ldr	r2, [r3, #4]
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f002 0207 	and.w	r2, r2, #7
 8009838:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	6859      	ldr	r1, [r3, #4]
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009844:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800984a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 800984c:	431a      	orrs	r2, r3
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	430a      	orrs	r2, r1
 8009854:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	681a      	ldr	r2, [r3, #0]
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009864:	601a      	str	r2, [r3, #0]
  
  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2201      	movs	r2, #1
 800986a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	4618      	mov	r0, r3
 8009874:	f000 fa16 	bl	8009ca4 <DFSDM_GetChannelFromInstance>
 8009878:	4602      	mov	r2, r0
 800987a:	4904      	ldr	r1, [pc, #16]	; (800988c <HAL_DFSDM_ChannelInit+0x174>)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  
  return HAL_OK;
 8009882:	2300      	movs	r3, #0
}
 8009884:	4618      	mov	r0, r3
 8009886:	3708      	adds	r7, #8
 8009888:	46bd      	mov	sp, r7
 800988a:	bd80      	pop	{r7, pc}
 800988c:	200003a0 	.word	0x200003a0
 8009890:	2000039c 	.word	0x2000039c
 8009894:	40017400 	.word	0x40017400

08009898 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b082      	sub	sp, #8
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_filter == NULL)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d101      	bne.n	80098aa <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 80098a6:	2301      	movs	r3, #1
 80098a8:	e0c6      	b.n	8009a38 <HAL_DFSDM_FilterInit+0x1a0>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) && 
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	4a64      	ldr	r2, [pc, #400]	; (8009a40 <HAL_DFSDM_FilterInit+0x1a8>)
 80098b0:	4293      	cmp	r3, r2
 80098b2:	d109      	bne.n	80098c8 <HAL_DFSDM_FilterInit+0x30>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	685b      	ldr	r3, [r3, #4]
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) && 
 80098b8:	2b01      	cmp	r3, #1
 80098ba:	d003      	beq.n	80098c4 <HAL_DFSDM_FilterInit+0x2c>
     (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	68db      	ldr	r3, [r3, #12]
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 80098c0:	2b01      	cmp	r3, #1
 80098c2:	d101      	bne.n	80098c8 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 80098c4:	2301      	movs	r3, #1
 80098c6:	e0b7      	b.n	8009a38 <HAL_DFSDM_FilterInit+0x1a0>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2200      	movs	r2, #0
 80098cc:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2201      	movs	r2, #1
 80098d2:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2201      	movs	r2, #1
 80098d8:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2200      	movs	r2, #0
 80098de:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f7f9 ff19 	bl	8003718 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	681a      	ldr	r2, [r3, #0]
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 80098f4:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	7a1b      	ldrb	r3, [r3, #8]
 80098fa:	2b01      	cmp	r3, #1
 80098fc:	d108      	bne.n	8009910 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	681a      	ldr	r2, [r3, #0]
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800990c:	601a      	str	r2, [r3, #0]
 800990e:	e007      	b.n	8009920 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	681a      	ldr	r2, [r3, #0]
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800991e:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	7a5b      	ldrb	r3, [r3, #9]
 8009924:	2b01      	cmp	r3, #1
 8009926:	d108      	bne.n	800993a <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	681a      	ldr	r2, [r3, #0]
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8009936:	601a      	str	r2, [r3, #0]
 8009938:	e007      	b.n	800994a <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	681a      	ldr	r2, [r3, #0]
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8009948:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	6819      	ldr	r1, [r3, #0]
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681a      	ldr	r2, [r3, #0]
 8009954:	4b3b      	ldr	r3, [pc, #236]	; (8009a44 <HAL_DFSDM_FilterInit+0x1ac>)
 8009956:	400b      	ands	r3, r1
 8009958:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	68db      	ldr	r3, [r3, #12]
 800995e:	2b02      	cmp	r3, #2
 8009960:	d108      	bne.n	8009974 <HAL_DFSDM_FilterInit+0xdc>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	6819      	ldr	r1, [r3, #0]
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	695a      	ldr	r2, [r3, #20]
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	430a      	orrs	r2, r1
 8009972:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	7c1b      	ldrb	r3, [r3, #16]
 8009978:	2b01      	cmp	r3, #1
 800997a:	d108      	bne.n	800998e <HAL_DFSDM_FilterInit+0xf6>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	681a      	ldr	r2, [r3, #0]
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f042 0210 	orr.w	r2, r2, #16
 800998a:	601a      	str	r2, [r3, #0]
 800998c:	e007      	b.n	800999e <HAL_DFSDM_FilterInit+0x106>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	681a      	ldr	r2, [r3, #0]
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f022 0210 	bic.w	r2, r2, #16
 800999c:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	7c5b      	ldrb	r3, [r3, #17]
 80099a2:	2b01      	cmp	r3, #1
 80099a4:	d108      	bne.n	80099b8 <HAL_DFSDM_FilterInit+0x120>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	681a      	ldr	r2, [r3, #0]
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f042 0220 	orr.w	r2, r2, #32
 80099b4:	601a      	str	r2, [r3, #0]
 80099b6:	e007      	b.n	80099c8 <HAL_DFSDM_FilterInit+0x130>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	681a      	ldr	r2, [r3, #0]
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	f022 0220 	bic.w	r2, r2, #32
 80099c6:	601a      	str	r2, [r3, #0]
  }
  
  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	6959      	ldr	r1, [r3, #20]
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681a      	ldr	r2, [r3, #0]
 80099d2:	4b1d      	ldr	r3, [pc, #116]	; (8009a48 <HAL_DFSDM_FilterInit+0x1b0>)
 80099d4:	400b      	ands	r3, r1
 80099d6:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	6959      	ldr	r1, [r3, #20]
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	69da      	ldr	r2, [r3, #28]
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6a1b      	ldr	r3, [r3, #32]
 80099e6:	3b01      	subs	r3, #1
 80099e8:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80099ea:	431a      	orrs	r2, r3
                                  (hdfsdm_filter->Init.FilterParam.IntOversampling - 1));
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099f0:	3b01      	subs	r3, #1
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 80099f2:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	430a      	orrs	r2, r1
 80099fa:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	685a      	ldr	r2, [r3, #4]
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	68da      	ldr	r2, [r3, #12]
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	699a      	ldr	r2, [r3, #24]
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	7c1a      	ldrb	r2, [r3, #16]
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	681a      	ldr	r2, [r3, #0]
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f042 0201 	orr.w	r2, r2, #1
 8009a2c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2201      	movs	r2, #1
 8009a32:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  
  return HAL_OK;
 8009a36:	2300      	movs	r3, #0
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	3708      	adds	r7, #8
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}
 8009a40:	40017500 	.word	0x40017500
 8009a44:	ffff80f7 	.word	0xffff80f7
 8009a48:	1c00ff00 	.word	0x1c00ff00

08009a4c <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8009a4c:	b480      	push	{r7}
 8009a4e:	b087      	sub	sp, #28
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	60f8      	str	r0, [r7, #12]
 8009a54:	60b9      	str	r1, [r7, #8]
 8009a56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009a58:	2300      	movs	r3, #0
 8009a5a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));
  
  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) && 
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d02c      	beq.n	8009ac0 <HAL_DFSDM_FilterConfigRegChannel+0x74>
     (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) && 
 8009a6c:	2bff      	cmp	r3, #255	; 0xff
 8009a6e:	d027      	beq.n	8009ac0 <HAL_DFSDM_FilterConfigRegChannel+0x74>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	6819      	ldr	r1, [r3, #0]
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681a      	ldr	r2, [r3, #0]
 8009a7a:	4b16      	ldr	r3, [pc, #88]	; (8009ad4 <HAL_DFSDM_FilterConfigRegChannel+0x88>)
 8009a7c:	400b      	ands	r3, r1
 8009a7e:	6013      	str	r3, [r2, #0]
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2b01      	cmp	r3, #1
 8009a84:	d10d      	bne.n	8009aa2 <HAL_DFSDM_FilterConfigRegChannel+0x56>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	681a      	ldr	r2, [r3, #0]
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	021b      	lsls	r3, r3, #8
 8009a90:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8009a94:	431a      	orrs	r2, r3
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8009a9e:	601a      	str	r2, [r3, #0]
 8009aa0:	e00a      	b.n	8009ab8 <HAL_DFSDM_FilterConfigRegChannel+0x6c>
                                                     DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	6819      	ldr	r1, [r3, #0]
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	021b      	lsls	r3, r3, #8
 8009aac:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	430a      	orrs	r2, r1
 8009ab6:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	687a      	ldr	r2, [r7, #4]
 8009abc:	631a      	str	r2, [r3, #48]	; 0x30
 8009abe:	e001      	b.n	8009ac4 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  }  
  else
  {
    status = HAL_ERROR;
 8009ac0:	2301      	movs	r3, #1
 8009ac2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8009ac4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	371c      	adds	r7, #28
 8009aca:	46bd      	mov	sp, r7
 8009acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad0:	4770      	bx	lr
 8009ad2:	bf00      	nop
 8009ad4:	f8fbffff 	.word	0xf8fbffff

08009ad8 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b086      	sub	sp, #24
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	60f8      	str	r0, [r7, #12]
 8009ae0:	60b9      	str	r1, [r7, #8]
 8009ae2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if((pData == NULL) || (Length == 0))
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d002      	beq.n	8009af4 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d102      	bne.n	8009afa <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 8009af4:	2301      	movs	r3, #1
 8009af6:	75fb      	strb	r3, [r7, #23]
 8009af8:	e066      	b.n	8009bc8 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check that DMA is enabled for regular conversion */
  else if((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009b04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009b08:	d002      	beq.n	8009b10 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	75fb      	strb	r3, [r7, #23]
 8009b0e:	e05b      	b.n	8009bc8 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check parameters compatibility */
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d10e      	bne.n	8009b36 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d10a      	bne.n	8009b36 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b24:	69db      	ldr	r3, [r3, #28]
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d105      	bne.n	8009b36 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2b01      	cmp	r3, #1
 8009b2e:	d002      	beq.n	8009b36 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (Length != 1))
  {
    status = HAL_ERROR;
 8009b30:	2301      	movs	r3, #1
 8009b32:	75fb      	strb	r3, [r7, #23]
 8009b34:	e048      	b.n	8009bc8 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d10c      	bne.n	8009b58 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d108      	bne.n	8009b58 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b4a:	69db      	ldr	r3, [r3, #28]
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8009b4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b50:	d102      	bne.n	8009b58 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
  {
    status = HAL_ERROR;
 8009b52:	2301      	movs	r3, #1
 8009b54:	75fb      	strb	r3, [r7, #23]
 8009b56:	e037      	b.n	8009bc8 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check DFSDM filter state */
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8009b5e:	2b01      	cmp	r3, #1
 8009b60:	d004      	beq.n	8009b6c <HAL_DFSDM_FilterRegularStart_DMA+0x94>
          (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8009b68:	2b03      	cmp	r3, #3
 8009b6a:	d12b      	bne.n	8009bc4 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b70:	4a18      	ldr	r2, [pc, #96]	; (8009bd4 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8009b72:	63da      	str	r2, [r3, #60]	; 0x3c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b78:	4a17      	ldr	r2, [pc, #92]	; (8009bd8 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 8009b7a:	64da      	str	r2, [r3, #76]	; 0x4c
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b80:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8009b82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b86:	d101      	bne.n	8009b8c <HAL_DFSDM_FilterRegularStart_DMA+0xb4>
 8009b88:	4a14      	ldr	r2, [pc, #80]	; (8009bdc <HAL_DFSDM_FilterRegularStart_DMA+0x104>)
 8009b8a:	e000      	b.n	8009b8e <HAL_DFSDM_FilterRegularStart_DMA+0xb6>
 8009b8c:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b92:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Start DMA in interrupt mode */
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	331c      	adds	r3, #28
 8009b9e:	4619      	mov	r1, r3
 8009ba0:	68ba      	ldr	r2, [r7, #8]
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f000 fa1c 	bl	8009fe0 <HAL_DMA_Start_IT>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d006      	beq.n	8009bbc <HAL_DFSDM_FilterRegularStart_DMA+0xe4>
                        (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	22ff      	movs	r2, #255	; 0xff
 8009bb2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	75fb      	strb	r3, [r7, #23]
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8009bba:	e005      	b.n	8009bc8 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8009bbc:	68f8      	ldr	r0, [r7, #12]
 8009bbe:	f000 f8bd 	bl	8009d3c <DFSDM_RegConvStart>
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8009bc2:	e001      	b.n	8009bc8 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
  }
  else
  {
    status = HAL_ERROR;
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8009bc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3718      	adds	r7, #24
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}
 8009bd2:	bf00      	nop
 8009bd4:	08009c65 	.word	0x08009c65
 8009bd8:	08009c81 	.word	0x08009c81
 8009bdc:	08009c49 	.word	0x08009c49

08009be0 <HAL_DFSDM_FilterRegularStop_DMA>:
  * @note   This function should be called only if regular conversion is ongoing.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStop_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b084      	sub	sp, #16
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009be8:	2300      	movs	r3, #0
 8009bea:	73fb      	strb	r3, [r7, #15]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8009bf2:	2b02      	cmp	r3, #2
 8009bf4:	d007      	beq.n	8009c06 <HAL_DFSDM_FilterRegularStop_DMA+0x26>
     (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG_INJ))
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 8009bfc:	2b04      	cmp	r3, #4
 8009bfe:	d002      	beq.n	8009c06 <HAL_DFSDM_FilterRegularStop_DMA+0x26>
  {
    /* Return error status */
    status = HAL_ERROR;
 8009c00:	2301      	movs	r3, #1
 8009c02:	73fb      	strb	r3, [r7, #15]
 8009c04:	e011      	b.n	8009c2a <HAL_DFSDM_FilterRegularStop_DMA+0x4a>
  }
  else
  {
    /* Stop current DMA transfer */
    if(HAL_DMA_Abort(hdfsdm_filter->hdmaReg) != HAL_OK)
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f000 fa48 	bl	800a0a0 <HAL_DMA_Abort>
 8009c10:	4603      	mov	r3, r0
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d006      	beq.n	8009c24 <HAL_DFSDM_FilterRegularStop_DMA+0x44>
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	22ff      	movs	r2, #255	; 0xff
 8009c1a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 8009c1e:	2301      	movs	r3, #1
 8009c20:	73fb      	strb	r3, [r7, #15]
 8009c22:	e002      	b.n	8009c2a <HAL_DFSDM_FilterRegularStop_DMA+0x4a>
    }
    else
    {
      /* Stop regular conversion */
      DFSDM_RegConvStop(hdfsdm_filter);
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f000 f8df 	bl	8009de8 <DFSDM_RegConvStop>
    }
  }
  /* Return function status */
  return status;
 8009c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3710      	adds	r7, #16
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}

08009c34 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback. 
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8009c34:	b480      	push	{r7}
 8009c36:	b083      	sub	sp, #12
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);
  
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 8009c3c:	bf00      	nop
 8009c3e:	370c      	adds	r7, #12
 8009c40:	46bd      	mov	sp, r7
 8009c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c46:	4770      	bx	lr

08009c48 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion. 
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b084      	sub	sp, #16
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c54:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 8009c56:	68f8      	ldr	r0, [r7, #12]
 8009c58:	f7f8 fde2 	bl	8002820 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 8009c5c:	bf00      	nop
 8009c5e:	3710      	adds	r7, #16
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}

08009c64 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion. 
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)   
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b084      	sub	sp, #16
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c70:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8009c72:	68f8      	ldr	r0, [r7, #12]
 8009c74:	f7f8 fe04 	bl	8002880 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8009c78:	bf00      	nop
 8009c7a:	3710      	adds	r7, #16
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}

08009c80 <DFSDM_DMAError>:
  * @brief  DMA error callback. 
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)   
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b084      	sub	sp, #16
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c8c:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	2203      	movs	r2, #3
 8009c92:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8009c94:	68f8      	ldr	r0, [r7, #12]
 8009c96:	f7ff ffcd 	bl	8009c34 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 8009c9a:	bf00      	nop
 8009c9c:	3710      	adds	r7, #16
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd80      	pop	{r7, pc}
	...

08009ca4 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(DFSDM_Channel_TypeDef* Instance)
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	b085      	sub	sp, #20
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
  uint32_t channel;
  
  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	4a1c      	ldr	r2, [pc, #112]	; (8009d20 <DFSDM_GetChannelFromInstance+0x7c>)
 8009cb0:	4293      	cmp	r3, r2
 8009cb2:	d102      	bne.n	8009cba <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	60fb      	str	r3, [r7, #12]
 8009cb8:	e02b      	b.n	8009d12 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel1)
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	4a19      	ldr	r2, [pc, #100]	; (8009d24 <DFSDM_GetChannelFromInstance+0x80>)
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	d102      	bne.n	8009cc8 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	60fb      	str	r3, [r7, #12]
 8009cc6:	e024      	b.n	8009d12 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel2)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	4a17      	ldr	r2, [pc, #92]	; (8009d28 <DFSDM_GetChannelFromInstance+0x84>)
 8009ccc:	4293      	cmp	r3, r2
 8009cce:	d102      	bne.n	8009cd6 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8009cd0:	2302      	movs	r3, #2
 8009cd2:	60fb      	str	r3, [r7, #12]
 8009cd4:	e01d      	b.n	8009d12 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel3)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	4a14      	ldr	r2, [pc, #80]	; (8009d2c <DFSDM_GetChannelFromInstance+0x88>)
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d102      	bne.n	8009ce4 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 8009cde:	2303      	movs	r3, #3
 8009ce0:	60fb      	str	r3, [r7, #12]
 8009ce2:	e016      	b.n	8009d12 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel4)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	4a12      	ldr	r2, [pc, #72]	; (8009d30 <DFSDM_GetChannelFromInstance+0x8c>)
 8009ce8:	4293      	cmp	r3, r2
 8009cea:	d102      	bne.n	8009cf2 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 8009cec:	2304      	movs	r3, #4
 8009cee:	60fb      	str	r3, [r7, #12]
 8009cf0:	e00f      	b.n	8009d12 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel5)
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	4a0f      	ldr	r2, [pc, #60]	; (8009d34 <DFSDM_GetChannelFromInstance+0x90>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d102      	bne.n	8009d00 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 8009cfa:	2305      	movs	r3, #5
 8009cfc:	60fb      	str	r3, [r7, #12]
 8009cfe:	e008      	b.n	8009d12 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel6)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	4a0d      	ldr	r2, [pc, #52]	; (8009d38 <DFSDM_GetChannelFromInstance+0x94>)
 8009d04:	4293      	cmp	r3, r2
 8009d06:	d102      	bne.n	8009d0e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 8009d08:	2306      	movs	r3, #6
 8009d0a:	60fb      	str	r3, [r7, #12]
 8009d0c:	e001      	b.n	8009d12 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else /* DFSDM1_Channel7 */
  {
    channel = 7;
 8009d0e:	2307      	movs	r3, #7
 8009d10:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8009d12:	68fb      	ldr	r3, [r7, #12]
}
 8009d14:	4618      	mov	r0, r3
 8009d16:	3714      	adds	r7, #20
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1e:	4770      	bx	lr
 8009d20:	40017400 	.word	0x40017400
 8009d24:	40017420 	.word	0x40017420
 8009d28:	40017440 	.word	0x40017440
 8009d2c:	40017460 	.word	0x40017460
 8009d30:	40017480 	.word	0x40017480
 8009d34:	400174a0 	.word	0x400174a0
 8009d38:	400174c0 	.word	0x400174c0

08009d3c <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b083      	sub	sp, #12
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if(hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d108      	bne.n	8009d5e <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	681a      	ldr	r2, [r3, #0]
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009d5a:	601a      	str	r2, [r3, #0]
 8009d5c:	e033      	b.n	8009dc6 <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	681a      	ldr	r2, [r3, #0]
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f022 0201 	bic.w	r2, r2, #1
 8009d6c:	601a      	str	r2, [r3, #0]
    
    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	681a      	ldr	r2, [r3, #0]
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8009d7c:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	681a      	ldr	r2, [r3, #0]
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f042 0201 	orr.w	r2, r2, #1
 8009d8c:	601a      	str	r2, [r3, #0]
    
    /* If injected conversion was in progress, restart it */
    if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8009d94:	2b03      	cmp	r3, #3
 8009d96:	d116      	bne.n	8009dc6 <DFSDM_RegConvStart+0x8a>
    {
      if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d107      	bne.n	8009db0 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	681a      	ldr	r2, [r3, #0]
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f042 0202 	orr.w	r2, r2, #2
 8009dae:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                         hdfsdm_filter->InjectedChannelsNbr : 1;
 8009db6:	2b01      	cmp	r3, #1
 8009db8:	d102      	bne.n	8009dc0 <DFSDM_RegConvStart+0x84>
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dbe:	e000      	b.n	8009dc2 <DFSDM_RegConvStart+0x86>
 8009dc0:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8009dc2:	687a      	ldr	r2, [r7, #4]
 8009dc4:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                          HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8009dcc:	2b01      	cmp	r3, #1
 8009dce:	d101      	bne.n	8009dd4 <DFSDM_RegConvStart+0x98>
 8009dd0:	2202      	movs	r2, #2
 8009dd2:	e000      	b.n	8009dd6 <DFSDM_RegConvStart+0x9a>
 8009dd4:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8009ddc:	bf00      	nop
 8009dde:	370c      	adds	r7, #12
 8009de0:	46bd      	mov	sp, r7
 8009de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de6:	4770      	bx	lr

08009de8 <DFSDM_RegConvStop>:
  * @brief  This function allows to really stop regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStop(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8009de8:	b480      	push	{r7}
 8009dea:	b083      	sub	sp, #12
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
  /* Disable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	681a      	ldr	r2, [r3, #0]
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	f022 0201 	bic.w	r2, r2, #1
 8009dfe:	601a      	str	r2, [r3, #0]

  /* If regular trigger was synchronous, reset RSYNC bit in DFSDM_FLTCR1 register */
  if(hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SYNC_TRIGGER)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e04:	2b01      	cmp	r3, #1
 8009e06:	d107      	bne.n	8009e18 <DFSDM_RegConvStop+0x30>
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	681a      	ldr	r2, [r3, #0]
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8009e16:	601a      	str	r2, [r3, #0]
  }

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	681a      	ldr	r2, [r3, #0]
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	f042 0201 	orr.w	r2, r2, #1
 8009e26:	601a      	str	r2, [r3, #0]
  
  /* If injected conversion was in progress, restart it */
  if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG_INJ)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8009e2e:	2b04      	cmp	r3, #4
 8009e30:	d116      	bne.n	8009e60 <DFSDM_RegConvStop+0x78>
  {
    if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d107      	bne.n	8009e4a <DFSDM_RegConvStop+0x62>
    {
      hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	681a      	ldr	r2, [r3, #0]
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f042 0202 	orr.w	r2, r2, #2
 8009e48:	601a      	str	r2, [r3, #0]
    }
    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                       hdfsdm_filter->InjectedChannelsNbr : 1;
 8009e50:	2b01      	cmp	r3, #1
 8009e52:	d102      	bne.n	8009e5a <DFSDM_RegConvStop+0x72>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e58:	e000      	b.n	8009e5c <DFSDM_RegConvStop+0x74>
 8009e5a:	2301      	movs	r3, #1
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8009e5c:	687a      	ldr	r2, [r7, #4]
 8009e5e:	6493      	str	r3, [r2, #72]	; 0x48
  }
  
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                          HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 8009e66:	2b02      	cmp	r3, #2
 8009e68:	d101      	bne.n	8009e6e <DFSDM_RegConvStop+0x86>
 8009e6a:	2201      	movs	r2, #1
 8009e6c:	e000      	b.n	8009e70 <DFSDM_RegConvStop+0x88>
 8009e6e:	2203      	movs	r2, #3
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8009e76:	bf00      	nop
 8009e78:	370c      	adds	r7, #12
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e80:	4770      	bx	lr
	...

08009e84 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b086      	sub	sp, #24
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8009e90:	f7ff f916 	bl	80090c0 <HAL_GetTick>
 8009e94:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d101      	bne.n	8009ea0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	e099      	b.n	8009fd4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2202      	movs	r2, #2
 8009ea4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2200      	movs	r2, #0
 8009eac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	681a      	ldr	r2, [r3, #0]
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f022 0201 	bic.w	r2, r2, #1
 8009ebe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009ec0:	e00f      	b.n	8009ee2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009ec2:	f7ff f8fd 	bl	80090c0 <HAL_GetTick>
 8009ec6:	4602      	mov	r2, r0
 8009ec8:	693b      	ldr	r3, [r7, #16]
 8009eca:	1ad3      	subs	r3, r2, r3
 8009ecc:	2b05      	cmp	r3, #5
 8009ece:	d908      	bls.n	8009ee2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2220      	movs	r2, #32
 8009ed4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2203      	movs	r2, #3
 8009eda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8009ede:	2303      	movs	r3, #3
 8009ee0:	e078      	b.n	8009fd4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	f003 0301 	and.w	r3, r3, #1
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d1e8      	bne.n	8009ec2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8009ef8:	697a      	ldr	r2, [r7, #20]
 8009efa:	4b38      	ldr	r3, [pc, #224]	; (8009fdc <HAL_DMA_Init+0x158>)
 8009efc:	4013      	ands	r3, r2
 8009efe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	685a      	ldr	r2, [r3, #4]
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	689b      	ldr	r3, [r3, #8]
 8009f08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009f0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	691b      	ldr	r3, [r3, #16]
 8009f14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009f1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	699b      	ldr	r3, [r3, #24]
 8009f20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009f26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6a1b      	ldr	r3, [r3, #32]
 8009f2c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009f2e:	697a      	ldr	r2, [r7, #20]
 8009f30:	4313      	orrs	r3, r2
 8009f32:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f38:	2b04      	cmp	r3, #4
 8009f3a:	d107      	bne.n	8009f4c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f44:	4313      	orrs	r3, r2
 8009f46:	697a      	ldr	r2, [r7, #20]
 8009f48:	4313      	orrs	r3, r2
 8009f4a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	697a      	ldr	r2, [r7, #20]
 8009f52:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	695b      	ldr	r3, [r3, #20]
 8009f5a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8009f5c:	697b      	ldr	r3, [r7, #20]
 8009f5e:	f023 0307 	bic.w	r3, r3, #7
 8009f62:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f68:	697a      	ldr	r2, [r7, #20]
 8009f6a:	4313      	orrs	r3, r2
 8009f6c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f72:	2b04      	cmp	r3, #4
 8009f74:	d117      	bne.n	8009fa6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f7a:	697a      	ldr	r2, [r7, #20]
 8009f7c:	4313      	orrs	r3, r2
 8009f7e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d00e      	beq.n	8009fa6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f000 fae7 	bl	800a55c <DMA_CheckFifoParam>
 8009f8e:	4603      	mov	r3, r0
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d008      	beq.n	8009fa6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2240      	movs	r2, #64	; 0x40
 8009f98:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2201      	movs	r2, #1
 8009f9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8009fa2:	2301      	movs	r3, #1
 8009fa4:	e016      	b.n	8009fd4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	697a      	ldr	r2, [r7, #20]
 8009fac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f000 fa9e 	bl	800a4f0 <DMA_CalcBaseAndBitshift>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fbc:	223f      	movs	r2, #63	; 0x3f
 8009fbe:	409a      	lsls	r2, r3
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2201      	movs	r2, #1
 8009fce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8009fd2:	2300      	movs	r3, #0
}
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	3718      	adds	r7, #24
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bd80      	pop	{r7, pc}
 8009fdc:	e010803f 	.word	0xe010803f

08009fe0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b086      	sub	sp, #24
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	60f8      	str	r0, [r7, #12]
 8009fe8:	60b9      	str	r1, [r7, #8]
 8009fea:	607a      	str	r2, [r7, #4]
 8009fec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ff6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009ffe:	2b01      	cmp	r3, #1
 800a000:	d101      	bne.n	800a006 <HAL_DMA_Start_IT+0x26>
 800a002:	2302      	movs	r3, #2
 800a004:	e048      	b.n	800a098 <HAL_DMA_Start_IT+0xb8>
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	2201      	movs	r2, #1
 800a00a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a014:	b2db      	uxtb	r3, r3
 800a016:	2b01      	cmp	r3, #1
 800a018:	d137      	bne.n	800a08a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	2202      	movs	r2, #2
 800a01e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	2200      	movs	r2, #0
 800a026:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	687a      	ldr	r2, [r7, #4]
 800a02c:	68b9      	ldr	r1, [r7, #8]
 800a02e:	68f8      	ldr	r0, [r7, #12]
 800a030:	f000 fa30 	bl	800a494 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a038:	223f      	movs	r2, #63	; 0x3f
 800a03a:	409a      	lsls	r2, r3
 800a03c:	693b      	ldr	r3, [r7, #16]
 800a03e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	681a      	ldr	r2, [r3, #0]
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	f042 0216 	orr.w	r2, r2, #22
 800a04e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	695a      	ldr	r2, [r3, #20]
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a05e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a064:	2b00      	cmp	r3, #0
 800a066:	d007      	beq.n	800a078 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	681a      	ldr	r2, [r3, #0]
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f042 0208 	orr.w	r2, r2, #8
 800a076:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	681a      	ldr	r2, [r3, #0]
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	f042 0201 	orr.w	r2, r2, #1
 800a086:	601a      	str	r2, [r3, #0]
 800a088:	e005      	b.n	800a096 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	2200      	movs	r2, #0
 800a08e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a092:	2302      	movs	r3, #2
 800a094:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a096:	7dfb      	ldrb	r3, [r7, #23]
}
 800a098:	4618      	mov	r0, r3
 800a09a:	3718      	adds	r7, #24
 800a09c:	46bd      	mov	sp, r7
 800a09e:	bd80      	pop	{r7, pc}

0800a0a0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b084      	sub	sp, #16
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0ac:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800a0ae:	f7ff f807 	bl	80090c0 <HAL_GetTick>
 800a0b2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a0ba:	b2db      	uxtb	r3, r3
 800a0bc:	2b02      	cmp	r3, #2
 800a0be:	d008      	beq.n	800a0d2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2280      	movs	r2, #128	; 0x80
 800a0c4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	e052      	b.n	800a178 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	681a      	ldr	r2, [r3, #0]
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	f022 0216 	bic.w	r2, r2, #22
 800a0e0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	695a      	ldr	r2, [r3, #20]
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a0f0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d103      	bne.n	800a102 <HAL_DMA_Abort+0x62>
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d007      	beq.n	800a112 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	681a      	ldr	r2, [r3, #0]
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f022 0208 	bic.w	r2, r2, #8
 800a110:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	681a      	ldr	r2, [r3, #0]
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f022 0201 	bic.w	r2, r2, #1
 800a120:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a122:	e013      	b.n	800a14c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a124:	f7fe ffcc 	bl	80090c0 <HAL_GetTick>
 800a128:	4602      	mov	r2, r0
 800a12a:	68bb      	ldr	r3, [r7, #8]
 800a12c:	1ad3      	subs	r3, r2, r3
 800a12e:	2b05      	cmp	r3, #5
 800a130:	d90c      	bls.n	800a14c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2220      	movs	r2, #32
 800a136:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2203      	movs	r2, #3
 800a13c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2200      	movs	r2, #0
 800a144:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800a148:	2303      	movs	r3, #3
 800a14a:	e015      	b.n	800a178 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	f003 0301 	and.w	r3, r3, #1
 800a156:	2b00      	cmp	r3, #0
 800a158:	d1e4      	bne.n	800a124 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a15e:	223f      	movs	r2, #63	; 0x3f
 800a160:	409a      	lsls	r2, r3
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	2201      	movs	r2, #1
 800a16a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	2200      	movs	r2, #0
 800a172:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800a176:	2300      	movs	r3, #0
}
 800a178:	4618      	mov	r0, r3
 800a17a:	3710      	adds	r7, #16
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bd80      	pop	{r7, pc}

0800a180 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b086      	sub	sp, #24
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800a188:	2300      	movs	r3, #0
 800a18a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800a18c:	4b92      	ldr	r3, [pc, #584]	; (800a3d8 <HAL_DMA_IRQHandler+0x258>)
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	4a92      	ldr	r2, [pc, #584]	; (800a3dc <HAL_DMA_IRQHandler+0x25c>)
 800a192:	fba2 2303 	umull	r2, r3, r2, r3
 800a196:	0a9b      	lsrs	r3, r3, #10
 800a198:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a19e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a1a0:	693b      	ldr	r3, [r7, #16]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1aa:	2208      	movs	r2, #8
 800a1ac:	409a      	lsls	r2, r3
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	4013      	ands	r3, r2
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d01a      	beq.n	800a1ec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	f003 0304 	and.w	r3, r3, #4
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d013      	beq.n	800a1ec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	681a      	ldr	r2, [r3, #0]
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f022 0204 	bic.w	r2, r2, #4
 800a1d2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1d8:	2208      	movs	r2, #8
 800a1da:	409a      	lsls	r2, r3
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1e4:	f043 0201 	orr.w	r2, r3, #1
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1f0:	2201      	movs	r2, #1
 800a1f2:	409a      	lsls	r2, r3
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	4013      	ands	r3, r2
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d012      	beq.n	800a222 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	695b      	ldr	r3, [r3, #20]
 800a202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a206:	2b00      	cmp	r3, #0
 800a208:	d00b      	beq.n	800a222 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a20e:	2201      	movs	r2, #1
 800a210:	409a      	lsls	r2, r3
 800a212:	693b      	ldr	r3, [r7, #16]
 800a214:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a21a:	f043 0202 	orr.w	r2, r3, #2
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a226:	2204      	movs	r2, #4
 800a228:	409a      	lsls	r2, r3
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	4013      	ands	r3, r2
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d012      	beq.n	800a258 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f003 0302 	and.w	r3, r3, #2
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d00b      	beq.n	800a258 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a244:	2204      	movs	r2, #4
 800a246:	409a      	lsls	r2, r3
 800a248:	693b      	ldr	r3, [r7, #16]
 800a24a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a250:	f043 0204 	orr.w	r2, r3, #4
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a25c:	2210      	movs	r2, #16
 800a25e:	409a      	lsls	r2, r3
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	4013      	ands	r3, r2
 800a264:	2b00      	cmp	r3, #0
 800a266:	d043      	beq.n	800a2f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	f003 0308 	and.w	r3, r3, #8
 800a272:	2b00      	cmp	r3, #0
 800a274:	d03c      	beq.n	800a2f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a27a:	2210      	movs	r2, #16
 800a27c:	409a      	lsls	r2, r3
 800a27e:	693b      	ldr	r3, [r7, #16]
 800a280:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d018      	beq.n	800a2c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d108      	bne.n	800a2b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d024      	beq.n	800a2f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	4798      	blx	r3
 800a2ae:	e01f      	b.n	800a2f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d01b      	beq.n	800a2f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	4798      	blx	r3
 800a2c0:	e016      	b.n	800a2f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d107      	bne.n	800a2e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	681a      	ldr	r2, [r3, #0]
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f022 0208 	bic.w	r2, r2, #8
 800a2de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d003      	beq.n	800a2f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2f4:	2220      	movs	r2, #32
 800a2f6:	409a      	lsls	r2, r3
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	4013      	ands	r3, r2
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	f000 808e 	beq.w	800a41e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f003 0310 	and.w	r3, r3, #16
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	f000 8086 	beq.w	800a41e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a316:	2220      	movs	r2, #32
 800a318:	409a      	lsls	r2, r3
 800a31a:	693b      	ldr	r3, [r7, #16]
 800a31c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a324:	b2db      	uxtb	r3, r3
 800a326:	2b05      	cmp	r3, #5
 800a328:	d136      	bne.n	800a398 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	681a      	ldr	r2, [r3, #0]
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f022 0216 	bic.w	r2, r2, #22
 800a338:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	695a      	ldr	r2, [r3, #20]
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a348:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d103      	bne.n	800a35a <HAL_DMA_IRQHandler+0x1da>
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a356:	2b00      	cmp	r3, #0
 800a358:	d007      	beq.n	800a36a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	681a      	ldr	r2, [r3, #0]
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f022 0208 	bic.w	r2, r2, #8
 800a368:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a36e:	223f      	movs	r2, #63	; 0x3f
 800a370:	409a      	lsls	r2, r3
 800a372:	693b      	ldr	r3, [r7, #16]
 800a374:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2201      	movs	r2, #1
 800a37a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2200      	movs	r2, #0
 800a382:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d07d      	beq.n	800a48a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a392:	6878      	ldr	r0, [r7, #4]
 800a394:	4798      	blx	r3
        }
        return;
 800a396:	e078      	b.n	800a48a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d01c      	beq.n	800a3e0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d108      	bne.n	800a3c6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d030      	beq.n	800a41e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3c0:	6878      	ldr	r0, [r7, #4]
 800a3c2:	4798      	blx	r3
 800a3c4:	e02b      	b.n	800a41e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d027      	beq.n	800a41e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	4798      	blx	r3
 800a3d6:	e022      	b.n	800a41e <HAL_DMA_IRQHandler+0x29e>
 800a3d8:	20000008 	.word	0x20000008
 800a3dc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d10f      	bne.n	800a40e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	681a      	ldr	r2, [r3, #0]
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	f022 0210 	bic.w	r2, r2, #16
 800a3fc:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2201      	movs	r2, #1
 800a402:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2200      	movs	r2, #0
 800a40a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a412:	2b00      	cmp	r3, #0
 800a414:	d003      	beq.n	800a41e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a41a:	6878      	ldr	r0, [r7, #4]
 800a41c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a422:	2b00      	cmp	r3, #0
 800a424:	d032      	beq.n	800a48c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a42a:	f003 0301 	and.w	r3, r3, #1
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d022      	beq.n	800a478 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2205      	movs	r2, #5
 800a436:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	681a      	ldr	r2, [r3, #0]
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	f022 0201 	bic.w	r2, r2, #1
 800a448:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	3301      	adds	r3, #1
 800a44e:	60bb      	str	r3, [r7, #8]
 800a450:	697a      	ldr	r2, [r7, #20]
 800a452:	429a      	cmp	r2, r3
 800a454:	d307      	bcc.n	800a466 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	f003 0301 	and.w	r3, r3, #1
 800a460:	2b00      	cmp	r3, #0
 800a462:	d1f2      	bne.n	800a44a <HAL_DMA_IRQHandler+0x2ca>
 800a464:	e000      	b.n	800a468 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800a466:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2201      	movs	r2, #1
 800a46c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2200      	movs	r2, #0
 800a474:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d005      	beq.n	800a48c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	4798      	blx	r3
 800a488:	e000      	b.n	800a48c <HAL_DMA_IRQHandler+0x30c>
        return;
 800a48a:	bf00      	nop
    }
  }
}
 800a48c:	3718      	adds	r7, #24
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}
 800a492:	bf00      	nop

0800a494 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a494:	b480      	push	{r7}
 800a496:	b085      	sub	sp, #20
 800a498:	af00      	add	r7, sp, #0
 800a49a:	60f8      	str	r0, [r7, #12]
 800a49c:	60b9      	str	r1, [r7, #8]
 800a49e:	607a      	str	r2, [r7, #4]
 800a4a0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	681a      	ldr	r2, [r3, #0]
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a4b0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	683a      	ldr	r2, [r7, #0]
 800a4b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	689b      	ldr	r3, [r3, #8]
 800a4be:	2b40      	cmp	r3, #64	; 0x40
 800a4c0:	d108      	bne.n	800a4d4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	687a      	ldr	r2, [r7, #4]
 800a4c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	68ba      	ldr	r2, [r7, #8]
 800a4d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a4d2:	e007      	b.n	800a4e4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	68ba      	ldr	r2, [r7, #8]
 800a4da:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	687a      	ldr	r2, [r7, #4]
 800a4e2:	60da      	str	r2, [r3, #12]
}
 800a4e4:	bf00      	nop
 800a4e6:	3714      	adds	r7, #20
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ee:	4770      	bx	lr

0800a4f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a4f0:	b480      	push	{r7}
 800a4f2:	b085      	sub	sp, #20
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	b2db      	uxtb	r3, r3
 800a4fe:	3b10      	subs	r3, #16
 800a500:	4a13      	ldr	r2, [pc, #76]	; (800a550 <DMA_CalcBaseAndBitshift+0x60>)
 800a502:	fba2 2303 	umull	r2, r3, r2, r3
 800a506:	091b      	lsrs	r3, r3, #4
 800a508:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a50a:	4a12      	ldr	r2, [pc, #72]	; (800a554 <DMA_CalcBaseAndBitshift+0x64>)
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	4413      	add	r3, r2
 800a510:	781b      	ldrb	r3, [r3, #0]
 800a512:	461a      	mov	r2, r3
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	2b03      	cmp	r3, #3
 800a51c:	d908      	bls.n	800a530 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	461a      	mov	r2, r3
 800a524:	4b0c      	ldr	r3, [pc, #48]	; (800a558 <DMA_CalcBaseAndBitshift+0x68>)
 800a526:	4013      	ands	r3, r2
 800a528:	1d1a      	adds	r2, r3, #4
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	659a      	str	r2, [r3, #88]	; 0x58
 800a52e:	e006      	b.n	800a53e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	461a      	mov	r2, r3
 800a536:	4b08      	ldr	r3, [pc, #32]	; (800a558 <DMA_CalcBaseAndBitshift+0x68>)
 800a538:	4013      	ands	r3, r2
 800a53a:	687a      	ldr	r2, [r7, #4]
 800a53c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a542:	4618      	mov	r0, r3
 800a544:	3714      	adds	r7, #20
 800a546:	46bd      	mov	sp, r7
 800a548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54c:	4770      	bx	lr
 800a54e:	bf00      	nop
 800a550:	aaaaaaab 	.word	0xaaaaaaab
 800a554:	08028a70 	.word	0x08028a70
 800a558:	fffffc00 	.word	0xfffffc00

0800a55c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a55c:	b480      	push	{r7}
 800a55e:	b085      	sub	sp, #20
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a564:	2300      	movs	r3, #0
 800a566:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a56c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	699b      	ldr	r3, [r3, #24]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d11f      	bne.n	800a5b6 <DMA_CheckFifoParam+0x5a>
 800a576:	68bb      	ldr	r3, [r7, #8]
 800a578:	2b03      	cmp	r3, #3
 800a57a:	d856      	bhi.n	800a62a <DMA_CheckFifoParam+0xce>
 800a57c:	a201      	add	r2, pc, #4	; (adr r2, 800a584 <DMA_CheckFifoParam+0x28>)
 800a57e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a582:	bf00      	nop
 800a584:	0800a595 	.word	0x0800a595
 800a588:	0800a5a7 	.word	0x0800a5a7
 800a58c:	0800a595 	.word	0x0800a595
 800a590:	0800a62b 	.word	0x0800a62b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a598:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d046      	beq.n	800a62e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800a5a0:	2301      	movs	r3, #1
 800a5a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a5a4:	e043      	b.n	800a62e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5aa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a5ae:	d140      	bne.n	800a632 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800a5b0:	2301      	movs	r3, #1
 800a5b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a5b4:	e03d      	b.n	800a632 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	699b      	ldr	r3, [r3, #24]
 800a5ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5be:	d121      	bne.n	800a604 <DMA_CheckFifoParam+0xa8>
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	2b03      	cmp	r3, #3
 800a5c4:	d837      	bhi.n	800a636 <DMA_CheckFifoParam+0xda>
 800a5c6:	a201      	add	r2, pc, #4	; (adr r2, 800a5cc <DMA_CheckFifoParam+0x70>)
 800a5c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5cc:	0800a5dd 	.word	0x0800a5dd
 800a5d0:	0800a5e3 	.word	0x0800a5e3
 800a5d4:	0800a5dd 	.word	0x0800a5dd
 800a5d8:	0800a5f5 	.word	0x0800a5f5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800a5dc:	2301      	movs	r3, #1
 800a5de:	73fb      	strb	r3, [r7, #15]
      break;
 800a5e0:	e030      	b.n	800a644 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d025      	beq.n	800a63a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800a5ee:	2301      	movs	r3, #1
 800a5f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a5f2:	e022      	b.n	800a63a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5f8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a5fc:	d11f      	bne.n	800a63e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800a5fe:	2301      	movs	r3, #1
 800a600:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800a602:	e01c      	b.n	800a63e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800a604:	68bb      	ldr	r3, [r7, #8]
 800a606:	2b02      	cmp	r3, #2
 800a608:	d903      	bls.n	800a612 <DMA_CheckFifoParam+0xb6>
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	2b03      	cmp	r3, #3
 800a60e:	d003      	beq.n	800a618 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800a610:	e018      	b.n	800a644 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800a612:	2301      	movs	r3, #1
 800a614:	73fb      	strb	r3, [r7, #15]
      break;
 800a616:	e015      	b.n	800a644 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a61c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a620:	2b00      	cmp	r3, #0
 800a622:	d00e      	beq.n	800a642 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800a624:	2301      	movs	r3, #1
 800a626:	73fb      	strb	r3, [r7, #15]
      break;
 800a628:	e00b      	b.n	800a642 <DMA_CheckFifoParam+0xe6>
      break;
 800a62a:	bf00      	nop
 800a62c:	e00a      	b.n	800a644 <DMA_CheckFifoParam+0xe8>
      break;
 800a62e:	bf00      	nop
 800a630:	e008      	b.n	800a644 <DMA_CheckFifoParam+0xe8>
      break;
 800a632:	bf00      	nop
 800a634:	e006      	b.n	800a644 <DMA_CheckFifoParam+0xe8>
      break;
 800a636:	bf00      	nop
 800a638:	e004      	b.n	800a644 <DMA_CheckFifoParam+0xe8>
      break;
 800a63a:	bf00      	nop
 800a63c:	e002      	b.n	800a644 <DMA_CheckFifoParam+0xe8>
      break;   
 800a63e:	bf00      	nop
 800a640:	e000      	b.n	800a644 <DMA_CheckFifoParam+0xe8>
      break;
 800a642:	bf00      	nop
    }
  } 
  
  return status; 
 800a644:	7bfb      	ldrb	r3, [r7, #15]
}
 800a646:	4618      	mov	r0, r3
 800a648:	3714      	adds	r7, #20
 800a64a:	46bd      	mov	sp, r7
 800a64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a650:	4770      	bx	lr
 800a652:	bf00      	nop

0800a654 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a654:	b480      	push	{r7}
 800a656:	b089      	sub	sp, #36	; 0x24
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
 800a65c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800a65e:	2300      	movs	r3, #0
 800a660:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800a662:	2300      	movs	r3, #0
 800a664:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800a666:	2300      	movs	r3, #0
 800a668:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800a66a:	2300      	movs	r3, #0
 800a66c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800a66e:	2300      	movs	r3, #0
 800a670:	61fb      	str	r3, [r7, #28]
 800a672:	e175      	b.n	800a960 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800a674:	2201      	movs	r2, #1
 800a676:	69fb      	ldr	r3, [r7, #28]
 800a678:	fa02 f303 	lsl.w	r3, r2, r3
 800a67c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	697a      	ldr	r2, [r7, #20]
 800a684:	4013      	ands	r3, r2
 800a686:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800a688:	693a      	ldr	r2, [r7, #16]
 800a68a:	697b      	ldr	r3, [r7, #20]
 800a68c:	429a      	cmp	r2, r3
 800a68e:	f040 8164 	bne.w	800a95a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	685b      	ldr	r3, [r3, #4]
 800a696:	f003 0303 	and.w	r3, r3, #3
 800a69a:	2b01      	cmp	r3, #1
 800a69c:	d005      	beq.n	800a6aa <HAL_GPIO_Init+0x56>
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	685b      	ldr	r3, [r3, #4]
 800a6a2:	f003 0303 	and.w	r3, r3, #3
 800a6a6:	2b02      	cmp	r3, #2
 800a6a8:	d130      	bne.n	800a70c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	689b      	ldr	r3, [r3, #8]
 800a6ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800a6b0:	69fb      	ldr	r3, [r7, #28]
 800a6b2:	005b      	lsls	r3, r3, #1
 800a6b4:	2203      	movs	r2, #3
 800a6b6:	fa02 f303 	lsl.w	r3, r2, r3
 800a6ba:	43db      	mvns	r3, r3
 800a6bc:	69ba      	ldr	r2, [r7, #24]
 800a6be:	4013      	ands	r3, r2
 800a6c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	68da      	ldr	r2, [r3, #12]
 800a6c6:	69fb      	ldr	r3, [r7, #28]
 800a6c8:	005b      	lsls	r3, r3, #1
 800a6ca:	fa02 f303 	lsl.w	r3, r2, r3
 800a6ce:	69ba      	ldr	r2, [r7, #24]
 800a6d0:	4313      	orrs	r3, r2
 800a6d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	69ba      	ldr	r2, [r7, #24]
 800a6d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	685b      	ldr	r3, [r3, #4]
 800a6de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a6e0:	2201      	movs	r2, #1
 800a6e2:	69fb      	ldr	r3, [r7, #28]
 800a6e4:	fa02 f303 	lsl.w	r3, r2, r3
 800a6e8:	43db      	mvns	r3, r3
 800a6ea:	69ba      	ldr	r2, [r7, #24]
 800a6ec:	4013      	ands	r3, r2
 800a6ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	685b      	ldr	r3, [r3, #4]
 800a6f4:	091b      	lsrs	r3, r3, #4
 800a6f6:	f003 0201 	and.w	r2, r3, #1
 800a6fa:	69fb      	ldr	r3, [r7, #28]
 800a6fc:	fa02 f303 	lsl.w	r3, r2, r3
 800a700:	69ba      	ldr	r2, [r7, #24]
 800a702:	4313      	orrs	r3, r2
 800a704:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	69ba      	ldr	r2, [r7, #24]
 800a70a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	685b      	ldr	r3, [r3, #4]
 800a710:	f003 0303 	and.w	r3, r3, #3
 800a714:	2b03      	cmp	r3, #3
 800a716:	d017      	beq.n	800a748 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	68db      	ldr	r3, [r3, #12]
 800a71c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800a71e:	69fb      	ldr	r3, [r7, #28]
 800a720:	005b      	lsls	r3, r3, #1
 800a722:	2203      	movs	r2, #3
 800a724:	fa02 f303 	lsl.w	r3, r2, r3
 800a728:	43db      	mvns	r3, r3
 800a72a:	69ba      	ldr	r2, [r7, #24]
 800a72c:	4013      	ands	r3, r2
 800a72e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	689a      	ldr	r2, [r3, #8]
 800a734:	69fb      	ldr	r3, [r7, #28]
 800a736:	005b      	lsls	r3, r3, #1
 800a738:	fa02 f303 	lsl.w	r3, r2, r3
 800a73c:	69ba      	ldr	r2, [r7, #24]
 800a73e:	4313      	orrs	r3, r2
 800a740:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	69ba      	ldr	r2, [r7, #24]
 800a746:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	685b      	ldr	r3, [r3, #4]
 800a74c:	f003 0303 	and.w	r3, r3, #3
 800a750:	2b02      	cmp	r3, #2
 800a752:	d123      	bne.n	800a79c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800a754:	69fb      	ldr	r3, [r7, #28]
 800a756:	08da      	lsrs	r2, r3, #3
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	3208      	adds	r2, #8
 800a75c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a760:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800a762:	69fb      	ldr	r3, [r7, #28]
 800a764:	f003 0307 	and.w	r3, r3, #7
 800a768:	009b      	lsls	r3, r3, #2
 800a76a:	220f      	movs	r2, #15
 800a76c:	fa02 f303 	lsl.w	r3, r2, r3
 800a770:	43db      	mvns	r3, r3
 800a772:	69ba      	ldr	r2, [r7, #24]
 800a774:	4013      	ands	r3, r2
 800a776:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	691a      	ldr	r2, [r3, #16]
 800a77c:	69fb      	ldr	r3, [r7, #28]
 800a77e:	f003 0307 	and.w	r3, r3, #7
 800a782:	009b      	lsls	r3, r3, #2
 800a784:	fa02 f303 	lsl.w	r3, r2, r3
 800a788:	69ba      	ldr	r2, [r7, #24]
 800a78a:	4313      	orrs	r3, r2
 800a78c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800a78e:	69fb      	ldr	r3, [r7, #28]
 800a790:	08da      	lsrs	r2, r3, #3
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	3208      	adds	r2, #8
 800a796:	69b9      	ldr	r1, [r7, #24]
 800a798:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800a7a2:	69fb      	ldr	r3, [r7, #28]
 800a7a4:	005b      	lsls	r3, r3, #1
 800a7a6:	2203      	movs	r2, #3
 800a7a8:	fa02 f303 	lsl.w	r3, r2, r3
 800a7ac:	43db      	mvns	r3, r3
 800a7ae:	69ba      	ldr	r2, [r7, #24]
 800a7b0:	4013      	ands	r3, r2
 800a7b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	685b      	ldr	r3, [r3, #4]
 800a7b8:	f003 0203 	and.w	r2, r3, #3
 800a7bc:	69fb      	ldr	r3, [r7, #28]
 800a7be:	005b      	lsls	r3, r3, #1
 800a7c0:	fa02 f303 	lsl.w	r3, r2, r3
 800a7c4:	69ba      	ldr	r2, [r7, #24]
 800a7c6:	4313      	orrs	r3, r2
 800a7c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	69ba      	ldr	r2, [r7, #24]
 800a7ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	685b      	ldr	r3, [r3, #4]
 800a7d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	f000 80be 	beq.w	800a95a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a7de:	4b66      	ldr	r3, [pc, #408]	; (800a978 <HAL_GPIO_Init+0x324>)
 800a7e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7e2:	4a65      	ldr	r2, [pc, #404]	; (800a978 <HAL_GPIO_Init+0x324>)
 800a7e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a7e8:	6453      	str	r3, [r2, #68]	; 0x44
 800a7ea:	4b63      	ldr	r3, [pc, #396]	; (800a978 <HAL_GPIO_Init+0x324>)
 800a7ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a7f2:	60fb      	str	r3, [r7, #12]
 800a7f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800a7f6:	4a61      	ldr	r2, [pc, #388]	; (800a97c <HAL_GPIO_Init+0x328>)
 800a7f8:	69fb      	ldr	r3, [r7, #28]
 800a7fa:	089b      	lsrs	r3, r3, #2
 800a7fc:	3302      	adds	r3, #2
 800a7fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a802:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800a804:	69fb      	ldr	r3, [r7, #28]
 800a806:	f003 0303 	and.w	r3, r3, #3
 800a80a:	009b      	lsls	r3, r3, #2
 800a80c:	220f      	movs	r2, #15
 800a80e:	fa02 f303 	lsl.w	r3, r2, r3
 800a812:	43db      	mvns	r3, r3
 800a814:	69ba      	ldr	r2, [r7, #24]
 800a816:	4013      	ands	r3, r2
 800a818:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	4a58      	ldr	r2, [pc, #352]	; (800a980 <HAL_GPIO_Init+0x32c>)
 800a81e:	4293      	cmp	r3, r2
 800a820:	d037      	beq.n	800a892 <HAL_GPIO_Init+0x23e>
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	4a57      	ldr	r2, [pc, #348]	; (800a984 <HAL_GPIO_Init+0x330>)
 800a826:	4293      	cmp	r3, r2
 800a828:	d031      	beq.n	800a88e <HAL_GPIO_Init+0x23a>
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	4a56      	ldr	r2, [pc, #344]	; (800a988 <HAL_GPIO_Init+0x334>)
 800a82e:	4293      	cmp	r3, r2
 800a830:	d02b      	beq.n	800a88a <HAL_GPIO_Init+0x236>
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	4a55      	ldr	r2, [pc, #340]	; (800a98c <HAL_GPIO_Init+0x338>)
 800a836:	4293      	cmp	r3, r2
 800a838:	d025      	beq.n	800a886 <HAL_GPIO_Init+0x232>
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	4a54      	ldr	r2, [pc, #336]	; (800a990 <HAL_GPIO_Init+0x33c>)
 800a83e:	4293      	cmp	r3, r2
 800a840:	d01f      	beq.n	800a882 <HAL_GPIO_Init+0x22e>
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	4a53      	ldr	r2, [pc, #332]	; (800a994 <HAL_GPIO_Init+0x340>)
 800a846:	4293      	cmp	r3, r2
 800a848:	d019      	beq.n	800a87e <HAL_GPIO_Init+0x22a>
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	4a52      	ldr	r2, [pc, #328]	; (800a998 <HAL_GPIO_Init+0x344>)
 800a84e:	4293      	cmp	r3, r2
 800a850:	d013      	beq.n	800a87a <HAL_GPIO_Init+0x226>
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	4a51      	ldr	r2, [pc, #324]	; (800a99c <HAL_GPIO_Init+0x348>)
 800a856:	4293      	cmp	r3, r2
 800a858:	d00d      	beq.n	800a876 <HAL_GPIO_Init+0x222>
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	4a50      	ldr	r2, [pc, #320]	; (800a9a0 <HAL_GPIO_Init+0x34c>)
 800a85e:	4293      	cmp	r3, r2
 800a860:	d007      	beq.n	800a872 <HAL_GPIO_Init+0x21e>
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	4a4f      	ldr	r2, [pc, #316]	; (800a9a4 <HAL_GPIO_Init+0x350>)
 800a866:	4293      	cmp	r3, r2
 800a868:	d101      	bne.n	800a86e <HAL_GPIO_Init+0x21a>
 800a86a:	2309      	movs	r3, #9
 800a86c:	e012      	b.n	800a894 <HAL_GPIO_Init+0x240>
 800a86e:	230a      	movs	r3, #10
 800a870:	e010      	b.n	800a894 <HAL_GPIO_Init+0x240>
 800a872:	2308      	movs	r3, #8
 800a874:	e00e      	b.n	800a894 <HAL_GPIO_Init+0x240>
 800a876:	2307      	movs	r3, #7
 800a878:	e00c      	b.n	800a894 <HAL_GPIO_Init+0x240>
 800a87a:	2306      	movs	r3, #6
 800a87c:	e00a      	b.n	800a894 <HAL_GPIO_Init+0x240>
 800a87e:	2305      	movs	r3, #5
 800a880:	e008      	b.n	800a894 <HAL_GPIO_Init+0x240>
 800a882:	2304      	movs	r3, #4
 800a884:	e006      	b.n	800a894 <HAL_GPIO_Init+0x240>
 800a886:	2303      	movs	r3, #3
 800a888:	e004      	b.n	800a894 <HAL_GPIO_Init+0x240>
 800a88a:	2302      	movs	r3, #2
 800a88c:	e002      	b.n	800a894 <HAL_GPIO_Init+0x240>
 800a88e:	2301      	movs	r3, #1
 800a890:	e000      	b.n	800a894 <HAL_GPIO_Init+0x240>
 800a892:	2300      	movs	r3, #0
 800a894:	69fa      	ldr	r2, [r7, #28]
 800a896:	f002 0203 	and.w	r2, r2, #3
 800a89a:	0092      	lsls	r2, r2, #2
 800a89c:	4093      	lsls	r3, r2
 800a89e:	69ba      	ldr	r2, [r7, #24]
 800a8a0:	4313      	orrs	r3, r2
 800a8a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800a8a4:	4935      	ldr	r1, [pc, #212]	; (800a97c <HAL_GPIO_Init+0x328>)
 800a8a6:	69fb      	ldr	r3, [r7, #28]
 800a8a8:	089b      	lsrs	r3, r3, #2
 800a8aa:	3302      	adds	r3, #2
 800a8ac:	69ba      	ldr	r2, [r7, #24]
 800a8ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a8b2:	4b3d      	ldr	r3, [pc, #244]	; (800a9a8 <HAL_GPIO_Init+0x354>)
 800a8b4:	689b      	ldr	r3, [r3, #8]
 800a8b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a8b8:	693b      	ldr	r3, [r7, #16]
 800a8ba:	43db      	mvns	r3, r3
 800a8bc:	69ba      	ldr	r2, [r7, #24]
 800a8be:	4013      	ands	r3, r2
 800a8c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	685b      	ldr	r3, [r3, #4]
 800a8c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d003      	beq.n	800a8d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800a8ce:	69ba      	ldr	r2, [r7, #24]
 800a8d0:	693b      	ldr	r3, [r7, #16]
 800a8d2:	4313      	orrs	r3, r2
 800a8d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800a8d6:	4a34      	ldr	r2, [pc, #208]	; (800a9a8 <HAL_GPIO_Init+0x354>)
 800a8d8:	69bb      	ldr	r3, [r7, #24]
 800a8da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800a8dc:	4b32      	ldr	r3, [pc, #200]	; (800a9a8 <HAL_GPIO_Init+0x354>)
 800a8de:	68db      	ldr	r3, [r3, #12]
 800a8e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a8e2:	693b      	ldr	r3, [r7, #16]
 800a8e4:	43db      	mvns	r3, r3
 800a8e6:	69ba      	ldr	r2, [r7, #24]
 800a8e8:	4013      	ands	r3, r2
 800a8ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	685b      	ldr	r3, [r3, #4]
 800a8f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d003      	beq.n	800a900 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800a8f8:	69ba      	ldr	r2, [r7, #24]
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	4313      	orrs	r3, r2
 800a8fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800a900:	4a29      	ldr	r2, [pc, #164]	; (800a9a8 <HAL_GPIO_Init+0x354>)
 800a902:	69bb      	ldr	r3, [r7, #24]
 800a904:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800a906:	4b28      	ldr	r3, [pc, #160]	; (800a9a8 <HAL_GPIO_Init+0x354>)
 800a908:	685b      	ldr	r3, [r3, #4]
 800a90a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a90c:	693b      	ldr	r3, [r7, #16]
 800a90e:	43db      	mvns	r3, r3
 800a910:	69ba      	ldr	r2, [r7, #24]
 800a912:	4013      	ands	r3, r2
 800a914:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	685b      	ldr	r3, [r3, #4]
 800a91a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d003      	beq.n	800a92a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800a922:	69ba      	ldr	r2, [r7, #24]
 800a924:	693b      	ldr	r3, [r7, #16]
 800a926:	4313      	orrs	r3, r2
 800a928:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800a92a:	4a1f      	ldr	r2, [pc, #124]	; (800a9a8 <HAL_GPIO_Init+0x354>)
 800a92c:	69bb      	ldr	r3, [r7, #24]
 800a92e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a930:	4b1d      	ldr	r3, [pc, #116]	; (800a9a8 <HAL_GPIO_Init+0x354>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a936:	693b      	ldr	r3, [r7, #16]
 800a938:	43db      	mvns	r3, r3
 800a93a:	69ba      	ldr	r2, [r7, #24]
 800a93c:	4013      	ands	r3, r2
 800a93e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800a940:	683b      	ldr	r3, [r7, #0]
 800a942:	685b      	ldr	r3, [r3, #4]
 800a944:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d003      	beq.n	800a954 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800a94c:	69ba      	ldr	r2, [r7, #24]
 800a94e:	693b      	ldr	r3, [r7, #16]
 800a950:	4313      	orrs	r3, r2
 800a952:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800a954:	4a14      	ldr	r2, [pc, #80]	; (800a9a8 <HAL_GPIO_Init+0x354>)
 800a956:	69bb      	ldr	r3, [r7, #24]
 800a958:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800a95a:	69fb      	ldr	r3, [r7, #28]
 800a95c:	3301      	adds	r3, #1
 800a95e:	61fb      	str	r3, [r7, #28]
 800a960:	69fb      	ldr	r3, [r7, #28]
 800a962:	2b0f      	cmp	r3, #15
 800a964:	f67f ae86 	bls.w	800a674 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800a968:	bf00      	nop
 800a96a:	bf00      	nop
 800a96c:	3724      	adds	r7, #36	; 0x24
 800a96e:	46bd      	mov	sp, r7
 800a970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a974:	4770      	bx	lr
 800a976:	bf00      	nop
 800a978:	40023800 	.word	0x40023800
 800a97c:	40013800 	.word	0x40013800
 800a980:	40020000 	.word	0x40020000
 800a984:	40020400 	.word	0x40020400
 800a988:	40020800 	.word	0x40020800
 800a98c:	40020c00 	.word	0x40020c00
 800a990:	40021000 	.word	0x40021000
 800a994:	40021400 	.word	0x40021400
 800a998:	40021800 	.word	0x40021800
 800a99c:	40021c00 	.word	0x40021c00
 800a9a0:	40022000 	.word	0x40022000
 800a9a4:	40022400 	.word	0x40022400
 800a9a8:	40013c00 	.word	0x40013c00

0800a9ac <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b087      	sub	sp, #28
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
 800a9b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800a9be:	2300      	movs	r3, #0
 800a9c0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	617b      	str	r3, [r7, #20]
 800a9c6:	e0d9      	b.n	800ab7c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800a9c8:	2201      	movs	r2, #1
 800a9ca:	697b      	ldr	r3, [r7, #20]
 800a9cc:	fa02 f303 	lsl.w	r3, r2, r3
 800a9d0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800a9d2:	683a      	ldr	r2, [r7, #0]
 800a9d4:	693b      	ldr	r3, [r7, #16]
 800a9d6:	4013      	ands	r3, r2
 800a9d8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800a9da:	68fa      	ldr	r2, [r7, #12]
 800a9dc:	693b      	ldr	r3, [r7, #16]
 800a9de:	429a      	cmp	r2, r3
 800a9e0:	f040 80c9 	bne.w	800ab76 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 800a9e4:	4a6b      	ldr	r2, [pc, #428]	; (800ab94 <HAL_GPIO_DeInit+0x1e8>)
 800a9e6:	697b      	ldr	r3, [r7, #20]
 800a9e8:	089b      	lsrs	r3, r3, #2
 800a9ea:	3302      	adds	r3, #2
 800a9ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a9f0:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800a9f2:	697b      	ldr	r3, [r7, #20]
 800a9f4:	f003 0303 	and.w	r3, r3, #3
 800a9f8:	009b      	lsls	r3, r3, #2
 800a9fa:	220f      	movs	r2, #15
 800a9fc:	fa02 f303 	lsl.w	r3, r2, r3
 800aa00:	68ba      	ldr	r2, [r7, #8]
 800aa02:	4013      	ands	r3, r2
 800aa04:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	4a63      	ldr	r2, [pc, #396]	; (800ab98 <HAL_GPIO_DeInit+0x1ec>)
 800aa0a:	4293      	cmp	r3, r2
 800aa0c:	d037      	beq.n	800aa7e <HAL_GPIO_DeInit+0xd2>
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	4a62      	ldr	r2, [pc, #392]	; (800ab9c <HAL_GPIO_DeInit+0x1f0>)
 800aa12:	4293      	cmp	r3, r2
 800aa14:	d031      	beq.n	800aa7a <HAL_GPIO_DeInit+0xce>
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	4a61      	ldr	r2, [pc, #388]	; (800aba0 <HAL_GPIO_DeInit+0x1f4>)
 800aa1a:	4293      	cmp	r3, r2
 800aa1c:	d02b      	beq.n	800aa76 <HAL_GPIO_DeInit+0xca>
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	4a60      	ldr	r2, [pc, #384]	; (800aba4 <HAL_GPIO_DeInit+0x1f8>)
 800aa22:	4293      	cmp	r3, r2
 800aa24:	d025      	beq.n	800aa72 <HAL_GPIO_DeInit+0xc6>
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	4a5f      	ldr	r2, [pc, #380]	; (800aba8 <HAL_GPIO_DeInit+0x1fc>)
 800aa2a:	4293      	cmp	r3, r2
 800aa2c:	d01f      	beq.n	800aa6e <HAL_GPIO_DeInit+0xc2>
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	4a5e      	ldr	r2, [pc, #376]	; (800abac <HAL_GPIO_DeInit+0x200>)
 800aa32:	4293      	cmp	r3, r2
 800aa34:	d019      	beq.n	800aa6a <HAL_GPIO_DeInit+0xbe>
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	4a5d      	ldr	r2, [pc, #372]	; (800abb0 <HAL_GPIO_DeInit+0x204>)
 800aa3a:	4293      	cmp	r3, r2
 800aa3c:	d013      	beq.n	800aa66 <HAL_GPIO_DeInit+0xba>
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	4a5c      	ldr	r2, [pc, #368]	; (800abb4 <HAL_GPIO_DeInit+0x208>)
 800aa42:	4293      	cmp	r3, r2
 800aa44:	d00d      	beq.n	800aa62 <HAL_GPIO_DeInit+0xb6>
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	4a5b      	ldr	r2, [pc, #364]	; (800abb8 <HAL_GPIO_DeInit+0x20c>)
 800aa4a:	4293      	cmp	r3, r2
 800aa4c:	d007      	beq.n	800aa5e <HAL_GPIO_DeInit+0xb2>
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	4a5a      	ldr	r2, [pc, #360]	; (800abbc <HAL_GPIO_DeInit+0x210>)
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d101      	bne.n	800aa5a <HAL_GPIO_DeInit+0xae>
 800aa56:	2309      	movs	r3, #9
 800aa58:	e012      	b.n	800aa80 <HAL_GPIO_DeInit+0xd4>
 800aa5a:	230a      	movs	r3, #10
 800aa5c:	e010      	b.n	800aa80 <HAL_GPIO_DeInit+0xd4>
 800aa5e:	2308      	movs	r3, #8
 800aa60:	e00e      	b.n	800aa80 <HAL_GPIO_DeInit+0xd4>
 800aa62:	2307      	movs	r3, #7
 800aa64:	e00c      	b.n	800aa80 <HAL_GPIO_DeInit+0xd4>
 800aa66:	2306      	movs	r3, #6
 800aa68:	e00a      	b.n	800aa80 <HAL_GPIO_DeInit+0xd4>
 800aa6a:	2305      	movs	r3, #5
 800aa6c:	e008      	b.n	800aa80 <HAL_GPIO_DeInit+0xd4>
 800aa6e:	2304      	movs	r3, #4
 800aa70:	e006      	b.n	800aa80 <HAL_GPIO_DeInit+0xd4>
 800aa72:	2303      	movs	r3, #3
 800aa74:	e004      	b.n	800aa80 <HAL_GPIO_DeInit+0xd4>
 800aa76:	2302      	movs	r3, #2
 800aa78:	e002      	b.n	800aa80 <HAL_GPIO_DeInit+0xd4>
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	e000      	b.n	800aa80 <HAL_GPIO_DeInit+0xd4>
 800aa7e:	2300      	movs	r3, #0
 800aa80:	697a      	ldr	r2, [r7, #20]
 800aa82:	f002 0203 	and.w	r2, r2, #3
 800aa86:	0092      	lsls	r2, r2, #2
 800aa88:	4093      	lsls	r3, r2
 800aa8a:	68ba      	ldr	r2, [r7, #8]
 800aa8c:	429a      	cmp	r2, r3
 800aa8e:	d132      	bne.n	800aaf6 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800aa90:	4b4b      	ldr	r3, [pc, #300]	; (800abc0 <HAL_GPIO_DeInit+0x214>)
 800aa92:	681a      	ldr	r2, [r3, #0]
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	43db      	mvns	r3, r3
 800aa98:	4949      	ldr	r1, [pc, #292]	; (800abc0 <HAL_GPIO_DeInit+0x214>)
 800aa9a:	4013      	ands	r3, r2
 800aa9c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800aa9e:	4b48      	ldr	r3, [pc, #288]	; (800abc0 <HAL_GPIO_DeInit+0x214>)
 800aaa0:	685a      	ldr	r2, [r3, #4]
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	43db      	mvns	r3, r3
 800aaa6:	4946      	ldr	r1, [pc, #280]	; (800abc0 <HAL_GPIO_DeInit+0x214>)
 800aaa8:	4013      	ands	r3, r2
 800aaaa:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800aaac:	4b44      	ldr	r3, [pc, #272]	; (800abc0 <HAL_GPIO_DeInit+0x214>)
 800aaae:	68da      	ldr	r2, [r3, #12]
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	43db      	mvns	r3, r3
 800aab4:	4942      	ldr	r1, [pc, #264]	; (800abc0 <HAL_GPIO_DeInit+0x214>)
 800aab6:	4013      	ands	r3, r2
 800aab8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800aaba:	4b41      	ldr	r3, [pc, #260]	; (800abc0 <HAL_GPIO_DeInit+0x214>)
 800aabc:	689a      	ldr	r2, [r3, #8]
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	43db      	mvns	r3, r3
 800aac2:	493f      	ldr	r1, [pc, #252]	; (800abc0 <HAL_GPIO_DeInit+0x214>)
 800aac4:	4013      	ands	r3, r2
 800aac6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 800aac8:	697b      	ldr	r3, [r7, #20]
 800aaca:	f003 0303 	and.w	r3, r3, #3
 800aace:	009b      	lsls	r3, r3, #2
 800aad0:	220f      	movs	r2, #15
 800aad2:	fa02 f303 	lsl.w	r3, r2, r3
 800aad6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800aad8:	4a2e      	ldr	r2, [pc, #184]	; (800ab94 <HAL_GPIO_DeInit+0x1e8>)
 800aada:	697b      	ldr	r3, [r7, #20]
 800aadc:	089b      	lsrs	r3, r3, #2
 800aade:	3302      	adds	r3, #2
 800aae0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	43da      	mvns	r2, r3
 800aae8:	482a      	ldr	r0, [pc, #168]	; (800ab94 <HAL_GPIO_DeInit+0x1e8>)
 800aaea:	697b      	ldr	r3, [r7, #20]
 800aaec:	089b      	lsrs	r3, r3, #2
 800aaee:	400a      	ands	r2, r1
 800aaf0:	3302      	adds	r3, #2
 800aaf2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681a      	ldr	r2, [r3, #0]
 800aafa:	697b      	ldr	r3, [r7, #20]
 800aafc:	005b      	lsls	r3, r3, #1
 800aafe:	2103      	movs	r1, #3
 800ab00:	fa01 f303 	lsl.w	r3, r1, r3
 800ab04:	43db      	mvns	r3, r3
 800ab06:	401a      	ands	r2, r3
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800ab0c:	697b      	ldr	r3, [r7, #20]
 800ab0e:	08da      	lsrs	r2, r3, #3
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	3208      	adds	r2, #8
 800ab14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ab18:	697b      	ldr	r3, [r7, #20]
 800ab1a:	f003 0307 	and.w	r3, r3, #7
 800ab1e:	009b      	lsls	r3, r3, #2
 800ab20:	220f      	movs	r2, #15
 800ab22:	fa02 f303 	lsl.w	r3, r2, r3
 800ab26:	43db      	mvns	r3, r3
 800ab28:	697a      	ldr	r2, [r7, #20]
 800ab2a:	08d2      	lsrs	r2, r2, #3
 800ab2c:	4019      	ands	r1, r3
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	3208      	adds	r2, #8
 800ab32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	68da      	ldr	r2, [r3, #12]
 800ab3a:	697b      	ldr	r3, [r7, #20]
 800ab3c:	005b      	lsls	r3, r3, #1
 800ab3e:	2103      	movs	r1, #3
 800ab40:	fa01 f303 	lsl.w	r3, r1, r3
 800ab44:	43db      	mvns	r3, r3
 800ab46:	401a      	ands	r2, r3
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	685a      	ldr	r2, [r3, #4]
 800ab50:	2101      	movs	r1, #1
 800ab52:	697b      	ldr	r3, [r7, #20]
 800ab54:	fa01 f303 	lsl.w	r3, r1, r3
 800ab58:	43db      	mvns	r3, r3
 800ab5a:	401a      	ands	r2, r3
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	689a      	ldr	r2, [r3, #8]
 800ab64:	697b      	ldr	r3, [r7, #20]
 800ab66:	005b      	lsls	r3, r3, #1
 800ab68:	2103      	movs	r1, #3
 800ab6a:	fa01 f303 	lsl.w	r3, r1, r3
 800ab6e:	43db      	mvns	r3, r3
 800ab70:	401a      	ands	r2, r3
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800ab76:	697b      	ldr	r3, [r7, #20]
 800ab78:	3301      	adds	r3, #1
 800ab7a:	617b      	str	r3, [r7, #20]
 800ab7c:	697b      	ldr	r3, [r7, #20]
 800ab7e:	2b0f      	cmp	r3, #15
 800ab80:	f67f af22 	bls.w	800a9c8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800ab84:	bf00      	nop
 800ab86:	bf00      	nop
 800ab88:	371c      	adds	r7, #28
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab90:	4770      	bx	lr
 800ab92:	bf00      	nop
 800ab94:	40013800 	.word	0x40013800
 800ab98:	40020000 	.word	0x40020000
 800ab9c:	40020400 	.word	0x40020400
 800aba0:	40020800 	.word	0x40020800
 800aba4:	40020c00 	.word	0x40020c00
 800aba8:	40021000 	.word	0x40021000
 800abac:	40021400 	.word	0x40021400
 800abb0:	40021800 	.word	0x40021800
 800abb4:	40021c00 	.word	0x40021c00
 800abb8:	40022000 	.word	0x40022000
 800abbc:	40022400 	.word	0x40022400
 800abc0:	40013c00 	.word	0x40013c00

0800abc4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800abc4:	b480      	push	{r7}
 800abc6:	b085      	sub	sp, #20
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
 800abcc:	460b      	mov	r3, r1
 800abce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	691a      	ldr	r2, [r3, #16]
 800abd4:	887b      	ldrh	r3, [r7, #2]
 800abd6:	4013      	ands	r3, r2
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d002      	beq.n	800abe2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800abdc:	2301      	movs	r3, #1
 800abde:	73fb      	strb	r3, [r7, #15]
 800abe0:	e001      	b.n	800abe6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800abe2:	2300      	movs	r3, #0
 800abe4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800abe6:	7bfb      	ldrb	r3, [r7, #15]
}
 800abe8:	4618      	mov	r0, r3
 800abea:	3714      	adds	r7, #20
 800abec:	46bd      	mov	sp, r7
 800abee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf2:	4770      	bx	lr

0800abf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800abf4:	b480      	push	{r7}
 800abf6:	b083      	sub	sp, #12
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
 800abfc:	460b      	mov	r3, r1
 800abfe:	807b      	strh	r3, [r7, #2]
 800ac00:	4613      	mov	r3, r2
 800ac02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800ac04:	787b      	ldrb	r3, [r7, #1]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d003      	beq.n	800ac12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ac0a:	887a      	ldrh	r2, [r7, #2]
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800ac10:	e003      	b.n	800ac1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800ac12:	887b      	ldrh	r3, [r7, #2]
 800ac14:	041a      	lsls	r2, r3, #16
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	619a      	str	r2, [r3, #24]
}
 800ac1a:	bf00      	nop
 800ac1c:	370c      	adds	r7, #12
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac24:	4770      	bx	lr
	...

0800ac28 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b083      	sub	sp, #12
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
 800ac30:	460b      	mov	r3, r1
 800ac32:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800ac34:	4b0c      	ldr	r3, [pc, #48]	; (800ac68 <HAL_PWR_EnterSLEEPMode+0x40>)
 800ac36:	691b      	ldr	r3, [r3, #16]
 800ac38:	4a0b      	ldr	r2, [pc, #44]	; (800ac68 <HAL_PWR_EnterSLEEPMode+0x40>)
 800ac3a:	f023 0304 	bic.w	r3, r3, #4
 800ac3e:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 800ac40:	f3bf 8f4f 	dsb	sy
}
 800ac44:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800ac46:	f3bf 8f6f 	isb	sy
}
 800ac4a:	bf00      	nop
  /* Ensure that all instructions done before entering SLEEP mode */
  __DSB();
  __ISB();

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800ac4c:	78fb      	ldrb	r3, [r7, #3]
 800ac4e:	2b01      	cmp	r3, #1
 800ac50:	d101      	bne.n	800ac56 <HAL_PWR_EnterSLEEPMode+0x2e>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 800ac52:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 800ac54:	e002      	b.n	800ac5c <HAL_PWR_EnterSLEEPMode+0x34>
    __SEV();
 800ac56:	bf40      	sev
    __WFE();
 800ac58:	bf20      	wfe
    __WFE();
 800ac5a:	bf20      	wfe
}
 800ac5c:	bf00      	nop
 800ac5e:	370c      	adds	r7, #12
 800ac60:	46bd      	mov	sp, r7
 800ac62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac66:	4770      	bx	lr
 800ac68:	e000ed00 	.word	0xe000ed00

0800ac6c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b082      	sub	sp, #8
 800ac70:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800ac72:	2300      	movs	r3, #0
 800ac74:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800ac76:	4b23      	ldr	r3, [pc, #140]	; (800ad04 <HAL_PWREx_EnableOverDrive+0x98>)
 800ac78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac7a:	4a22      	ldr	r2, [pc, #136]	; (800ad04 <HAL_PWREx_EnableOverDrive+0x98>)
 800ac7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac80:	6413      	str	r3, [r2, #64]	; 0x40
 800ac82:	4b20      	ldr	r3, [pc, #128]	; (800ad04 <HAL_PWREx_EnableOverDrive+0x98>)
 800ac84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac8a:	603b      	str	r3, [r7, #0]
 800ac8c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800ac8e:	4b1e      	ldr	r3, [pc, #120]	; (800ad08 <HAL_PWREx_EnableOverDrive+0x9c>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	4a1d      	ldr	r2, [pc, #116]	; (800ad08 <HAL_PWREx_EnableOverDrive+0x9c>)
 800ac94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ac98:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ac9a:	f7fe fa11 	bl	80090c0 <HAL_GetTick>
 800ac9e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800aca0:	e009      	b.n	800acb6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800aca2:	f7fe fa0d 	bl	80090c0 <HAL_GetTick>
 800aca6:	4602      	mov	r2, r0
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	1ad3      	subs	r3, r2, r3
 800acac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800acb0:	d901      	bls.n	800acb6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800acb2:	2303      	movs	r3, #3
 800acb4:	e022      	b.n	800acfc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800acb6:	4b14      	ldr	r3, [pc, #80]	; (800ad08 <HAL_PWREx_EnableOverDrive+0x9c>)
 800acb8:	685b      	ldr	r3, [r3, #4]
 800acba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800acbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800acc2:	d1ee      	bne.n	800aca2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800acc4:	4b10      	ldr	r3, [pc, #64]	; (800ad08 <HAL_PWREx_EnableOverDrive+0x9c>)
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	4a0f      	ldr	r2, [pc, #60]	; (800ad08 <HAL_PWREx_EnableOverDrive+0x9c>)
 800acca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800acce:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800acd0:	f7fe f9f6 	bl	80090c0 <HAL_GetTick>
 800acd4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800acd6:	e009      	b.n	800acec <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800acd8:	f7fe f9f2 	bl	80090c0 <HAL_GetTick>
 800acdc:	4602      	mov	r2, r0
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	1ad3      	subs	r3, r2, r3
 800ace2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ace6:	d901      	bls.n	800acec <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800ace8:	2303      	movs	r3, #3
 800acea:	e007      	b.n	800acfc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800acec:	4b06      	ldr	r3, [pc, #24]	; (800ad08 <HAL_PWREx_EnableOverDrive+0x9c>)
 800acee:	685b      	ldr	r3, [r3, #4]
 800acf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800acf4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800acf8:	d1ee      	bne.n	800acd8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800acfa:	2300      	movs	r3, #0
}
 800acfc:	4618      	mov	r0, r3
 800acfe:	3708      	adds	r7, #8
 800ad00:	46bd      	mov	sp, r7
 800ad02:	bd80      	pop	{r7, pc}
 800ad04:	40023800 	.word	0x40023800
 800ad08:	40007000 	.word	0x40007000

0800ad0c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b086      	sub	sp, #24
 800ad10:	af02      	add	r7, sp, #8
 800ad12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800ad14:	f7fe f9d4 	bl	80090c0 <HAL_GetTick>
 800ad18:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d101      	bne.n	800ad24 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800ad20:	2301      	movs	r3, #1
 800ad22:	e067      	b.n	800adf4 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ad2a:	b2db      	uxtb	r3, r3
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d10b      	bne.n	800ad48 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2200      	movs	r2, #0
 800ad34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800ad38:	6878      	ldr	r0, [r7, #4]
 800ad3a:	f7f8 fe0f 	bl	800395c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800ad3e:	f241 3188 	movw	r1, #5000	; 0x1388
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f000 fa86 	bl	800b254 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	689b      	ldr	r3, [r3, #8]
 800ad56:	3b01      	subs	r3, #1
 800ad58:	021a      	lsls	r2, r3, #8
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	430a      	orrs	r2, r1
 800ad60:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad66:	9300      	str	r3, [sp, #0]
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	2120      	movs	r1, #32
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	f000 fa7e 	bl	800b270 <QSPI_WaitFlagStateUntilTimeout>
 800ad74:	4603      	mov	r3, r0
 800ad76:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800ad78:	7afb      	ldrb	r3, [r7, #11]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d135      	bne.n	800adea <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	681a      	ldr	r2, [r3, #0]
 800ad84:	4b1d      	ldr	r3, [pc, #116]	; (800adfc <HAL_QSPI_Init+0xf0>)
 800ad86:	4013      	ands	r3, r2
 800ad88:	687a      	ldr	r2, [r7, #4]
 800ad8a:	6852      	ldr	r2, [r2, #4]
 800ad8c:	0611      	lsls	r1, r2, #24
 800ad8e:	687a      	ldr	r2, [r7, #4]
 800ad90:	68d2      	ldr	r2, [r2, #12]
 800ad92:	4311      	orrs	r1, r2
 800ad94:	687a      	ldr	r2, [r7, #4]
 800ad96:	69d2      	ldr	r2, [r2, #28]
 800ad98:	4311      	orrs	r1, r2
 800ad9a:	687a      	ldr	r2, [r7, #4]
 800ad9c:	6a12      	ldr	r2, [r2, #32]
 800ad9e:	4311      	orrs	r1, r2
 800ada0:	687a      	ldr	r2, [r7, #4]
 800ada2:	6812      	ldr	r2, [r2, #0]
 800ada4:	430b      	orrs	r3, r1
 800ada6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	685a      	ldr	r2, [r3, #4]
 800adae:	4b14      	ldr	r3, [pc, #80]	; (800ae00 <HAL_QSPI_Init+0xf4>)
 800adb0:	4013      	ands	r3, r2
 800adb2:	687a      	ldr	r2, [r7, #4]
 800adb4:	6912      	ldr	r2, [r2, #16]
 800adb6:	0411      	lsls	r1, r2, #16
 800adb8:	687a      	ldr	r2, [r7, #4]
 800adba:	6952      	ldr	r2, [r2, #20]
 800adbc:	4311      	orrs	r1, r2
 800adbe:	687a      	ldr	r2, [r7, #4]
 800adc0:	6992      	ldr	r2, [r2, #24]
 800adc2:	4311      	orrs	r1, r2
 800adc4:	687a      	ldr	r2, [r7, #4]
 800adc6:	6812      	ldr	r2, [r2, #0]
 800adc8:	430b      	orrs	r3, r1
 800adca:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	681a      	ldr	r2, [r3, #0]
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	f042 0201 	orr.w	r2, r2, #1
 800adda:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2200      	movs	r2, #0
 800ade0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2201      	movs	r2, #1
 800ade6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2200      	movs	r2, #0
 800adee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800adf2:	7afb      	ldrb	r3, [r7, #11]
}
 800adf4:	4618      	mov	r0, r3
 800adf6:	3710      	adds	r7, #16
 800adf8:	46bd      	mov	sp, r7
 800adfa:	bd80      	pop	{r7, pc}
 800adfc:	00ffff2f 	.word	0x00ffff2f
 800ae00:	ffe0f8fe 	.word	0xffe0f8fe

0800ae04 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b082      	sub	sp, #8
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d101      	bne.n	800ae16 <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800ae12:	2301      	movs	r3, #1
 800ae14:	e016      	b.n	800ae44 <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	681a      	ldr	r2, [r3, #0]
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	f022 0201 	bic.w	r2, r2, #1
 800ae24:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	f7f8 fe48 	bl	8003abc <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2200      	movs	r2, #0
 800ae30:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	2200      	movs	r2, #0
 800ae36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800ae42:	2300      	movs	r3, #0
}
 800ae44:	4618      	mov	r0, r3
 800ae46:	3708      	adds	r7, #8
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	bd80      	pop	{r7, pc}

0800ae4c <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b088      	sub	sp, #32
 800ae50:	af02      	add	r7, sp, #8
 800ae52:	60f8      	str	r0, [r7, #12]
 800ae54:	60b9      	str	r1, [r7, #8]
 800ae56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800ae58:	f7fe f932 	bl	80090c0 <HAL_GetTick>
 800ae5c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ae64:	b2db      	uxtb	r3, r3
 800ae66:	2b01      	cmp	r3, #1
 800ae68:	d101      	bne.n	800ae6e <HAL_QSPI_Command+0x22>
 800ae6a:	2302      	movs	r3, #2
 800ae6c:	e048      	b.n	800af00 <HAL_QSPI_Command+0xb4>
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	2201      	movs	r2, #1
 800ae72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ae7c:	b2db      	uxtb	r3, r3
 800ae7e:	2b01      	cmp	r3, #1
 800ae80:	d137      	bne.n	800aef2 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	2200      	movs	r2, #0
 800ae86:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	2202      	movs	r2, #2
 800ae8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	9300      	str	r3, [sp, #0]
 800ae94:	693b      	ldr	r3, [r7, #16]
 800ae96:	2200      	movs	r2, #0
 800ae98:	2120      	movs	r1, #32
 800ae9a:	68f8      	ldr	r0, [r7, #12]
 800ae9c:	f000 f9e8 	bl	800b270 <QSPI_WaitFlagStateUntilTimeout>
 800aea0:	4603      	mov	r3, r0
 800aea2:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800aea4:	7dfb      	ldrb	r3, [r7, #23]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d125      	bne.n	800aef6 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800aeaa:	2200      	movs	r2, #0
 800aeac:	68b9      	ldr	r1, [r7, #8]
 800aeae:	68f8      	ldr	r0, [r7, #12]
 800aeb0:	f000 fa15 	bl	800b2de <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800aeb4:	68bb      	ldr	r3, [r7, #8]
 800aeb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d115      	bne.n	800aee8 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	9300      	str	r3, [sp, #0]
 800aec0:	693b      	ldr	r3, [r7, #16]
 800aec2:	2201      	movs	r2, #1
 800aec4:	2102      	movs	r1, #2
 800aec6:	68f8      	ldr	r0, [r7, #12]
 800aec8:	f000 f9d2 	bl	800b270 <QSPI_WaitFlagStateUntilTimeout>
 800aecc:	4603      	mov	r3, r0
 800aece:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800aed0:	7dfb      	ldrb	r3, [r7, #23]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d10f      	bne.n	800aef6 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	2202      	movs	r2, #2
 800aedc:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	2201      	movs	r2, #1
 800aee2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800aee6:	e006      	b.n	800aef6 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	2201      	movs	r2, #1
 800aeec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800aef0:	e001      	b.n	800aef6 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800aef2:	2302      	movs	r3, #2
 800aef4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	2200      	movs	r2, #0
 800aefa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800aefe:	7dfb      	ldrb	r3, [r7, #23]
}
 800af00:	4618      	mov	r0, r3
 800af02:	3718      	adds	r7, #24
 800af04:	46bd      	mov	sp, r7
 800af06:	bd80      	pop	{r7, pc}

0800af08 <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b08a      	sub	sp, #40	; 0x28
 800af0c:	af02      	add	r7, sp, #8
 800af0e:	60f8      	str	r0, [r7, #12]
 800af10:	60b9      	str	r1, [r7, #8]
 800af12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800af14:	2300      	movs	r3, #0
 800af16:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800af18:	f7fe f8d2 	bl	80090c0 <HAL_GetTick>
 800af1c:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	3320      	adds	r3, #32
 800af24:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800af2c:	b2db      	uxtb	r3, r3
 800af2e:	2b01      	cmp	r3, #1
 800af30:	d101      	bne.n	800af36 <HAL_QSPI_Transmit+0x2e>
 800af32:	2302      	movs	r3, #2
 800af34:	e076      	b.n	800b024 <HAL_QSPI_Transmit+0x11c>
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	2201      	movs	r2, #1
 800af3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800af44:	b2db      	uxtb	r3, r3
 800af46:	2b01      	cmp	r3, #1
 800af48:	d165      	bne.n	800b016 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	2200      	movs	r2, #0
 800af4e:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800af50:	68bb      	ldr	r3, [r7, #8]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d056      	beq.n	800b004 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	2212      	movs	r2, #18
 800af5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	691b      	ldr	r3, [r3, #16]
 800af64:	1c5a      	adds	r2, r3, #1
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	691b      	ldr	r3, [r3, #16]
 800af70:	1c5a      	adds	r2, r3, #1
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	68ba      	ldr	r2, [r7, #8]
 800af7a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	695a      	ldr	r2, [r3, #20]
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800af8a:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800af8c:	e01b      	b.n	800afc6 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	9300      	str	r3, [sp, #0]
 800af92:	69bb      	ldr	r3, [r7, #24]
 800af94:	2201      	movs	r2, #1
 800af96:	2104      	movs	r1, #4
 800af98:	68f8      	ldr	r0, [r7, #12]
 800af9a:	f000 f969 	bl	800b270 <QSPI_WaitFlagStateUntilTimeout>
 800af9e:	4603      	mov	r3, r0
 800afa0:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800afa2:	7ffb      	ldrb	r3, [r7, #31]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d113      	bne.n	800afd0 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afac:	781a      	ldrb	r2, [r3, #0]
 800afae:	697b      	ldr	r3, [r7, #20]
 800afb0:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afb6:	1c5a      	adds	r2, r3, #1
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afc0:	1e5a      	subs	r2, r3, #1
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d1df      	bne.n	800af8e <HAL_QSPI_Transmit+0x86>
 800afce:	e000      	b.n	800afd2 <HAL_QSPI_Transmit+0xca>
          break;
 800afd0:	bf00      	nop
      }

      if (status == HAL_OK)
 800afd2:	7ffb      	ldrb	r3, [r7, #31]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d110      	bne.n	800affa <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	9300      	str	r3, [sp, #0]
 800afdc:	69bb      	ldr	r3, [r7, #24]
 800afde:	2201      	movs	r2, #1
 800afe0:	2102      	movs	r1, #2
 800afe2:	68f8      	ldr	r0, [r7, #12]
 800afe4:	f000 f944 	bl	800b270 <QSPI_WaitFlagStateUntilTimeout>
 800afe8:	4603      	mov	r3, r0
 800afea:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800afec:	7ffb      	ldrb	r3, [r7, #31]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d103      	bne.n	800affa <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	2202      	movs	r2, #2
 800aff8:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	2201      	movs	r2, #1
 800affe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b002:	e00a      	b.n	800b01a <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b008:	f043 0208 	orr.w	r2, r3, #8
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800b010:	2301      	movs	r3, #1
 800b012:	77fb      	strb	r3, [r7, #31]
 800b014:	e001      	b.n	800b01a <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 800b016:	2302      	movs	r3, #2
 800b018:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	2200      	movs	r2, #0
 800b01e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800b022:	7ffb      	ldrb	r3, [r7, #31]
}
 800b024:	4618      	mov	r0, r3
 800b026:	3720      	adds	r7, #32
 800b028:	46bd      	mov	sp, r7
 800b02a:	bd80      	pop	{r7, pc}

0800b02c <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b08a      	sub	sp, #40	; 0x28
 800b030:	af02      	add	r7, sp, #8
 800b032:	60f8      	str	r0, [r7, #12]
 800b034:	60b9      	str	r1, [r7, #8]
 800b036:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b038:	2300      	movs	r3, #0
 800b03a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800b03c:	f7fe f840 	bl	80090c0 <HAL_GetTick>
 800b040:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	699b      	ldr	r3, [r3, #24]
 800b048:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	3320      	adds	r3, #32
 800b050:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b058:	b2db      	uxtb	r3, r3
 800b05a:	2b01      	cmp	r3, #1
 800b05c:	d101      	bne.n	800b062 <HAL_QSPI_Receive+0x36>
 800b05e:	2302      	movs	r3, #2
 800b060:	e07d      	b.n	800b15e <HAL_QSPI_Receive+0x132>
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	2201      	movs	r2, #1
 800b066:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b070:	b2db      	uxtb	r3, r3
 800b072:	2b01      	cmp	r3, #1
 800b074:	d16c      	bne.n	800b150 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	2200      	movs	r2, #0
 800b07a:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800b07c:	68bb      	ldr	r3, [r7, #8]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d05d      	beq.n	800b13e <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	2222      	movs	r2, #34	; 0x22
 800b086:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	691b      	ldr	r3, [r3, #16]
 800b090:	1c5a      	adds	r2, r3, #1
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	691b      	ldr	r3, [r3, #16]
 800b09c:	1c5a      	adds	r2, r3, #1
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	68ba      	ldr	r2, [r7, #8]
 800b0a6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	695b      	ldr	r3, [r3, #20]
 800b0ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800b0ba:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	697a      	ldr	r2, [r7, #20]
 800b0c2:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800b0c4:	e01c      	b.n	800b100 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	9300      	str	r3, [sp, #0]
 800b0ca:	69bb      	ldr	r3, [r7, #24]
 800b0cc:	2201      	movs	r2, #1
 800b0ce:	2106      	movs	r1, #6
 800b0d0:	68f8      	ldr	r0, [r7, #12]
 800b0d2:	f000 f8cd 	bl	800b270 <QSPI_WaitFlagStateUntilTimeout>
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800b0da:	7ffb      	ldrb	r3, [r7, #31]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d114      	bne.n	800b10a <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0e4:	693a      	ldr	r2, [r7, #16]
 800b0e6:	7812      	ldrb	r2, [r2, #0]
 800b0e8:	b2d2      	uxtb	r2, r2
 800b0ea:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0f0:	1c5a      	adds	r2, r3, #1
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0fa:	1e5a      	subs	r2, r3, #1
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b104:	2b00      	cmp	r3, #0
 800b106:	d1de      	bne.n	800b0c6 <HAL_QSPI_Receive+0x9a>
 800b108:	e000      	b.n	800b10c <HAL_QSPI_Receive+0xe0>
          break;
 800b10a:	bf00      	nop
      }

      if (status == HAL_OK)
 800b10c:	7ffb      	ldrb	r3, [r7, #31]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d110      	bne.n	800b134 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	9300      	str	r3, [sp, #0]
 800b116:	69bb      	ldr	r3, [r7, #24]
 800b118:	2201      	movs	r2, #1
 800b11a:	2102      	movs	r1, #2
 800b11c:	68f8      	ldr	r0, [r7, #12]
 800b11e:	f000 f8a7 	bl	800b270 <QSPI_WaitFlagStateUntilTimeout>
 800b122:	4603      	mov	r3, r0
 800b124:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800b126:	7ffb      	ldrb	r3, [r7, #31]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d103      	bne.n	800b134 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	2202      	movs	r2, #2
 800b132:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	2201      	movs	r2, #1
 800b138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b13c:	e00a      	b.n	800b154 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b142:	f043 0208 	orr.w	r2, r3, #8
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800b14a:	2301      	movs	r3, #1
 800b14c:	77fb      	strb	r3, [r7, #31]
 800b14e:	e001      	b.n	800b154 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 800b150:	2302      	movs	r3, #2
 800b152:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	2200      	movs	r2, #0
 800b158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800b15c:	7ffb      	ldrb	r3, [r7, #31]
}
 800b15e:	4618      	mov	r0, r3
 800b160:	3720      	adds	r7, #32
 800b162:	46bd      	mov	sp, r7
 800b164:	bd80      	pop	{r7, pc}

0800b166 <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800b166:	b580      	push	{r7, lr}
 800b168:	b088      	sub	sp, #32
 800b16a:	af02      	add	r7, sp, #8
 800b16c:	60f8      	str	r0, [r7, #12]
 800b16e:	60b9      	str	r1, [r7, #8]
 800b170:	607a      	str	r2, [r7, #4]
 800b172:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800b174:	f7fd ffa4 	bl	80090c0 <HAL_GetTick>
 800b178:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b180:	b2db      	uxtb	r3, r3
 800b182:	2b01      	cmp	r3, #1
 800b184:	d101      	bne.n	800b18a <HAL_QSPI_AutoPolling+0x24>
 800b186:	2302      	movs	r3, #2
 800b188:	e060      	b.n	800b24c <HAL_QSPI_AutoPolling+0xe6>
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	2201      	movs	r2, #1
 800b18e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b198:	b2db      	uxtb	r3, r3
 800b19a:	2b01      	cmp	r3, #1
 800b19c:	d14f      	bne.n	800b23e <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	2242      	movs	r2, #66	; 0x42
 800b1a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	9300      	str	r3, [sp, #0]
 800b1b0:	693b      	ldr	r3, [r7, #16]
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	2120      	movs	r1, #32
 800b1b6:	68f8      	ldr	r0, [r7, #12]
 800b1b8:	f000 f85a 	bl	800b270 <QSPI_WaitFlagStateUntilTimeout>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800b1c0:	7dfb      	ldrb	r3, [r7, #23]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d13d      	bne.n	800b242 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	687a      	ldr	r2, [r7, #4]
 800b1cc:	6812      	ldr	r2, [r2, #0]
 800b1ce:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	687a      	ldr	r2, [r7, #4]
 800b1d6:	6852      	ldr	r2, [r2, #4]
 800b1d8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	687a      	ldr	r2, [r7, #4]
 800b1e0:	6892      	ldr	r2, [r2, #8]
 800b1e2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	691b      	ldr	r3, [r3, #16]
 800b1f2:	431a      	orrs	r2, r3
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800b1fc:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	68da      	ldr	r2, [r3, #12]
 800b202:	68bb      	ldr	r3, [r7, #8]
 800b204:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800b206:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b20a:	68b9      	ldr	r1, [r7, #8]
 800b20c:	68f8      	ldr	r0, [r7, #12]
 800b20e:	f000 f866 	bl	800b2de <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	9300      	str	r3, [sp, #0]
 800b216:	693b      	ldr	r3, [r7, #16]
 800b218:	2201      	movs	r2, #1
 800b21a:	2108      	movs	r1, #8
 800b21c:	68f8      	ldr	r0, [r7, #12]
 800b21e:	f000 f827 	bl	800b270 <QSPI_WaitFlagStateUntilTimeout>
 800b222:	4603      	mov	r3, r0
 800b224:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800b226:	7dfb      	ldrb	r3, [r7, #23]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d10a      	bne.n	800b242 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	2208      	movs	r2, #8
 800b232:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	2201      	movs	r2, #1
 800b238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b23c:	e001      	b.n	800b242 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800b23e:	2302      	movs	r3, #2
 800b240:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	2200      	movs	r2, #0
 800b246:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800b24a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b24c:	4618      	mov	r0, r3
 800b24e:	3718      	adds	r7, #24
 800b250:	46bd      	mov	sp, r7
 800b252:	bd80      	pop	{r7, pc}

0800b254 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800b254:	b480      	push	{r7}
 800b256:	b083      	sub	sp, #12
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
 800b25c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	683a      	ldr	r2, [r7, #0]
 800b262:	649a      	str	r2, [r3, #72]	; 0x48
}
 800b264:	bf00      	nop
 800b266:	370c      	adds	r7, #12
 800b268:	46bd      	mov	sp, r7
 800b26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26e:	4770      	bx	lr

0800b270 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b084      	sub	sp, #16
 800b274:	af00      	add	r7, sp, #0
 800b276:	60f8      	str	r0, [r7, #12]
 800b278:	60b9      	str	r1, [r7, #8]
 800b27a:	603b      	str	r3, [r7, #0]
 800b27c:	4613      	mov	r3, r2
 800b27e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800b280:	e01a      	b.n	800b2b8 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b282:	69bb      	ldr	r3, [r7, #24]
 800b284:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b288:	d016      	beq.n	800b2b8 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b28a:	f7fd ff19 	bl	80090c0 <HAL_GetTick>
 800b28e:	4602      	mov	r2, r0
 800b290:	683b      	ldr	r3, [r7, #0]
 800b292:	1ad3      	subs	r3, r2, r3
 800b294:	69ba      	ldr	r2, [r7, #24]
 800b296:	429a      	cmp	r2, r3
 800b298:	d302      	bcc.n	800b2a0 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800b29a:	69bb      	ldr	r3, [r7, #24]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d10b      	bne.n	800b2b8 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	2204      	movs	r2, #4
 800b2a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2ac:	f043 0201 	orr.w	r2, r3, #1
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800b2b4:	2301      	movs	r3, #1
 800b2b6:	e00e      	b.n	800b2d6 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	689a      	ldr	r2, [r3, #8]
 800b2be:	68bb      	ldr	r3, [r7, #8]
 800b2c0:	4013      	ands	r3, r2
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	bf14      	ite	ne
 800b2c6:	2301      	movne	r3, #1
 800b2c8:	2300      	moveq	r3, #0
 800b2ca:	b2db      	uxtb	r3, r3
 800b2cc:	461a      	mov	r2, r3
 800b2ce:	79fb      	ldrb	r3, [r7, #7]
 800b2d0:	429a      	cmp	r2, r3
 800b2d2:	d1d6      	bne.n	800b282 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b2d4:	2300      	movs	r3, #0
}
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	3710      	adds	r7, #16
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bd80      	pop	{r7, pc}

0800b2de <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800b2de:	b480      	push	{r7}
 800b2e0:	b085      	sub	sp, #20
 800b2e2:	af00      	add	r7, sp, #0
 800b2e4:	60f8      	str	r0, [r7, #12]
 800b2e6:	60b9      	str	r1, [r7, #8]
 800b2e8:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800b2ea:	68bb      	ldr	r3, [r7, #8]
 800b2ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d009      	beq.n	800b306 <QSPI_Config+0x28>
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b2f8:	d005      	beq.n	800b306 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800b2fa:	68bb      	ldr	r3, [r7, #8]
 800b2fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	3a01      	subs	r2, #1
 800b304:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800b306:	68bb      	ldr	r3, [r7, #8]
 800b308:	699b      	ldr	r3, [r3, #24]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	f000 80b9 	beq.w	800b482 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800b310:	68bb      	ldr	r3, [r7, #8]
 800b312:	6a1b      	ldr	r3, [r3, #32]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d05f      	beq.n	800b3d8 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	68ba      	ldr	r2, [r7, #8]
 800b31e:	6892      	ldr	r2, [r2, #8]
 800b320:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800b322:	68bb      	ldr	r3, [r7, #8]
 800b324:	69db      	ldr	r3, [r3, #28]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d031      	beq.n	800b38e <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b32a:	68bb      	ldr	r3, [r7, #8]
 800b32c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b32e:	68bb      	ldr	r3, [r7, #8]
 800b330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b332:	431a      	orrs	r2, r3
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b338:	431a      	orrs	r2, r3
 800b33a:	68bb      	ldr	r3, [r7, #8]
 800b33c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b33e:	431a      	orrs	r2, r3
 800b340:	68bb      	ldr	r3, [r7, #8]
 800b342:	695b      	ldr	r3, [r3, #20]
 800b344:	049b      	lsls	r3, r3, #18
 800b346:	431a      	orrs	r2, r3
 800b348:	68bb      	ldr	r3, [r7, #8]
 800b34a:	691b      	ldr	r3, [r3, #16]
 800b34c:	431a      	orrs	r2, r3
 800b34e:	68bb      	ldr	r3, [r7, #8]
 800b350:	6a1b      	ldr	r3, [r3, #32]
 800b352:	431a      	orrs	r2, r3
 800b354:	68bb      	ldr	r3, [r7, #8]
 800b356:	68db      	ldr	r3, [r3, #12]
 800b358:	431a      	orrs	r2, r3
 800b35a:	68bb      	ldr	r3, [r7, #8]
 800b35c:	69db      	ldr	r3, [r3, #28]
 800b35e:	431a      	orrs	r2, r3
 800b360:	68bb      	ldr	r3, [r7, #8]
 800b362:	699b      	ldr	r3, [r3, #24]
 800b364:	431a      	orrs	r2, r3
 800b366:	68bb      	ldr	r3, [r7, #8]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	ea42 0103 	orr.w	r1, r2, r3
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	687a      	ldr	r2, [r7, #4]
 800b374:	430a      	orrs	r2, r1
 800b376:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b37e:	f000 812e 	beq.w	800b5de <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	68ba      	ldr	r2, [r7, #8]
 800b388:	6852      	ldr	r2, [r2, #4]
 800b38a:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800b38c:	e127      	b.n	800b5de <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b38e:	68bb      	ldr	r3, [r7, #8]
 800b390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b392:	68bb      	ldr	r3, [r7, #8]
 800b394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b396:	431a      	orrs	r2, r3
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b39c:	431a      	orrs	r2, r3
 800b39e:	68bb      	ldr	r3, [r7, #8]
 800b3a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3a2:	431a      	orrs	r2, r3
 800b3a4:	68bb      	ldr	r3, [r7, #8]
 800b3a6:	695b      	ldr	r3, [r3, #20]
 800b3a8:	049b      	lsls	r3, r3, #18
 800b3aa:	431a      	orrs	r2, r3
 800b3ac:	68bb      	ldr	r3, [r7, #8]
 800b3ae:	691b      	ldr	r3, [r3, #16]
 800b3b0:	431a      	orrs	r2, r3
 800b3b2:	68bb      	ldr	r3, [r7, #8]
 800b3b4:	6a1b      	ldr	r3, [r3, #32]
 800b3b6:	431a      	orrs	r2, r3
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	69db      	ldr	r3, [r3, #28]
 800b3bc:	431a      	orrs	r2, r3
 800b3be:	68bb      	ldr	r3, [r7, #8]
 800b3c0:	699b      	ldr	r3, [r3, #24]
 800b3c2:	431a      	orrs	r2, r3
 800b3c4:	68bb      	ldr	r3, [r7, #8]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	ea42 0103 	orr.w	r1, r2, r3
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	687a      	ldr	r2, [r7, #4]
 800b3d2:	430a      	orrs	r2, r1
 800b3d4:	615a      	str	r2, [r3, #20]
}
 800b3d6:	e102      	b.n	800b5de <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800b3d8:	68bb      	ldr	r3, [r7, #8]
 800b3da:	69db      	ldr	r3, [r3, #28]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d02e      	beq.n	800b43e <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3e4:	68bb      	ldr	r3, [r7, #8]
 800b3e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3e8:	431a      	orrs	r2, r3
 800b3ea:	68bb      	ldr	r3, [r7, #8]
 800b3ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3ee:	431a      	orrs	r2, r3
 800b3f0:	68bb      	ldr	r3, [r7, #8]
 800b3f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3f4:	431a      	orrs	r2, r3
 800b3f6:	68bb      	ldr	r3, [r7, #8]
 800b3f8:	695b      	ldr	r3, [r3, #20]
 800b3fa:	049b      	lsls	r3, r3, #18
 800b3fc:	431a      	orrs	r2, r3
 800b3fe:	68bb      	ldr	r3, [r7, #8]
 800b400:	6a1b      	ldr	r3, [r3, #32]
 800b402:	431a      	orrs	r2, r3
 800b404:	68bb      	ldr	r3, [r7, #8]
 800b406:	68db      	ldr	r3, [r3, #12]
 800b408:	431a      	orrs	r2, r3
 800b40a:	68bb      	ldr	r3, [r7, #8]
 800b40c:	69db      	ldr	r3, [r3, #28]
 800b40e:	431a      	orrs	r2, r3
 800b410:	68bb      	ldr	r3, [r7, #8]
 800b412:	699b      	ldr	r3, [r3, #24]
 800b414:	431a      	orrs	r2, r3
 800b416:	68bb      	ldr	r3, [r7, #8]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	ea42 0103 	orr.w	r1, r2, r3
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	687a      	ldr	r2, [r7, #4]
 800b424:	430a      	orrs	r2, r1
 800b426:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b42e:	f000 80d6 	beq.w	800b5de <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	68ba      	ldr	r2, [r7, #8]
 800b438:	6852      	ldr	r2, [r2, #4]
 800b43a:	619a      	str	r2, [r3, #24]
}
 800b43c:	e0cf      	b.n	800b5de <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b43e:	68bb      	ldr	r3, [r7, #8]
 800b440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b442:	68bb      	ldr	r3, [r7, #8]
 800b444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b446:	431a      	orrs	r2, r3
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b44c:	431a      	orrs	r2, r3
 800b44e:	68bb      	ldr	r3, [r7, #8]
 800b450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b452:	431a      	orrs	r2, r3
 800b454:	68bb      	ldr	r3, [r7, #8]
 800b456:	695b      	ldr	r3, [r3, #20]
 800b458:	049b      	lsls	r3, r3, #18
 800b45a:	431a      	orrs	r2, r3
 800b45c:	68bb      	ldr	r3, [r7, #8]
 800b45e:	6a1b      	ldr	r3, [r3, #32]
 800b460:	431a      	orrs	r2, r3
 800b462:	68bb      	ldr	r3, [r7, #8]
 800b464:	69db      	ldr	r3, [r3, #28]
 800b466:	431a      	orrs	r2, r3
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	699b      	ldr	r3, [r3, #24]
 800b46c:	431a      	orrs	r2, r3
 800b46e:	68bb      	ldr	r3, [r7, #8]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	ea42 0103 	orr.w	r1, r2, r3
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	687a      	ldr	r2, [r7, #4]
 800b47c:	430a      	orrs	r2, r1
 800b47e:	615a      	str	r2, [r3, #20]
}
 800b480:	e0ad      	b.n	800b5de <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800b482:	68bb      	ldr	r3, [r7, #8]
 800b484:	6a1b      	ldr	r3, [r3, #32]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d058      	beq.n	800b53c <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	68ba      	ldr	r2, [r7, #8]
 800b490:	6892      	ldr	r2, [r2, #8]
 800b492:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800b494:	68bb      	ldr	r3, [r7, #8]
 800b496:	69db      	ldr	r3, [r3, #28]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d02d      	beq.n	800b4f8 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b49c:	68bb      	ldr	r3, [r7, #8]
 800b49e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4a0:	68bb      	ldr	r3, [r7, #8]
 800b4a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4a4:	431a      	orrs	r2, r3
 800b4a6:	68bb      	ldr	r3, [r7, #8]
 800b4a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4aa:	431a      	orrs	r2, r3
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4b0:	431a      	orrs	r2, r3
 800b4b2:	68bb      	ldr	r3, [r7, #8]
 800b4b4:	695b      	ldr	r3, [r3, #20]
 800b4b6:	049b      	lsls	r3, r3, #18
 800b4b8:	431a      	orrs	r2, r3
 800b4ba:	68bb      	ldr	r3, [r7, #8]
 800b4bc:	691b      	ldr	r3, [r3, #16]
 800b4be:	431a      	orrs	r2, r3
 800b4c0:	68bb      	ldr	r3, [r7, #8]
 800b4c2:	6a1b      	ldr	r3, [r3, #32]
 800b4c4:	431a      	orrs	r2, r3
 800b4c6:	68bb      	ldr	r3, [r7, #8]
 800b4c8:	68db      	ldr	r3, [r3, #12]
 800b4ca:	431a      	orrs	r2, r3
 800b4cc:	68bb      	ldr	r3, [r7, #8]
 800b4ce:	69db      	ldr	r3, [r3, #28]
 800b4d0:	431a      	orrs	r2, r3
 800b4d2:	68bb      	ldr	r3, [r7, #8]
 800b4d4:	699b      	ldr	r3, [r3, #24]
 800b4d6:	ea42 0103 	orr.w	r1, r2, r3
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	687a      	ldr	r2, [r7, #4]
 800b4e0:	430a      	orrs	r2, r1
 800b4e2:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b4ea:	d078      	beq.n	800b5de <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	68ba      	ldr	r2, [r7, #8]
 800b4f2:	6852      	ldr	r2, [r2, #4]
 800b4f4:	619a      	str	r2, [r3, #24]
}
 800b4f6:	e072      	b.n	800b5de <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b4f8:	68bb      	ldr	r3, [r7, #8]
 800b4fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4fc:	68bb      	ldr	r3, [r7, #8]
 800b4fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b500:	431a      	orrs	r2, r3
 800b502:	68bb      	ldr	r3, [r7, #8]
 800b504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b506:	431a      	orrs	r2, r3
 800b508:	68bb      	ldr	r3, [r7, #8]
 800b50a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b50c:	431a      	orrs	r2, r3
 800b50e:	68bb      	ldr	r3, [r7, #8]
 800b510:	695b      	ldr	r3, [r3, #20]
 800b512:	049b      	lsls	r3, r3, #18
 800b514:	431a      	orrs	r2, r3
 800b516:	68bb      	ldr	r3, [r7, #8]
 800b518:	691b      	ldr	r3, [r3, #16]
 800b51a:	431a      	orrs	r2, r3
 800b51c:	68bb      	ldr	r3, [r7, #8]
 800b51e:	6a1b      	ldr	r3, [r3, #32]
 800b520:	431a      	orrs	r2, r3
 800b522:	68bb      	ldr	r3, [r7, #8]
 800b524:	69db      	ldr	r3, [r3, #28]
 800b526:	431a      	orrs	r2, r3
 800b528:	68bb      	ldr	r3, [r7, #8]
 800b52a:	699b      	ldr	r3, [r3, #24]
 800b52c:	ea42 0103 	orr.w	r1, r2, r3
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	687a      	ldr	r2, [r7, #4]
 800b536:	430a      	orrs	r2, r1
 800b538:	615a      	str	r2, [r3, #20]
}
 800b53a:	e050      	b.n	800b5de <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800b53c:	68bb      	ldr	r3, [r7, #8]
 800b53e:	69db      	ldr	r3, [r3, #28]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d02a      	beq.n	800b59a <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b544:	68bb      	ldr	r3, [r7, #8]
 800b546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b548:	68bb      	ldr	r3, [r7, #8]
 800b54a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b54c:	431a      	orrs	r2, r3
 800b54e:	68bb      	ldr	r3, [r7, #8]
 800b550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b552:	431a      	orrs	r2, r3
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b558:	431a      	orrs	r2, r3
 800b55a:	68bb      	ldr	r3, [r7, #8]
 800b55c:	695b      	ldr	r3, [r3, #20]
 800b55e:	049b      	lsls	r3, r3, #18
 800b560:	431a      	orrs	r2, r3
 800b562:	68bb      	ldr	r3, [r7, #8]
 800b564:	6a1b      	ldr	r3, [r3, #32]
 800b566:	431a      	orrs	r2, r3
 800b568:	68bb      	ldr	r3, [r7, #8]
 800b56a:	68db      	ldr	r3, [r3, #12]
 800b56c:	431a      	orrs	r2, r3
 800b56e:	68bb      	ldr	r3, [r7, #8]
 800b570:	69db      	ldr	r3, [r3, #28]
 800b572:	431a      	orrs	r2, r3
 800b574:	68bb      	ldr	r3, [r7, #8]
 800b576:	699b      	ldr	r3, [r3, #24]
 800b578:	ea42 0103 	orr.w	r1, r2, r3
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	687a      	ldr	r2, [r7, #4]
 800b582:	430a      	orrs	r2, r1
 800b584:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b58c:	d027      	beq.n	800b5de <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	68ba      	ldr	r2, [r7, #8]
 800b594:	6852      	ldr	r2, [r2, #4]
 800b596:	619a      	str	r2, [r3, #24]
}
 800b598:	e021      	b.n	800b5de <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800b59a:	68bb      	ldr	r3, [r7, #8]
 800b59c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d01d      	beq.n	800b5de <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800b5a2:	68bb      	ldr	r3, [r7, #8]
 800b5a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5a6:	68bb      	ldr	r3, [r7, #8]
 800b5a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5aa:	431a      	orrs	r2, r3
 800b5ac:	68bb      	ldr	r3, [r7, #8]
 800b5ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5b0:	431a      	orrs	r2, r3
 800b5b2:	68bb      	ldr	r3, [r7, #8]
 800b5b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5b6:	431a      	orrs	r2, r3
 800b5b8:	68bb      	ldr	r3, [r7, #8]
 800b5ba:	695b      	ldr	r3, [r3, #20]
 800b5bc:	049b      	lsls	r3, r3, #18
 800b5be:	431a      	orrs	r2, r3
 800b5c0:	68bb      	ldr	r3, [r7, #8]
 800b5c2:	6a1b      	ldr	r3, [r3, #32]
 800b5c4:	431a      	orrs	r2, r3
 800b5c6:	68bb      	ldr	r3, [r7, #8]
 800b5c8:	69db      	ldr	r3, [r3, #28]
 800b5ca:	431a      	orrs	r2, r3
 800b5cc:	68bb      	ldr	r3, [r7, #8]
 800b5ce:	699b      	ldr	r3, [r3, #24]
 800b5d0:	ea42 0103 	orr.w	r1, r2, r3
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	687a      	ldr	r2, [r7, #4]
 800b5da:	430a      	orrs	r2, r1
 800b5dc:	615a      	str	r2, [r3, #20]
}
 800b5de:	bf00      	nop
 800b5e0:	3714      	adds	r7, #20
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e8:	4770      	bx	lr
	...

0800b5ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b086      	sub	sp, #24
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d101      	bne.n	800b602 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800b5fe:	2301      	movs	r3, #1
 800b600:	e29b      	b.n	800bb3a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	f003 0301 	and.w	r3, r3, #1
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	f000 8087 	beq.w	800b71e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b610:	4b96      	ldr	r3, [pc, #600]	; (800b86c <HAL_RCC_OscConfig+0x280>)
 800b612:	689b      	ldr	r3, [r3, #8]
 800b614:	f003 030c 	and.w	r3, r3, #12
 800b618:	2b04      	cmp	r3, #4
 800b61a:	d00c      	beq.n	800b636 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b61c:	4b93      	ldr	r3, [pc, #588]	; (800b86c <HAL_RCC_OscConfig+0x280>)
 800b61e:	689b      	ldr	r3, [r3, #8]
 800b620:	f003 030c 	and.w	r3, r3, #12
 800b624:	2b08      	cmp	r3, #8
 800b626:	d112      	bne.n	800b64e <HAL_RCC_OscConfig+0x62>
 800b628:	4b90      	ldr	r3, [pc, #576]	; (800b86c <HAL_RCC_OscConfig+0x280>)
 800b62a:	685b      	ldr	r3, [r3, #4]
 800b62c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b630:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b634:	d10b      	bne.n	800b64e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b636:	4b8d      	ldr	r3, [pc, #564]	; (800b86c <HAL_RCC_OscConfig+0x280>)
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d06c      	beq.n	800b71c <HAL_RCC_OscConfig+0x130>
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	685b      	ldr	r3, [r3, #4]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d168      	bne.n	800b71c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800b64a:	2301      	movs	r3, #1
 800b64c:	e275      	b.n	800bb3a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	685b      	ldr	r3, [r3, #4]
 800b652:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b656:	d106      	bne.n	800b666 <HAL_RCC_OscConfig+0x7a>
 800b658:	4b84      	ldr	r3, [pc, #528]	; (800b86c <HAL_RCC_OscConfig+0x280>)
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	4a83      	ldr	r2, [pc, #524]	; (800b86c <HAL_RCC_OscConfig+0x280>)
 800b65e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b662:	6013      	str	r3, [r2, #0]
 800b664:	e02e      	b.n	800b6c4 <HAL_RCC_OscConfig+0xd8>
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	685b      	ldr	r3, [r3, #4]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d10c      	bne.n	800b688 <HAL_RCC_OscConfig+0x9c>
 800b66e:	4b7f      	ldr	r3, [pc, #508]	; (800b86c <HAL_RCC_OscConfig+0x280>)
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	4a7e      	ldr	r2, [pc, #504]	; (800b86c <HAL_RCC_OscConfig+0x280>)
 800b674:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b678:	6013      	str	r3, [r2, #0]
 800b67a:	4b7c      	ldr	r3, [pc, #496]	; (800b86c <HAL_RCC_OscConfig+0x280>)
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	4a7b      	ldr	r2, [pc, #492]	; (800b86c <HAL_RCC_OscConfig+0x280>)
 800b680:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b684:	6013      	str	r3, [r2, #0]
 800b686:	e01d      	b.n	800b6c4 <HAL_RCC_OscConfig+0xd8>
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	685b      	ldr	r3, [r3, #4]
 800b68c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b690:	d10c      	bne.n	800b6ac <HAL_RCC_OscConfig+0xc0>
 800b692:	4b76      	ldr	r3, [pc, #472]	; (800b86c <HAL_RCC_OscConfig+0x280>)
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	4a75      	ldr	r2, [pc, #468]	; (800b86c <HAL_RCC_OscConfig+0x280>)
 800b698:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b69c:	6013      	str	r3, [r2, #0]
 800b69e:	4b73      	ldr	r3, [pc, #460]	; (800b86c <HAL_RCC_OscConfig+0x280>)
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	4a72      	ldr	r2, [pc, #456]	; (800b86c <HAL_RCC_OscConfig+0x280>)
 800b6a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b6a8:	6013      	str	r3, [r2, #0]
 800b6aa:	e00b      	b.n	800b6c4 <HAL_RCC_OscConfig+0xd8>
 800b6ac:	4b6f      	ldr	r3, [pc, #444]	; (800b86c <HAL_RCC_OscConfig+0x280>)
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	4a6e      	ldr	r2, [pc, #440]	; (800b86c <HAL_RCC_OscConfig+0x280>)
 800b6b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b6b6:	6013      	str	r3, [r2, #0]
 800b6b8:	4b6c      	ldr	r3, [pc, #432]	; (800b86c <HAL_RCC_OscConfig+0x280>)
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	4a6b      	ldr	r2, [pc, #428]	; (800b86c <HAL_RCC_OscConfig+0x280>)
 800b6be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b6c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	685b      	ldr	r3, [r3, #4]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d013      	beq.n	800b6f4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b6cc:	f7fd fcf8 	bl	80090c0 <HAL_GetTick>
 800b6d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b6d2:	e008      	b.n	800b6e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b6d4:	f7fd fcf4 	bl	80090c0 <HAL_GetTick>
 800b6d8:	4602      	mov	r2, r0
 800b6da:	693b      	ldr	r3, [r7, #16]
 800b6dc:	1ad3      	subs	r3, r2, r3
 800b6de:	2b64      	cmp	r3, #100	; 0x64
 800b6e0:	d901      	bls.n	800b6e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b6e2:	2303      	movs	r3, #3
 800b6e4:	e229      	b.n	800bb3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b6e6:	4b61      	ldr	r3, [pc, #388]	; (800b86c <HAL_RCC_OscConfig+0x280>)
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d0f0      	beq.n	800b6d4 <HAL_RCC_OscConfig+0xe8>
 800b6f2:	e014      	b.n	800b71e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b6f4:	f7fd fce4 	bl	80090c0 <HAL_GetTick>
 800b6f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b6fa:	e008      	b.n	800b70e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b6fc:	f7fd fce0 	bl	80090c0 <HAL_GetTick>
 800b700:	4602      	mov	r2, r0
 800b702:	693b      	ldr	r3, [r7, #16]
 800b704:	1ad3      	subs	r3, r2, r3
 800b706:	2b64      	cmp	r3, #100	; 0x64
 800b708:	d901      	bls.n	800b70e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800b70a:	2303      	movs	r3, #3
 800b70c:	e215      	b.n	800bb3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b70e:	4b57      	ldr	r3, [pc, #348]	; (800b86c <HAL_RCC_OscConfig+0x280>)
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b716:	2b00      	cmp	r3, #0
 800b718:	d1f0      	bne.n	800b6fc <HAL_RCC_OscConfig+0x110>
 800b71a:	e000      	b.n	800b71e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b71c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	f003 0302 	and.w	r3, r3, #2
 800b726:	2b00      	cmp	r3, #0
 800b728:	d069      	beq.n	800b7fe <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b72a:	4b50      	ldr	r3, [pc, #320]	; (800b86c <HAL_RCC_OscConfig+0x280>)
 800b72c:	689b      	ldr	r3, [r3, #8]
 800b72e:	f003 030c 	and.w	r3, r3, #12
 800b732:	2b00      	cmp	r3, #0
 800b734:	d00b      	beq.n	800b74e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b736:	4b4d      	ldr	r3, [pc, #308]	; (800b86c <HAL_RCC_OscConfig+0x280>)
 800b738:	689b      	ldr	r3, [r3, #8]
 800b73a:	f003 030c 	and.w	r3, r3, #12
 800b73e:	2b08      	cmp	r3, #8
 800b740:	d11c      	bne.n	800b77c <HAL_RCC_OscConfig+0x190>
 800b742:	4b4a      	ldr	r3, [pc, #296]	; (800b86c <HAL_RCC_OscConfig+0x280>)
 800b744:	685b      	ldr	r3, [r3, #4]
 800b746:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d116      	bne.n	800b77c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b74e:	4b47      	ldr	r3, [pc, #284]	; (800b86c <HAL_RCC_OscConfig+0x280>)
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	f003 0302 	and.w	r3, r3, #2
 800b756:	2b00      	cmp	r3, #0
 800b758:	d005      	beq.n	800b766 <HAL_RCC_OscConfig+0x17a>
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	68db      	ldr	r3, [r3, #12]
 800b75e:	2b01      	cmp	r3, #1
 800b760:	d001      	beq.n	800b766 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800b762:	2301      	movs	r3, #1
 800b764:	e1e9      	b.n	800bb3a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b766:	4b41      	ldr	r3, [pc, #260]	; (800b86c <HAL_RCC_OscConfig+0x280>)
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	691b      	ldr	r3, [r3, #16]
 800b772:	00db      	lsls	r3, r3, #3
 800b774:	493d      	ldr	r1, [pc, #244]	; (800b86c <HAL_RCC_OscConfig+0x280>)
 800b776:	4313      	orrs	r3, r2
 800b778:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b77a:	e040      	b.n	800b7fe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	68db      	ldr	r3, [r3, #12]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d023      	beq.n	800b7cc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b784:	4b39      	ldr	r3, [pc, #228]	; (800b86c <HAL_RCC_OscConfig+0x280>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	4a38      	ldr	r2, [pc, #224]	; (800b86c <HAL_RCC_OscConfig+0x280>)
 800b78a:	f043 0301 	orr.w	r3, r3, #1
 800b78e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b790:	f7fd fc96 	bl	80090c0 <HAL_GetTick>
 800b794:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b796:	e008      	b.n	800b7aa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b798:	f7fd fc92 	bl	80090c0 <HAL_GetTick>
 800b79c:	4602      	mov	r2, r0
 800b79e:	693b      	ldr	r3, [r7, #16]
 800b7a0:	1ad3      	subs	r3, r2, r3
 800b7a2:	2b02      	cmp	r3, #2
 800b7a4:	d901      	bls.n	800b7aa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800b7a6:	2303      	movs	r3, #3
 800b7a8:	e1c7      	b.n	800bb3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b7aa:	4b30      	ldr	r3, [pc, #192]	; (800b86c <HAL_RCC_OscConfig+0x280>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	f003 0302 	and.w	r3, r3, #2
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d0f0      	beq.n	800b798 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b7b6:	4b2d      	ldr	r3, [pc, #180]	; (800b86c <HAL_RCC_OscConfig+0x280>)
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	691b      	ldr	r3, [r3, #16]
 800b7c2:	00db      	lsls	r3, r3, #3
 800b7c4:	4929      	ldr	r1, [pc, #164]	; (800b86c <HAL_RCC_OscConfig+0x280>)
 800b7c6:	4313      	orrs	r3, r2
 800b7c8:	600b      	str	r3, [r1, #0]
 800b7ca:	e018      	b.n	800b7fe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b7cc:	4b27      	ldr	r3, [pc, #156]	; (800b86c <HAL_RCC_OscConfig+0x280>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	4a26      	ldr	r2, [pc, #152]	; (800b86c <HAL_RCC_OscConfig+0x280>)
 800b7d2:	f023 0301 	bic.w	r3, r3, #1
 800b7d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b7d8:	f7fd fc72 	bl	80090c0 <HAL_GetTick>
 800b7dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b7de:	e008      	b.n	800b7f2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b7e0:	f7fd fc6e 	bl	80090c0 <HAL_GetTick>
 800b7e4:	4602      	mov	r2, r0
 800b7e6:	693b      	ldr	r3, [r7, #16]
 800b7e8:	1ad3      	subs	r3, r2, r3
 800b7ea:	2b02      	cmp	r3, #2
 800b7ec:	d901      	bls.n	800b7f2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800b7ee:	2303      	movs	r3, #3
 800b7f0:	e1a3      	b.n	800bb3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b7f2:	4b1e      	ldr	r3, [pc, #120]	; (800b86c <HAL_RCC_OscConfig+0x280>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	f003 0302 	and.w	r3, r3, #2
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d1f0      	bne.n	800b7e0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	f003 0308 	and.w	r3, r3, #8
 800b806:	2b00      	cmp	r3, #0
 800b808:	d038      	beq.n	800b87c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	695b      	ldr	r3, [r3, #20]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d019      	beq.n	800b846 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b812:	4b16      	ldr	r3, [pc, #88]	; (800b86c <HAL_RCC_OscConfig+0x280>)
 800b814:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b816:	4a15      	ldr	r2, [pc, #84]	; (800b86c <HAL_RCC_OscConfig+0x280>)
 800b818:	f043 0301 	orr.w	r3, r3, #1
 800b81c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b81e:	f7fd fc4f 	bl	80090c0 <HAL_GetTick>
 800b822:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b824:	e008      	b.n	800b838 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b826:	f7fd fc4b 	bl	80090c0 <HAL_GetTick>
 800b82a:	4602      	mov	r2, r0
 800b82c:	693b      	ldr	r3, [r7, #16]
 800b82e:	1ad3      	subs	r3, r2, r3
 800b830:	2b02      	cmp	r3, #2
 800b832:	d901      	bls.n	800b838 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800b834:	2303      	movs	r3, #3
 800b836:	e180      	b.n	800bb3a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b838:	4b0c      	ldr	r3, [pc, #48]	; (800b86c <HAL_RCC_OscConfig+0x280>)
 800b83a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b83c:	f003 0302 	and.w	r3, r3, #2
 800b840:	2b00      	cmp	r3, #0
 800b842:	d0f0      	beq.n	800b826 <HAL_RCC_OscConfig+0x23a>
 800b844:	e01a      	b.n	800b87c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b846:	4b09      	ldr	r3, [pc, #36]	; (800b86c <HAL_RCC_OscConfig+0x280>)
 800b848:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b84a:	4a08      	ldr	r2, [pc, #32]	; (800b86c <HAL_RCC_OscConfig+0x280>)
 800b84c:	f023 0301 	bic.w	r3, r3, #1
 800b850:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b852:	f7fd fc35 	bl	80090c0 <HAL_GetTick>
 800b856:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b858:	e00a      	b.n	800b870 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b85a:	f7fd fc31 	bl	80090c0 <HAL_GetTick>
 800b85e:	4602      	mov	r2, r0
 800b860:	693b      	ldr	r3, [r7, #16]
 800b862:	1ad3      	subs	r3, r2, r3
 800b864:	2b02      	cmp	r3, #2
 800b866:	d903      	bls.n	800b870 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800b868:	2303      	movs	r3, #3
 800b86a:	e166      	b.n	800bb3a <HAL_RCC_OscConfig+0x54e>
 800b86c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b870:	4b92      	ldr	r3, [pc, #584]	; (800babc <HAL_RCC_OscConfig+0x4d0>)
 800b872:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b874:	f003 0302 	and.w	r3, r3, #2
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d1ee      	bne.n	800b85a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	f003 0304 	and.w	r3, r3, #4
 800b884:	2b00      	cmp	r3, #0
 800b886:	f000 80a4 	beq.w	800b9d2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b88a:	4b8c      	ldr	r3, [pc, #560]	; (800babc <HAL_RCC_OscConfig+0x4d0>)
 800b88c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b88e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b892:	2b00      	cmp	r3, #0
 800b894:	d10d      	bne.n	800b8b2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800b896:	4b89      	ldr	r3, [pc, #548]	; (800babc <HAL_RCC_OscConfig+0x4d0>)
 800b898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b89a:	4a88      	ldr	r2, [pc, #544]	; (800babc <HAL_RCC_OscConfig+0x4d0>)
 800b89c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b8a0:	6413      	str	r3, [r2, #64]	; 0x40
 800b8a2:	4b86      	ldr	r3, [pc, #536]	; (800babc <HAL_RCC_OscConfig+0x4d0>)
 800b8a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b8aa:	60bb      	str	r3, [r7, #8]
 800b8ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b8ae:	2301      	movs	r3, #1
 800b8b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b8b2:	4b83      	ldr	r3, [pc, #524]	; (800bac0 <HAL_RCC_OscConfig+0x4d4>)
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d118      	bne.n	800b8f0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800b8be:	4b80      	ldr	r3, [pc, #512]	; (800bac0 <HAL_RCC_OscConfig+0x4d4>)
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	4a7f      	ldr	r2, [pc, #508]	; (800bac0 <HAL_RCC_OscConfig+0x4d4>)
 800b8c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b8c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b8ca:	f7fd fbf9 	bl	80090c0 <HAL_GetTick>
 800b8ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b8d0:	e008      	b.n	800b8e4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b8d2:	f7fd fbf5 	bl	80090c0 <HAL_GetTick>
 800b8d6:	4602      	mov	r2, r0
 800b8d8:	693b      	ldr	r3, [r7, #16]
 800b8da:	1ad3      	subs	r3, r2, r3
 800b8dc:	2b64      	cmp	r3, #100	; 0x64
 800b8de:	d901      	bls.n	800b8e4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800b8e0:	2303      	movs	r3, #3
 800b8e2:	e12a      	b.n	800bb3a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b8e4:	4b76      	ldr	r3, [pc, #472]	; (800bac0 <HAL_RCC_OscConfig+0x4d4>)
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d0f0      	beq.n	800b8d2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	689b      	ldr	r3, [r3, #8]
 800b8f4:	2b01      	cmp	r3, #1
 800b8f6:	d106      	bne.n	800b906 <HAL_RCC_OscConfig+0x31a>
 800b8f8:	4b70      	ldr	r3, [pc, #448]	; (800babc <HAL_RCC_OscConfig+0x4d0>)
 800b8fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8fc:	4a6f      	ldr	r2, [pc, #444]	; (800babc <HAL_RCC_OscConfig+0x4d0>)
 800b8fe:	f043 0301 	orr.w	r3, r3, #1
 800b902:	6713      	str	r3, [r2, #112]	; 0x70
 800b904:	e02d      	b.n	800b962 <HAL_RCC_OscConfig+0x376>
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	689b      	ldr	r3, [r3, #8]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d10c      	bne.n	800b928 <HAL_RCC_OscConfig+0x33c>
 800b90e:	4b6b      	ldr	r3, [pc, #428]	; (800babc <HAL_RCC_OscConfig+0x4d0>)
 800b910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b912:	4a6a      	ldr	r2, [pc, #424]	; (800babc <HAL_RCC_OscConfig+0x4d0>)
 800b914:	f023 0301 	bic.w	r3, r3, #1
 800b918:	6713      	str	r3, [r2, #112]	; 0x70
 800b91a:	4b68      	ldr	r3, [pc, #416]	; (800babc <HAL_RCC_OscConfig+0x4d0>)
 800b91c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b91e:	4a67      	ldr	r2, [pc, #412]	; (800babc <HAL_RCC_OscConfig+0x4d0>)
 800b920:	f023 0304 	bic.w	r3, r3, #4
 800b924:	6713      	str	r3, [r2, #112]	; 0x70
 800b926:	e01c      	b.n	800b962 <HAL_RCC_OscConfig+0x376>
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	689b      	ldr	r3, [r3, #8]
 800b92c:	2b05      	cmp	r3, #5
 800b92e:	d10c      	bne.n	800b94a <HAL_RCC_OscConfig+0x35e>
 800b930:	4b62      	ldr	r3, [pc, #392]	; (800babc <HAL_RCC_OscConfig+0x4d0>)
 800b932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b934:	4a61      	ldr	r2, [pc, #388]	; (800babc <HAL_RCC_OscConfig+0x4d0>)
 800b936:	f043 0304 	orr.w	r3, r3, #4
 800b93a:	6713      	str	r3, [r2, #112]	; 0x70
 800b93c:	4b5f      	ldr	r3, [pc, #380]	; (800babc <HAL_RCC_OscConfig+0x4d0>)
 800b93e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b940:	4a5e      	ldr	r2, [pc, #376]	; (800babc <HAL_RCC_OscConfig+0x4d0>)
 800b942:	f043 0301 	orr.w	r3, r3, #1
 800b946:	6713      	str	r3, [r2, #112]	; 0x70
 800b948:	e00b      	b.n	800b962 <HAL_RCC_OscConfig+0x376>
 800b94a:	4b5c      	ldr	r3, [pc, #368]	; (800babc <HAL_RCC_OscConfig+0x4d0>)
 800b94c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b94e:	4a5b      	ldr	r2, [pc, #364]	; (800babc <HAL_RCC_OscConfig+0x4d0>)
 800b950:	f023 0301 	bic.w	r3, r3, #1
 800b954:	6713      	str	r3, [r2, #112]	; 0x70
 800b956:	4b59      	ldr	r3, [pc, #356]	; (800babc <HAL_RCC_OscConfig+0x4d0>)
 800b958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b95a:	4a58      	ldr	r2, [pc, #352]	; (800babc <HAL_RCC_OscConfig+0x4d0>)
 800b95c:	f023 0304 	bic.w	r3, r3, #4
 800b960:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	689b      	ldr	r3, [r3, #8]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d015      	beq.n	800b996 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b96a:	f7fd fba9 	bl	80090c0 <HAL_GetTick>
 800b96e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b970:	e00a      	b.n	800b988 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b972:	f7fd fba5 	bl	80090c0 <HAL_GetTick>
 800b976:	4602      	mov	r2, r0
 800b978:	693b      	ldr	r3, [r7, #16]
 800b97a:	1ad3      	subs	r3, r2, r3
 800b97c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b980:	4293      	cmp	r3, r2
 800b982:	d901      	bls.n	800b988 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800b984:	2303      	movs	r3, #3
 800b986:	e0d8      	b.n	800bb3a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b988:	4b4c      	ldr	r3, [pc, #304]	; (800babc <HAL_RCC_OscConfig+0x4d0>)
 800b98a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b98c:	f003 0302 	and.w	r3, r3, #2
 800b990:	2b00      	cmp	r3, #0
 800b992:	d0ee      	beq.n	800b972 <HAL_RCC_OscConfig+0x386>
 800b994:	e014      	b.n	800b9c0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b996:	f7fd fb93 	bl	80090c0 <HAL_GetTick>
 800b99a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b99c:	e00a      	b.n	800b9b4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b99e:	f7fd fb8f 	bl	80090c0 <HAL_GetTick>
 800b9a2:	4602      	mov	r2, r0
 800b9a4:	693b      	ldr	r3, [r7, #16]
 800b9a6:	1ad3      	subs	r3, r2, r3
 800b9a8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9ac:	4293      	cmp	r3, r2
 800b9ae:	d901      	bls.n	800b9b4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800b9b0:	2303      	movs	r3, #3
 800b9b2:	e0c2      	b.n	800bb3a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b9b4:	4b41      	ldr	r3, [pc, #260]	; (800babc <HAL_RCC_OscConfig+0x4d0>)
 800b9b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9b8:	f003 0302 	and.w	r3, r3, #2
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d1ee      	bne.n	800b99e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b9c0:	7dfb      	ldrb	r3, [r7, #23]
 800b9c2:	2b01      	cmp	r3, #1
 800b9c4:	d105      	bne.n	800b9d2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b9c6:	4b3d      	ldr	r3, [pc, #244]	; (800babc <HAL_RCC_OscConfig+0x4d0>)
 800b9c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9ca:	4a3c      	ldr	r2, [pc, #240]	; (800babc <HAL_RCC_OscConfig+0x4d0>)
 800b9cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b9d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	699b      	ldr	r3, [r3, #24]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	f000 80ae 	beq.w	800bb38 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b9dc:	4b37      	ldr	r3, [pc, #220]	; (800babc <HAL_RCC_OscConfig+0x4d0>)
 800b9de:	689b      	ldr	r3, [r3, #8]
 800b9e0:	f003 030c 	and.w	r3, r3, #12
 800b9e4:	2b08      	cmp	r3, #8
 800b9e6:	d06d      	beq.n	800bac4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	699b      	ldr	r3, [r3, #24]
 800b9ec:	2b02      	cmp	r3, #2
 800b9ee:	d14b      	bne.n	800ba88 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b9f0:	4b32      	ldr	r3, [pc, #200]	; (800babc <HAL_RCC_OscConfig+0x4d0>)
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	4a31      	ldr	r2, [pc, #196]	; (800babc <HAL_RCC_OscConfig+0x4d0>)
 800b9f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b9fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b9fc:	f7fd fb60 	bl	80090c0 <HAL_GetTick>
 800ba00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ba02:	e008      	b.n	800ba16 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ba04:	f7fd fb5c 	bl	80090c0 <HAL_GetTick>
 800ba08:	4602      	mov	r2, r0
 800ba0a:	693b      	ldr	r3, [r7, #16]
 800ba0c:	1ad3      	subs	r3, r2, r3
 800ba0e:	2b02      	cmp	r3, #2
 800ba10:	d901      	bls.n	800ba16 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800ba12:	2303      	movs	r3, #3
 800ba14:	e091      	b.n	800bb3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ba16:	4b29      	ldr	r3, [pc, #164]	; (800babc <HAL_RCC_OscConfig+0x4d0>)
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d1f0      	bne.n	800ba04 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	69da      	ldr	r2, [r3, #28]
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	6a1b      	ldr	r3, [r3, #32]
 800ba2a:	431a      	orrs	r2, r3
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba30:	019b      	lsls	r3, r3, #6
 800ba32:	431a      	orrs	r2, r3
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba38:	085b      	lsrs	r3, r3, #1
 800ba3a:	3b01      	subs	r3, #1
 800ba3c:	041b      	lsls	r3, r3, #16
 800ba3e:	431a      	orrs	r2, r3
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba44:	061b      	lsls	r3, r3, #24
 800ba46:	431a      	orrs	r2, r3
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba4c:	071b      	lsls	r3, r3, #28
 800ba4e:	491b      	ldr	r1, [pc, #108]	; (800babc <HAL_RCC_OscConfig+0x4d0>)
 800ba50:	4313      	orrs	r3, r2
 800ba52:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ba54:	4b19      	ldr	r3, [pc, #100]	; (800babc <HAL_RCC_OscConfig+0x4d0>)
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	4a18      	ldr	r2, [pc, #96]	; (800babc <HAL_RCC_OscConfig+0x4d0>)
 800ba5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ba5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba60:	f7fd fb2e 	bl	80090c0 <HAL_GetTick>
 800ba64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ba66:	e008      	b.n	800ba7a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ba68:	f7fd fb2a 	bl	80090c0 <HAL_GetTick>
 800ba6c:	4602      	mov	r2, r0
 800ba6e:	693b      	ldr	r3, [r7, #16]
 800ba70:	1ad3      	subs	r3, r2, r3
 800ba72:	2b02      	cmp	r3, #2
 800ba74:	d901      	bls.n	800ba7a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800ba76:	2303      	movs	r3, #3
 800ba78:	e05f      	b.n	800bb3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ba7a:	4b10      	ldr	r3, [pc, #64]	; (800babc <HAL_RCC_OscConfig+0x4d0>)
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d0f0      	beq.n	800ba68 <HAL_RCC_OscConfig+0x47c>
 800ba86:	e057      	b.n	800bb38 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ba88:	4b0c      	ldr	r3, [pc, #48]	; (800babc <HAL_RCC_OscConfig+0x4d0>)
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	4a0b      	ldr	r2, [pc, #44]	; (800babc <HAL_RCC_OscConfig+0x4d0>)
 800ba8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ba92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba94:	f7fd fb14 	bl	80090c0 <HAL_GetTick>
 800ba98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ba9a:	e008      	b.n	800baae <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ba9c:	f7fd fb10 	bl	80090c0 <HAL_GetTick>
 800baa0:	4602      	mov	r2, r0
 800baa2:	693b      	ldr	r3, [r7, #16]
 800baa4:	1ad3      	subs	r3, r2, r3
 800baa6:	2b02      	cmp	r3, #2
 800baa8:	d901      	bls.n	800baae <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800baaa:	2303      	movs	r3, #3
 800baac:	e045      	b.n	800bb3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800baae:	4b03      	ldr	r3, [pc, #12]	; (800babc <HAL_RCC_OscConfig+0x4d0>)
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d1f0      	bne.n	800ba9c <HAL_RCC_OscConfig+0x4b0>
 800baba:	e03d      	b.n	800bb38 <HAL_RCC_OscConfig+0x54c>
 800babc:	40023800 	.word	0x40023800
 800bac0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800bac4:	4b1f      	ldr	r3, [pc, #124]	; (800bb44 <HAL_RCC_OscConfig+0x558>)
 800bac6:	685b      	ldr	r3, [r3, #4]
 800bac8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	699b      	ldr	r3, [r3, #24]
 800bace:	2b01      	cmp	r3, #1
 800bad0:	d030      	beq.n	800bb34 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800badc:	429a      	cmp	r2, r3
 800bade:	d129      	bne.n	800bb34 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800baea:	429a      	cmp	r2, r3
 800baec:	d122      	bne.n	800bb34 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800baee:	68fa      	ldr	r2, [r7, #12]
 800baf0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800baf4:	4013      	ands	r3, r2
 800baf6:	687a      	ldr	r2, [r7, #4]
 800baf8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800bafa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800bafc:	4293      	cmp	r3, r2
 800bafe:	d119      	bne.n	800bb34 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb0a:	085b      	lsrs	r3, r3, #1
 800bb0c:	3b01      	subs	r3, #1
 800bb0e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800bb10:	429a      	cmp	r2, r3
 800bb12:	d10f      	bne.n	800bb34 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb1e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800bb20:	429a      	cmp	r2, r3
 800bb22:	d107      	bne.n	800bb34 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb2e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800bb30:	429a      	cmp	r2, r3
 800bb32:	d001      	beq.n	800bb38 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800bb34:	2301      	movs	r3, #1
 800bb36:	e000      	b.n	800bb3a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800bb38:	2300      	movs	r3, #0
}
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	3718      	adds	r7, #24
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	bd80      	pop	{r7, pc}
 800bb42:	bf00      	nop
 800bb44:	40023800 	.word	0x40023800

0800bb48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b084      	sub	sp, #16
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
 800bb50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800bb52:	2300      	movs	r3, #0
 800bb54:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d101      	bne.n	800bb60 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800bb5c:	2301      	movs	r3, #1
 800bb5e:	e0d0      	b.n	800bd02 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800bb60:	4b6a      	ldr	r3, [pc, #424]	; (800bd0c <HAL_RCC_ClockConfig+0x1c4>)
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	f003 030f 	and.w	r3, r3, #15
 800bb68:	683a      	ldr	r2, [r7, #0]
 800bb6a:	429a      	cmp	r2, r3
 800bb6c:	d910      	bls.n	800bb90 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bb6e:	4b67      	ldr	r3, [pc, #412]	; (800bd0c <HAL_RCC_ClockConfig+0x1c4>)
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	f023 020f 	bic.w	r2, r3, #15
 800bb76:	4965      	ldr	r1, [pc, #404]	; (800bd0c <HAL_RCC_ClockConfig+0x1c4>)
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	4313      	orrs	r3, r2
 800bb7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bb7e:	4b63      	ldr	r3, [pc, #396]	; (800bd0c <HAL_RCC_ClockConfig+0x1c4>)
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	f003 030f 	and.w	r3, r3, #15
 800bb86:	683a      	ldr	r2, [r7, #0]
 800bb88:	429a      	cmp	r2, r3
 800bb8a:	d001      	beq.n	800bb90 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800bb8c:	2301      	movs	r3, #1
 800bb8e:	e0b8      	b.n	800bd02 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	f003 0302 	and.w	r3, r3, #2
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d020      	beq.n	800bbde <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	f003 0304 	and.w	r3, r3, #4
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d005      	beq.n	800bbb4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800bba8:	4b59      	ldr	r3, [pc, #356]	; (800bd10 <HAL_RCC_ClockConfig+0x1c8>)
 800bbaa:	689b      	ldr	r3, [r3, #8]
 800bbac:	4a58      	ldr	r2, [pc, #352]	; (800bd10 <HAL_RCC_ClockConfig+0x1c8>)
 800bbae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800bbb2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	f003 0308 	and.w	r3, r3, #8
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d005      	beq.n	800bbcc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800bbc0:	4b53      	ldr	r3, [pc, #332]	; (800bd10 <HAL_RCC_ClockConfig+0x1c8>)
 800bbc2:	689b      	ldr	r3, [r3, #8]
 800bbc4:	4a52      	ldr	r2, [pc, #328]	; (800bd10 <HAL_RCC_ClockConfig+0x1c8>)
 800bbc6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800bbca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bbcc:	4b50      	ldr	r3, [pc, #320]	; (800bd10 <HAL_RCC_ClockConfig+0x1c8>)
 800bbce:	689b      	ldr	r3, [r3, #8]
 800bbd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	689b      	ldr	r3, [r3, #8]
 800bbd8:	494d      	ldr	r1, [pc, #308]	; (800bd10 <HAL_RCC_ClockConfig+0x1c8>)
 800bbda:	4313      	orrs	r3, r2
 800bbdc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	f003 0301 	and.w	r3, r3, #1
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d040      	beq.n	800bc6c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	685b      	ldr	r3, [r3, #4]
 800bbee:	2b01      	cmp	r3, #1
 800bbf0:	d107      	bne.n	800bc02 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bbf2:	4b47      	ldr	r3, [pc, #284]	; (800bd10 <HAL_RCC_ClockConfig+0x1c8>)
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d115      	bne.n	800bc2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800bbfe:	2301      	movs	r3, #1
 800bc00:	e07f      	b.n	800bd02 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	685b      	ldr	r3, [r3, #4]
 800bc06:	2b02      	cmp	r3, #2
 800bc08:	d107      	bne.n	800bc1a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bc0a:	4b41      	ldr	r3, [pc, #260]	; (800bd10 <HAL_RCC_ClockConfig+0x1c8>)
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d109      	bne.n	800bc2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800bc16:	2301      	movs	r3, #1
 800bc18:	e073      	b.n	800bd02 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bc1a:	4b3d      	ldr	r3, [pc, #244]	; (800bd10 <HAL_RCC_ClockConfig+0x1c8>)
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	f003 0302 	and.w	r3, r3, #2
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d101      	bne.n	800bc2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800bc26:	2301      	movs	r3, #1
 800bc28:	e06b      	b.n	800bd02 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800bc2a:	4b39      	ldr	r3, [pc, #228]	; (800bd10 <HAL_RCC_ClockConfig+0x1c8>)
 800bc2c:	689b      	ldr	r3, [r3, #8]
 800bc2e:	f023 0203 	bic.w	r2, r3, #3
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	685b      	ldr	r3, [r3, #4]
 800bc36:	4936      	ldr	r1, [pc, #216]	; (800bd10 <HAL_RCC_ClockConfig+0x1c8>)
 800bc38:	4313      	orrs	r3, r2
 800bc3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bc3c:	f7fd fa40 	bl	80090c0 <HAL_GetTick>
 800bc40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bc42:	e00a      	b.n	800bc5a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bc44:	f7fd fa3c 	bl	80090c0 <HAL_GetTick>
 800bc48:	4602      	mov	r2, r0
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	1ad3      	subs	r3, r2, r3
 800bc4e:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc52:	4293      	cmp	r3, r2
 800bc54:	d901      	bls.n	800bc5a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800bc56:	2303      	movs	r3, #3
 800bc58:	e053      	b.n	800bd02 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bc5a:	4b2d      	ldr	r3, [pc, #180]	; (800bd10 <HAL_RCC_ClockConfig+0x1c8>)
 800bc5c:	689b      	ldr	r3, [r3, #8]
 800bc5e:	f003 020c 	and.w	r2, r3, #12
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	685b      	ldr	r3, [r3, #4]
 800bc66:	009b      	lsls	r3, r3, #2
 800bc68:	429a      	cmp	r2, r3
 800bc6a:	d1eb      	bne.n	800bc44 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800bc6c:	4b27      	ldr	r3, [pc, #156]	; (800bd0c <HAL_RCC_ClockConfig+0x1c4>)
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	f003 030f 	and.w	r3, r3, #15
 800bc74:	683a      	ldr	r2, [r7, #0]
 800bc76:	429a      	cmp	r2, r3
 800bc78:	d210      	bcs.n	800bc9c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bc7a:	4b24      	ldr	r3, [pc, #144]	; (800bd0c <HAL_RCC_ClockConfig+0x1c4>)
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	f023 020f 	bic.w	r2, r3, #15
 800bc82:	4922      	ldr	r1, [pc, #136]	; (800bd0c <HAL_RCC_ClockConfig+0x1c4>)
 800bc84:	683b      	ldr	r3, [r7, #0]
 800bc86:	4313      	orrs	r3, r2
 800bc88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bc8a:	4b20      	ldr	r3, [pc, #128]	; (800bd0c <HAL_RCC_ClockConfig+0x1c4>)
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	f003 030f 	and.w	r3, r3, #15
 800bc92:	683a      	ldr	r2, [r7, #0]
 800bc94:	429a      	cmp	r2, r3
 800bc96:	d001      	beq.n	800bc9c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800bc98:	2301      	movs	r3, #1
 800bc9a:	e032      	b.n	800bd02 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	f003 0304 	and.w	r3, r3, #4
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d008      	beq.n	800bcba <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800bca8:	4b19      	ldr	r3, [pc, #100]	; (800bd10 <HAL_RCC_ClockConfig+0x1c8>)
 800bcaa:	689b      	ldr	r3, [r3, #8]
 800bcac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	68db      	ldr	r3, [r3, #12]
 800bcb4:	4916      	ldr	r1, [pc, #88]	; (800bd10 <HAL_RCC_ClockConfig+0x1c8>)
 800bcb6:	4313      	orrs	r3, r2
 800bcb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	f003 0308 	and.w	r3, r3, #8
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d009      	beq.n	800bcda <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800bcc6:	4b12      	ldr	r3, [pc, #72]	; (800bd10 <HAL_RCC_ClockConfig+0x1c8>)
 800bcc8:	689b      	ldr	r3, [r3, #8]
 800bcca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	691b      	ldr	r3, [r3, #16]
 800bcd2:	00db      	lsls	r3, r3, #3
 800bcd4:	490e      	ldr	r1, [pc, #56]	; (800bd10 <HAL_RCC_ClockConfig+0x1c8>)
 800bcd6:	4313      	orrs	r3, r2
 800bcd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800bcda:	f000 f821 	bl	800bd20 <HAL_RCC_GetSysClockFreq>
 800bcde:	4602      	mov	r2, r0
 800bce0:	4b0b      	ldr	r3, [pc, #44]	; (800bd10 <HAL_RCC_ClockConfig+0x1c8>)
 800bce2:	689b      	ldr	r3, [r3, #8]
 800bce4:	091b      	lsrs	r3, r3, #4
 800bce6:	f003 030f 	and.w	r3, r3, #15
 800bcea:	490a      	ldr	r1, [pc, #40]	; (800bd14 <HAL_RCC_ClockConfig+0x1cc>)
 800bcec:	5ccb      	ldrb	r3, [r1, r3]
 800bcee:	fa22 f303 	lsr.w	r3, r2, r3
 800bcf2:	4a09      	ldr	r2, [pc, #36]	; (800bd18 <HAL_RCC_ClockConfig+0x1d0>)
 800bcf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800bcf6:	4b09      	ldr	r3, [pc, #36]	; (800bd1c <HAL_RCC_ClockConfig+0x1d4>)
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	f7f7 ff96 	bl	8003c2c <HAL_InitTick>

  return HAL_OK;
 800bd00:	2300      	movs	r3, #0
}
 800bd02:	4618      	mov	r0, r3
 800bd04:	3710      	adds	r7, #16
 800bd06:	46bd      	mov	sp, r7
 800bd08:	bd80      	pop	{r7, pc}
 800bd0a:	bf00      	nop
 800bd0c:	40023c00 	.word	0x40023c00
 800bd10:	40023800 	.word	0x40023800
 800bd14:	08015600 	.word	0x08015600
 800bd18:	20000008 	.word	0x20000008
 800bd1c:	2000000c 	.word	0x2000000c

0800bd20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bd20:	b5b0      	push	{r4, r5, r7, lr}
 800bd22:	b084      	sub	sp, #16
 800bd24:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800bd26:	2100      	movs	r1, #0
 800bd28:	6079      	str	r1, [r7, #4]
 800bd2a:	2100      	movs	r1, #0
 800bd2c:	60f9      	str	r1, [r7, #12]
 800bd2e:	2100      	movs	r1, #0
 800bd30:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800bd32:	2100      	movs	r1, #0
 800bd34:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800bd36:	4952      	ldr	r1, [pc, #328]	; (800be80 <HAL_RCC_GetSysClockFreq+0x160>)
 800bd38:	6889      	ldr	r1, [r1, #8]
 800bd3a:	f001 010c 	and.w	r1, r1, #12
 800bd3e:	2908      	cmp	r1, #8
 800bd40:	d00d      	beq.n	800bd5e <HAL_RCC_GetSysClockFreq+0x3e>
 800bd42:	2908      	cmp	r1, #8
 800bd44:	f200 8094 	bhi.w	800be70 <HAL_RCC_GetSysClockFreq+0x150>
 800bd48:	2900      	cmp	r1, #0
 800bd4a:	d002      	beq.n	800bd52 <HAL_RCC_GetSysClockFreq+0x32>
 800bd4c:	2904      	cmp	r1, #4
 800bd4e:	d003      	beq.n	800bd58 <HAL_RCC_GetSysClockFreq+0x38>
 800bd50:	e08e      	b.n	800be70 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800bd52:	4b4c      	ldr	r3, [pc, #304]	; (800be84 <HAL_RCC_GetSysClockFreq+0x164>)
 800bd54:	60bb      	str	r3, [r7, #8]
      break;
 800bd56:	e08e      	b.n	800be76 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800bd58:	4b4b      	ldr	r3, [pc, #300]	; (800be88 <HAL_RCC_GetSysClockFreq+0x168>)
 800bd5a:	60bb      	str	r3, [r7, #8]
      break;
 800bd5c:	e08b      	b.n	800be76 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800bd5e:	4948      	ldr	r1, [pc, #288]	; (800be80 <HAL_RCC_GetSysClockFreq+0x160>)
 800bd60:	6849      	ldr	r1, [r1, #4]
 800bd62:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800bd66:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800bd68:	4945      	ldr	r1, [pc, #276]	; (800be80 <HAL_RCC_GetSysClockFreq+0x160>)
 800bd6a:	6849      	ldr	r1, [r1, #4]
 800bd6c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800bd70:	2900      	cmp	r1, #0
 800bd72:	d024      	beq.n	800bdbe <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bd74:	4942      	ldr	r1, [pc, #264]	; (800be80 <HAL_RCC_GetSysClockFreq+0x160>)
 800bd76:	6849      	ldr	r1, [r1, #4]
 800bd78:	0989      	lsrs	r1, r1, #6
 800bd7a:	4608      	mov	r0, r1
 800bd7c:	f04f 0100 	mov.w	r1, #0
 800bd80:	f240 14ff 	movw	r4, #511	; 0x1ff
 800bd84:	f04f 0500 	mov.w	r5, #0
 800bd88:	ea00 0204 	and.w	r2, r0, r4
 800bd8c:	ea01 0305 	and.w	r3, r1, r5
 800bd90:	493d      	ldr	r1, [pc, #244]	; (800be88 <HAL_RCC_GetSysClockFreq+0x168>)
 800bd92:	fb01 f003 	mul.w	r0, r1, r3
 800bd96:	2100      	movs	r1, #0
 800bd98:	fb01 f102 	mul.w	r1, r1, r2
 800bd9c:	1844      	adds	r4, r0, r1
 800bd9e:	493a      	ldr	r1, [pc, #232]	; (800be88 <HAL_RCC_GetSysClockFreq+0x168>)
 800bda0:	fba2 0101 	umull	r0, r1, r2, r1
 800bda4:	1863      	adds	r3, r4, r1
 800bda6:	4619      	mov	r1, r3
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	461a      	mov	r2, r3
 800bdac:	f04f 0300 	mov.w	r3, #0
 800bdb0:	f7f4 fafe 	bl	80003b0 <__aeabi_uldivmod>
 800bdb4:	4602      	mov	r2, r0
 800bdb6:	460b      	mov	r3, r1
 800bdb8:	4613      	mov	r3, r2
 800bdba:	60fb      	str	r3, [r7, #12]
 800bdbc:	e04a      	b.n	800be54 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bdbe:	4b30      	ldr	r3, [pc, #192]	; (800be80 <HAL_RCC_GetSysClockFreq+0x160>)
 800bdc0:	685b      	ldr	r3, [r3, #4]
 800bdc2:	099b      	lsrs	r3, r3, #6
 800bdc4:	461a      	mov	r2, r3
 800bdc6:	f04f 0300 	mov.w	r3, #0
 800bdca:	f240 10ff 	movw	r0, #511	; 0x1ff
 800bdce:	f04f 0100 	mov.w	r1, #0
 800bdd2:	ea02 0400 	and.w	r4, r2, r0
 800bdd6:	ea03 0501 	and.w	r5, r3, r1
 800bdda:	4620      	mov	r0, r4
 800bddc:	4629      	mov	r1, r5
 800bdde:	f04f 0200 	mov.w	r2, #0
 800bde2:	f04f 0300 	mov.w	r3, #0
 800bde6:	014b      	lsls	r3, r1, #5
 800bde8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800bdec:	0142      	lsls	r2, r0, #5
 800bdee:	4610      	mov	r0, r2
 800bdf0:	4619      	mov	r1, r3
 800bdf2:	1b00      	subs	r0, r0, r4
 800bdf4:	eb61 0105 	sbc.w	r1, r1, r5
 800bdf8:	f04f 0200 	mov.w	r2, #0
 800bdfc:	f04f 0300 	mov.w	r3, #0
 800be00:	018b      	lsls	r3, r1, #6
 800be02:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800be06:	0182      	lsls	r2, r0, #6
 800be08:	1a12      	subs	r2, r2, r0
 800be0a:	eb63 0301 	sbc.w	r3, r3, r1
 800be0e:	f04f 0000 	mov.w	r0, #0
 800be12:	f04f 0100 	mov.w	r1, #0
 800be16:	00d9      	lsls	r1, r3, #3
 800be18:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800be1c:	00d0      	lsls	r0, r2, #3
 800be1e:	4602      	mov	r2, r0
 800be20:	460b      	mov	r3, r1
 800be22:	1912      	adds	r2, r2, r4
 800be24:	eb45 0303 	adc.w	r3, r5, r3
 800be28:	f04f 0000 	mov.w	r0, #0
 800be2c:	f04f 0100 	mov.w	r1, #0
 800be30:	0299      	lsls	r1, r3, #10
 800be32:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800be36:	0290      	lsls	r0, r2, #10
 800be38:	4602      	mov	r2, r0
 800be3a:	460b      	mov	r3, r1
 800be3c:	4610      	mov	r0, r2
 800be3e:	4619      	mov	r1, r3
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	461a      	mov	r2, r3
 800be44:	f04f 0300 	mov.w	r3, #0
 800be48:	f7f4 fab2 	bl	80003b0 <__aeabi_uldivmod>
 800be4c:	4602      	mov	r2, r0
 800be4e:	460b      	mov	r3, r1
 800be50:	4613      	mov	r3, r2
 800be52:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800be54:	4b0a      	ldr	r3, [pc, #40]	; (800be80 <HAL_RCC_GetSysClockFreq+0x160>)
 800be56:	685b      	ldr	r3, [r3, #4]
 800be58:	0c1b      	lsrs	r3, r3, #16
 800be5a:	f003 0303 	and.w	r3, r3, #3
 800be5e:	3301      	adds	r3, #1
 800be60:	005b      	lsls	r3, r3, #1
 800be62:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800be64:	68fa      	ldr	r2, [r7, #12]
 800be66:	683b      	ldr	r3, [r7, #0]
 800be68:	fbb2 f3f3 	udiv	r3, r2, r3
 800be6c:	60bb      	str	r3, [r7, #8]
      break;
 800be6e:	e002      	b.n	800be76 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800be70:	4b04      	ldr	r3, [pc, #16]	; (800be84 <HAL_RCC_GetSysClockFreq+0x164>)
 800be72:	60bb      	str	r3, [r7, #8]
      break;
 800be74:	bf00      	nop
    }
  }
  return sysclockfreq;
 800be76:	68bb      	ldr	r3, [r7, #8]
}
 800be78:	4618      	mov	r0, r3
 800be7a:	3710      	adds	r7, #16
 800be7c:	46bd      	mov	sp, r7
 800be7e:	bdb0      	pop	{r4, r5, r7, pc}
 800be80:	40023800 	.word	0x40023800
 800be84:	00f42400 	.word	0x00f42400
 800be88:	017d7840 	.word	0x017d7840

0800be8c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800be8c:	b480      	push	{r7}
 800be8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800be90:	4b03      	ldr	r3, [pc, #12]	; (800bea0 <HAL_RCC_GetHCLKFreq+0x14>)
 800be92:	681b      	ldr	r3, [r3, #0]
}
 800be94:	4618      	mov	r0, r3
 800be96:	46bd      	mov	sp, r7
 800be98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9c:	4770      	bx	lr
 800be9e:	bf00      	nop
 800bea0:	20000008 	.word	0x20000008

0800bea4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800bea8:	f7ff fff0 	bl	800be8c <HAL_RCC_GetHCLKFreq>
 800beac:	4602      	mov	r2, r0
 800beae:	4b05      	ldr	r3, [pc, #20]	; (800bec4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800beb0:	689b      	ldr	r3, [r3, #8]
 800beb2:	0a9b      	lsrs	r3, r3, #10
 800beb4:	f003 0307 	and.w	r3, r3, #7
 800beb8:	4903      	ldr	r1, [pc, #12]	; (800bec8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800beba:	5ccb      	ldrb	r3, [r1, r3]
 800bebc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bec0:	4618      	mov	r0, r3
 800bec2:	bd80      	pop	{r7, pc}
 800bec4:	40023800 	.word	0x40023800
 800bec8:	08015610 	.word	0x08015610

0800becc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800becc:	b580      	push	{r7, lr}
 800bece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800bed0:	f7ff ffdc 	bl	800be8c <HAL_RCC_GetHCLKFreq>
 800bed4:	4602      	mov	r2, r0
 800bed6:	4b05      	ldr	r3, [pc, #20]	; (800beec <HAL_RCC_GetPCLK2Freq+0x20>)
 800bed8:	689b      	ldr	r3, [r3, #8]
 800beda:	0b5b      	lsrs	r3, r3, #13
 800bedc:	f003 0307 	and.w	r3, r3, #7
 800bee0:	4903      	ldr	r1, [pc, #12]	; (800bef0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800bee2:	5ccb      	ldrb	r3, [r1, r3]
 800bee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bee8:	4618      	mov	r0, r3
 800beea:	bd80      	pop	{r7, pc}
 800beec:	40023800 	.word	0x40023800
 800bef0:	08015610 	.word	0x08015610

0800bef4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800bef4:	b480      	push	{r7}
 800bef6:	b083      	sub	sp, #12
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
 800befc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	220f      	movs	r2, #15
 800bf02:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800bf04:	4b12      	ldr	r3, [pc, #72]	; (800bf50 <HAL_RCC_GetClockConfig+0x5c>)
 800bf06:	689b      	ldr	r3, [r3, #8]
 800bf08:	f003 0203 	and.w	r2, r3, #3
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800bf10:	4b0f      	ldr	r3, [pc, #60]	; (800bf50 <HAL_RCC_GetClockConfig+0x5c>)
 800bf12:	689b      	ldr	r3, [r3, #8]
 800bf14:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800bf1c:	4b0c      	ldr	r3, [pc, #48]	; (800bf50 <HAL_RCC_GetClockConfig+0x5c>)
 800bf1e:	689b      	ldr	r3, [r3, #8]
 800bf20:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800bf28:	4b09      	ldr	r3, [pc, #36]	; (800bf50 <HAL_RCC_GetClockConfig+0x5c>)
 800bf2a:	689b      	ldr	r3, [r3, #8]
 800bf2c:	08db      	lsrs	r3, r3, #3
 800bf2e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800bf36:	4b07      	ldr	r3, [pc, #28]	; (800bf54 <HAL_RCC_GetClockConfig+0x60>)
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	f003 020f 	and.w	r2, r3, #15
 800bf3e:	683b      	ldr	r3, [r7, #0]
 800bf40:	601a      	str	r2, [r3, #0]
}
 800bf42:	bf00      	nop
 800bf44:	370c      	adds	r7, #12
 800bf46:	46bd      	mov	sp, r7
 800bf48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4c:	4770      	bx	lr
 800bf4e:	bf00      	nop
 800bf50:	40023800 	.word	0x40023800
 800bf54:	40023c00 	.word	0x40023c00

0800bf58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b088      	sub	sp, #32
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800bf60:	2300      	movs	r3, #0
 800bf62:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800bf64:	2300      	movs	r3, #0
 800bf66:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800bf68:	2300      	movs	r3, #0
 800bf6a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800bf70:	2300      	movs	r3, #0
 800bf72:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	f003 0301 	and.w	r3, r3, #1
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d012      	beq.n	800bfa6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800bf80:	4b69      	ldr	r3, [pc, #420]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bf82:	689b      	ldr	r3, [r3, #8]
 800bf84:	4a68      	ldr	r2, [pc, #416]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bf86:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800bf8a:	6093      	str	r3, [r2, #8]
 800bf8c:	4b66      	ldr	r3, [pc, #408]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bf8e:	689a      	ldr	r2, [r3, #8]
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf94:	4964      	ldr	r1, [pc, #400]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bf96:	4313      	orrs	r3, r2
 800bf98:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d101      	bne.n	800bfa6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800bfa2:	2301      	movs	r3, #1
 800bfa4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d017      	beq.n	800bfe2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bfb2:	4b5d      	ldr	r3, [pc, #372]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bfb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bfb8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfc0:	4959      	ldr	r1, [pc, #356]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bfc2:	4313      	orrs	r3, r2
 800bfc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfcc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bfd0:	d101      	bne.n	800bfd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800bfd2:	2301      	movs	r3, #1
 800bfd4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d101      	bne.n	800bfe2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800bfde:	2301      	movs	r3, #1
 800bfe0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d017      	beq.n	800c01e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800bfee:	4b4e      	ldr	r3, [pc, #312]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bff0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bff4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bffc:	494a      	ldr	r1, [pc, #296]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bffe:	4313      	orrs	r3, r2
 800c000:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c008:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c00c:	d101      	bne.n	800c012 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800c00e:	2301      	movs	r3, #1
 800c010:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c016:	2b00      	cmp	r3, #0
 800c018:	d101      	bne.n	800c01e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800c01a:	2301      	movs	r3, #1
 800c01c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c026:	2b00      	cmp	r3, #0
 800c028:	d001      	beq.n	800c02e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800c02a:	2301      	movs	r3, #1
 800c02c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	f003 0320 	and.w	r3, r3, #32
 800c036:	2b00      	cmp	r3, #0
 800c038:	f000 808b 	beq.w	800c152 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800c03c:	4b3a      	ldr	r3, [pc, #232]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c03e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c040:	4a39      	ldr	r2, [pc, #228]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c042:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c046:	6413      	str	r3, [r2, #64]	; 0x40
 800c048:	4b37      	ldr	r3, [pc, #220]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c04a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c04c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c050:	60bb      	str	r3, [r7, #8]
 800c052:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800c054:	4b35      	ldr	r3, [pc, #212]	; (800c12c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	4a34      	ldr	r2, [pc, #208]	; (800c12c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800c05a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c05e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c060:	f7fd f82e 	bl	80090c0 <HAL_GetTick>
 800c064:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800c066:	e008      	b.n	800c07a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c068:	f7fd f82a 	bl	80090c0 <HAL_GetTick>
 800c06c:	4602      	mov	r2, r0
 800c06e:	697b      	ldr	r3, [r7, #20]
 800c070:	1ad3      	subs	r3, r2, r3
 800c072:	2b64      	cmp	r3, #100	; 0x64
 800c074:	d901      	bls.n	800c07a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800c076:	2303      	movs	r3, #3
 800c078:	e38f      	b.n	800c79a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800c07a:	4b2c      	ldr	r3, [pc, #176]	; (800c12c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c082:	2b00      	cmp	r3, #0
 800c084:	d0f0      	beq.n	800c068 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800c086:	4b28      	ldr	r3, [pc, #160]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c08a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c08e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800c090:	693b      	ldr	r3, [r7, #16]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d035      	beq.n	800c102 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c09a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c09e:	693a      	ldr	r2, [r7, #16]
 800c0a0:	429a      	cmp	r2, r3
 800c0a2:	d02e      	beq.n	800c102 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c0a4:	4b20      	ldr	r3, [pc, #128]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c0a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c0ac:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800c0ae:	4b1e      	ldr	r3, [pc, #120]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c0b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0b2:	4a1d      	ldr	r2, [pc, #116]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c0b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c0b8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c0ba:	4b1b      	ldr	r3, [pc, #108]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c0bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0be:	4a1a      	ldr	r2, [pc, #104]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c0c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c0c4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800c0c6:	4a18      	ldr	r2, [pc, #96]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c0c8:	693b      	ldr	r3, [r7, #16]
 800c0ca:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800c0cc:	4b16      	ldr	r3, [pc, #88]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c0ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0d0:	f003 0301 	and.w	r3, r3, #1
 800c0d4:	2b01      	cmp	r3, #1
 800c0d6:	d114      	bne.n	800c102 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c0d8:	f7fc fff2 	bl	80090c0 <HAL_GetTick>
 800c0dc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c0de:	e00a      	b.n	800c0f6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c0e0:	f7fc ffee 	bl	80090c0 <HAL_GetTick>
 800c0e4:	4602      	mov	r2, r0
 800c0e6:	697b      	ldr	r3, [r7, #20]
 800c0e8:	1ad3      	subs	r3, r2, r3
 800c0ea:	f241 3288 	movw	r2, #5000	; 0x1388
 800c0ee:	4293      	cmp	r3, r2
 800c0f0:	d901      	bls.n	800c0f6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800c0f2:	2303      	movs	r3, #3
 800c0f4:	e351      	b.n	800c79a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c0f6:	4b0c      	ldr	r3, [pc, #48]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c0f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0fa:	f003 0302 	and.w	r3, r3, #2
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d0ee      	beq.n	800c0e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c106:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c10a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c10e:	d111      	bne.n	800c134 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800c110:	4b05      	ldr	r3, [pc, #20]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c112:	689b      	ldr	r3, [r3, #8]
 800c114:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800c11c:	4b04      	ldr	r3, [pc, #16]	; (800c130 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800c11e:	400b      	ands	r3, r1
 800c120:	4901      	ldr	r1, [pc, #4]	; (800c128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c122:	4313      	orrs	r3, r2
 800c124:	608b      	str	r3, [r1, #8]
 800c126:	e00b      	b.n	800c140 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800c128:	40023800 	.word	0x40023800
 800c12c:	40007000 	.word	0x40007000
 800c130:	0ffffcff 	.word	0x0ffffcff
 800c134:	4bb3      	ldr	r3, [pc, #716]	; (800c404 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c136:	689b      	ldr	r3, [r3, #8]
 800c138:	4ab2      	ldr	r2, [pc, #712]	; (800c404 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c13a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800c13e:	6093      	str	r3, [r2, #8]
 800c140:	4bb0      	ldr	r3, [pc, #704]	; (800c404 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c142:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c148:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c14c:	49ad      	ldr	r1, [pc, #692]	; (800c404 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c14e:	4313      	orrs	r3, r2
 800c150:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	f003 0310 	and.w	r3, r3, #16
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d010      	beq.n	800c180 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c15e:	4ba9      	ldr	r3, [pc, #676]	; (800c404 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c160:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c164:	4aa7      	ldr	r2, [pc, #668]	; (800c404 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c166:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c16a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800c16e:	4ba5      	ldr	r3, [pc, #660]	; (800c404 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c170:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c178:	49a2      	ldr	r1, [pc, #648]	; (800c404 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c17a:	4313      	orrs	r3, r2
 800c17c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d00a      	beq.n	800c1a2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c18c:	4b9d      	ldr	r3, [pc, #628]	; (800c404 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c18e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c192:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c19a:	499a      	ldr	r1, [pc, #616]	; (800c404 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c19c:	4313      	orrs	r3, r2
 800c19e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d00a      	beq.n	800c1c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800c1ae:	4b95      	ldr	r3, [pc, #596]	; (800c404 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c1b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c1b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c1bc:	4991      	ldr	r1, [pc, #580]	; (800c404 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c1be:	4313      	orrs	r3, r2
 800c1c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d00a      	beq.n	800c1e6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800c1d0:	4b8c      	ldr	r3, [pc, #560]	; (800c404 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c1d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c1d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c1de:	4989      	ldr	r1, [pc, #548]	; (800c404 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c1e0:	4313      	orrs	r3, r2
 800c1e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d00a      	beq.n	800c208 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c1f2:	4b84      	ldr	r3, [pc, #528]	; (800c404 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c1f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c1f8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c200:	4980      	ldr	r1, [pc, #512]	; (800c404 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c202:	4313      	orrs	r3, r2
 800c204:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c210:	2b00      	cmp	r3, #0
 800c212:	d00a      	beq.n	800c22a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c214:	4b7b      	ldr	r3, [pc, #492]	; (800c404 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c21a:	f023 0203 	bic.w	r2, r3, #3
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c222:	4978      	ldr	r1, [pc, #480]	; (800c404 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c224:	4313      	orrs	r3, r2
 800c226:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c232:	2b00      	cmp	r3, #0
 800c234:	d00a      	beq.n	800c24c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800c236:	4b73      	ldr	r3, [pc, #460]	; (800c404 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c23c:	f023 020c 	bic.w	r2, r3, #12
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c244:	496f      	ldr	r1, [pc, #444]	; (800c404 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c246:	4313      	orrs	r3, r2
 800c248:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c254:	2b00      	cmp	r3, #0
 800c256:	d00a      	beq.n	800c26e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800c258:	4b6a      	ldr	r3, [pc, #424]	; (800c404 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c25a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c25e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c266:	4967      	ldr	r1, [pc, #412]	; (800c404 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c268:	4313      	orrs	r3, r2
 800c26a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c276:	2b00      	cmp	r3, #0
 800c278:	d00a      	beq.n	800c290 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800c27a:	4b62      	ldr	r3, [pc, #392]	; (800c404 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c27c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c280:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c288:	495e      	ldr	r1, [pc, #376]	; (800c404 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c28a:	4313      	orrs	r3, r2
 800c28c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d00a      	beq.n	800c2b2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800c29c:	4b59      	ldr	r3, [pc, #356]	; (800c404 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c29e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c2a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2aa:	4956      	ldr	r1, [pc, #344]	; (800c404 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c2ac:	4313      	orrs	r3, r2
 800c2ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d00a      	beq.n	800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800c2be:	4b51      	ldr	r3, [pc, #324]	; (800c404 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c2c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c2c4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2cc:	494d      	ldr	r1, [pc, #308]	; (800c404 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c2ce:	4313      	orrs	r3, r2
 800c2d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d00a      	beq.n	800c2f6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800c2e0:	4b48      	ldr	r3, [pc, #288]	; (800c404 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c2e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c2e6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c2ee:	4945      	ldr	r1, [pc, #276]	; (800c404 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c2f0:	4313      	orrs	r3, r2
 800c2f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d00a      	beq.n	800c318 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800c302:	4b40      	ldr	r3, [pc, #256]	; (800c404 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c308:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c310:	493c      	ldr	r1, [pc, #240]	; (800c404 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c312:	4313      	orrs	r3, r2
 800c314:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c320:	2b00      	cmp	r3, #0
 800c322:	d00a      	beq.n	800c33a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c324:	4b37      	ldr	r3, [pc, #220]	; (800c404 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c32a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c332:	4934      	ldr	r1, [pc, #208]	; (800c404 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c334:	4313      	orrs	r3, r2
 800c336:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c342:	2b00      	cmp	r3, #0
 800c344:	d011      	beq.n	800c36a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800c346:	4b2f      	ldr	r3, [pc, #188]	; (800c404 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c34c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c354:	492b      	ldr	r1, [pc, #172]	; (800c404 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c356:	4313      	orrs	r3, r2
 800c358:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c360:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c364:	d101      	bne.n	800c36a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800c366:	2301      	movs	r3, #1
 800c368:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	f003 0308 	and.w	r3, r3, #8
 800c372:	2b00      	cmp	r3, #0
 800c374:	d001      	beq.n	800c37a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800c376:	2301      	movs	r3, #1
 800c378:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c382:	2b00      	cmp	r3, #0
 800c384:	d00a      	beq.n	800c39c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c386:	4b1f      	ldr	r3, [pc, #124]	; (800c404 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c38c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c394:	491b      	ldr	r1, [pc, #108]	; (800c404 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c396:	4313      	orrs	r3, r2
 800c398:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d00b      	beq.n	800c3c0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800c3a8:	4b16      	ldr	r3, [pc, #88]	; (800c404 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c3aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c3ae:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c3b8:	4912      	ldr	r1, [pc, #72]	; (800c404 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c3ba:	4313      	orrs	r3, r2
 800c3bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d00b      	beq.n	800c3e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800c3cc:	4b0d      	ldr	r3, [pc, #52]	; (800c404 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c3ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c3d2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c3dc:	4909      	ldr	r1, [pc, #36]	; (800c404 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c3de:	4313      	orrs	r3, r2
 800c3e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d00f      	beq.n	800c410 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c3f0:	4b04      	ldr	r3, [pc, #16]	; (800c404 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800c3f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c3f6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c400:	e002      	b.n	800c408 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800c402:	bf00      	nop
 800c404:	40023800 	.word	0x40023800
 800c408:	4986      	ldr	r1, [pc, #536]	; (800c624 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c40a:	4313      	orrs	r3, r2
 800c40c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d00b      	beq.n	800c434 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800c41c:	4b81      	ldr	r3, [pc, #516]	; (800c624 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c41e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c422:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c42c:	497d      	ldr	r1, [pc, #500]	; (800c624 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c42e:	4313      	orrs	r3, r2
 800c430:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800c434:	69fb      	ldr	r3, [r7, #28]
 800c436:	2b01      	cmp	r3, #1
 800c438:	d006      	beq.n	800c448 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c442:	2b00      	cmp	r3, #0
 800c444:	f000 80d6 	beq.w	800c5f4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c448:	4b76      	ldr	r3, [pc, #472]	; (800c624 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	4a75      	ldr	r2, [pc, #468]	; (800c624 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c44e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c452:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c454:	f7fc fe34 	bl	80090c0 <HAL_GetTick>
 800c458:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c45a:	e008      	b.n	800c46e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800c45c:	f7fc fe30 	bl	80090c0 <HAL_GetTick>
 800c460:	4602      	mov	r2, r0
 800c462:	697b      	ldr	r3, [r7, #20]
 800c464:	1ad3      	subs	r3, r2, r3
 800c466:	2b64      	cmp	r3, #100	; 0x64
 800c468:	d901      	bls.n	800c46e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c46a:	2303      	movs	r3, #3
 800c46c:	e195      	b.n	800c79a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c46e:	4b6d      	ldr	r3, [pc, #436]	; (800c624 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c476:	2b00      	cmp	r3, #0
 800c478:	d1f0      	bne.n	800c45c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	f003 0301 	and.w	r3, r3, #1
 800c482:	2b00      	cmp	r3, #0
 800c484:	d021      	beq.n	800c4ca <HAL_RCCEx_PeriphCLKConfig+0x572>
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d11d      	bne.n	800c4ca <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800c48e:	4b65      	ldr	r3, [pc, #404]	; (800c624 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c490:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c494:	0c1b      	lsrs	r3, r3, #16
 800c496:	f003 0303 	and.w	r3, r3, #3
 800c49a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800c49c:	4b61      	ldr	r3, [pc, #388]	; (800c624 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c49e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c4a2:	0e1b      	lsrs	r3, r3, #24
 800c4a4:	f003 030f 	and.w	r3, r3, #15
 800c4a8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	685b      	ldr	r3, [r3, #4]
 800c4ae:	019a      	lsls	r2, r3, #6
 800c4b0:	693b      	ldr	r3, [r7, #16]
 800c4b2:	041b      	lsls	r3, r3, #16
 800c4b4:	431a      	orrs	r2, r3
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	061b      	lsls	r3, r3, #24
 800c4ba:	431a      	orrs	r2, r3
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	689b      	ldr	r3, [r3, #8]
 800c4c0:	071b      	lsls	r3, r3, #28
 800c4c2:	4958      	ldr	r1, [pc, #352]	; (800c624 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c4c4:	4313      	orrs	r3, r2
 800c4c6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d004      	beq.n	800c4e0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c4de:	d00a      	beq.n	800c4f6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d02e      	beq.n	800c54a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c4f4:	d129      	bne.n	800c54a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800c4f6:	4b4b      	ldr	r3, [pc, #300]	; (800c624 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c4f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c4fc:	0c1b      	lsrs	r3, r3, #16
 800c4fe:	f003 0303 	and.w	r3, r3, #3
 800c502:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c504:	4b47      	ldr	r3, [pc, #284]	; (800c624 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c506:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c50a:	0f1b      	lsrs	r3, r3, #28
 800c50c:	f003 0307 	and.w	r3, r3, #7
 800c510:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	685b      	ldr	r3, [r3, #4]
 800c516:	019a      	lsls	r2, r3, #6
 800c518:	693b      	ldr	r3, [r7, #16]
 800c51a:	041b      	lsls	r3, r3, #16
 800c51c:	431a      	orrs	r2, r3
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	68db      	ldr	r3, [r3, #12]
 800c522:	061b      	lsls	r3, r3, #24
 800c524:	431a      	orrs	r2, r3
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	071b      	lsls	r3, r3, #28
 800c52a:	493e      	ldr	r1, [pc, #248]	; (800c624 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c52c:	4313      	orrs	r3, r2
 800c52e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800c532:	4b3c      	ldr	r3, [pc, #240]	; (800c624 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c534:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c538:	f023 021f 	bic.w	r2, r3, #31
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c540:	3b01      	subs	r3, #1
 800c542:	4938      	ldr	r1, [pc, #224]	; (800c624 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c544:	4313      	orrs	r3, r2
 800c546:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c552:	2b00      	cmp	r3, #0
 800c554:	d01d      	beq.n	800c592 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800c556:	4b33      	ldr	r3, [pc, #204]	; (800c624 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c558:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c55c:	0e1b      	lsrs	r3, r3, #24
 800c55e:	f003 030f 	and.w	r3, r3, #15
 800c562:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c564:	4b2f      	ldr	r3, [pc, #188]	; (800c624 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c566:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c56a:	0f1b      	lsrs	r3, r3, #28
 800c56c:	f003 0307 	and.w	r3, r3, #7
 800c570:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	685b      	ldr	r3, [r3, #4]
 800c576:	019a      	lsls	r2, r3, #6
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	691b      	ldr	r3, [r3, #16]
 800c57c:	041b      	lsls	r3, r3, #16
 800c57e:	431a      	orrs	r2, r3
 800c580:	693b      	ldr	r3, [r7, #16]
 800c582:	061b      	lsls	r3, r3, #24
 800c584:	431a      	orrs	r2, r3
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	071b      	lsls	r3, r3, #28
 800c58a:	4926      	ldr	r1, [pc, #152]	; (800c624 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c58c:	4313      	orrs	r3, r2
 800c58e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d011      	beq.n	800c5c2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	685b      	ldr	r3, [r3, #4]
 800c5a2:	019a      	lsls	r2, r3, #6
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	691b      	ldr	r3, [r3, #16]
 800c5a8:	041b      	lsls	r3, r3, #16
 800c5aa:	431a      	orrs	r2, r3
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	68db      	ldr	r3, [r3, #12]
 800c5b0:	061b      	lsls	r3, r3, #24
 800c5b2:	431a      	orrs	r2, r3
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	689b      	ldr	r3, [r3, #8]
 800c5b8:	071b      	lsls	r3, r3, #28
 800c5ba:	491a      	ldr	r1, [pc, #104]	; (800c624 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c5bc:	4313      	orrs	r3, r2
 800c5be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c5c2:	4b18      	ldr	r3, [pc, #96]	; (800c624 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	4a17      	ldr	r2, [pc, #92]	; (800c624 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c5c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c5cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c5ce:	f7fc fd77 	bl	80090c0 <HAL_GetTick>
 800c5d2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c5d4:	e008      	b.n	800c5e8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800c5d6:	f7fc fd73 	bl	80090c0 <HAL_GetTick>
 800c5da:	4602      	mov	r2, r0
 800c5dc:	697b      	ldr	r3, [r7, #20]
 800c5de:	1ad3      	subs	r3, r2, r3
 800c5e0:	2b64      	cmp	r3, #100	; 0x64
 800c5e2:	d901      	bls.n	800c5e8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c5e4:	2303      	movs	r3, #3
 800c5e6:	e0d8      	b.n	800c79a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c5e8:	4b0e      	ldr	r3, [pc, #56]	; (800c624 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d0f0      	beq.n	800c5d6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800c5f4:	69bb      	ldr	r3, [r7, #24]
 800c5f6:	2b01      	cmp	r3, #1
 800c5f8:	f040 80ce 	bne.w	800c798 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800c5fc:	4b09      	ldr	r3, [pc, #36]	; (800c624 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	4a08      	ldr	r2, [pc, #32]	; (800c624 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c602:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c606:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c608:	f7fc fd5a 	bl	80090c0 <HAL_GetTick>
 800c60c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c60e:	e00b      	b.n	800c628 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800c610:	f7fc fd56 	bl	80090c0 <HAL_GetTick>
 800c614:	4602      	mov	r2, r0
 800c616:	697b      	ldr	r3, [r7, #20]
 800c618:	1ad3      	subs	r3, r2, r3
 800c61a:	2b64      	cmp	r3, #100	; 0x64
 800c61c:	d904      	bls.n	800c628 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c61e:	2303      	movs	r3, #3
 800c620:	e0bb      	b.n	800c79a <HAL_RCCEx_PeriphCLKConfig+0x842>
 800c622:	bf00      	nop
 800c624:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c628:	4b5e      	ldr	r3, [pc, #376]	; (800c7a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c630:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c634:	d0ec      	beq.n	800c610 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d003      	beq.n	800c64a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c646:	2b00      	cmp	r3, #0
 800c648:	d009      	beq.n	800c65e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800c652:	2b00      	cmp	r3, #0
 800c654:	d02e      	beq.n	800c6b4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d12a      	bne.n	800c6b4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800c65e:	4b51      	ldr	r3, [pc, #324]	; (800c7a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c664:	0c1b      	lsrs	r3, r3, #16
 800c666:	f003 0303 	and.w	r3, r3, #3
 800c66a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c66c:	4b4d      	ldr	r3, [pc, #308]	; (800c7a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c66e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c672:	0f1b      	lsrs	r3, r3, #28
 800c674:	f003 0307 	and.w	r3, r3, #7
 800c678:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	695b      	ldr	r3, [r3, #20]
 800c67e:	019a      	lsls	r2, r3, #6
 800c680:	693b      	ldr	r3, [r7, #16]
 800c682:	041b      	lsls	r3, r3, #16
 800c684:	431a      	orrs	r2, r3
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	699b      	ldr	r3, [r3, #24]
 800c68a:	061b      	lsls	r3, r3, #24
 800c68c:	431a      	orrs	r2, r3
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	071b      	lsls	r3, r3, #28
 800c692:	4944      	ldr	r1, [pc, #272]	; (800c7a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c694:	4313      	orrs	r3, r2
 800c696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800c69a:	4b42      	ldr	r3, [pc, #264]	; (800c7a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c69c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c6a0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6a8:	3b01      	subs	r3, #1
 800c6aa:	021b      	lsls	r3, r3, #8
 800c6ac:	493d      	ldr	r1, [pc, #244]	; (800c7a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c6ae:	4313      	orrs	r3, r2
 800c6b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d022      	beq.n	800c706 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c6c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c6c8:	d11d      	bne.n	800c706 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c6ca:	4b36      	ldr	r3, [pc, #216]	; (800c7a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c6cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c6d0:	0e1b      	lsrs	r3, r3, #24
 800c6d2:	f003 030f 	and.w	r3, r3, #15
 800c6d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c6d8:	4b32      	ldr	r3, [pc, #200]	; (800c7a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c6da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c6de:	0f1b      	lsrs	r3, r3, #28
 800c6e0:	f003 0307 	and.w	r3, r3, #7
 800c6e4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	695b      	ldr	r3, [r3, #20]
 800c6ea:	019a      	lsls	r2, r3, #6
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	6a1b      	ldr	r3, [r3, #32]
 800c6f0:	041b      	lsls	r3, r3, #16
 800c6f2:	431a      	orrs	r2, r3
 800c6f4:	693b      	ldr	r3, [r7, #16]
 800c6f6:	061b      	lsls	r3, r3, #24
 800c6f8:	431a      	orrs	r2, r3
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	071b      	lsls	r3, r3, #28
 800c6fe:	4929      	ldr	r1, [pc, #164]	; (800c7a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c700:	4313      	orrs	r3, r2
 800c702:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	f003 0308 	and.w	r3, r3, #8
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d028      	beq.n	800c764 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c712:	4b24      	ldr	r3, [pc, #144]	; (800c7a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c718:	0e1b      	lsrs	r3, r3, #24
 800c71a:	f003 030f 	and.w	r3, r3, #15
 800c71e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800c720:	4b20      	ldr	r3, [pc, #128]	; (800c7a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c726:	0c1b      	lsrs	r3, r3, #16
 800c728:	f003 0303 	and.w	r3, r3, #3
 800c72c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	695b      	ldr	r3, [r3, #20]
 800c732:	019a      	lsls	r2, r3, #6
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	041b      	lsls	r3, r3, #16
 800c738:	431a      	orrs	r2, r3
 800c73a:	693b      	ldr	r3, [r7, #16]
 800c73c:	061b      	lsls	r3, r3, #24
 800c73e:	431a      	orrs	r2, r3
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	69db      	ldr	r3, [r3, #28]
 800c744:	071b      	lsls	r3, r3, #28
 800c746:	4917      	ldr	r1, [pc, #92]	; (800c7a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c748:	4313      	orrs	r3, r2
 800c74a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800c74e:	4b15      	ldr	r3, [pc, #84]	; (800c7a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c750:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c754:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c75c:	4911      	ldr	r1, [pc, #68]	; (800c7a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c75e:	4313      	orrs	r3, r2
 800c760:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800c764:	4b0f      	ldr	r3, [pc, #60]	; (800c7a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	4a0e      	ldr	r2, [pc, #56]	; (800c7a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c76a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c76e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c770:	f7fc fca6 	bl	80090c0 <HAL_GetTick>
 800c774:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c776:	e008      	b.n	800c78a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800c778:	f7fc fca2 	bl	80090c0 <HAL_GetTick>
 800c77c:	4602      	mov	r2, r0
 800c77e:	697b      	ldr	r3, [r7, #20]
 800c780:	1ad3      	subs	r3, r2, r3
 800c782:	2b64      	cmp	r3, #100	; 0x64
 800c784:	d901      	bls.n	800c78a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c786:	2303      	movs	r3, #3
 800c788:	e007      	b.n	800c79a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c78a:	4b06      	ldr	r3, [pc, #24]	; (800c7a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c792:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c796:	d1ef      	bne.n	800c778 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800c798:	2300      	movs	r3, #0
}
 800c79a:	4618      	mov	r0, r3
 800c79c:	3720      	adds	r7, #32
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	bd80      	pop	{r7, pc}
 800c7a2:	bf00      	nop
 800c7a4:	40023800 	.word	0x40023800

0800c7a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c7a8:	b580      	push	{r7, lr}
 800c7aa:	b082      	sub	sp, #8
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d101      	bne.n	800c7ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c7b6:	2301      	movs	r3, #1
 800c7b8:	e049      	b.n	800c84e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c7c0:	b2db      	uxtb	r3, r3
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d106      	bne.n	800c7d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c7ce:	6878      	ldr	r0, [r7, #4]
 800c7d0:	f7f7 f9a6 	bl	8003b20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	2202      	movs	r2, #2
 800c7d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681a      	ldr	r2, [r3, #0]
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	3304      	adds	r3, #4
 800c7e4:	4619      	mov	r1, r3
 800c7e6:	4610      	mov	r0, r2
 800c7e8:	f000 fac0 	bl	800cd6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	2201      	movs	r2, #1
 800c7f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2201      	movs	r2, #1
 800c7f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2201      	movs	r2, #1
 800c800:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	2201      	movs	r2, #1
 800c808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	2201      	movs	r2, #1
 800c810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	2201      	movs	r2, #1
 800c818:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	2201      	movs	r2, #1
 800c820:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	2201      	movs	r2, #1
 800c828:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	2201      	movs	r2, #1
 800c830:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	2201      	movs	r2, #1
 800c838:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	2201      	movs	r2, #1
 800c840:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	2201      	movs	r2, #1
 800c848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c84c:	2300      	movs	r3, #0
}
 800c84e:	4618      	mov	r0, r3
 800c850:	3708      	adds	r7, #8
 800c852:	46bd      	mov	sp, r7
 800c854:	bd80      	pop	{r7, pc}
	...

0800c858 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c858:	b480      	push	{r7}
 800c85a:	b085      	sub	sp, #20
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c866:	b2db      	uxtb	r3, r3
 800c868:	2b01      	cmp	r3, #1
 800c86a:	d001      	beq.n	800c870 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c86c:	2301      	movs	r3, #1
 800c86e:	e054      	b.n	800c91a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2202      	movs	r2, #2
 800c874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	68da      	ldr	r2, [r3, #12]
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	f042 0201 	orr.w	r2, r2, #1
 800c886:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	4a26      	ldr	r2, [pc, #152]	; (800c928 <HAL_TIM_Base_Start_IT+0xd0>)
 800c88e:	4293      	cmp	r3, r2
 800c890:	d022      	beq.n	800c8d8 <HAL_TIM_Base_Start_IT+0x80>
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c89a:	d01d      	beq.n	800c8d8 <HAL_TIM_Base_Start_IT+0x80>
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	4a22      	ldr	r2, [pc, #136]	; (800c92c <HAL_TIM_Base_Start_IT+0xd4>)
 800c8a2:	4293      	cmp	r3, r2
 800c8a4:	d018      	beq.n	800c8d8 <HAL_TIM_Base_Start_IT+0x80>
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	4a21      	ldr	r2, [pc, #132]	; (800c930 <HAL_TIM_Base_Start_IT+0xd8>)
 800c8ac:	4293      	cmp	r3, r2
 800c8ae:	d013      	beq.n	800c8d8 <HAL_TIM_Base_Start_IT+0x80>
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	4a1f      	ldr	r2, [pc, #124]	; (800c934 <HAL_TIM_Base_Start_IT+0xdc>)
 800c8b6:	4293      	cmp	r3, r2
 800c8b8:	d00e      	beq.n	800c8d8 <HAL_TIM_Base_Start_IT+0x80>
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	4a1e      	ldr	r2, [pc, #120]	; (800c938 <HAL_TIM_Base_Start_IT+0xe0>)
 800c8c0:	4293      	cmp	r3, r2
 800c8c2:	d009      	beq.n	800c8d8 <HAL_TIM_Base_Start_IT+0x80>
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	4a1c      	ldr	r2, [pc, #112]	; (800c93c <HAL_TIM_Base_Start_IT+0xe4>)
 800c8ca:	4293      	cmp	r3, r2
 800c8cc:	d004      	beq.n	800c8d8 <HAL_TIM_Base_Start_IT+0x80>
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	4a1b      	ldr	r2, [pc, #108]	; (800c940 <HAL_TIM_Base_Start_IT+0xe8>)
 800c8d4:	4293      	cmp	r3, r2
 800c8d6:	d115      	bne.n	800c904 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	689a      	ldr	r2, [r3, #8]
 800c8de:	4b19      	ldr	r3, [pc, #100]	; (800c944 <HAL_TIM_Base_Start_IT+0xec>)
 800c8e0:	4013      	ands	r3, r2
 800c8e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	2b06      	cmp	r3, #6
 800c8e8:	d015      	beq.n	800c916 <HAL_TIM_Base_Start_IT+0xbe>
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c8f0:	d011      	beq.n	800c916 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	681a      	ldr	r2, [r3, #0]
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	f042 0201 	orr.w	r2, r2, #1
 800c900:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c902:	e008      	b.n	800c916 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	681a      	ldr	r2, [r3, #0]
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	f042 0201 	orr.w	r2, r2, #1
 800c912:	601a      	str	r2, [r3, #0]
 800c914:	e000      	b.n	800c918 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c916:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c918:	2300      	movs	r3, #0
}
 800c91a:	4618      	mov	r0, r3
 800c91c:	3714      	adds	r7, #20
 800c91e:	46bd      	mov	sp, r7
 800c920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c924:	4770      	bx	lr
 800c926:	bf00      	nop
 800c928:	40010000 	.word	0x40010000
 800c92c:	40000400 	.word	0x40000400
 800c930:	40000800 	.word	0x40000800
 800c934:	40000c00 	.word	0x40000c00
 800c938:	40010400 	.word	0x40010400
 800c93c:	40014000 	.word	0x40014000
 800c940:	40001800 	.word	0x40001800
 800c944:	00010007 	.word	0x00010007

0800c948 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b082      	sub	sp, #8
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	691b      	ldr	r3, [r3, #16]
 800c956:	f003 0302 	and.w	r3, r3, #2
 800c95a:	2b02      	cmp	r3, #2
 800c95c:	d122      	bne.n	800c9a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	68db      	ldr	r3, [r3, #12]
 800c964:	f003 0302 	and.w	r3, r3, #2
 800c968:	2b02      	cmp	r3, #2
 800c96a:	d11b      	bne.n	800c9a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	f06f 0202 	mvn.w	r2, #2
 800c974:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	2201      	movs	r2, #1
 800c97a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	699b      	ldr	r3, [r3, #24]
 800c982:	f003 0303 	and.w	r3, r3, #3
 800c986:	2b00      	cmp	r3, #0
 800c988:	d003      	beq.n	800c992 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c98a:	6878      	ldr	r0, [r7, #4]
 800c98c:	f000 f9d0 	bl	800cd30 <HAL_TIM_IC_CaptureCallback>
 800c990:	e005      	b.n	800c99e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c992:	6878      	ldr	r0, [r7, #4]
 800c994:	f000 f9c2 	bl	800cd1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c998:	6878      	ldr	r0, [r7, #4]
 800c99a:	f000 f9d3 	bl	800cd44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	691b      	ldr	r3, [r3, #16]
 800c9aa:	f003 0304 	and.w	r3, r3, #4
 800c9ae:	2b04      	cmp	r3, #4
 800c9b0:	d122      	bne.n	800c9f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	68db      	ldr	r3, [r3, #12]
 800c9b8:	f003 0304 	and.w	r3, r3, #4
 800c9bc:	2b04      	cmp	r3, #4
 800c9be:	d11b      	bne.n	800c9f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	f06f 0204 	mvn.w	r2, #4
 800c9c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	2202      	movs	r2, #2
 800c9ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	699b      	ldr	r3, [r3, #24]
 800c9d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d003      	beq.n	800c9e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c9de:	6878      	ldr	r0, [r7, #4]
 800c9e0:	f000 f9a6 	bl	800cd30 <HAL_TIM_IC_CaptureCallback>
 800c9e4:	e005      	b.n	800c9f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c9e6:	6878      	ldr	r0, [r7, #4]
 800c9e8:	f000 f998 	bl	800cd1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c9ec:	6878      	ldr	r0, [r7, #4]
 800c9ee:	f000 f9a9 	bl	800cd44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	691b      	ldr	r3, [r3, #16]
 800c9fe:	f003 0308 	and.w	r3, r3, #8
 800ca02:	2b08      	cmp	r3, #8
 800ca04:	d122      	bne.n	800ca4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	68db      	ldr	r3, [r3, #12]
 800ca0c:	f003 0308 	and.w	r3, r3, #8
 800ca10:	2b08      	cmp	r3, #8
 800ca12:	d11b      	bne.n	800ca4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	f06f 0208 	mvn.w	r2, #8
 800ca1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	2204      	movs	r2, #4
 800ca22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	69db      	ldr	r3, [r3, #28]
 800ca2a:	f003 0303 	and.w	r3, r3, #3
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d003      	beq.n	800ca3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ca32:	6878      	ldr	r0, [r7, #4]
 800ca34:	f000 f97c 	bl	800cd30 <HAL_TIM_IC_CaptureCallback>
 800ca38:	e005      	b.n	800ca46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ca3a:	6878      	ldr	r0, [r7, #4]
 800ca3c:	f000 f96e 	bl	800cd1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ca40:	6878      	ldr	r0, [r7, #4]
 800ca42:	f000 f97f 	bl	800cd44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	2200      	movs	r2, #0
 800ca4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	691b      	ldr	r3, [r3, #16]
 800ca52:	f003 0310 	and.w	r3, r3, #16
 800ca56:	2b10      	cmp	r3, #16
 800ca58:	d122      	bne.n	800caa0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	68db      	ldr	r3, [r3, #12]
 800ca60:	f003 0310 	and.w	r3, r3, #16
 800ca64:	2b10      	cmp	r3, #16
 800ca66:	d11b      	bne.n	800caa0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	f06f 0210 	mvn.w	r2, #16
 800ca70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	2208      	movs	r2, #8
 800ca76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	69db      	ldr	r3, [r3, #28]
 800ca7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d003      	beq.n	800ca8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ca86:	6878      	ldr	r0, [r7, #4]
 800ca88:	f000 f952 	bl	800cd30 <HAL_TIM_IC_CaptureCallback>
 800ca8c:	e005      	b.n	800ca9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ca8e:	6878      	ldr	r0, [r7, #4]
 800ca90:	f000 f944 	bl	800cd1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ca94:	6878      	ldr	r0, [r7, #4]
 800ca96:	f000 f955 	bl	800cd44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	2200      	movs	r2, #0
 800ca9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	691b      	ldr	r3, [r3, #16]
 800caa6:	f003 0301 	and.w	r3, r3, #1
 800caaa:	2b01      	cmp	r3, #1
 800caac:	d10e      	bne.n	800cacc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	68db      	ldr	r3, [r3, #12]
 800cab4:	f003 0301 	and.w	r3, r3, #1
 800cab8:	2b01      	cmp	r3, #1
 800caba:	d107      	bne.n	800cacc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	f06f 0201 	mvn.w	r2, #1
 800cac4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cac6:	6878      	ldr	r0, [r7, #4]
 800cac8:	f7f5 ff26 	bl	8002918 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	691b      	ldr	r3, [r3, #16]
 800cad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cad6:	2b80      	cmp	r3, #128	; 0x80
 800cad8:	d10e      	bne.n	800caf8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	68db      	ldr	r3, [r3, #12]
 800cae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cae4:	2b80      	cmp	r3, #128	; 0x80
 800cae6:	d107      	bne.n	800caf8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800caf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800caf2:	6878      	ldr	r0, [r7, #4]
 800caf4:	f000 fb0c 	bl	800d110 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	691b      	ldr	r3, [r3, #16]
 800cafe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb06:	d10e      	bne.n	800cb26 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	68db      	ldr	r3, [r3, #12]
 800cb0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb12:	2b80      	cmp	r3, #128	; 0x80
 800cb14:	d107      	bne.n	800cb26 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800cb1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800cb20:	6878      	ldr	r0, [r7, #4]
 800cb22:	f000 faff 	bl	800d124 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	691b      	ldr	r3, [r3, #16]
 800cb2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb30:	2b40      	cmp	r3, #64	; 0x40
 800cb32:	d10e      	bne.n	800cb52 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	68db      	ldr	r3, [r3, #12]
 800cb3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb3e:	2b40      	cmp	r3, #64	; 0x40
 800cb40:	d107      	bne.n	800cb52 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800cb4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cb4c:	6878      	ldr	r0, [r7, #4]
 800cb4e:	f000 f903 	bl	800cd58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	691b      	ldr	r3, [r3, #16]
 800cb58:	f003 0320 	and.w	r3, r3, #32
 800cb5c:	2b20      	cmp	r3, #32
 800cb5e:	d10e      	bne.n	800cb7e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	68db      	ldr	r3, [r3, #12]
 800cb66:	f003 0320 	and.w	r3, r3, #32
 800cb6a:	2b20      	cmp	r3, #32
 800cb6c:	d107      	bne.n	800cb7e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	f06f 0220 	mvn.w	r2, #32
 800cb76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cb78:	6878      	ldr	r0, [r7, #4]
 800cb7a:	f000 fabf 	bl	800d0fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cb7e:	bf00      	nop
 800cb80:	3708      	adds	r7, #8
 800cb82:	46bd      	mov	sp, r7
 800cb84:	bd80      	pop	{r7, pc}
	...

0800cb88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b084      	sub	sp, #16
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	6078      	str	r0, [r7, #4]
 800cb90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cb92:	2300      	movs	r3, #0
 800cb94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cb9c:	2b01      	cmp	r3, #1
 800cb9e:	d101      	bne.n	800cba4 <HAL_TIM_ConfigClockSource+0x1c>
 800cba0:	2302      	movs	r3, #2
 800cba2:	e0b4      	b.n	800cd0e <HAL_TIM_ConfigClockSource+0x186>
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	2201      	movs	r2, #1
 800cba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	2202      	movs	r2, #2
 800cbb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	689b      	ldr	r3, [r3, #8]
 800cbba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800cbbc:	68ba      	ldr	r2, [r7, #8]
 800cbbe:	4b56      	ldr	r3, [pc, #344]	; (800cd18 <HAL_TIM_ConfigClockSource+0x190>)
 800cbc0:	4013      	ands	r3, r2
 800cbc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cbc4:	68bb      	ldr	r3, [r7, #8]
 800cbc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cbca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	68ba      	ldr	r2, [r7, #8]
 800cbd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800cbd4:	683b      	ldr	r3, [r7, #0]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cbdc:	d03e      	beq.n	800cc5c <HAL_TIM_ConfigClockSource+0xd4>
 800cbde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cbe2:	f200 8087 	bhi.w	800ccf4 <HAL_TIM_ConfigClockSource+0x16c>
 800cbe6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cbea:	f000 8086 	beq.w	800ccfa <HAL_TIM_ConfigClockSource+0x172>
 800cbee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cbf2:	d87f      	bhi.n	800ccf4 <HAL_TIM_ConfigClockSource+0x16c>
 800cbf4:	2b70      	cmp	r3, #112	; 0x70
 800cbf6:	d01a      	beq.n	800cc2e <HAL_TIM_ConfigClockSource+0xa6>
 800cbf8:	2b70      	cmp	r3, #112	; 0x70
 800cbfa:	d87b      	bhi.n	800ccf4 <HAL_TIM_ConfigClockSource+0x16c>
 800cbfc:	2b60      	cmp	r3, #96	; 0x60
 800cbfe:	d050      	beq.n	800cca2 <HAL_TIM_ConfigClockSource+0x11a>
 800cc00:	2b60      	cmp	r3, #96	; 0x60
 800cc02:	d877      	bhi.n	800ccf4 <HAL_TIM_ConfigClockSource+0x16c>
 800cc04:	2b50      	cmp	r3, #80	; 0x50
 800cc06:	d03c      	beq.n	800cc82 <HAL_TIM_ConfigClockSource+0xfa>
 800cc08:	2b50      	cmp	r3, #80	; 0x50
 800cc0a:	d873      	bhi.n	800ccf4 <HAL_TIM_ConfigClockSource+0x16c>
 800cc0c:	2b40      	cmp	r3, #64	; 0x40
 800cc0e:	d058      	beq.n	800ccc2 <HAL_TIM_ConfigClockSource+0x13a>
 800cc10:	2b40      	cmp	r3, #64	; 0x40
 800cc12:	d86f      	bhi.n	800ccf4 <HAL_TIM_ConfigClockSource+0x16c>
 800cc14:	2b30      	cmp	r3, #48	; 0x30
 800cc16:	d064      	beq.n	800cce2 <HAL_TIM_ConfigClockSource+0x15a>
 800cc18:	2b30      	cmp	r3, #48	; 0x30
 800cc1a:	d86b      	bhi.n	800ccf4 <HAL_TIM_ConfigClockSource+0x16c>
 800cc1c:	2b20      	cmp	r3, #32
 800cc1e:	d060      	beq.n	800cce2 <HAL_TIM_ConfigClockSource+0x15a>
 800cc20:	2b20      	cmp	r3, #32
 800cc22:	d867      	bhi.n	800ccf4 <HAL_TIM_ConfigClockSource+0x16c>
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d05c      	beq.n	800cce2 <HAL_TIM_ConfigClockSource+0x15a>
 800cc28:	2b10      	cmp	r3, #16
 800cc2a:	d05a      	beq.n	800cce2 <HAL_TIM_ConfigClockSource+0x15a>
 800cc2c:	e062      	b.n	800ccf4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	6818      	ldr	r0, [r3, #0]
 800cc32:	683b      	ldr	r3, [r7, #0]
 800cc34:	6899      	ldr	r1, [r3, #8]
 800cc36:	683b      	ldr	r3, [r7, #0]
 800cc38:	685a      	ldr	r2, [r3, #4]
 800cc3a:	683b      	ldr	r3, [r7, #0]
 800cc3c:	68db      	ldr	r3, [r3, #12]
 800cc3e:	f000 f9af 	bl	800cfa0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	689b      	ldr	r3, [r3, #8]
 800cc48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cc4a:	68bb      	ldr	r3, [r7, #8]
 800cc4c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800cc50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	68ba      	ldr	r2, [r7, #8]
 800cc58:	609a      	str	r2, [r3, #8]
      break;
 800cc5a:	e04f      	b.n	800ccfc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	6818      	ldr	r0, [r3, #0]
 800cc60:	683b      	ldr	r3, [r7, #0]
 800cc62:	6899      	ldr	r1, [r3, #8]
 800cc64:	683b      	ldr	r3, [r7, #0]
 800cc66:	685a      	ldr	r2, [r3, #4]
 800cc68:	683b      	ldr	r3, [r7, #0]
 800cc6a:	68db      	ldr	r3, [r3, #12]
 800cc6c:	f000 f998 	bl	800cfa0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	689a      	ldr	r2, [r3, #8]
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cc7e:	609a      	str	r2, [r3, #8]
      break;
 800cc80:	e03c      	b.n	800ccfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	6818      	ldr	r0, [r3, #0]
 800cc86:	683b      	ldr	r3, [r7, #0]
 800cc88:	6859      	ldr	r1, [r3, #4]
 800cc8a:	683b      	ldr	r3, [r7, #0]
 800cc8c:	68db      	ldr	r3, [r3, #12]
 800cc8e:	461a      	mov	r2, r3
 800cc90:	f000 f90c 	bl	800ceac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	2150      	movs	r1, #80	; 0x50
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	f000 f965 	bl	800cf6a <TIM_ITRx_SetConfig>
      break;
 800cca0:	e02c      	b.n	800ccfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	6818      	ldr	r0, [r3, #0]
 800cca6:	683b      	ldr	r3, [r7, #0]
 800cca8:	6859      	ldr	r1, [r3, #4]
 800ccaa:	683b      	ldr	r3, [r7, #0]
 800ccac:	68db      	ldr	r3, [r3, #12]
 800ccae:	461a      	mov	r2, r3
 800ccb0:	f000 f92b 	bl	800cf0a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	2160      	movs	r1, #96	; 0x60
 800ccba:	4618      	mov	r0, r3
 800ccbc:	f000 f955 	bl	800cf6a <TIM_ITRx_SetConfig>
      break;
 800ccc0:	e01c      	b.n	800ccfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	6818      	ldr	r0, [r3, #0]
 800ccc6:	683b      	ldr	r3, [r7, #0]
 800ccc8:	6859      	ldr	r1, [r3, #4]
 800ccca:	683b      	ldr	r3, [r7, #0]
 800cccc:	68db      	ldr	r3, [r3, #12]
 800ccce:	461a      	mov	r2, r3
 800ccd0:	f000 f8ec 	bl	800ceac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	2140      	movs	r1, #64	; 0x40
 800ccda:	4618      	mov	r0, r3
 800ccdc:	f000 f945 	bl	800cf6a <TIM_ITRx_SetConfig>
      break;
 800cce0:	e00c      	b.n	800ccfc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	681a      	ldr	r2, [r3, #0]
 800cce6:	683b      	ldr	r3, [r7, #0]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	4619      	mov	r1, r3
 800ccec:	4610      	mov	r0, r2
 800ccee:	f000 f93c 	bl	800cf6a <TIM_ITRx_SetConfig>
      break;
 800ccf2:	e003      	b.n	800ccfc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ccf4:	2301      	movs	r3, #1
 800ccf6:	73fb      	strb	r3, [r7, #15]
      break;
 800ccf8:	e000      	b.n	800ccfc <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ccfa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	2201      	movs	r2, #1
 800cd00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	2200      	movs	r2, #0
 800cd08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800cd0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd0e:	4618      	mov	r0, r3
 800cd10:	3710      	adds	r7, #16
 800cd12:	46bd      	mov	sp, r7
 800cd14:	bd80      	pop	{r7, pc}
 800cd16:	bf00      	nop
 800cd18:	fffeff88 	.word	0xfffeff88

0800cd1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cd1c:	b480      	push	{r7}
 800cd1e:	b083      	sub	sp, #12
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cd24:	bf00      	nop
 800cd26:	370c      	adds	r7, #12
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2e:	4770      	bx	lr

0800cd30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cd30:	b480      	push	{r7}
 800cd32:	b083      	sub	sp, #12
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cd38:	bf00      	nop
 800cd3a:	370c      	adds	r7, #12
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd42:	4770      	bx	lr

0800cd44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cd44:	b480      	push	{r7}
 800cd46:	b083      	sub	sp, #12
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cd4c:	bf00      	nop
 800cd4e:	370c      	adds	r7, #12
 800cd50:	46bd      	mov	sp, r7
 800cd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd56:	4770      	bx	lr

0800cd58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cd58:	b480      	push	{r7}
 800cd5a:	b083      	sub	sp, #12
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cd60:	bf00      	nop
 800cd62:	370c      	adds	r7, #12
 800cd64:	46bd      	mov	sp, r7
 800cd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6a:	4770      	bx	lr

0800cd6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800cd6c:	b480      	push	{r7}
 800cd6e:	b085      	sub	sp, #20
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
 800cd74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	4a40      	ldr	r2, [pc, #256]	; (800ce80 <TIM_Base_SetConfig+0x114>)
 800cd80:	4293      	cmp	r3, r2
 800cd82:	d013      	beq.n	800cdac <TIM_Base_SetConfig+0x40>
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd8a:	d00f      	beq.n	800cdac <TIM_Base_SetConfig+0x40>
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	4a3d      	ldr	r2, [pc, #244]	; (800ce84 <TIM_Base_SetConfig+0x118>)
 800cd90:	4293      	cmp	r3, r2
 800cd92:	d00b      	beq.n	800cdac <TIM_Base_SetConfig+0x40>
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	4a3c      	ldr	r2, [pc, #240]	; (800ce88 <TIM_Base_SetConfig+0x11c>)
 800cd98:	4293      	cmp	r3, r2
 800cd9a:	d007      	beq.n	800cdac <TIM_Base_SetConfig+0x40>
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	4a3b      	ldr	r2, [pc, #236]	; (800ce8c <TIM_Base_SetConfig+0x120>)
 800cda0:	4293      	cmp	r3, r2
 800cda2:	d003      	beq.n	800cdac <TIM_Base_SetConfig+0x40>
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	4a3a      	ldr	r2, [pc, #232]	; (800ce90 <TIM_Base_SetConfig+0x124>)
 800cda8:	4293      	cmp	r3, r2
 800cdaa:	d108      	bne.n	800cdbe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cdb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cdb4:	683b      	ldr	r3, [r7, #0]
 800cdb6:	685b      	ldr	r3, [r3, #4]
 800cdb8:	68fa      	ldr	r2, [r7, #12]
 800cdba:	4313      	orrs	r3, r2
 800cdbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	4a2f      	ldr	r2, [pc, #188]	; (800ce80 <TIM_Base_SetConfig+0x114>)
 800cdc2:	4293      	cmp	r3, r2
 800cdc4:	d02b      	beq.n	800ce1e <TIM_Base_SetConfig+0xb2>
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cdcc:	d027      	beq.n	800ce1e <TIM_Base_SetConfig+0xb2>
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	4a2c      	ldr	r2, [pc, #176]	; (800ce84 <TIM_Base_SetConfig+0x118>)
 800cdd2:	4293      	cmp	r3, r2
 800cdd4:	d023      	beq.n	800ce1e <TIM_Base_SetConfig+0xb2>
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	4a2b      	ldr	r2, [pc, #172]	; (800ce88 <TIM_Base_SetConfig+0x11c>)
 800cdda:	4293      	cmp	r3, r2
 800cddc:	d01f      	beq.n	800ce1e <TIM_Base_SetConfig+0xb2>
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	4a2a      	ldr	r2, [pc, #168]	; (800ce8c <TIM_Base_SetConfig+0x120>)
 800cde2:	4293      	cmp	r3, r2
 800cde4:	d01b      	beq.n	800ce1e <TIM_Base_SetConfig+0xb2>
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	4a29      	ldr	r2, [pc, #164]	; (800ce90 <TIM_Base_SetConfig+0x124>)
 800cdea:	4293      	cmp	r3, r2
 800cdec:	d017      	beq.n	800ce1e <TIM_Base_SetConfig+0xb2>
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	4a28      	ldr	r2, [pc, #160]	; (800ce94 <TIM_Base_SetConfig+0x128>)
 800cdf2:	4293      	cmp	r3, r2
 800cdf4:	d013      	beq.n	800ce1e <TIM_Base_SetConfig+0xb2>
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	4a27      	ldr	r2, [pc, #156]	; (800ce98 <TIM_Base_SetConfig+0x12c>)
 800cdfa:	4293      	cmp	r3, r2
 800cdfc:	d00f      	beq.n	800ce1e <TIM_Base_SetConfig+0xb2>
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	4a26      	ldr	r2, [pc, #152]	; (800ce9c <TIM_Base_SetConfig+0x130>)
 800ce02:	4293      	cmp	r3, r2
 800ce04:	d00b      	beq.n	800ce1e <TIM_Base_SetConfig+0xb2>
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	4a25      	ldr	r2, [pc, #148]	; (800cea0 <TIM_Base_SetConfig+0x134>)
 800ce0a:	4293      	cmp	r3, r2
 800ce0c:	d007      	beq.n	800ce1e <TIM_Base_SetConfig+0xb2>
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	4a24      	ldr	r2, [pc, #144]	; (800cea4 <TIM_Base_SetConfig+0x138>)
 800ce12:	4293      	cmp	r3, r2
 800ce14:	d003      	beq.n	800ce1e <TIM_Base_SetConfig+0xb2>
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	4a23      	ldr	r2, [pc, #140]	; (800cea8 <TIM_Base_SetConfig+0x13c>)
 800ce1a:	4293      	cmp	r3, r2
 800ce1c:	d108      	bne.n	800ce30 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ce24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ce26:	683b      	ldr	r3, [r7, #0]
 800ce28:	68db      	ldr	r3, [r3, #12]
 800ce2a:	68fa      	ldr	r2, [r7, #12]
 800ce2c:	4313      	orrs	r3, r2
 800ce2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ce36:	683b      	ldr	r3, [r7, #0]
 800ce38:	695b      	ldr	r3, [r3, #20]
 800ce3a:	4313      	orrs	r3, r2
 800ce3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	68fa      	ldr	r2, [r7, #12]
 800ce42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ce44:	683b      	ldr	r3, [r7, #0]
 800ce46:	689a      	ldr	r2, [r3, #8]
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ce4c:	683b      	ldr	r3, [r7, #0]
 800ce4e:	681a      	ldr	r2, [r3, #0]
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	4a0a      	ldr	r2, [pc, #40]	; (800ce80 <TIM_Base_SetConfig+0x114>)
 800ce58:	4293      	cmp	r3, r2
 800ce5a:	d003      	beq.n	800ce64 <TIM_Base_SetConfig+0xf8>
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	4a0c      	ldr	r2, [pc, #48]	; (800ce90 <TIM_Base_SetConfig+0x124>)
 800ce60:	4293      	cmp	r3, r2
 800ce62:	d103      	bne.n	800ce6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ce64:	683b      	ldr	r3, [r7, #0]
 800ce66:	691a      	ldr	r2, [r3, #16]
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	2201      	movs	r2, #1
 800ce70:	615a      	str	r2, [r3, #20]
}
 800ce72:	bf00      	nop
 800ce74:	3714      	adds	r7, #20
 800ce76:	46bd      	mov	sp, r7
 800ce78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7c:	4770      	bx	lr
 800ce7e:	bf00      	nop
 800ce80:	40010000 	.word	0x40010000
 800ce84:	40000400 	.word	0x40000400
 800ce88:	40000800 	.word	0x40000800
 800ce8c:	40000c00 	.word	0x40000c00
 800ce90:	40010400 	.word	0x40010400
 800ce94:	40014000 	.word	0x40014000
 800ce98:	40014400 	.word	0x40014400
 800ce9c:	40014800 	.word	0x40014800
 800cea0:	40001800 	.word	0x40001800
 800cea4:	40001c00 	.word	0x40001c00
 800cea8:	40002000 	.word	0x40002000

0800ceac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ceac:	b480      	push	{r7}
 800ceae:	b087      	sub	sp, #28
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	60f8      	str	r0, [r7, #12]
 800ceb4:	60b9      	str	r1, [r7, #8]
 800ceb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	6a1b      	ldr	r3, [r3, #32]
 800cebc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	6a1b      	ldr	r3, [r3, #32]
 800cec2:	f023 0201 	bic.w	r2, r3, #1
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	699b      	ldr	r3, [r3, #24]
 800cece:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ced0:	693b      	ldr	r3, [r7, #16]
 800ced2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ced6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	011b      	lsls	r3, r3, #4
 800cedc:	693a      	ldr	r2, [r7, #16]
 800cede:	4313      	orrs	r3, r2
 800cee0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cee2:	697b      	ldr	r3, [r7, #20]
 800cee4:	f023 030a 	bic.w	r3, r3, #10
 800cee8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ceea:	697a      	ldr	r2, [r7, #20]
 800ceec:	68bb      	ldr	r3, [r7, #8]
 800ceee:	4313      	orrs	r3, r2
 800cef0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	693a      	ldr	r2, [r7, #16]
 800cef6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	697a      	ldr	r2, [r7, #20]
 800cefc:	621a      	str	r2, [r3, #32]
}
 800cefe:	bf00      	nop
 800cf00:	371c      	adds	r7, #28
 800cf02:	46bd      	mov	sp, r7
 800cf04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf08:	4770      	bx	lr

0800cf0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cf0a:	b480      	push	{r7}
 800cf0c:	b087      	sub	sp, #28
 800cf0e:	af00      	add	r7, sp, #0
 800cf10:	60f8      	str	r0, [r7, #12]
 800cf12:	60b9      	str	r1, [r7, #8]
 800cf14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	6a1b      	ldr	r3, [r3, #32]
 800cf1a:	f023 0210 	bic.w	r2, r3, #16
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	699b      	ldr	r3, [r3, #24]
 800cf26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	6a1b      	ldr	r3, [r3, #32]
 800cf2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cf2e:	697b      	ldr	r3, [r7, #20]
 800cf30:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cf34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	031b      	lsls	r3, r3, #12
 800cf3a:	697a      	ldr	r2, [r7, #20]
 800cf3c:	4313      	orrs	r3, r2
 800cf3e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cf40:	693b      	ldr	r3, [r7, #16]
 800cf42:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800cf46:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cf48:	68bb      	ldr	r3, [r7, #8]
 800cf4a:	011b      	lsls	r3, r3, #4
 800cf4c:	693a      	ldr	r2, [r7, #16]
 800cf4e:	4313      	orrs	r3, r2
 800cf50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	697a      	ldr	r2, [r7, #20]
 800cf56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	693a      	ldr	r2, [r7, #16]
 800cf5c:	621a      	str	r2, [r3, #32]
}
 800cf5e:	bf00      	nop
 800cf60:	371c      	adds	r7, #28
 800cf62:	46bd      	mov	sp, r7
 800cf64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf68:	4770      	bx	lr

0800cf6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cf6a:	b480      	push	{r7}
 800cf6c:	b085      	sub	sp, #20
 800cf6e:	af00      	add	r7, sp, #0
 800cf70:	6078      	str	r0, [r7, #4]
 800cf72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	689b      	ldr	r3, [r3, #8]
 800cf78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cf82:	683a      	ldr	r2, [r7, #0]
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	4313      	orrs	r3, r2
 800cf88:	f043 0307 	orr.w	r3, r3, #7
 800cf8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	68fa      	ldr	r2, [r7, #12]
 800cf92:	609a      	str	r2, [r3, #8]
}
 800cf94:	bf00      	nop
 800cf96:	3714      	adds	r7, #20
 800cf98:	46bd      	mov	sp, r7
 800cf9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9e:	4770      	bx	lr

0800cfa0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cfa0:	b480      	push	{r7}
 800cfa2:	b087      	sub	sp, #28
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	60f8      	str	r0, [r7, #12]
 800cfa8:	60b9      	str	r1, [r7, #8]
 800cfaa:	607a      	str	r2, [r7, #4]
 800cfac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	689b      	ldr	r3, [r3, #8]
 800cfb2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cfb4:	697b      	ldr	r3, [r7, #20]
 800cfb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cfba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cfbc:	683b      	ldr	r3, [r7, #0]
 800cfbe:	021a      	lsls	r2, r3, #8
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	431a      	orrs	r2, r3
 800cfc4:	68bb      	ldr	r3, [r7, #8]
 800cfc6:	4313      	orrs	r3, r2
 800cfc8:	697a      	ldr	r2, [r7, #20]
 800cfca:	4313      	orrs	r3, r2
 800cfcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	697a      	ldr	r2, [r7, #20]
 800cfd2:	609a      	str	r2, [r3, #8]
}
 800cfd4:	bf00      	nop
 800cfd6:	371c      	adds	r7, #28
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfde:	4770      	bx	lr

0800cfe0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cfe0:	b480      	push	{r7}
 800cfe2:	b085      	sub	sp, #20
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
 800cfe8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cff0:	2b01      	cmp	r3, #1
 800cff2:	d101      	bne.n	800cff8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cff4:	2302      	movs	r3, #2
 800cff6:	e06d      	b.n	800d0d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	2201      	movs	r2, #1
 800cffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	2202      	movs	r2, #2
 800d004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	685b      	ldr	r3, [r3, #4]
 800d00e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	689b      	ldr	r3, [r3, #8]
 800d016:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	4a30      	ldr	r2, [pc, #192]	; (800d0e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d01e:	4293      	cmp	r3, r2
 800d020:	d004      	beq.n	800d02c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	4a2f      	ldr	r2, [pc, #188]	; (800d0e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d028:	4293      	cmp	r3, r2
 800d02a:	d108      	bne.n	800d03e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d032:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d034:	683b      	ldr	r3, [r7, #0]
 800d036:	685b      	ldr	r3, [r3, #4]
 800d038:	68fa      	ldr	r2, [r7, #12]
 800d03a:	4313      	orrs	r3, r2
 800d03c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d044:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d046:	683b      	ldr	r3, [r7, #0]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	68fa      	ldr	r2, [r7, #12]
 800d04c:	4313      	orrs	r3, r2
 800d04e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	68fa      	ldr	r2, [r7, #12]
 800d056:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	4a20      	ldr	r2, [pc, #128]	; (800d0e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d05e:	4293      	cmp	r3, r2
 800d060:	d022      	beq.n	800d0a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d06a:	d01d      	beq.n	800d0a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	4a1d      	ldr	r2, [pc, #116]	; (800d0e8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d072:	4293      	cmp	r3, r2
 800d074:	d018      	beq.n	800d0a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	4a1c      	ldr	r2, [pc, #112]	; (800d0ec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d07c:	4293      	cmp	r3, r2
 800d07e:	d013      	beq.n	800d0a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	4a1a      	ldr	r2, [pc, #104]	; (800d0f0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d086:	4293      	cmp	r3, r2
 800d088:	d00e      	beq.n	800d0a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	4a15      	ldr	r2, [pc, #84]	; (800d0e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d090:	4293      	cmp	r3, r2
 800d092:	d009      	beq.n	800d0a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	4a16      	ldr	r2, [pc, #88]	; (800d0f4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d09a:	4293      	cmp	r3, r2
 800d09c:	d004      	beq.n	800d0a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	4a15      	ldr	r2, [pc, #84]	; (800d0f8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d0a4:	4293      	cmp	r3, r2
 800d0a6:	d10c      	bne.n	800d0c2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d0a8:	68bb      	ldr	r3, [r7, #8]
 800d0aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d0ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d0b0:	683b      	ldr	r3, [r7, #0]
 800d0b2:	689b      	ldr	r3, [r3, #8]
 800d0b4:	68ba      	ldr	r2, [r7, #8]
 800d0b6:	4313      	orrs	r3, r2
 800d0b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	68ba      	ldr	r2, [r7, #8]
 800d0c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	2201      	movs	r2, #1
 800d0c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	2200      	movs	r2, #0
 800d0ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d0d2:	2300      	movs	r3, #0
}
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	3714      	adds	r7, #20
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0de:	4770      	bx	lr
 800d0e0:	40010000 	.word	0x40010000
 800d0e4:	40010400 	.word	0x40010400
 800d0e8:	40000400 	.word	0x40000400
 800d0ec:	40000800 	.word	0x40000800
 800d0f0:	40000c00 	.word	0x40000c00
 800d0f4:	40014000 	.word	0x40014000
 800d0f8:	40001800 	.word	0x40001800

0800d0fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d0fc:	b480      	push	{r7}
 800d0fe:	b083      	sub	sp, #12
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d104:	bf00      	nop
 800d106:	370c      	adds	r7, #12
 800d108:	46bd      	mov	sp, r7
 800d10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10e:	4770      	bx	lr

0800d110 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d110:	b480      	push	{r7}
 800d112:	b083      	sub	sp, #12
 800d114:	af00      	add	r7, sp, #0
 800d116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d118:	bf00      	nop
 800d11a:	370c      	adds	r7, #12
 800d11c:	46bd      	mov	sp, r7
 800d11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d122:	4770      	bx	lr

0800d124 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d124:	b480      	push	{r7}
 800d126:	b083      	sub	sp, #12
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d12c:	bf00      	nop
 800d12e:	370c      	adds	r7, #12
 800d130:	46bd      	mov	sp, r7
 800d132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d136:	4770      	bx	lr

0800d138 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d138:	b580      	push	{r7, lr}
 800d13a:	b082      	sub	sp, #8
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d101      	bne.n	800d14a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d146:	2301      	movs	r3, #1
 800d148:	e040      	b.n	800d1cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d106      	bne.n	800d160 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	2200      	movs	r2, #0
 800d156:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d15a:	6878      	ldr	r0, [r7, #4]
 800d15c:	f7f6 fd04 	bl	8003b68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	2224      	movs	r2, #36	; 0x24
 800d164:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	681a      	ldr	r2, [r3, #0]
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	f022 0201 	bic.w	r2, r2, #1
 800d174:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d176:	6878      	ldr	r0, [r7, #4]
 800d178:	f000 f8c0 	bl	800d2fc <UART_SetConfig>
 800d17c:	4603      	mov	r3, r0
 800d17e:	2b01      	cmp	r3, #1
 800d180:	d101      	bne.n	800d186 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800d182:	2301      	movs	r3, #1
 800d184:	e022      	b.n	800d1cc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d002      	beq.n	800d194 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800d18e:	6878      	ldr	r0, [r7, #4]
 800d190:	f000 fb16 	bl	800d7c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	685a      	ldr	r2, [r3, #4]
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d1a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	689a      	ldr	r2, [r3, #8]
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d1b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	681a      	ldr	r2, [r3, #0]
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	f042 0201 	orr.w	r2, r2, #1
 800d1c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d1c4:	6878      	ldr	r0, [r7, #4]
 800d1c6:	f000 fb9d 	bl	800d904 <UART_CheckIdleState>
 800d1ca:	4603      	mov	r3, r0
}
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	3708      	adds	r7, #8
 800d1d0:	46bd      	mov	sp, r7
 800d1d2:	bd80      	pop	{r7, pc}

0800d1d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b08a      	sub	sp, #40	; 0x28
 800d1d8:	af02      	add	r7, sp, #8
 800d1da:	60f8      	str	r0, [r7, #12]
 800d1dc:	60b9      	str	r1, [r7, #8]
 800d1de:	603b      	str	r3, [r7, #0]
 800d1e0:	4613      	mov	r3, r2
 800d1e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d1e8:	2b20      	cmp	r3, #32
 800d1ea:	f040 8081 	bne.w	800d2f0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800d1ee:	68bb      	ldr	r3, [r7, #8]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d002      	beq.n	800d1fa <HAL_UART_Transmit+0x26>
 800d1f4:	88fb      	ldrh	r3, [r7, #6]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d101      	bne.n	800d1fe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800d1fa:	2301      	movs	r3, #1
 800d1fc:	e079      	b.n	800d2f2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800d204:	2b01      	cmp	r3, #1
 800d206:	d101      	bne.n	800d20c <HAL_UART_Transmit+0x38>
 800d208:	2302      	movs	r3, #2
 800d20a:	e072      	b.n	800d2f2 <HAL_UART_Transmit+0x11e>
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	2201      	movs	r2, #1
 800d210:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	2200      	movs	r2, #0
 800d218:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	2221      	movs	r2, #33	; 0x21
 800d220:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d222:	f7fb ff4d 	bl	80090c0 <HAL_GetTick>
 800d226:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	88fa      	ldrh	r2, [r7, #6]
 800d22c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	88fa      	ldrh	r2, [r7, #6]
 800d234:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	689b      	ldr	r3, [r3, #8]
 800d23c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d240:	d108      	bne.n	800d254 <HAL_UART_Transmit+0x80>
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	691b      	ldr	r3, [r3, #16]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d104      	bne.n	800d254 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800d24a:	2300      	movs	r3, #0
 800d24c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d24e:	68bb      	ldr	r3, [r7, #8]
 800d250:	61bb      	str	r3, [r7, #24]
 800d252:	e003      	b.n	800d25c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800d254:	68bb      	ldr	r3, [r7, #8]
 800d256:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d258:	2300      	movs	r3, #0
 800d25a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	2200      	movs	r2, #0
 800d260:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800d264:	e02c      	b.n	800d2c0 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d266:	683b      	ldr	r3, [r7, #0]
 800d268:	9300      	str	r3, [sp, #0]
 800d26a:	697b      	ldr	r3, [r7, #20]
 800d26c:	2200      	movs	r2, #0
 800d26e:	2180      	movs	r1, #128	; 0x80
 800d270:	68f8      	ldr	r0, [r7, #12]
 800d272:	f000 fb90 	bl	800d996 <UART_WaitOnFlagUntilTimeout>
 800d276:	4603      	mov	r3, r0
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d001      	beq.n	800d280 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800d27c:	2303      	movs	r3, #3
 800d27e:	e038      	b.n	800d2f2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800d280:	69fb      	ldr	r3, [r7, #28]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d10b      	bne.n	800d29e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d286:	69bb      	ldr	r3, [r7, #24]
 800d288:	881b      	ldrh	r3, [r3, #0]
 800d28a:	461a      	mov	r2, r3
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d294:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d296:	69bb      	ldr	r3, [r7, #24]
 800d298:	3302      	adds	r3, #2
 800d29a:	61bb      	str	r3, [r7, #24]
 800d29c:	e007      	b.n	800d2ae <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d29e:	69fb      	ldr	r3, [r7, #28]
 800d2a0:	781a      	ldrb	r2, [r3, #0]
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d2a8:	69fb      	ldr	r3, [r7, #28]
 800d2aa:	3301      	adds	r3, #1
 800d2ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d2b4:	b29b      	uxth	r3, r3
 800d2b6:	3b01      	subs	r3, #1
 800d2b8:	b29a      	uxth	r2, r3
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d2c6:	b29b      	uxth	r3, r3
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d1cc      	bne.n	800d266 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d2cc:	683b      	ldr	r3, [r7, #0]
 800d2ce:	9300      	str	r3, [sp, #0]
 800d2d0:	697b      	ldr	r3, [r7, #20]
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	2140      	movs	r1, #64	; 0x40
 800d2d6:	68f8      	ldr	r0, [r7, #12]
 800d2d8:	f000 fb5d 	bl	800d996 <UART_WaitOnFlagUntilTimeout>
 800d2dc:	4603      	mov	r3, r0
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d001      	beq.n	800d2e6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800d2e2:	2303      	movs	r3, #3
 800d2e4:	e005      	b.n	800d2f2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	2220      	movs	r2, #32
 800d2ea:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	e000      	b.n	800d2f2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800d2f0:	2302      	movs	r3, #2
  }
}
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	3720      	adds	r7, #32
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	bd80      	pop	{r7, pc}
	...

0800d2fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d2fc:	b580      	push	{r7, lr}
 800d2fe:	b088      	sub	sp, #32
 800d300:	af00      	add	r7, sp, #0
 800d302:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d304:	2300      	movs	r3, #0
 800d306:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	689a      	ldr	r2, [r3, #8]
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	691b      	ldr	r3, [r3, #16]
 800d310:	431a      	orrs	r2, r3
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	695b      	ldr	r3, [r3, #20]
 800d316:	431a      	orrs	r2, r3
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	69db      	ldr	r3, [r3, #28]
 800d31c:	4313      	orrs	r3, r2
 800d31e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	681a      	ldr	r2, [r3, #0]
 800d326:	4ba7      	ldr	r3, [pc, #668]	; (800d5c4 <UART_SetConfig+0x2c8>)
 800d328:	4013      	ands	r3, r2
 800d32a:	687a      	ldr	r2, [r7, #4]
 800d32c:	6812      	ldr	r2, [r2, #0]
 800d32e:	6979      	ldr	r1, [r7, #20]
 800d330:	430b      	orrs	r3, r1
 800d332:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	685b      	ldr	r3, [r3, #4]
 800d33a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	68da      	ldr	r2, [r3, #12]
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	430a      	orrs	r2, r1
 800d348:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	699b      	ldr	r3, [r3, #24]
 800d34e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	6a1b      	ldr	r3, [r3, #32]
 800d354:	697a      	ldr	r2, [r7, #20]
 800d356:	4313      	orrs	r3, r2
 800d358:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	689b      	ldr	r3, [r3, #8]
 800d360:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	697a      	ldr	r2, [r7, #20]
 800d36a:	430a      	orrs	r2, r1
 800d36c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	4a95      	ldr	r2, [pc, #596]	; (800d5c8 <UART_SetConfig+0x2cc>)
 800d374:	4293      	cmp	r3, r2
 800d376:	d120      	bne.n	800d3ba <UART_SetConfig+0xbe>
 800d378:	4b94      	ldr	r3, [pc, #592]	; (800d5cc <UART_SetConfig+0x2d0>)
 800d37a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d37e:	f003 0303 	and.w	r3, r3, #3
 800d382:	2b03      	cmp	r3, #3
 800d384:	d816      	bhi.n	800d3b4 <UART_SetConfig+0xb8>
 800d386:	a201      	add	r2, pc, #4	; (adr r2, 800d38c <UART_SetConfig+0x90>)
 800d388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d38c:	0800d39d 	.word	0x0800d39d
 800d390:	0800d3a9 	.word	0x0800d3a9
 800d394:	0800d3a3 	.word	0x0800d3a3
 800d398:	0800d3af 	.word	0x0800d3af
 800d39c:	2301      	movs	r3, #1
 800d39e:	77fb      	strb	r3, [r7, #31]
 800d3a0:	e14f      	b.n	800d642 <UART_SetConfig+0x346>
 800d3a2:	2302      	movs	r3, #2
 800d3a4:	77fb      	strb	r3, [r7, #31]
 800d3a6:	e14c      	b.n	800d642 <UART_SetConfig+0x346>
 800d3a8:	2304      	movs	r3, #4
 800d3aa:	77fb      	strb	r3, [r7, #31]
 800d3ac:	e149      	b.n	800d642 <UART_SetConfig+0x346>
 800d3ae:	2308      	movs	r3, #8
 800d3b0:	77fb      	strb	r3, [r7, #31]
 800d3b2:	e146      	b.n	800d642 <UART_SetConfig+0x346>
 800d3b4:	2310      	movs	r3, #16
 800d3b6:	77fb      	strb	r3, [r7, #31]
 800d3b8:	e143      	b.n	800d642 <UART_SetConfig+0x346>
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	4a84      	ldr	r2, [pc, #528]	; (800d5d0 <UART_SetConfig+0x2d4>)
 800d3c0:	4293      	cmp	r3, r2
 800d3c2:	d132      	bne.n	800d42a <UART_SetConfig+0x12e>
 800d3c4:	4b81      	ldr	r3, [pc, #516]	; (800d5cc <UART_SetConfig+0x2d0>)
 800d3c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d3ca:	f003 030c 	and.w	r3, r3, #12
 800d3ce:	2b0c      	cmp	r3, #12
 800d3d0:	d828      	bhi.n	800d424 <UART_SetConfig+0x128>
 800d3d2:	a201      	add	r2, pc, #4	; (adr r2, 800d3d8 <UART_SetConfig+0xdc>)
 800d3d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3d8:	0800d40d 	.word	0x0800d40d
 800d3dc:	0800d425 	.word	0x0800d425
 800d3e0:	0800d425 	.word	0x0800d425
 800d3e4:	0800d425 	.word	0x0800d425
 800d3e8:	0800d419 	.word	0x0800d419
 800d3ec:	0800d425 	.word	0x0800d425
 800d3f0:	0800d425 	.word	0x0800d425
 800d3f4:	0800d425 	.word	0x0800d425
 800d3f8:	0800d413 	.word	0x0800d413
 800d3fc:	0800d425 	.word	0x0800d425
 800d400:	0800d425 	.word	0x0800d425
 800d404:	0800d425 	.word	0x0800d425
 800d408:	0800d41f 	.word	0x0800d41f
 800d40c:	2300      	movs	r3, #0
 800d40e:	77fb      	strb	r3, [r7, #31]
 800d410:	e117      	b.n	800d642 <UART_SetConfig+0x346>
 800d412:	2302      	movs	r3, #2
 800d414:	77fb      	strb	r3, [r7, #31]
 800d416:	e114      	b.n	800d642 <UART_SetConfig+0x346>
 800d418:	2304      	movs	r3, #4
 800d41a:	77fb      	strb	r3, [r7, #31]
 800d41c:	e111      	b.n	800d642 <UART_SetConfig+0x346>
 800d41e:	2308      	movs	r3, #8
 800d420:	77fb      	strb	r3, [r7, #31]
 800d422:	e10e      	b.n	800d642 <UART_SetConfig+0x346>
 800d424:	2310      	movs	r3, #16
 800d426:	77fb      	strb	r3, [r7, #31]
 800d428:	e10b      	b.n	800d642 <UART_SetConfig+0x346>
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	4a69      	ldr	r2, [pc, #420]	; (800d5d4 <UART_SetConfig+0x2d8>)
 800d430:	4293      	cmp	r3, r2
 800d432:	d120      	bne.n	800d476 <UART_SetConfig+0x17a>
 800d434:	4b65      	ldr	r3, [pc, #404]	; (800d5cc <UART_SetConfig+0x2d0>)
 800d436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d43a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800d43e:	2b30      	cmp	r3, #48	; 0x30
 800d440:	d013      	beq.n	800d46a <UART_SetConfig+0x16e>
 800d442:	2b30      	cmp	r3, #48	; 0x30
 800d444:	d814      	bhi.n	800d470 <UART_SetConfig+0x174>
 800d446:	2b20      	cmp	r3, #32
 800d448:	d009      	beq.n	800d45e <UART_SetConfig+0x162>
 800d44a:	2b20      	cmp	r3, #32
 800d44c:	d810      	bhi.n	800d470 <UART_SetConfig+0x174>
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d002      	beq.n	800d458 <UART_SetConfig+0x15c>
 800d452:	2b10      	cmp	r3, #16
 800d454:	d006      	beq.n	800d464 <UART_SetConfig+0x168>
 800d456:	e00b      	b.n	800d470 <UART_SetConfig+0x174>
 800d458:	2300      	movs	r3, #0
 800d45a:	77fb      	strb	r3, [r7, #31]
 800d45c:	e0f1      	b.n	800d642 <UART_SetConfig+0x346>
 800d45e:	2302      	movs	r3, #2
 800d460:	77fb      	strb	r3, [r7, #31]
 800d462:	e0ee      	b.n	800d642 <UART_SetConfig+0x346>
 800d464:	2304      	movs	r3, #4
 800d466:	77fb      	strb	r3, [r7, #31]
 800d468:	e0eb      	b.n	800d642 <UART_SetConfig+0x346>
 800d46a:	2308      	movs	r3, #8
 800d46c:	77fb      	strb	r3, [r7, #31]
 800d46e:	e0e8      	b.n	800d642 <UART_SetConfig+0x346>
 800d470:	2310      	movs	r3, #16
 800d472:	77fb      	strb	r3, [r7, #31]
 800d474:	e0e5      	b.n	800d642 <UART_SetConfig+0x346>
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	4a57      	ldr	r2, [pc, #348]	; (800d5d8 <UART_SetConfig+0x2dc>)
 800d47c:	4293      	cmp	r3, r2
 800d47e:	d120      	bne.n	800d4c2 <UART_SetConfig+0x1c6>
 800d480:	4b52      	ldr	r3, [pc, #328]	; (800d5cc <UART_SetConfig+0x2d0>)
 800d482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d486:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800d48a:	2bc0      	cmp	r3, #192	; 0xc0
 800d48c:	d013      	beq.n	800d4b6 <UART_SetConfig+0x1ba>
 800d48e:	2bc0      	cmp	r3, #192	; 0xc0
 800d490:	d814      	bhi.n	800d4bc <UART_SetConfig+0x1c0>
 800d492:	2b80      	cmp	r3, #128	; 0x80
 800d494:	d009      	beq.n	800d4aa <UART_SetConfig+0x1ae>
 800d496:	2b80      	cmp	r3, #128	; 0x80
 800d498:	d810      	bhi.n	800d4bc <UART_SetConfig+0x1c0>
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d002      	beq.n	800d4a4 <UART_SetConfig+0x1a8>
 800d49e:	2b40      	cmp	r3, #64	; 0x40
 800d4a0:	d006      	beq.n	800d4b0 <UART_SetConfig+0x1b4>
 800d4a2:	e00b      	b.n	800d4bc <UART_SetConfig+0x1c0>
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	77fb      	strb	r3, [r7, #31]
 800d4a8:	e0cb      	b.n	800d642 <UART_SetConfig+0x346>
 800d4aa:	2302      	movs	r3, #2
 800d4ac:	77fb      	strb	r3, [r7, #31]
 800d4ae:	e0c8      	b.n	800d642 <UART_SetConfig+0x346>
 800d4b0:	2304      	movs	r3, #4
 800d4b2:	77fb      	strb	r3, [r7, #31]
 800d4b4:	e0c5      	b.n	800d642 <UART_SetConfig+0x346>
 800d4b6:	2308      	movs	r3, #8
 800d4b8:	77fb      	strb	r3, [r7, #31]
 800d4ba:	e0c2      	b.n	800d642 <UART_SetConfig+0x346>
 800d4bc:	2310      	movs	r3, #16
 800d4be:	77fb      	strb	r3, [r7, #31]
 800d4c0:	e0bf      	b.n	800d642 <UART_SetConfig+0x346>
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	4a45      	ldr	r2, [pc, #276]	; (800d5dc <UART_SetConfig+0x2e0>)
 800d4c8:	4293      	cmp	r3, r2
 800d4ca:	d125      	bne.n	800d518 <UART_SetConfig+0x21c>
 800d4cc:	4b3f      	ldr	r3, [pc, #252]	; (800d5cc <UART_SetConfig+0x2d0>)
 800d4ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d4d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d4d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d4da:	d017      	beq.n	800d50c <UART_SetConfig+0x210>
 800d4dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d4e0:	d817      	bhi.n	800d512 <UART_SetConfig+0x216>
 800d4e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d4e6:	d00b      	beq.n	800d500 <UART_SetConfig+0x204>
 800d4e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d4ec:	d811      	bhi.n	800d512 <UART_SetConfig+0x216>
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d003      	beq.n	800d4fa <UART_SetConfig+0x1fe>
 800d4f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d4f6:	d006      	beq.n	800d506 <UART_SetConfig+0x20a>
 800d4f8:	e00b      	b.n	800d512 <UART_SetConfig+0x216>
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	77fb      	strb	r3, [r7, #31]
 800d4fe:	e0a0      	b.n	800d642 <UART_SetConfig+0x346>
 800d500:	2302      	movs	r3, #2
 800d502:	77fb      	strb	r3, [r7, #31]
 800d504:	e09d      	b.n	800d642 <UART_SetConfig+0x346>
 800d506:	2304      	movs	r3, #4
 800d508:	77fb      	strb	r3, [r7, #31]
 800d50a:	e09a      	b.n	800d642 <UART_SetConfig+0x346>
 800d50c:	2308      	movs	r3, #8
 800d50e:	77fb      	strb	r3, [r7, #31]
 800d510:	e097      	b.n	800d642 <UART_SetConfig+0x346>
 800d512:	2310      	movs	r3, #16
 800d514:	77fb      	strb	r3, [r7, #31]
 800d516:	e094      	b.n	800d642 <UART_SetConfig+0x346>
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	4a30      	ldr	r2, [pc, #192]	; (800d5e0 <UART_SetConfig+0x2e4>)
 800d51e:	4293      	cmp	r3, r2
 800d520:	d125      	bne.n	800d56e <UART_SetConfig+0x272>
 800d522:	4b2a      	ldr	r3, [pc, #168]	; (800d5cc <UART_SetConfig+0x2d0>)
 800d524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d528:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800d52c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d530:	d017      	beq.n	800d562 <UART_SetConfig+0x266>
 800d532:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d536:	d817      	bhi.n	800d568 <UART_SetConfig+0x26c>
 800d538:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d53c:	d00b      	beq.n	800d556 <UART_SetConfig+0x25a>
 800d53e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d542:	d811      	bhi.n	800d568 <UART_SetConfig+0x26c>
 800d544:	2b00      	cmp	r3, #0
 800d546:	d003      	beq.n	800d550 <UART_SetConfig+0x254>
 800d548:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d54c:	d006      	beq.n	800d55c <UART_SetConfig+0x260>
 800d54e:	e00b      	b.n	800d568 <UART_SetConfig+0x26c>
 800d550:	2301      	movs	r3, #1
 800d552:	77fb      	strb	r3, [r7, #31]
 800d554:	e075      	b.n	800d642 <UART_SetConfig+0x346>
 800d556:	2302      	movs	r3, #2
 800d558:	77fb      	strb	r3, [r7, #31]
 800d55a:	e072      	b.n	800d642 <UART_SetConfig+0x346>
 800d55c:	2304      	movs	r3, #4
 800d55e:	77fb      	strb	r3, [r7, #31]
 800d560:	e06f      	b.n	800d642 <UART_SetConfig+0x346>
 800d562:	2308      	movs	r3, #8
 800d564:	77fb      	strb	r3, [r7, #31]
 800d566:	e06c      	b.n	800d642 <UART_SetConfig+0x346>
 800d568:	2310      	movs	r3, #16
 800d56a:	77fb      	strb	r3, [r7, #31]
 800d56c:	e069      	b.n	800d642 <UART_SetConfig+0x346>
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	4a1c      	ldr	r2, [pc, #112]	; (800d5e4 <UART_SetConfig+0x2e8>)
 800d574:	4293      	cmp	r3, r2
 800d576:	d137      	bne.n	800d5e8 <UART_SetConfig+0x2ec>
 800d578:	4b14      	ldr	r3, [pc, #80]	; (800d5cc <UART_SetConfig+0x2d0>)
 800d57a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d57e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800d582:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d586:	d017      	beq.n	800d5b8 <UART_SetConfig+0x2bc>
 800d588:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d58c:	d817      	bhi.n	800d5be <UART_SetConfig+0x2c2>
 800d58e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d592:	d00b      	beq.n	800d5ac <UART_SetConfig+0x2b0>
 800d594:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d598:	d811      	bhi.n	800d5be <UART_SetConfig+0x2c2>
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d003      	beq.n	800d5a6 <UART_SetConfig+0x2aa>
 800d59e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d5a2:	d006      	beq.n	800d5b2 <UART_SetConfig+0x2b6>
 800d5a4:	e00b      	b.n	800d5be <UART_SetConfig+0x2c2>
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	77fb      	strb	r3, [r7, #31]
 800d5aa:	e04a      	b.n	800d642 <UART_SetConfig+0x346>
 800d5ac:	2302      	movs	r3, #2
 800d5ae:	77fb      	strb	r3, [r7, #31]
 800d5b0:	e047      	b.n	800d642 <UART_SetConfig+0x346>
 800d5b2:	2304      	movs	r3, #4
 800d5b4:	77fb      	strb	r3, [r7, #31]
 800d5b6:	e044      	b.n	800d642 <UART_SetConfig+0x346>
 800d5b8:	2308      	movs	r3, #8
 800d5ba:	77fb      	strb	r3, [r7, #31]
 800d5bc:	e041      	b.n	800d642 <UART_SetConfig+0x346>
 800d5be:	2310      	movs	r3, #16
 800d5c0:	77fb      	strb	r3, [r7, #31]
 800d5c2:	e03e      	b.n	800d642 <UART_SetConfig+0x346>
 800d5c4:	efff69f3 	.word	0xefff69f3
 800d5c8:	40011000 	.word	0x40011000
 800d5cc:	40023800 	.word	0x40023800
 800d5d0:	40004400 	.word	0x40004400
 800d5d4:	40004800 	.word	0x40004800
 800d5d8:	40004c00 	.word	0x40004c00
 800d5dc:	40005000 	.word	0x40005000
 800d5e0:	40011400 	.word	0x40011400
 800d5e4:	40007800 	.word	0x40007800
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	4a71      	ldr	r2, [pc, #452]	; (800d7b4 <UART_SetConfig+0x4b8>)
 800d5ee:	4293      	cmp	r3, r2
 800d5f0:	d125      	bne.n	800d63e <UART_SetConfig+0x342>
 800d5f2:	4b71      	ldr	r3, [pc, #452]	; (800d7b8 <UART_SetConfig+0x4bc>)
 800d5f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d5f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800d5fc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800d600:	d017      	beq.n	800d632 <UART_SetConfig+0x336>
 800d602:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800d606:	d817      	bhi.n	800d638 <UART_SetConfig+0x33c>
 800d608:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d60c:	d00b      	beq.n	800d626 <UART_SetConfig+0x32a>
 800d60e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d612:	d811      	bhi.n	800d638 <UART_SetConfig+0x33c>
 800d614:	2b00      	cmp	r3, #0
 800d616:	d003      	beq.n	800d620 <UART_SetConfig+0x324>
 800d618:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d61c:	d006      	beq.n	800d62c <UART_SetConfig+0x330>
 800d61e:	e00b      	b.n	800d638 <UART_SetConfig+0x33c>
 800d620:	2300      	movs	r3, #0
 800d622:	77fb      	strb	r3, [r7, #31]
 800d624:	e00d      	b.n	800d642 <UART_SetConfig+0x346>
 800d626:	2302      	movs	r3, #2
 800d628:	77fb      	strb	r3, [r7, #31]
 800d62a:	e00a      	b.n	800d642 <UART_SetConfig+0x346>
 800d62c:	2304      	movs	r3, #4
 800d62e:	77fb      	strb	r3, [r7, #31]
 800d630:	e007      	b.n	800d642 <UART_SetConfig+0x346>
 800d632:	2308      	movs	r3, #8
 800d634:	77fb      	strb	r3, [r7, #31]
 800d636:	e004      	b.n	800d642 <UART_SetConfig+0x346>
 800d638:	2310      	movs	r3, #16
 800d63a:	77fb      	strb	r3, [r7, #31]
 800d63c:	e001      	b.n	800d642 <UART_SetConfig+0x346>
 800d63e:	2310      	movs	r3, #16
 800d640:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	69db      	ldr	r3, [r3, #28]
 800d646:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d64a:	d15a      	bne.n	800d702 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 800d64c:	7ffb      	ldrb	r3, [r7, #31]
 800d64e:	2b08      	cmp	r3, #8
 800d650:	d827      	bhi.n	800d6a2 <UART_SetConfig+0x3a6>
 800d652:	a201      	add	r2, pc, #4	; (adr r2, 800d658 <UART_SetConfig+0x35c>)
 800d654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d658:	0800d67d 	.word	0x0800d67d
 800d65c:	0800d685 	.word	0x0800d685
 800d660:	0800d68d 	.word	0x0800d68d
 800d664:	0800d6a3 	.word	0x0800d6a3
 800d668:	0800d693 	.word	0x0800d693
 800d66c:	0800d6a3 	.word	0x0800d6a3
 800d670:	0800d6a3 	.word	0x0800d6a3
 800d674:	0800d6a3 	.word	0x0800d6a3
 800d678:	0800d69b 	.word	0x0800d69b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d67c:	f7fe fc12 	bl	800bea4 <HAL_RCC_GetPCLK1Freq>
 800d680:	61b8      	str	r0, [r7, #24]
        break;
 800d682:	e013      	b.n	800d6ac <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d684:	f7fe fc22 	bl	800becc <HAL_RCC_GetPCLK2Freq>
 800d688:	61b8      	str	r0, [r7, #24]
        break;
 800d68a:	e00f      	b.n	800d6ac <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d68c:	4b4b      	ldr	r3, [pc, #300]	; (800d7bc <UART_SetConfig+0x4c0>)
 800d68e:	61bb      	str	r3, [r7, #24]
        break;
 800d690:	e00c      	b.n	800d6ac <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d692:	f7fe fb45 	bl	800bd20 <HAL_RCC_GetSysClockFreq>
 800d696:	61b8      	str	r0, [r7, #24]
        break;
 800d698:	e008      	b.n	800d6ac <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d69a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d69e:	61bb      	str	r3, [r7, #24]
        break;
 800d6a0:	e004      	b.n	800d6ac <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800d6a6:	2301      	movs	r3, #1
 800d6a8:	77bb      	strb	r3, [r7, #30]
        break;
 800d6aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d6ac:	69bb      	ldr	r3, [r7, #24]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d074      	beq.n	800d79c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800d6b2:	69bb      	ldr	r3, [r7, #24]
 800d6b4:	005a      	lsls	r2, r3, #1
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	685b      	ldr	r3, [r3, #4]
 800d6ba:	085b      	lsrs	r3, r3, #1
 800d6bc:	441a      	add	r2, r3
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	685b      	ldr	r3, [r3, #4]
 800d6c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d6c6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d6c8:	693b      	ldr	r3, [r7, #16]
 800d6ca:	2b0f      	cmp	r3, #15
 800d6cc:	d916      	bls.n	800d6fc <UART_SetConfig+0x400>
 800d6ce:	693b      	ldr	r3, [r7, #16]
 800d6d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d6d4:	d212      	bcs.n	800d6fc <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d6d6:	693b      	ldr	r3, [r7, #16]
 800d6d8:	b29b      	uxth	r3, r3
 800d6da:	f023 030f 	bic.w	r3, r3, #15
 800d6de:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d6e0:	693b      	ldr	r3, [r7, #16]
 800d6e2:	085b      	lsrs	r3, r3, #1
 800d6e4:	b29b      	uxth	r3, r3
 800d6e6:	f003 0307 	and.w	r3, r3, #7
 800d6ea:	b29a      	uxth	r2, r3
 800d6ec:	89fb      	ldrh	r3, [r7, #14]
 800d6ee:	4313      	orrs	r3, r2
 800d6f0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	89fa      	ldrh	r2, [r7, #14]
 800d6f8:	60da      	str	r2, [r3, #12]
 800d6fa:	e04f      	b.n	800d79c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800d6fc:	2301      	movs	r3, #1
 800d6fe:	77bb      	strb	r3, [r7, #30]
 800d700:	e04c      	b.n	800d79c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d702:	7ffb      	ldrb	r3, [r7, #31]
 800d704:	2b08      	cmp	r3, #8
 800d706:	d828      	bhi.n	800d75a <UART_SetConfig+0x45e>
 800d708:	a201      	add	r2, pc, #4	; (adr r2, 800d710 <UART_SetConfig+0x414>)
 800d70a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d70e:	bf00      	nop
 800d710:	0800d735 	.word	0x0800d735
 800d714:	0800d73d 	.word	0x0800d73d
 800d718:	0800d745 	.word	0x0800d745
 800d71c:	0800d75b 	.word	0x0800d75b
 800d720:	0800d74b 	.word	0x0800d74b
 800d724:	0800d75b 	.word	0x0800d75b
 800d728:	0800d75b 	.word	0x0800d75b
 800d72c:	0800d75b 	.word	0x0800d75b
 800d730:	0800d753 	.word	0x0800d753
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d734:	f7fe fbb6 	bl	800bea4 <HAL_RCC_GetPCLK1Freq>
 800d738:	61b8      	str	r0, [r7, #24]
        break;
 800d73a:	e013      	b.n	800d764 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d73c:	f7fe fbc6 	bl	800becc <HAL_RCC_GetPCLK2Freq>
 800d740:	61b8      	str	r0, [r7, #24]
        break;
 800d742:	e00f      	b.n	800d764 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d744:	4b1d      	ldr	r3, [pc, #116]	; (800d7bc <UART_SetConfig+0x4c0>)
 800d746:	61bb      	str	r3, [r7, #24]
        break;
 800d748:	e00c      	b.n	800d764 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d74a:	f7fe fae9 	bl	800bd20 <HAL_RCC_GetSysClockFreq>
 800d74e:	61b8      	str	r0, [r7, #24]
        break;
 800d750:	e008      	b.n	800d764 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d752:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d756:	61bb      	str	r3, [r7, #24]
        break;
 800d758:	e004      	b.n	800d764 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800d75a:	2300      	movs	r3, #0
 800d75c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800d75e:	2301      	movs	r3, #1
 800d760:	77bb      	strb	r3, [r7, #30]
        break;
 800d762:	bf00      	nop
    }

    if (pclk != 0U)
 800d764:	69bb      	ldr	r3, [r7, #24]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d018      	beq.n	800d79c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	685b      	ldr	r3, [r3, #4]
 800d76e:	085a      	lsrs	r2, r3, #1
 800d770:	69bb      	ldr	r3, [r7, #24]
 800d772:	441a      	add	r2, r3
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	685b      	ldr	r3, [r3, #4]
 800d778:	fbb2 f3f3 	udiv	r3, r2, r3
 800d77c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d77e:	693b      	ldr	r3, [r7, #16]
 800d780:	2b0f      	cmp	r3, #15
 800d782:	d909      	bls.n	800d798 <UART_SetConfig+0x49c>
 800d784:	693b      	ldr	r3, [r7, #16]
 800d786:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d78a:	d205      	bcs.n	800d798 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d78c:	693b      	ldr	r3, [r7, #16]
 800d78e:	b29a      	uxth	r2, r3
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	60da      	str	r2, [r3, #12]
 800d796:	e001      	b.n	800d79c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800d798:	2301      	movs	r3, #1
 800d79a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	2200      	movs	r2, #0
 800d7a0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800d7a8:	7fbb      	ldrb	r3, [r7, #30]
}
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	3720      	adds	r7, #32
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	bd80      	pop	{r7, pc}
 800d7b2:	bf00      	nop
 800d7b4:	40007c00 	.word	0x40007c00
 800d7b8:	40023800 	.word	0x40023800
 800d7bc:	00f42400 	.word	0x00f42400

0800d7c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d7c0:	b480      	push	{r7}
 800d7c2:	b083      	sub	sp, #12
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7cc:	f003 0301 	and.w	r3, r3, #1
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d00a      	beq.n	800d7ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	685b      	ldr	r3, [r3, #4]
 800d7da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	430a      	orrs	r2, r1
 800d7e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7ee:	f003 0302 	and.w	r3, r3, #2
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d00a      	beq.n	800d80c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	685b      	ldr	r3, [r3, #4]
 800d7fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	430a      	orrs	r2, r1
 800d80a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d810:	f003 0304 	and.w	r3, r3, #4
 800d814:	2b00      	cmp	r3, #0
 800d816:	d00a      	beq.n	800d82e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	685b      	ldr	r3, [r3, #4]
 800d81e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	430a      	orrs	r2, r1
 800d82c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d832:	f003 0308 	and.w	r3, r3, #8
 800d836:	2b00      	cmp	r3, #0
 800d838:	d00a      	beq.n	800d850 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	685b      	ldr	r3, [r3, #4]
 800d840:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	430a      	orrs	r2, r1
 800d84e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d854:	f003 0310 	and.w	r3, r3, #16
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d00a      	beq.n	800d872 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	689b      	ldr	r3, [r3, #8]
 800d862:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	430a      	orrs	r2, r1
 800d870:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d876:	f003 0320 	and.w	r3, r3, #32
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d00a      	beq.n	800d894 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	689b      	ldr	r3, [r3, #8]
 800d884:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	430a      	orrs	r2, r1
 800d892:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d01a      	beq.n	800d8d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	685b      	ldr	r3, [r3, #4]
 800d8a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	430a      	orrs	r2, r1
 800d8b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d8be:	d10a      	bne.n	800d8d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	685b      	ldr	r3, [r3, #4]
 800d8c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	430a      	orrs	r2, r1
 800d8d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d00a      	beq.n	800d8f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	685b      	ldr	r3, [r3, #4]
 800d8e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	430a      	orrs	r2, r1
 800d8f6:	605a      	str	r2, [r3, #4]
  }
}
 800d8f8:	bf00      	nop
 800d8fa:	370c      	adds	r7, #12
 800d8fc:	46bd      	mov	sp, r7
 800d8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d902:	4770      	bx	lr

0800d904 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d904:	b580      	push	{r7, lr}
 800d906:	b086      	sub	sp, #24
 800d908:	af02      	add	r7, sp, #8
 800d90a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	2200      	movs	r2, #0
 800d910:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d914:	f7fb fbd4 	bl	80090c0 <HAL_GetTick>
 800d918:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	f003 0308 	and.w	r3, r3, #8
 800d924:	2b08      	cmp	r3, #8
 800d926:	d10e      	bne.n	800d946 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d928:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d92c:	9300      	str	r3, [sp, #0]
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	2200      	movs	r2, #0
 800d932:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d936:	6878      	ldr	r0, [r7, #4]
 800d938:	f000 f82d 	bl	800d996 <UART_WaitOnFlagUntilTimeout>
 800d93c:	4603      	mov	r3, r0
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d001      	beq.n	800d946 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d942:	2303      	movs	r3, #3
 800d944:	e023      	b.n	800d98e <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	f003 0304 	and.w	r3, r3, #4
 800d950:	2b04      	cmp	r3, #4
 800d952:	d10e      	bne.n	800d972 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d954:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d958:	9300      	str	r3, [sp, #0]
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	2200      	movs	r2, #0
 800d95e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d962:	6878      	ldr	r0, [r7, #4]
 800d964:	f000 f817 	bl	800d996 <UART_WaitOnFlagUntilTimeout>
 800d968:	4603      	mov	r3, r0
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d001      	beq.n	800d972 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d96e:	2303      	movs	r3, #3
 800d970:	e00d      	b.n	800d98e <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	2220      	movs	r2, #32
 800d976:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	2220      	movs	r2, #32
 800d97c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	2200      	movs	r2, #0
 800d982:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	2200      	movs	r2, #0
 800d988:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800d98c:	2300      	movs	r3, #0
}
 800d98e:	4618      	mov	r0, r3
 800d990:	3710      	adds	r7, #16
 800d992:	46bd      	mov	sp, r7
 800d994:	bd80      	pop	{r7, pc}

0800d996 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d996:	b580      	push	{r7, lr}
 800d998:	b09c      	sub	sp, #112	; 0x70
 800d99a:	af00      	add	r7, sp, #0
 800d99c:	60f8      	str	r0, [r7, #12]
 800d99e:	60b9      	str	r1, [r7, #8]
 800d9a0:	603b      	str	r3, [r7, #0]
 800d9a2:	4613      	mov	r3, r2
 800d9a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d9a6:	e0a5      	b.n	800daf4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d9a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d9aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9ae:	f000 80a1 	beq.w	800daf4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d9b2:	f7fb fb85 	bl	80090c0 <HAL_GetTick>
 800d9b6:	4602      	mov	r2, r0
 800d9b8:	683b      	ldr	r3, [r7, #0]
 800d9ba:	1ad3      	subs	r3, r2, r3
 800d9bc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d9be:	429a      	cmp	r2, r3
 800d9c0:	d302      	bcc.n	800d9c8 <UART_WaitOnFlagUntilTimeout+0x32>
 800d9c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d13e      	bne.n	800da46 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d9d0:	e853 3f00 	ldrex	r3, [r3]
 800d9d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d9d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d9d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d9dc:	667b      	str	r3, [r7, #100]	; 0x64
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	461a      	mov	r2, r3
 800d9e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d9e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d9e8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d9ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d9ee:	e841 2300 	strex	r3, r2, [r1]
 800d9f2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d9f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d1e6      	bne.n	800d9c8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	3308      	adds	r3, #8
 800da00:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da04:	e853 3f00 	ldrex	r3, [r3]
 800da08:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800da0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da0c:	f023 0301 	bic.w	r3, r3, #1
 800da10:	663b      	str	r3, [r7, #96]	; 0x60
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	3308      	adds	r3, #8
 800da18:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800da1a:	64ba      	str	r2, [r7, #72]	; 0x48
 800da1c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da1e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800da20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800da22:	e841 2300 	strex	r3, r2, [r1]
 800da26:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800da28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d1e5      	bne.n	800d9fa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	2220      	movs	r2, #32
 800da32:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	2220      	movs	r2, #32
 800da38:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	2200      	movs	r2, #0
 800da3e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800da42:	2303      	movs	r3, #3
 800da44:	e067      	b.n	800db16 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	f003 0304 	and.w	r3, r3, #4
 800da50:	2b00      	cmp	r3, #0
 800da52:	d04f      	beq.n	800daf4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	69db      	ldr	r3, [r3, #28]
 800da5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800da5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800da62:	d147      	bne.n	800daf4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800da6c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da76:	e853 3f00 	ldrex	r3, [r3]
 800da7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800da7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da7e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800da82:	66fb      	str	r3, [r7, #108]	; 0x6c
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	461a      	mov	r2, r3
 800da8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da8c:	637b      	str	r3, [r7, #52]	; 0x34
 800da8e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800da92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800da94:	e841 2300 	strex	r3, r2, [r1]
 800da98:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800da9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d1e6      	bne.n	800da6e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	3308      	adds	r3, #8
 800daa6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800daa8:	697b      	ldr	r3, [r7, #20]
 800daaa:	e853 3f00 	ldrex	r3, [r3]
 800daae:	613b      	str	r3, [r7, #16]
   return(result);
 800dab0:	693b      	ldr	r3, [r7, #16]
 800dab2:	f023 0301 	bic.w	r3, r3, #1
 800dab6:	66bb      	str	r3, [r7, #104]	; 0x68
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	3308      	adds	r3, #8
 800dabe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800dac0:	623a      	str	r2, [r7, #32]
 800dac2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dac4:	69f9      	ldr	r1, [r7, #28]
 800dac6:	6a3a      	ldr	r2, [r7, #32]
 800dac8:	e841 2300 	strex	r3, r2, [r1]
 800dacc:	61bb      	str	r3, [r7, #24]
   return(result);
 800dace:	69bb      	ldr	r3, [r7, #24]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d1e5      	bne.n	800daa0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	2220      	movs	r2, #32
 800dad8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	2220      	movs	r2, #32
 800dade:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	2220      	movs	r2, #32
 800dae4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	2200      	movs	r2, #0
 800daec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800daf0:	2303      	movs	r3, #3
 800daf2:	e010      	b.n	800db16 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	69da      	ldr	r2, [r3, #28]
 800dafa:	68bb      	ldr	r3, [r7, #8]
 800dafc:	4013      	ands	r3, r2
 800dafe:	68ba      	ldr	r2, [r7, #8]
 800db00:	429a      	cmp	r2, r3
 800db02:	bf0c      	ite	eq
 800db04:	2301      	moveq	r3, #1
 800db06:	2300      	movne	r3, #0
 800db08:	b2db      	uxtb	r3, r3
 800db0a:	461a      	mov	r2, r3
 800db0c:	79fb      	ldrb	r3, [r7, #7]
 800db0e:	429a      	cmp	r2, r3
 800db10:	f43f af4a 	beq.w	800d9a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800db14:	2300      	movs	r3, #0
}
 800db16:	4618      	mov	r0, r3
 800db18:	3770      	adds	r7, #112	; 0x70
 800db1a:	46bd      	mov	sp, r7
 800db1c:	bd80      	pop	{r7, pc}

0800db1e <_ZdlPvj>:
 800db1e:	f000 b818 	b.w	800db52 <_ZdlPv>

0800db22 <_ZdaPv>:
 800db22:	f000 b816 	b.w	800db52 <_ZdlPv>

0800db26 <_Znwj>:
 800db26:	2801      	cmp	r0, #1
 800db28:	bf38      	it	cc
 800db2a:	2001      	movcc	r0, #1
 800db2c:	b510      	push	{r4, lr}
 800db2e:	4604      	mov	r4, r0
 800db30:	4620      	mov	r0, r4
 800db32:	f001 fbfd 	bl	800f330 <malloc>
 800db36:	b930      	cbnz	r0, 800db46 <_Znwj+0x20>
 800db38:	f000 f820 	bl	800db7c <_ZSt15get_new_handlerv>
 800db3c:	b908      	cbnz	r0, 800db42 <_Znwj+0x1c>
 800db3e:	f001 fbbd 	bl	800f2bc <abort>
 800db42:	4780      	blx	r0
 800db44:	e7f4      	b.n	800db30 <_Znwj+0xa>
 800db46:	bd10      	pop	{r4, pc}

0800db48 <_Znaj>:
 800db48:	f7ff bfed 	b.w	800db26 <_Znwj>

0800db4c <__cxa_pure_virtual>:
 800db4c:	b508      	push	{r3, lr}
 800db4e:	f000 f80f 	bl	800db70 <_ZSt9terminatev>

0800db52 <_ZdlPv>:
 800db52:	f001 bbf5 	b.w	800f340 <free>

0800db56 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800db56:	b508      	push	{r3, lr}
 800db58:	4780      	blx	r0
 800db5a:	f001 fbaf 	bl	800f2bc <abort>
	...

0800db60 <_ZSt13get_terminatev>:
 800db60:	4b02      	ldr	r3, [pc, #8]	; (800db6c <_ZSt13get_terminatev+0xc>)
 800db62:	6818      	ldr	r0, [r3, #0]
 800db64:	f3bf 8f5b 	dmb	ish
 800db68:	4770      	bx	lr
 800db6a:	bf00      	nop
 800db6c:	20000014 	.word	0x20000014

0800db70 <_ZSt9terminatev>:
 800db70:	b508      	push	{r3, lr}
 800db72:	f7ff fff5 	bl	800db60 <_ZSt13get_terminatev>
 800db76:	f7ff ffee 	bl	800db56 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800db7c <_ZSt15get_new_handlerv>:
 800db7c:	4b02      	ldr	r3, [pc, #8]	; (800db88 <_ZSt15get_new_handlerv+0xc>)
 800db7e:	6818      	ldr	r0, [r3, #0]
 800db80:	f3bf 8f5b 	dmb	ish
 800db84:	4770      	bx	lr
 800db86:	bf00      	nop
 800db88:	200003c0 	.word	0x200003c0
 800db8c:	00000000 	.word	0x00000000

0800db90 <log>:
 800db90:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800db94:	ed2d 8b02 	vpush	{d8}
 800db98:	b082      	sub	sp, #8
 800db9a:	ed8d 0b00 	vstr	d0, [sp]
 800db9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dba2:	2600      	movs	r6, #0
 800dba4:	1994      	adds	r4, r2, r6
 800dba6:	4e80      	ldr	r6, [pc, #512]	; (800dda8 <log+0x218>)
 800dba8:	4f80      	ldr	r7, [pc, #512]	; (800ddac <log+0x21c>)
 800dbaa:	eb43 0506 	adc.w	r5, r3, r6
 800dbae:	42af      	cmp	r7, r5
 800dbb0:	f04f 36ff 	mov.w	r6, #4294967295
 800dbb4:	bf08      	it	eq
 800dbb6:	42a6      	cmpeq	r6, r4
 800dbb8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800dbbc:	d363      	bcc.n	800dc86 <log+0xf6>
 800dbbe:	497c      	ldr	r1, [pc, #496]	; (800ddb0 <log+0x220>)
 800dbc0:	2000      	movs	r0, #0
 800dbc2:	428b      	cmp	r3, r1
 800dbc4:	bf08      	it	eq
 800dbc6:	4282      	cmpeq	r2, r0
 800dbc8:	f000 80de 	beq.w	800dd88 <log+0x1f8>
 800dbcc:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800dbd0:	ee30 7b47 	vsub.f64	d7, d0, d7
 800dbd4:	4b77      	ldr	r3, [pc, #476]	; (800ddb4 <log+0x224>)
 800dbd6:	ee27 1b07 	vmul.f64	d1, d7, d7
 800dbda:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 800dbde:	ee27 3b01 	vmul.f64	d3, d7, d1
 800dbe2:	ed93 4b10 	vldr	d4, [r3, #64]	; 0x40
 800dbe6:	eea6 4b07 	vfma.f64	d4, d6, d7
 800dbea:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 800dbee:	ed93 5b18 	vldr	d5, [r3, #96]	; 0x60
 800dbf2:	eea6 4b01 	vfma.f64	d4, d6, d1
 800dbf6:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 800dbfa:	eea5 6b07 	vfma.f64	d6, d5, d7
 800dbfe:	ed93 5b1a 	vldr	d5, [r3, #104]	; 0x68
 800dc02:	eea5 6b01 	vfma.f64	d6, d5, d1
 800dc06:	ed93 5b1e 	vldr	d5, [r3, #120]	; 0x78
 800dc0a:	eeb0 2b46 	vmov.f64	d2, d6
 800dc0e:	ed93 6b1c 	vldr	d6, [r3, #112]	; 0x70
 800dc12:	eea5 6b07 	vfma.f64	d6, d5, d7
 800dc16:	ed93 5b20 	vldr	d5, [r3, #128]	; 0x80
 800dc1a:	eea5 6b01 	vfma.f64	d6, d5, d1
 800dc1e:	ed93 5b22 	vldr	d5, [r3, #136]	; 0x88
 800dc22:	ed93 1b0e 	vldr	d1, [r3, #56]	; 0x38
 800dc26:	eea5 6b03 	vfma.f64	d6, d5, d3
 800dc2a:	eea6 2b03 	vfma.f64	d2, d6, d3
 800dc2e:	ed9f 6b58 	vldr	d6, [pc, #352]	; 800dd90 <log+0x200>
 800dc32:	eea2 4b03 	vfma.f64	d4, d2, d3
 800dc36:	eeb0 2b47 	vmov.f64	d2, d7
 800dc3a:	eea7 2b06 	vfma.f64	d2, d7, d6
 800dc3e:	eea7 2b46 	vfms.f64	d2, d7, d6
 800dc42:	eeb0 6b47 	vmov.f64	d6, d7
 800dc46:	ee37 8b42 	vsub.f64	d8, d7, d2
 800dc4a:	ee22 0b02 	vmul.f64	d0, d2, d2
 800dc4e:	eea0 6b01 	vfma.f64	d6, d0, d1
 800dc52:	ee37 5b46 	vsub.f64	d5, d7, d6
 800dc56:	ee37 7b02 	vadd.f64	d7, d7, d2
 800dc5a:	eea0 5b01 	vfma.f64	d5, d0, d1
 800dc5e:	ee21 1b08 	vmul.f64	d1, d1, d8
 800dc62:	eea1 5b07 	vfma.f64	d5, d1, d7
 800dc66:	eeb0 7b45 	vmov.f64	d7, d5
 800dc6a:	eea4 7b03 	vfma.f64	d7, d4, d3
 800dc6e:	ee36 7b07 	vadd.f64	d7, d6, d7
 800dc72:	ed8d 7b00 	vstr	d7, [sp]
 800dc76:	ed9d 0b00 	vldr	d0, [sp]
 800dc7a:	b002      	add	sp, #8
 800dc7c:	ecbd 8b02 	vpop	{d8}
 800dc80:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800dc84:	4770      	bx	lr
 800dc86:	f1ac 0510 	sub.w	r5, ip, #16
 800dc8a:	f647 74df 	movw	r4, #32735	; 0x7fdf
 800dc8e:	42a5      	cmp	r5, r4
 800dc90:	d930      	bls.n	800dcf4 <log+0x164>
 800dc92:	1890      	adds	r0, r2, r2
 800dc94:	eb43 0103 	adc.w	r1, r3, r3
 800dc98:	4301      	orrs	r1, r0
 800dc9a:	d107      	bne.n	800dcac <log+0x11c>
 800dc9c:	2001      	movs	r0, #1
 800dc9e:	b002      	add	sp, #8
 800dca0:	ecbd 8b02 	vpop	{d8}
 800dca4:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800dca8:	f000 b8ba 	b.w	800de20 <__math_divzero>
 800dcac:	4942      	ldr	r1, [pc, #264]	; (800ddb8 <log+0x228>)
 800dcae:	2000      	movs	r0, #0
 800dcb0:	428b      	cmp	r3, r1
 800dcb2:	bf08      	it	eq
 800dcb4:	4282      	cmpeq	r2, r0
 800dcb6:	d0de      	beq.n	800dc76 <log+0xe6>
 800dcb8:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
 800dcbc:	d104      	bne.n	800dcc8 <log+0x138>
 800dcbe:	f647 71f0 	movw	r1, #32752	; 0x7ff0
 800dcc2:	ea31 010c 	bics.w	r1, r1, ip
 800dcc6:	d108      	bne.n	800dcda <log+0x14a>
 800dcc8:	ed9d 0b00 	vldr	d0, [sp]
 800dccc:	b002      	add	sp, #8
 800dcce:	ecbd 8b02 	vpop	{d8}
 800dcd2:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800dcd6:	f000 b8bb 	b.w	800de50 <__math_invalid>
 800dcda:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800dd98 <log+0x208>
 800dcde:	ed9d 6b00 	vldr	d6, [sp]
 800dce2:	ee26 7b07 	vmul.f64	d7, d6, d7
 800dce6:	ec56 5b17 	vmov	r5, r6, d7
 800dcea:	4834      	ldr	r0, [pc, #208]	; (800ddbc <log+0x22c>)
 800dcec:	2400      	movs	r4, #0
 800dcee:	192a      	adds	r2, r5, r4
 800dcf0:	eb46 0300 	adc.w	r3, r6, r0
 800dcf4:	2100      	movs	r1, #0
 800dcf6:	1851      	adds	r1, r2, r1
 800dcf8:	4931      	ldr	r1, [pc, #196]	; (800ddc0 <log+0x230>)
 800dcfa:	eebf 4b00 	vmov.f64	d4, #240	; 0xbf800000 -1.0
 800dcfe:	eb43 0101 	adc.w	r1, r3, r1
 800dd02:	0d0c      	lsrs	r4, r1, #20
 800dd04:	2500      	movs	r5, #0
 800dd06:	ebb2 0805 	subs.w	r8, r2, r5
 800dd0a:	ea4f 5404 	mov.w	r4, r4, lsl #20
 800dd0e:	eb63 0904 	sbc.w	r9, r3, r4
 800dd12:	4b28      	ldr	r3, [pc, #160]	; (800ddb4 <log+0x224>)
 800dd14:	f3c1 3046 	ubfx	r0, r1, #13, #7
 800dd18:	eb03 1200 	add.w	r2, r3, r0, lsl #4
 800dd1c:	ed92 7b24 	vldr	d7, [r2, #144]	; 0x90
 800dd20:	ec49 8b16 	vmov	d6, r8, r9
 800dd24:	1509      	asrs	r1, r1, #20
 800dd26:	eea6 4b07 	vfma.f64	d4, d6, d7
 800dd2a:	ee07 1a90 	vmov	s15, r1
 800dd2e:	ee24 1b04 	vmul.f64	d1, d4, d4
 800dd32:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800dd36:	ed93 5b00 	vldr	d5, [r3]
 800dd3a:	ee24 0b01 	vmul.f64	d0, d4, d1
 800dd3e:	ed93 3b02 	vldr	d3, [r3, #8]
 800dd42:	ed92 7b26 	vldr	d7, [r2, #152]	; 0x98
 800dd46:	eea5 7b06 	vfma.f64	d7, d5, d6
 800dd4a:	ee34 5b07 	vadd.f64	d5, d4, d7
 800dd4e:	ee37 7b45 	vsub.f64	d7, d7, d5
 800dd52:	ee37 7b04 	vadd.f64	d7, d7, d4
 800dd56:	eea3 7b06 	vfma.f64	d7, d3, d6
 800dd5a:	ed93 6b04 	vldr	d6, [r3, #16]
 800dd5e:	ed93 3b08 	vldr	d3, [r3, #32]
 800dd62:	eea6 7b01 	vfma.f64	d7, d6, d1
 800dd66:	ed93 6b06 	vldr	d6, [r3, #24]
 800dd6a:	ed93 2b0c 	vldr	d2, [r3, #48]	; 0x30
 800dd6e:	eea3 6b04 	vfma.f64	d6, d3, d4
 800dd72:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
 800dd76:	eea2 3b04 	vfma.f64	d3, d2, d4
 800dd7a:	eea3 6b01 	vfma.f64	d6, d3, d1
 800dd7e:	eea0 7b06 	vfma.f64	d7, d0, d6
 800dd82:	ee37 7b05 	vadd.f64	d7, d7, d5
 800dd86:	e774      	b.n	800dc72 <log+0xe2>
 800dd88:	ed9f 7b05 	vldr	d7, [pc, #20]	; 800dda0 <log+0x210>
 800dd8c:	e771      	b.n	800dc72 <log+0xe2>
 800dd8e:	bf00      	nop
 800dd90:	00000000 	.word	0x00000000
 800dd94:	41a00000 	.word	0x41a00000
 800dd98:	00000000 	.word	0x00000000
 800dd9c:	43300000 	.word	0x43300000
	...
 800dda8:	c0120000 	.word	0xc0120000
 800ddac:	000308ff 	.word	0x000308ff
 800ddb0:	3ff00000 	.word	0x3ff00000
 800ddb4:	08028a78 	.word	0x08028a78
 800ddb8:	7ff00000 	.word	0x7ff00000
 800ddbc:	fcc00000 	.word	0xfcc00000
 800ddc0:	c01a0000 	.word	0xc01a0000

0800ddc4 <with_errno>:
 800ddc4:	b513      	push	{r0, r1, r4, lr}
 800ddc6:	4604      	mov	r4, r0
 800ddc8:	ed8d 0b00 	vstr	d0, [sp]
 800ddcc:	f001 fa86 	bl	800f2dc <__errno>
 800ddd0:	ed9d 0b00 	vldr	d0, [sp]
 800ddd4:	6004      	str	r4, [r0, #0]
 800ddd6:	b002      	add	sp, #8
 800ddd8:	bd10      	pop	{r4, pc}

0800ddda <xflow>:
 800ddda:	b082      	sub	sp, #8
 800dddc:	b158      	cbz	r0, 800ddf6 <xflow+0x1c>
 800ddde:	eeb1 7b40 	vneg.f64	d7, d0
 800dde2:	ed8d 7b00 	vstr	d7, [sp]
 800dde6:	ed9d 7b00 	vldr	d7, [sp]
 800ddea:	2022      	movs	r0, #34	; 0x22
 800ddec:	ee20 0b07 	vmul.f64	d0, d0, d7
 800ddf0:	b002      	add	sp, #8
 800ddf2:	f7ff bfe7 	b.w	800ddc4 <with_errno>
 800ddf6:	eeb0 7b40 	vmov.f64	d7, d0
 800ddfa:	e7f2      	b.n	800dde2 <xflow+0x8>
 800ddfc:	0000      	movs	r0, r0
	...

0800de00 <__math_uflow>:
 800de00:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800de08 <__math_uflow+0x8>
 800de04:	f7ff bfe9 	b.w	800ddda <xflow>
 800de08:	00000000 	.word	0x00000000
 800de0c:	10000000 	.word	0x10000000

0800de10 <__math_oflow>:
 800de10:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800de18 <__math_oflow+0x8>
 800de14:	f7ff bfe1 	b.w	800ddda <xflow>
 800de18:	00000000 	.word	0x00000000
 800de1c:	70000000 	.word	0x70000000

0800de20 <__math_divzero>:
 800de20:	b082      	sub	sp, #8
 800de22:	2800      	cmp	r0, #0
 800de24:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800de28:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 800de2c:	fe06 7b07 	vseleq.f64	d7, d6, d7
 800de30:	ed8d 7b00 	vstr	d7, [sp]
 800de34:	ed9d 0b00 	vldr	d0, [sp]
 800de38:	ed9f 7b03 	vldr	d7, [pc, #12]	; 800de48 <__math_divzero+0x28>
 800de3c:	2022      	movs	r0, #34	; 0x22
 800de3e:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800de42:	b002      	add	sp, #8
 800de44:	f7ff bfbe 	b.w	800ddc4 <with_errno>
	...

0800de50 <__math_invalid>:
 800de50:	eeb0 7b40 	vmov.f64	d7, d0
 800de54:	eeb4 7b47 	vcmp.f64	d7, d7
 800de58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de5c:	ee30 6b40 	vsub.f64	d6, d0, d0
 800de60:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800de64:	d602      	bvs.n	800de6c <__math_invalid+0x1c>
 800de66:	2021      	movs	r0, #33	; 0x21
 800de68:	f7ff bfac 	b.w	800ddc4 <with_errno>
 800de6c:	4770      	bx	lr

0800de6e <__math_check_uflow>:
 800de6e:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800de72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de76:	d102      	bne.n	800de7e <__math_check_uflow+0x10>
 800de78:	2022      	movs	r0, #34	; 0x22
 800de7a:	f7ff bfa3 	b.w	800ddc4 <with_errno>
 800de7e:	4770      	bx	lr

0800de80 <__math_check_oflow>:
 800de80:	ed9f 6b07 	vldr	d6, [pc, #28]	; 800dea0 <__math_check_oflow+0x20>
 800de84:	eeb0 7bc0 	vabs.f64	d7, d0
 800de88:	eeb4 7b46 	vcmp.f64	d7, d6
 800de8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de90:	dd02      	ble.n	800de98 <__math_check_oflow+0x18>
 800de92:	2022      	movs	r0, #34	; 0x22
 800de94:	f7ff bf96 	b.w	800ddc4 <with_errno>
 800de98:	4770      	bx	lr
 800de9a:	bf00      	nop
 800de9c:	f3af 8000 	nop.w
 800dea0:	ffffffff 	.word	0xffffffff
 800dea4:	7fefffff 	.word	0x7fefffff

0800dea8 <checkint>:
 800dea8:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800deac:	f240 33fe 	movw	r3, #1022	; 0x3fe
 800deb0:	429a      	cmp	r2, r3
 800deb2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800deb4:	dd2b      	ble.n	800df0e <checkint+0x66>
 800deb6:	f240 4333 	movw	r3, #1075	; 0x433
 800deba:	429a      	cmp	r2, r3
 800debc:	dc25      	bgt.n	800df0a <checkint+0x62>
 800debe:	1a9b      	subs	r3, r3, r2
 800dec0:	f1a3 0620 	sub.w	r6, r3, #32
 800dec4:	f04f 32ff 	mov.w	r2, #4294967295
 800dec8:	fa02 f606 	lsl.w	r6, r2, r6
 800decc:	fa02 f403 	lsl.w	r4, r2, r3
 800ded0:	f1c3 0520 	rsb	r5, r3, #32
 800ded4:	4334      	orrs	r4, r6
 800ded6:	fa22 f505 	lsr.w	r5, r2, r5
 800deda:	432c      	orrs	r4, r5
 800dedc:	409a      	lsls	r2, r3
 800dede:	ea20 0602 	bic.w	r6, r0, r2
 800dee2:	ea21 0704 	bic.w	r7, r1, r4
 800dee6:	ea56 0207 	orrs.w	r2, r6, r7
 800deea:	f1a3 0420 	sub.w	r4, r3, #32
 800deee:	f1c3 0220 	rsb	r2, r3, #32
 800def2:	d10c      	bne.n	800df0e <checkint+0x66>
 800def4:	40d8      	lsrs	r0, r3
 800def6:	fa01 f302 	lsl.w	r3, r1, r2
 800defa:	4318      	orrs	r0, r3
 800defc:	40e1      	lsrs	r1, r4
 800defe:	4308      	orrs	r0, r1
 800df00:	f000 0301 	and.w	r3, r0, #1
 800df04:	f1c3 0002 	rsb	r0, r3, #2
 800df08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df0a:	2002      	movs	r0, #2
 800df0c:	e7fc      	b.n	800df08 <checkint+0x60>
 800df0e:	2000      	movs	r0, #0
 800df10:	e7fa      	b.n	800df08 <checkint+0x60>
 800df12:	0000      	movs	r0, r0
 800df14:	0000      	movs	r0, r0
	...

0800df18 <pow>:
 800df18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df1c:	ed2d 8b0a 	vpush	{d8-d12}
 800df20:	b09b      	sub	sp, #108	; 0x6c
 800df22:	ed8d 0b02 	vstr	d0, [sp, #8]
 800df26:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800df2a:	ed8d 1b00 	vstr	d1, [sp]
 800df2e:	ea4f 5915 	mov.w	r9, r5, lsr #20
 800df32:	e9dd 6700 	ldrd	r6, r7, [sp]
 800df36:	f109 30ff 	add.w	r0, r9, #4294967295
 800df3a:	f240 71fd 	movw	r1, #2045	; 0x7fd
 800df3e:	4288      	cmp	r0, r1
 800df40:	46cc      	mov	ip, r9
 800df42:	ea4f 5817 	mov.w	r8, r7, lsr #20
 800df46:	d806      	bhi.n	800df56 <pow+0x3e>
 800df48:	f3c8 010a 	ubfx	r1, r8, #0, #11
 800df4c:	f2a1 31be 	subw	r1, r1, #958	; 0x3be
 800df50:	297f      	cmp	r1, #127	; 0x7f
 800df52:	f240 81ab 	bls.w	800e2ac <pow+0x394>
 800df56:	19b1      	adds	r1, r6, r6
 800df58:	9104      	str	r1, [sp, #16]
 800df5a:	eb47 0107 	adc.w	r1, r7, r7
 800df5e:	9105      	str	r1, [sp, #20]
 800df60:	9904      	ldr	r1, [sp, #16]
 800df62:	f111 31ff 	adds.w	r1, r1, #4294967295
 800df66:	460a      	mov	r2, r1
 800df68:	9905      	ldr	r1, [sp, #20]
 800df6a:	f141 31ff 	adc.w	r1, r1, #4294967295
 800df6e:	460b      	mov	r3, r1
 800df70:	f46f 1100 	mvn.w	r1, #2097152	; 0x200000
 800df74:	f06f 0001 	mvn.w	r0, #1
 800df78:	4299      	cmp	r1, r3
 800df7a:	bf08      	it	eq
 800df7c:	4290      	cmpeq	r0, r2
 800df7e:	d260      	bcs.n	800e042 <pow+0x12a>
 800df80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800df84:	4313      	orrs	r3, r2
 800df86:	d11a      	bne.n	800dfbe <pow+0xa6>
 800df88:	f485 2200 	eor.w	r2, r5, #524288	; 0x80000
 800df8c:	1923      	adds	r3, r4, r4
 800df8e:	930c      	str	r3, [sp, #48]	; 0x30
 800df90:	eb42 0302 	adc.w	r3, r2, r2
 800df94:	930d      	str	r3, [sp, #52]	; 0x34
 800df96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800df9a:	4bcf      	ldr	r3, [pc, #828]	; (800e2d8 <pow+0x3c0>)
 800df9c:	2200      	movs	r2, #0
 800df9e:	428b      	cmp	r3, r1
 800dfa0:	bf08      	it	eq
 800dfa2:	4282      	cmpeq	r2, r0
 800dfa4:	f080 8265 	bcs.w	800e472 <pow+0x55a>
 800dfa8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dfac:	ed9d 6b00 	vldr	d6, [sp]
 800dfb0:	ee37 0b06 	vadd.f64	d0, d7, d6
 800dfb4:	b01b      	add	sp, #108	; 0x6c
 800dfb6:	ecbd 8b0a 	vpop	{d8-d12}
 800dfba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfbe:	49c7      	ldr	r1, [pc, #796]	; (800e2dc <pow+0x3c4>)
 800dfc0:	2000      	movs	r0, #0
 800dfc2:	428d      	cmp	r5, r1
 800dfc4:	bf08      	it	eq
 800dfc6:	4284      	cmpeq	r4, r0
 800dfc8:	d10b      	bne.n	800dfe2 <pow+0xca>
 800dfca:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800dfce:	19b3      	adds	r3, r6, r6
 800dfd0:	930e      	str	r3, [sp, #56]	; 0x38
 800dfd2:	eb42 0302 	adc.w	r3, r2, r2
 800dfd6:	930f      	str	r3, [sp, #60]	; 0x3c
 800dfd8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800dfdc:	4bbe      	ldr	r3, [pc, #760]	; (800e2d8 <pow+0x3c0>)
 800dfde:	2200      	movs	r2, #0
 800dfe0:	e7dd      	b.n	800df9e <pow+0x86>
 800dfe2:	1921      	adds	r1, r4, r4
 800dfe4:	9106      	str	r1, [sp, #24]
 800dfe6:	eb45 0105 	adc.w	r1, r5, r5
 800dfea:	9107      	str	r1, [sp, #28]
 800dfec:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800dff0:	49bb      	ldr	r1, [pc, #748]	; (800e2e0 <pow+0x3c8>)
 800dff2:	2000      	movs	r0, #0
 800dff4:	42a1      	cmp	r1, r4
 800dff6:	bf08      	it	eq
 800dff8:	4298      	cmpeq	r0, r3
 800dffa:	d3d5      	bcc.n	800dfa8 <pow+0x90>
 800dffc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800e000:	428c      	cmp	r4, r1
 800e002:	bf08      	it	eq
 800e004:	4283      	cmpeq	r3, r0
 800e006:	d1cf      	bne.n	800dfa8 <pow+0x90>
 800e008:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800e00c:	49b5      	ldr	r1, [pc, #724]	; (800e2e4 <pow+0x3cc>)
 800e00e:	2000      	movs	r0, #0
 800e010:	428c      	cmp	r4, r1
 800e012:	bf08      	it	eq
 800e014:	4283      	cmpeq	r3, r0
 800e016:	f000 822c 	beq.w	800e472 <pow+0x55a>
 800e01a:	49b3      	ldr	r1, [pc, #716]	; (800e2e8 <pow+0x3d0>)
 800e01c:	f04f 30ff 	mov.w	r0, #4294967295
 800e020:	42a1      	cmp	r1, r4
 800e022:	bf08      	it	eq
 800e024:	4298      	cmpeq	r0, r3
 800e026:	ea6f 0307 	mvn.w	r3, r7
 800e02a:	bf34      	ite	cc
 800e02c:	2201      	movcc	r2, #1
 800e02e:	2200      	movcs	r2, #0
 800e030:	0fdb      	lsrs	r3, r3, #31
 800e032:	429a      	cmp	r2, r3
 800e034:	f040 821a 	bne.w	800e46c <pow+0x554>
 800e038:	ed9d 7b00 	vldr	d7, [sp]
 800e03c:	ee27 0b07 	vmul.f64	d0, d7, d7
 800e040:	e7b8      	b.n	800dfb4 <pow+0x9c>
 800e042:	1923      	adds	r3, r4, r4
 800e044:	9308      	str	r3, [sp, #32]
 800e046:	eb45 0305 	adc.w	r3, r5, r5
 800e04a:	9309      	str	r3, [sp, #36]	; 0x24
 800e04c:	9b08      	ldr	r3, [sp, #32]
 800e04e:	f113 33ff 	adds.w	r3, r3, #4294967295
 800e052:	9310      	str	r3, [sp, #64]	; 0x40
 800e054:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e056:	f143 33ff 	adc.w	r3, r3, #4294967295
 800e05a:	9311      	str	r3, [sp, #68]	; 0x44
 800e05c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e060:	4299      	cmp	r1, r3
 800e062:	bf08      	it	eq
 800e064:	4290      	cmpeq	r0, r2
 800e066:	d22d      	bcs.n	800e0c4 <pow+0x1ac>
 800e068:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e06c:	2c00      	cmp	r4, #0
 800e06e:	f175 0300 	sbcs.w	r3, r5, #0
 800e072:	ee27 0b07 	vmul.f64	d0, d7, d7
 800e076:	da16      	bge.n	800e0a6 <pow+0x18e>
 800e078:	4630      	mov	r0, r6
 800e07a:	4639      	mov	r1, r7
 800e07c:	f7ff ff14 	bl	800dea8 <checkint>
 800e080:	2801      	cmp	r0, #1
 800e082:	d110      	bne.n	800e0a6 <pow+0x18e>
 800e084:	eeb1 0b40 	vneg.f64	d0, d0
 800e088:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 800e08c:	4323      	orrs	r3, r4
 800e08e:	d10c      	bne.n	800e0aa <pow+0x192>
 800e090:	2e00      	cmp	r6, #0
 800e092:	f177 0300 	sbcs.w	r3, r7, #0
 800e096:	da8d      	bge.n	800dfb4 <pow+0x9c>
 800e098:	b01b      	add	sp, #108	; 0x6c
 800e09a:	ecbd 8b0a 	vpop	{d8-d12}
 800e09e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0a2:	f7ff bebd 	b.w	800de20 <__math_divzero>
 800e0a6:	2000      	movs	r0, #0
 800e0a8:	e7ee      	b.n	800e088 <pow+0x170>
 800e0aa:	2e00      	cmp	r6, #0
 800e0ac:	f177 0300 	sbcs.w	r3, r7, #0
 800e0b0:	da80      	bge.n	800dfb4 <pow+0x9c>
 800e0b2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800e0b6:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800e0ba:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 800e0be:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 800e0c2:	e777      	b.n	800dfb4 <pow+0x9c>
 800e0c4:	2c00      	cmp	r4, #0
 800e0c6:	f175 0300 	sbcs.w	r3, r5, #0
 800e0ca:	da35      	bge.n	800e138 <pow+0x220>
 800e0cc:	4630      	mov	r0, r6
 800e0ce:	4639      	mov	r1, r7
 800e0d0:	f7ff feea 	bl	800dea8 <checkint>
 800e0d4:	b940      	cbnz	r0, 800e0e8 <pow+0x1d0>
 800e0d6:	ed9d 0b02 	vldr	d0, [sp, #8]
 800e0da:	b01b      	add	sp, #108	; 0x6c
 800e0dc:	ecbd 8b0a 	vpop	{d8-d12}
 800e0e0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0e4:	f7ff beb4 	b.w	800de50 <__math_invalid>
 800e0e8:	2801      	cmp	r0, #1
 800e0ea:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e0ee:	bf14      	ite	ne
 800e0f0:	2000      	movne	r0, #0
 800e0f2:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 800e0f6:	461d      	mov	r5, r3
 800e0f8:	f3c9 0c0a 	ubfx	ip, r9, #0, #11
 800e0fc:	f3c8 030a 	ubfx	r3, r8, #0, #11
 800e100:	f2a3 32be 	subw	r2, r3, #958	; 0x3be
 800e104:	2a7f      	cmp	r2, #127	; 0x7f
 800e106:	d933      	bls.n	800e170 <pow+0x258>
 800e108:	4974      	ldr	r1, [pc, #464]	; (800e2dc <pow+0x3c4>)
 800e10a:	2000      	movs	r0, #0
 800e10c:	428d      	cmp	r5, r1
 800e10e:	bf08      	it	eq
 800e110:	4284      	cmpeq	r4, r0
 800e112:	f000 81ae 	beq.w	800e472 <pow+0x55a>
 800e116:	f240 32bd 	movw	r2, #957	; 0x3bd
 800e11a:	4293      	cmp	r3, r2
 800e11c:	d80e      	bhi.n	800e13c <pow+0x224>
 800e11e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800e122:	ed9d 7b00 	vldr	d7, [sp]
 800e126:	42a9      	cmp	r1, r5
 800e128:	bf08      	it	eq
 800e12a:	42a0      	cmpeq	r0, r4
 800e12c:	bf34      	ite	cc
 800e12e:	ee37 0b00 	vaddcc.f64	d0, d7, d0
 800e132:	ee30 0b47 	vsubcs.f64	d0, d0, d7
 800e136:	e73d      	b.n	800dfb4 <pow+0x9c>
 800e138:	2000      	movs	r0, #0
 800e13a:	e7df      	b.n	800e0fc <pow+0x1e4>
 800e13c:	42a9      	cmp	r1, r5
 800e13e:	bf08      	it	eq
 800e140:	42a0      	cmpeq	r0, r4
 800e142:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800e146:	bf2c      	ite	cs
 800e148:	2301      	movcs	r3, #1
 800e14a:	2300      	movcc	r3, #0
 800e14c:	4590      	cmp	r8, r2
 800e14e:	bf8c      	ite	hi
 800e150:	f04f 0800 	movhi.w	r8, #0
 800e154:	f04f 0801 	movls.w	r8, #1
 800e158:	4543      	cmp	r3, r8
 800e15a:	f04f 0000 	mov.w	r0, #0
 800e15e:	f000 80af 	beq.w	800e2c0 <pow+0x3a8>
 800e162:	b01b      	add	sp, #108	; 0x6c
 800e164:	ecbd 8b0a 	vpop	{d8-d12}
 800e168:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e16c:	f7ff be50 	b.w	800de10 <__math_oflow>
 800e170:	f1bc 0f00 	cmp.w	ip, #0
 800e174:	d10e      	bne.n	800e194 <pow+0x27c>
 800e176:	ed9f 7b56 	vldr	d7, [pc, #344]	; 800e2d0 <pow+0x3b8>
 800e17a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e17e:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e182:	ec57 6b17 	vmov	r6, r7, d7
 800e186:	4b59      	ldr	r3, [pc, #356]	; (800e2ec <pow+0x3d4>)
 800e188:	2100      	movs	r1, #0
 800e18a:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800e18e:	1874      	adds	r4, r6, r1
 800e190:	eb42 0503 	adc.w	r5, r2, r3
 800e194:	2300      	movs	r3, #0
 800e196:	18e3      	adds	r3, r4, r3
 800e198:	4b55      	ldr	r3, [pc, #340]	; (800e2f0 <pow+0x3d8>)
 800e19a:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800e19e:	eb45 0303 	adc.w	r3, r5, r3
 800e1a2:	1519      	asrs	r1, r3, #20
 800e1a4:	ee03 1a10 	vmov	s6, r1
 800e1a8:	0d1e      	lsrs	r6, r3, #20
 800e1aa:	2100      	movs	r1, #0
 800e1ac:	f3c3 3246 	ubfx	r2, r3, #13, #7
 800e1b0:	0536      	lsls	r6, r6, #20
 800e1b2:	1a63      	subs	r3, r4, r1
 800e1b4:	9312      	str	r3, [sp, #72]	; 0x48
 800e1b6:	eb65 0306 	sbc.w	r3, r5, r6
 800e1ba:	9313      	str	r3, [sp, #76]	; 0x4c
 800e1bc:	4b4d      	ldr	r3, [pc, #308]	; (800e2f4 <pow+0x3dc>)
 800e1be:	eb03 1442 	add.w	r4, r3, r2, lsl #5
 800e1c2:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800e1c6:	ed9d 5b12 	vldr	d5, [sp, #72]	; 0x48
 800e1ca:	eea5 6b07 	vfma.f64	d6, d5, d7
 800e1ce:	ed93 7b00 	vldr	d7, [r3]
 800e1d2:	ed94 5b16 	vldr	d5, [r4, #88]	; 0x58
 800e1d6:	ed93 4b02 	vldr	d4, [r3, #8]
 800e1da:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 800e1de:	eea3 5b07 	vfma.f64	d5, d3, d7
 800e1e2:	ed94 7b18 	vldr	d7, [r4, #96]	; 0x60
 800e1e6:	ee36 9b05 	vadd.f64	d9, d6, d5
 800e1ea:	ee35 5b49 	vsub.f64	d5, d5, d9
 800e1ee:	eea3 7b04 	vfma.f64	d7, d3, d4
 800e1f2:	ed93 4b04 	vldr	d4, [r3, #16]
 800e1f6:	ee35 5b06 	vadd.f64	d5, d5, d6
 800e1fa:	ee37 7b05 	vadd.f64	d7, d7, d5
 800e1fe:	ee26 4b04 	vmul.f64	d4, d6, d4
 800e202:	ed93 3b08 	vldr	d3, [r3, #32]
 800e206:	ee26 0b04 	vmul.f64	d0, d6, d4
 800e20a:	eeb0 8b40 	vmov.f64	d8, d0
 800e20e:	ee94 8b06 	vfnms.f64	d8, d4, d6
 800e212:	ed93 4b06 	vldr	d4, [r3, #24]
 800e216:	ee26 ab00 	vmul.f64	d10, d6, d0
 800e21a:	ee39 1b00 	vadd.f64	d1, d9, d0
 800e21e:	ed93 2b0c 	vldr	d2, [r3, #48]	; 0x30
 800e222:	eea6 4b03 	vfma.f64	d4, d6, d3
 800e226:	ee39 9b41 	vsub.f64	d9, d9, d1
 800e22a:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
 800e22e:	ee37 8b08 	vadd.f64	d8, d7, d8
 800e232:	ee39 9b00 	vadd.f64	d9, d9, d0
 800e236:	eea6 3b02 	vfma.f64	d3, d6, d2
 800e23a:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 800e23e:	ee38 9b09 	vadd.f64	d9, d8, d9
 800e242:	ed93 2b0e 	vldr	d2, [r3, #56]	; 0x38
 800e246:	eea6 2b0c 	vfma.f64	d2, d6, d12
 800e24a:	ed9d 6b00 	vldr	d6, [sp]
 800e24e:	eea0 3b02 	vfma.f64	d3, d0, d2
 800e252:	eea0 4b03 	vfma.f64	d4, d0, d3
 800e256:	eeaa 9b04 	vfma.f64	d9, d10, d4
 800e25a:	ee31 7b09 	vadd.f64	d7, d1, d9
 800e25e:	ee26 6b07 	vmul.f64	d6, d6, d7
 800e262:	ed8d 6b02 	vstr	d6, [sp, #8]
 800e266:	eeb0 3b46 	vmov.f64	d3, d6
 800e26a:	ee31 1b47 	vsub.f64	d1, d1, d7
 800e26e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e272:	ee31 9b09 	vadd.f64	d9, d1, d9
 800e276:	ed9d 6b00 	vldr	d6, [sp]
 800e27a:	f3c3 570a 	ubfx	r7, r3, #20, #11
 800e27e:	f46f 7472 	mvn.w	r4, #968	; 0x3c8
 800e282:	193c      	adds	r4, r7, r4
 800e284:	2c3e      	cmp	r4, #62	; 0x3e
 800e286:	ee96 3b07 	vfnms.f64	d3, d6, d7
 800e28a:	eea6 3b09 	vfma.f64	d3, d6, d9
 800e28e:	d934      	bls.n	800e2fa <pow+0x3e2>
 800e290:	428c      	cmp	r4, r1
 800e292:	da0d      	bge.n	800e2b0 <pow+0x398>
 800e294:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800e298:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e29c:	ee37 0b00 	vadd.f64	d0, d7, d0
 800e2a0:	2800      	cmp	r0, #0
 800e2a2:	f43f ae87 	beq.w	800dfb4 <pow+0x9c>
 800e2a6:	eeb1 0b40 	vneg.f64	d0, d0
 800e2aa:	e683      	b.n	800dfb4 <pow+0x9c>
 800e2ac:	2000      	movs	r0, #0
 800e2ae:	e771      	b.n	800e194 <pow+0x27c>
 800e2b0:	f5b7 6f81 	cmp.w	r7, #1032	; 0x408
 800e2b4:	d920      	bls.n	800e2f8 <pow+0x3e0>
 800e2b6:	2a00      	cmp	r2, #0
 800e2b8:	f173 0300 	sbcs.w	r3, r3, #0
 800e2bc:	f6bf af51 	bge.w	800e162 <pow+0x24a>
 800e2c0:	b01b      	add	sp, #108	; 0x6c
 800e2c2:	ecbd 8b0a 	vpop	{d8-d12}
 800e2c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2ca:	f7ff bd99 	b.w	800de00 <__math_uflow>
 800e2ce:	bf00      	nop
 800e2d0:	00000000 	.word	0x00000000
 800e2d4:	43300000 	.word	0x43300000
 800e2d8:	fff00000 	.word	0xfff00000
 800e2dc:	3ff00000 	.word	0x3ff00000
 800e2e0:	ffe00000 	.word	0xffe00000
 800e2e4:	7fe00000 	.word	0x7fe00000
 800e2e8:	7fdfffff 	.word	0x7fdfffff
 800e2ec:	fcc00000 	.word	0xfcc00000
 800e2f0:	c0196aab 	.word	0xc0196aab
 800e2f4:	08029308 	.word	0x08029308
 800e2f8:	460f      	mov	r7, r1
 800e2fa:	4e65      	ldr	r6, [pc, #404]	; (800e490 <pow+0x578>)
 800e2fc:	ed9d 4b02 	vldr	d4, [sp, #8]
 800e300:	ed96 6b02 	vldr	d6, [r6, #8]
 800e304:	ed96 7b00 	vldr	d7, [r6]
 800e308:	eeb0 5b46 	vmov.f64	d5, d6
 800e30c:	eea4 5b07 	vfma.f64	d5, d4, d7
 800e310:	ed8d 5b00 	vstr	d5, [sp]
 800e314:	ee35 6b46 	vsub.f64	d6, d5, d6
 800e318:	eeb0 5b44 	vmov.f64	d5, d4
 800e31c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e320:	ed96 7b04 	vldr	d7, [r6, #16]
 800e324:	f002 017f 	and.w	r1, r2, #127	; 0x7f
 800e328:	eea6 5b07 	vfma.f64	d5, d6, d7
 800e32c:	eeb0 7b45 	vmov.f64	d7, d5
 800e330:	ed96 5b06 	vldr	d5, [r6, #24]
 800e334:	1849      	adds	r1, r1, r1
 800e336:	eb06 0cc1 	add.w	ip, r6, r1, lsl #3
 800e33a:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 800e33e:	eea6 7b05 	vfma.f64	d7, d6, d5
 800e342:	ed96 4b0a 	vldr	d4, [r6, #40]	; 0x28
 800e346:	ee33 3b07 	vadd.f64	d3, d3, d7
 800e34a:	ee23 6b03 	vmul.f64	d6, d3, d3
 800e34e:	ed91 7b1c 	vldr	d7, [r1, #112]	; 0x70
 800e352:	ed96 5b08 	vldr	d5, [r6, #32]
 800e356:	ee33 7b07 	vadd.f64	d7, d3, d7
 800e35a:	1814      	adds	r4, r2, r0
 800e35c:	0365      	lsls	r5, r4, #13
 800e35e:	e9dc 4c1e 	ldrd	r4, ip, [ip, #120]	; 0x78
 800e362:	eea3 5b04 	vfma.f64	d5, d3, d4
 800e366:	eea6 7b05 	vfma.f64	d7, d6, d5
 800e36a:	ed96 4b0e 	vldr	d4, [r6, #56]	; 0x38
 800e36e:	ee26 6b06 	vmul.f64	d6, d6, d6
 800e372:	ed96 5b0c 	vldr	d5, [r6, #48]	; 0x30
 800e376:	2000      	movs	r0, #0
 800e378:	eb10 0a04 	adds.w	sl, r0, r4
 800e37c:	eea3 5b04 	vfma.f64	d5, d3, d4
 800e380:	eb45 0b0c 	adc.w	fp, r5, ip
 800e384:	eea6 7b05 	vfma.f64	d7, d6, d5
 800e388:	2f00      	cmp	r7, #0
 800e38a:	d16a      	bne.n	800e462 <pow+0x54a>
 800e38c:	f002 4000 	and.w	r0, r2, #2147483648	; 0x80000000
 800e390:	4639      	mov	r1, r7
 800e392:	ea50 0301 	orrs.w	r3, r0, r1
 800e396:	f04f 0300 	mov.w	r3, #0
 800e39a:	d115      	bne.n	800e3c8 <pow+0x4b0>
 800e39c:	eb1a 0303 	adds.w	r3, sl, r3
 800e3a0:	ee0b 3a10 	vmov	s22, r3
 800e3a4:	4b3b      	ldr	r3, [pc, #236]	; (800e494 <pow+0x57c>)
 800e3a6:	ed9f 0b34 	vldr	d0, [pc, #208]	; 800e478 <pow+0x560>
 800e3aa:	eb4b 0303 	adc.w	r3, fp, r3
 800e3ae:	ee0b 3a90 	vmov	s23, r3
 800e3b2:	eea7 bb0b 	vfma.f64	d11, d7, d11
 800e3b6:	ee2b 0b00 	vmul.f64	d0, d11, d0
 800e3ba:	b01b      	add	sp, #108	; 0x6c
 800e3bc:	ecbd 8b0a 	vpop	{d8-d12}
 800e3c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3c4:	f7ff bd5c 	b.w	800de80 <__math_check_oflow>
 800e3c8:	eb1a 0303 	adds.w	r3, sl, r3
 800e3cc:	930a      	str	r3, [sp, #40]	; 0x28
 800e3ce:	4b32      	ldr	r3, [pc, #200]	; (800e498 <pow+0x580>)
 800e3d0:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800e3d4:	eb4b 0303 	adc.w	r3, fp, r3
 800e3d8:	930b      	str	r3, [sp, #44]	; 0x2c
 800e3da:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800e3de:	ee27 6b05 	vmul.f64	d6, d7, d5
 800e3e2:	ee35 7b06 	vadd.f64	d7, d5, d6
 800e3e6:	eeb0 3bc7 	vabs.f64	d3, d7
 800e3ea:	eeb4 3bc4 	vcmpe.f64	d3, d4
 800e3ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3f2:	ed9f 0b23 	vldr	d0, [pc, #140]	; 800e480 <pow+0x568>
 800e3f6:	d52b      	bpl.n	800e450 <pow+0x538>
 800e3f8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800e3fc:	ee35 5b47 	vsub.f64	d5, d5, d7
 800e400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e404:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 800e408:	ee35 6b06 	vadd.f64	d6, d5, d6
 800e40c:	bf48      	it	mi
 800e40e:	eeb0 4b43 	vmovmi.f64	d4, d3
 800e412:	ee37 3b04 	vadd.f64	d3, d7, d4
 800e416:	ee34 5b43 	vsub.f64	d5, d4, d3
 800e41a:	ee35 7b07 	vadd.f64	d7, d5, d7
 800e41e:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e422:	ee37 7b03 	vadd.f64	d7, d7, d3
 800e426:	ee37 7b44 	vsub.f64	d7, d7, d4
 800e42a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e42e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e432:	d105      	bne.n	800e440 <pow+0x528>
 800e434:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e436:	463a      	mov	r2, r7
 800e438:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800e43c:	ec43 2b17 	vmov	d7, r2, r3
 800e440:	ed8d 0b16 	vstr	d0, [sp, #88]	; 0x58
 800e444:	ed9d 6b16 	vldr	d6, [sp, #88]	; 0x58
 800e448:	ee26 6b00 	vmul.f64	d6, d6, d0
 800e44c:	ed8d 6b18 	vstr	d6, [sp, #96]	; 0x60
 800e450:	ee27 0b00 	vmul.f64	d0, d7, d0
 800e454:	b01b      	add	sp, #108	; 0x6c
 800e456:	ecbd 8b0a 	vpop	{d8-d12}
 800e45a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e45e:	f7ff bd06 	b.w	800de6e <__math_check_uflow>
 800e462:	ec4b ab10 	vmov	d0, sl, fp
 800e466:	eea7 0b00 	vfma.f64	d0, d7, d0
 800e46a:	e5a3      	b.n	800dfb4 <pow+0x9c>
 800e46c:	ed9f 0b06 	vldr	d0, [pc, #24]	; 800e488 <pow+0x570>
 800e470:	e5a0      	b.n	800dfb4 <pow+0x9c>
 800e472:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800e476:	e59d      	b.n	800dfb4 <pow+0x9c>
 800e478:	00000000 	.word	0x00000000
 800e47c:	7f000000 	.word	0x7f000000
 800e480:	00000000 	.word	0x00000000
 800e484:	00100000 	.word	0x00100000
	...
 800e490:	0802a5f8 	.word	0x0802a5f8
 800e494:	c0f00000 	.word	0xc0f00000
 800e498:	3fe00000 	.word	0x3fe00000
 800e49c:	00000000 	.word	0x00000000

0800e4a0 <ceil>:
 800e4a0:	ee10 1a90 	vmov	r1, s1
 800e4a4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e4a8:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800e4ac:	2b13      	cmp	r3, #19
 800e4ae:	b530      	push	{r4, r5, lr}
 800e4b0:	ee10 0a10 	vmov	r0, s0
 800e4b4:	ee10 5a10 	vmov	r5, s0
 800e4b8:	dc2f      	bgt.n	800e51a <ceil+0x7a>
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	da13      	bge.n	800e4e6 <ceil+0x46>
 800e4be:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800e580 <ceil+0xe0>
 800e4c2:	ee30 0b07 	vadd.f64	d0, d0, d7
 800e4c6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e4ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4ce:	dd05      	ble.n	800e4dc <ceil+0x3c>
 800e4d0:	2900      	cmp	r1, #0
 800e4d2:	db4c      	blt.n	800e56e <ceil+0xce>
 800e4d4:	4301      	orrs	r1, r0
 800e4d6:	d04e      	beq.n	800e576 <ceil+0xd6>
 800e4d8:	492b      	ldr	r1, [pc, #172]	; (800e588 <ceil+0xe8>)
 800e4da:	2000      	movs	r0, #0
 800e4dc:	460b      	mov	r3, r1
 800e4de:	4602      	mov	r2, r0
 800e4e0:	ec43 2b10 	vmov	d0, r2, r3
 800e4e4:	e020      	b.n	800e528 <ceil+0x88>
 800e4e6:	4a29      	ldr	r2, [pc, #164]	; (800e58c <ceil+0xec>)
 800e4e8:	411a      	asrs	r2, r3
 800e4ea:	ea01 0402 	and.w	r4, r1, r2
 800e4ee:	4304      	orrs	r4, r0
 800e4f0:	d01a      	beq.n	800e528 <ceil+0x88>
 800e4f2:	ed9f 7b23 	vldr	d7, [pc, #140]	; 800e580 <ceil+0xe0>
 800e4f6:	ee30 0b07 	vadd.f64	d0, d0, d7
 800e4fa:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e4fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e502:	ddeb      	ble.n	800e4dc <ceil+0x3c>
 800e504:	2900      	cmp	r1, #0
 800e506:	bfc2      	ittt	gt
 800e508:	f44f 1080 	movgt.w	r0, #1048576	; 0x100000
 800e50c:	fa40 f303 	asrgt.w	r3, r0, r3
 800e510:	18c9      	addgt	r1, r1, r3
 800e512:	ea21 0102 	bic.w	r1, r1, r2
 800e516:	2000      	movs	r0, #0
 800e518:	e7e0      	b.n	800e4dc <ceil+0x3c>
 800e51a:	2b33      	cmp	r3, #51	; 0x33
 800e51c:	dd05      	ble.n	800e52a <ceil+0x8a>
 800e51e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e522:	d101      	bne.n	800e528 <ceil+0x88>
 800e524:	ee30 0b00 	vadd.f64	d0, d0, d0
 800e528:	bd30      	pop	{r4, r5, pc}
 800e52a:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800e52e:	f04f 32ff 	mov.w	r2, #4294967295
 800e532:	40e2      	lsrs	r2, r4
 800e534:	4202      	tst	r2, r0
 800e536:	d0f7      	beq.n	800e528 <ceil+0x88>
 800e538:	ed9f 7b11 	vldr	d7, [pc, #68]	; 800e580 <ceil+0xe0>
 800e53c:	ee30 0b07 	vadd.f64	d0, d0, d7
 800e540:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e548:	ddc8      	ble.n	800e4dc <ceil+0x3c>
 800e54a:	2900      	cmp	r1, #0
 800e54c:	dd02      	ble.n	800e554 <ceil+0xb4>
 800e54e:	2b14      	cmp	r3, #20
 800e550:	d103      	bne.n	800e55a <ceil+0xba>
 800e552:	3101      	adds	r1, #1
 800e554:	ea20 0002 	bic.w	r0, r0, r2
 800e558:	e7c0      	b.n	800e4dc <ceil+0x3c>
 800e55a:	2401      	movs	r4, #1
 800e55c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800e560:	fa04 f303 	lsl.w	r3, r4, r3
 800e564:	4418      	add	r0, r3
 800e566:	42a8      	cmp	r0, r5
 800e568:	bf38      	it	cc
 800e56a:	1909      	addcc	r1, r1, r4
 800e56c:	e7f2      	b.n	800e554 <ceil+0xb4>
 800e56e:	2000      	movs	r0, #0
 800e570:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800e574:	e7b2      	b.n	800e4dc <ceil+0x3c>
 800e576:	4608      	mov	r0, r1
 800e578:	e7b0      	b.n	800e4dc <ceil+0x3c>
 800e57a:	bf00      	nop
 800e57c:	f3af 8000 	nop.w
 800e580:	8800759c 	.word	0x8800759c
 800e584:	7e37e43c 	.word	0x7e37e43c
 800e588:	3ff00000 	.word	0x3ff00000
 800e58c:	000fffff 	.word	0x000fffff

0800e590 <cos>:
 800e590:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e592:	eeb0 7b40 	vmov.f64	d7, d0
 800e596:	ee17 3a90 	vmov	r3, s15
 800e59a:	4a1f      	ldr	r2, [pc, #124]	; (800e618 <cos+0x88>)
 800e59c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e5a0:	4293      	cmp	r3, r2
 800e5a2:	dc04      	bgt.n	800e5ae <cos+0x1e>
 800e5a4:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 800e610 <cos+0x80>
 800e5a8:	f000 fa0a 	bl	800e9c0 <__kernel_cos>
 800e5ac:	e004      	b.n	800e5b8 <cos+0x28>
 800e5ae:	4a1b      	ldr	r2, [pc, #108]	; (800e61c <cos+0x8c>)
 800e5b0:	4293      	cmp	r3, r2
 800e5b2:	dd04      	ble.n	800e5be <cos+0x2e>
 800e5b4:	ee30 0b40 	vsub.f64	d0, d0, d0
 800e5b8:	b005      	add	sp, #20
 800e5ba:	f85d fb04 	ldr.w	pc, [sp], #4
 800e5be:	4668      	mov	r0, sp
 800e5c0:	f000 f8ba 	bl	800e738 <__ieee754_rem_pio2>
 800e5c4:	f000 0003 	and.w	r0, r0, #3
 800e5c8:	2801      	cmp	r0, #1
 800e5ca:	d007      	beq.n	800e5dc <cos+0x4c>
 800e5cc:	2802      	cmp	r0, #2
 800e5ce:	d00e      	beq.n	800e5ee <cos+0x5e>
 800e5d0:	b9a0      	cbnz	r0, 800e5fc <cos+0x6c>
 800e5d2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e5d6:	ed9d 0b00 	vldr	d0, [sp]
 800e5da:	e7e5      	b.n	800e5a8 <cos+0x18>
 800e5dc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e5e0:	ed9d 0b00 	vldr	d0, [sp]
 800e5e4:	f000 fcd8 	bl	800ef98 <__kernel_sin>
 800e5e8:	eeb1 0b40 	vneg.f64	d0, d0
 800e5ec:	e7e4      	b.n	800e5b8 <cos+0x28>
 800e5ee:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e5f2:	ed9d 0b00 	vldr	d0, [sp]
 800e5f6:	f000 f9e3 	bl	800e9c0 <__kernel_cos>
 800e5fa:	e7f5      	b.n	800e5e8 <cos+0x58>
 800e5fc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e600:	ed9d 0b00 	vldr	d0, [sp]
 800e604:	2001      	movs	r0, #1
 800e606:	f000 fcc7 	bl	800ef98 <__kernel_sin>
 800e60a:	e7d5      	b.n	800e5b8 <cos+0x28>
 800e60c:	f3af 8000 	nop.w
	...
 800e618:	3fe921fb 	.word	0x3fe921fb
 800e61c:	7fefffff 	.word	0x7fefffff

0800e620 <logf>:
 800e620:	ee10 3a10 	vmov	r3, s0
 800e624:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800e628:	b410      	push	{r4}
 800e62a:	d055      	beq.n	800e6d8 <logf+0xb8>
 800e62c:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
 800e630:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800e634:	d31a      	bcc.n	800e66c <logf+0x4c>
 800e636:	005a      	lsls	r2, r3, #1
 800e638:	d104      	bne.n	800e644 <logf+0x24>
 800e63a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e63e:	2001      	movs	r0, #1
 800e640:	f000 bd0e 	b.w	800f060 <__math_divzerof>
 800e644:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e648:	d043      	beq.n	800e6d2 <logf+0xb2>
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	db02      	blt.n	800e654 <logf+0x34>
 800e64e:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800e652:	d303      	bcc.n	800e65c <logf+0x3c>
 800e654:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e658:	f000 bd12 	b.w	800f080 <__math_invalidf>
 800e65c:	eddf 7a20 	vldr	s15, [pc, #128]	; 800e6e0 <logf+0xc0>
 800e660:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e664:	ee10 3a10 	vmov	r3, s0
 800e668:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
 800e66c:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
 800e670:	491c      	ldr	r1, [pc, #112]	; (800e6e4 <logf+0xc4>)
 800e672:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
 800e676:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 800e67a:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 800e67e:	0dd4      	lsrs	r4, r2, #23
 800e680:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 800e684:	05e4      	lsls	r4, r4, #23
 800e686:	ed90 6b00 	vldr	d6, [r0]
 800e68a:	1b1b      	subs	r3, r3, r4
 800e68c:	ee07 3a90 	vmov	s15, r3
 800e690:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
 800e694:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800e698:	15d2      	asrs	r2, r2, #23
 800e69a:	eea6 0b07 	vfma.f64	d0, d6, d7
 800e69e:	ed90 6b02 	vldr	d6, [r0, #8]
 800e6a2:	ee07 2a90 	vmov	s15, r2
 800e6a6:	ed91 4b44 	vldr	d4, [r1, #272]	; 0x110
 800e6aa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e6ae:	eea7 6b05 	vfma.f64	d6, d7, d5
 800e6b2:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
 800e6b6:	ee20 5b00 	vmul.f64	d5, d0, d0
 800e6ba:	eea4 7b00 	vfma.f64	d7, d4, d0
 800e6be:	ed91 4b42 	vldr	d4, [r1, #264]	; 0x108
 800e6c2:	ee30 0b06 	vadd.f64	d0, d0, d6
 800e6c6:	eea4 7b05 	vfma.f64	d7, d4, d5
 800e6ca:	eea5 0b07 	vfma.f64	d0, d5, d7
 800e6ce:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800e6d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e6d6:	4770      	bx	lr
 800e6d8:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800e6e8 <logf+0xc8>
 800e6dc:	e7f9      	b.n	800e6d2 <logf+0xb2>
 800e6de:	bf00      	nop
 800e6e0:	4b000000 	.word	0x4b000000
 800e6e4:	0802a350 	.word	0x0802a350
 800e6e8:	00000000 	.word	0x00000000

0800e6ec <sqrtf>:
 800e6ec:	b508      	push	{r3, lr}
 800e6ee:	ed2d 8b02 	vpush	{d8}
 800e6f2:	eeb0 8a40 	vmov.f32	s16, s0
 800e6f6:	f000 f95f 	bl	800e9b8 <__ieee754_sqrtf>
 800e6fa:	4b0d      	ldr	r3, [pc, #52]	; (800e730 <sqrtf+0x44>)
 800e6fc:	f993 3000 	ldrsb.w	r3, [r3]
 800e700:	3301      	adds	r3, #1
 800e702:	d011      	beq.n	800e728 <sqrtf+0x3c>
 800e704:	eeb4 8a48 	vcmp.f32	s16, s16
 800e708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e70c:	d60c      	bvs.n	800e728 <sqrtf+0x3c>
 800e70e:	eddf 8a09 	vldr	s17, [pc, #36]	; 800e734 <sqrtf+0x48>
 800e712:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800e716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e71a:	d505      	bpl.n	800e728 <sqrtf+0x3c>
 800e71c:	f000 fdde 	bl	800f2dc <__errno>
 800e720:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800e724:	2321      	movs	r3, #33	; 0x21
 800e726:	6003      	str	r3, [r0, #0]
 800e728:	ecbd 8b02 	vpop	{d8}
 800e72c:	bd08      	pop	{r3, pc}
 800e72e:	bf00      	nop
 800e730:	20000018 	.word	0x20000018
 800e734:	00000000 	.word	0x00000000

0800e738 <__ieee754_rem_pio2>:
 800e738:	b570      	push	{r4, r5, r6, lr}
 800e73a:	eeb0 7b40 	vmov.f64	d7, d0
 800e73e:	ee17 5a90 	vmov	r5, s15
 800e742:	4b97      	ldr	r3, [pc, #604]	; (800e9a0 <__ieee754_rem_pio2+0x268>)
 800e744:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e748:	429e      	cmp	r6, r3
 800e74a:	b088      	sub	sp, #32
 800e74c:	4604      	mov	r4, r0
 800e74e:	dc07      	bgt.n	800e760 <__ieee754_rem_pio2+0x28>
 800e750:	2200      	movs	r2, #0
 800e752:	2300      	movs	r3, #0
 800e754:	ed84 0b00 	vstr	d0, [r4]
 800e758:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800e75c:	2000      	movs	r0, #0
 800e75e:	e01b      	b.n	800e798 <__ieee754_rem_pio2+0x60>
 800e760:	4b90      	ldr	r3, [pc, #576]	; (800e9a4 <__ieee754_rem_pio2+0x26c>)
 800e762:	429e      	cmp	r6, r3
 800e764:	dc3b      	bgt.n	800e7de <__ieee754_rem_pio2+0xa6>
 800e766:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800e76a:	2d00      	cmp	r5, #0
 800e76c:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 800e960 <__ieee754_rem_pio2+0x228>
 800e770:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800e774:	dd19      	ble.n	800e7aa <__ieee754_rem_pio2+0x72>
 800e776:	ee30 7b46 	vsub.f64	d7, d0, d6
 800e77a:	429e      	cmp	r6, r3
 800e77c:	d00e      	beq.n	800e79c <__ieee754_rem_pio2+0x64>
 800e77e:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 800e968 <__ieee754_rem_pio2+0x230>
 800e782:	ee37 5b46 	vsub.f64	d5, d7, d6
 800e786:	ee37 7b45 	vsub.f64	d7, d7, d5
 800e78a:	ed84 5b00 	vstr	d5, [r4]
 800e78e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e792:	ed84 7b02 	vstr	d7, [r4, #8]
 800e796:	2001      	movs	r0, #1
 800e798:	b008      	add	sp, #32
 800e79a:	bd70      	pop	{r4, r5, r6, pc}
 800e79c:	ed9f 6b74 	vldr	d6, [pc, #464]	; 800e970 <__ieee754_rem_pio2+0x238>
 800e7a0:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e7a4:	ed9f 6b74 	vldr	d6, [pc, #464]	; 800e978 <__ieee754_rem_pio2+0x240>
 800e7a8:	e7eb      	b.n	800e782 <__ieee754_rem_pio2+0x4a>
 800e7aa:	429e      	cmp	r6, r3
 800e7ac:	ee30 7b06 	vadd.f64	d7, d0, d6
 800e7b0:	d00e      	beq.n	800e7d0 <__ieee754_rem_pio2+0x98>
 800e7b2:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 800e968 <__ieee754_rem_pio2+0x230>
 800e7b6:	ee37 5b06 	vadd.f64	d5, d7, d6
 800e7ba:	ee37 7b45 	vsub.f64	d7, d7, d5
 800e7be:	ed84 5b00 	vstr	d5, [r4]
 800e7c2:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e7c6:	f04f 30ff 	mov.w	r0, #4294967295
 800e7ca:	ed84 7b02 	vstr	d7, [r4, #8]
 800e7ce:	e7e3      	b.n	800e798 <__ieee754_rem_pio2+0x60>
 800e7d0:	ed9f 6b67 	vldr	d6, [pc, #412]	; 800e970 <__ieee754_rem_pio2+0x238>
 800e7d4:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e7d8:	ed9f 6b67 	vldr	d6, [pc, #412]	; 800e978 <__ieee754_rem_pio2+0x240>
 800e7dc:	e7eb      	b.n	800e7b6 <__ieee754_rem_pio2+0x7e>
 800e7de:	4b72      	ldr	r3, [pc, #456]	; (800e9a8 <__ieee754_rem_pio2+0x270>)
 800e7e0:	429e      	cmp	r6, r3
 800e7e2:	dc6e      	bgt.n	800e8c2 <__ieee754_rem_pio2+0x18a>
 800e7e4:	f000 fc5b 	bl	800f09e <fabs>
 800e7e8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800e7ec:	ed9f 6b64 	vldr	d6, [pc, #400]	; 800e980 <__ieee754_rem_pio2+0x248>
 800e7f0:	eea0 7b06 	vfma.f64	d7, d0, d6
 800e7f4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800e7f8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800e7fc:	ee17 0a90 	vmov	r0, s15
 800e800:	eeb1 4b45 	vneg.f64	d4, d5
 800e804:	ed9f 7b56 	vldr	d7, [pc, #344]	; 800e960 <__ieee754_rem_pio2+0x228>
 800e808:	eea5 0b47 	vfms.f64	d0, d5, d7
 800e80c:	ed9f 7b56 	vldr	d7, [pc, #344]	; 800e968 <__ieee754_rem_pio2+0x230>
 800e810:	281f      	cmp	r0, #31
 800e812:	ee25 7b07 	vmul.f64	d7, d5, d7
 800e816:	ee30 6b47 	vsub.f64	d6, d0, d7
 800e81a:	dc08      	bgt.n	800e82e <__ieee754_rem_pio2+0xf6>
 800e81c:	4b63      	ldr	r3, [pc, #396]	; (800e9ac <__ieee754_rem_pio2+0x274>)
 800e81e:	1e42      	subs	r2, r0, #1
 800e820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e824:	42b3      	cmp	r3, r6
 800e826:	d002      	beq.n	800e82e <__ieee754_rem_pio2+0xf6>
 800e828:	ed84 6b00 	vstr	d6, [r4]
 800e82c:	e024      	b.n	800e878 <__ieee754_rem_pio2+0x140>
 800e82e:	ee16 3a90 	vmov	r3, s13
 800e832:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800e836:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800e83a:	2b10      	cmp	r3, #16
 800e83c:	ea4f 5226 	mov.w	r2, r6, asr #20
 800e840:	ddf2      	ble.n	800e828 <__ieee754_rem_pio2+0xf0>
 800e842:	eeb0 6b40 	vmov.f64	d6, d0
 800e846:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 800e970 <__ieee754_rem_pio2+0x238>
 800e84a:	eea4 6b03 	vfma.f64	d6, d4, d3
 800e84e:	ee30 7b46 	vsub.f64	d7, d0, d6
 800e852:	eea4 7b03 	vfma.f64	d7, d4, d3
 800e856:	ed9f 3b48 	vldr	d3, [pc, #288]	; 800e978 <__ieee754_rem_pio2+0x240>
 800e85a:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800e85e:	ee36 3b47 	vsub.f64	d3, d6, d7
 800e862:	ee13 3a90 	vmov	r3, s7
 800e866:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800e86a:	1ad3      	subs	r3, r2, r3
 800e86c:	2b31      	cmp	r3, #49	; 0x31
 800e86e:	dc17      	bgt.n	800e8a0 <__ieee754_rem_pio2+0x168>
 800e870:	eeb0 0b46 	vmov.f64	d0, d6
 800e874:	ed84 3b00 	vstr	d3, [r4]
 800e878:	ed94 6b00 	vldr	d6, [r4]
 800e87c:	2d00      	cmp	r5, #0
 800e87e:	ee30 0b46 	vsub.f64	d0, d0, d6
 800e882:	ee30 7b47 	vsub.f64	d7, d0, d7
 800e886:	ed84 7b02 	vstr	d7, [r4, #8]
 800e88a:	da85      	bge.n	800e798 <__ieee754_rem_pio2+0x60>
 800e88c:	eeb1 6b46 	vneg.f64	d6, d6
 800e890:	ed84 6b00 	vstr	d6, [r4]
 800e894:	eeb1 7b47 	vneg.f64	d7, d7
 800e898:	4240      	negs	r0, r0
 800e89a:	ed84 7b02 	vstr	d7, [r4, #8]
 800e89e:	e77b      	b.n	800e798 <__ieee754_rem_pio2+0x60>
 800e8a0:	ed9f 3b39 	vldr	d3, [pc, #228]	; 800e988 <__ieee754_rem_pio2+0x250>
 800e8a4:	eeb0 0b46 	vmov.f64	d0, d6
 800e8a8:	eea4 0b03 	vfma.f64	d0, d4, d3
 800e8ac:	ee36 7b40 	vsub.f64	d7, d6, d0
 800e8b0:	ed9f 6b37 	vldr	d6, [pc, #220]	; 800e990 <__ieee754_rem_pio2+0x258>
 800e8b4:	eea4 7b03 	vfma.f64	d7, d4, d3
 800e8b8:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800e8bc:	ee30 6b47 	vsub.f64	d6, d0, d7
 800e8c0:	e7b2      	b.n	800e828 <__ieee754_rem_pio2+0xf0>
 800e8c2:	4b3b      	ldr	r3, [pc, #236]	; (800e9b0 <__ieee754_rem_pio2+0x278>)
 800e8c4:	429e      	cmp	r6, r3
 800e8c6:	dd06      	ble.n	800e8d6 <__ieee754_rem_pio2+0x19e>
 800e8c8:	ee30 7b40 	vsub.f64	d7, d0, d0
 800e8cc:	ed80 7b02 	vstr	d7, [r0, #8]
 800e8d0:	ed80 7b00 	vstr	d7, [r0]
 800e8d4:	e742      	b.n	800e75c <__ieee754_rem_pio2+0x24>
 800e8d6:	1532      	asrs	r2, r6, #20
 800e8d8:	ee10 0a10 	vmov	r0, s0
 800e8dc:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800e8e0:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800e8e4:	ec41 0b17 	vmov	d7, r0, r1
 800e8e8:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800e8ec:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 800e998 <__ieee754_rem_pio2+0x260>
 800e8f0:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800e8f4:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e8f8:	ed8d 6b02 	vstr	d6, [sp, #8]
 800e8fc:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e900:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800e904:	a902      	add	r1, sp, #8
 800e906:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800e90a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e90e:	ed8d 6b04 	vstr	d6, [sp, #16]
 800e912:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e916:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e91a:	2603      	movs	r6, #3
 800e91c:	4608      	mov	r0, r1
 800e91e:	ed91 7b04 	vldr	d7, [r1, #16]
 800e922:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e92a:	4633      	mov	r3, r6
 800e92c:	f1a1 0108 	sub.w	r1, r1, #8
 800e930:	f106 36ff 	add.w	r6, r6, #4294967295
 800e934:	d0f3      	beq.n	800e91e <__ieee754_rem_pio2+0x1e6>
 800e936:	491f      	ldr	r1, [pc, #124]	; (800e9b4 <__ieee754_rem_pio2+0x27c>)
 800e938:	9101      	str	r1, [sp, #4]
 800e93a:	2102      	movs	r1, #2
 800e93c:	9100      	str	r1, [sp, #0]
 800e93e:	4621      	mov	r1, r4
 800e940:	f000 f8aa 	bl	800ea98 <__kernel_rem_pio2>
 800e944:	2d00      	cmp	r5, #0
 800e946:	f6bf af27 	bge.w	800e798 <__ieee754_rem_pio2+0x60>
 800e94a:	ed94 7b00 	vldr	d7, [r4]
 800e94e:	eeb1 7b47 	vneg.f64	d7, d7
 800e952:	ed84 7b00 	vstr	d7, [r4]
 800e956:	ed94 7b02 	vldr	d7, [r4, #8]
 800e95a:	e79b      	b.n	800e894 <__ieee754_rem_pio2+0x15c>
 800e95c:	f3af 8000 	nop.w
 800e960:	54400000 	.word	0x54400000
 800e964:	3ff921fb 	.word	0x3ff921fb
 800e968:	1a626331 	.word	0x1a626331
 800e96c:	3dd0b461 	.word	0x3dd0b461
 800e970:	1a600000 	.word	0x1a600000
 800e974:	3dd0b461 	.word	0x3dd0b461
 800e978:	2e037073 	.word	0x2e037073
 800e97c:	3ba3198a 	.word	0x3ba3198a
 800e980:	6dc9c883 	.word	0x6dc9c883
 800e984:	3fe45f30 	.word	0x3fe45f30
 800e988:	2e000000 	.word	0x2e000000
 800e98c:	3ba3198a 	.word	0x3ba3198a
 800e990:	252049c1 	.word	0x252049c1
 800e994:	397b839a 	.word	0x397b839a
 800e998:	00000000 	.word	0x00000000
 800e99c:	41700000 	.word	0x41700000
 800e9a0:	3fe921fb 	.word	0x3fe921fb
 800e9a4:	4002d97b 	.word	0x4002d97b
 800e9a8:	413921fb 	.word	0x413921fb
 800e9ac:	0802a470 	.word	0x0802a470
 800e9b0:	7fefffff 	.word	0x7fefffff
 800e9b4:	0802a4f0 	.word	0x0802a4f0

0800e9b8 <__ieee754_sqrtf>:
 800e9b8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800e9bc:	4770      	bx	lr
	...

0800e9c0 <__kernel_cos>:
 800e9c0:	ee10 1a90 	vmov	r1, s1
 800e9c4:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800e9c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800e9cc:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 800e9d0:	da05      	bge.n	800e9de <__kernel_cos+0x1e>
 800e9d2:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800e9d6:	ee17 3a90 	vmov	r3, s15
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d03d      	beq.n	800ea5a <__kernel_cos+0x9a>
 800e9de:	ee20 3b00 	vmul.f64	d3, d0, d0
 800e9e2:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800ea60 <__kernel_cos+0xa0>
 800e9e6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800ea68 <__kernel_cos+0xa8>
 800e9ea:	eea3 6b07 	vfma.f64	d6, d3, d7
 800e9ee:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800ea70 <__kernel_cos+0xb0>
 800e9f2:	eea6 7b03 	vfma.f64	d7, d6, d3
 800e9f6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800ea78 <__kernel_cos+0xb8>
 800e9fa:	eea7 6b03 	vfma.f64	d6, d7, d3
 800e9fe:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800ea80 <__kernel_cos+0xc0>
 800ea02:	4b23      	ldr	r3, [pc, #140]	; (800ea90 <__kernel_cos+0xd0>)
 800ea04:	eea6 7b03 	vfma.f64	d7, d6, d3
 800ea08:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 800ea88 <__kernel_cos+0xc8>
 800ea0c:	4299      	cmp	r1, r3
 800ea0e:	eea7 6b03 	vfma.f64	d6, d7, d3
 800ea12:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800ea16:	ee26 5b03 	vmul.f64	d5, d6, d3
 800ea1a:	ee23 7b07 	vmul.f64	d7, d3, d7
 800ea1e:	ee21 6b40 	vnmul.f64	d6, d1, d0
 800ea22:	eea3 6b05 	vfma.f64	d6, d3, d5
 800ea26:	dc04      	bgt.n	800ea32 <__kernel_cos+0x72>
 800ea28:	ee37 6b46 	vsub.f64	d6, d7, d6
 800ea2c:	ee34 0b46 	vsub.f64	d0, d4, d6
 800ea30:	4770      	bx	lr
 800ea32:	4b18      	ldr	r3, [pc, #96]	; (800ea94 <__kernel_cos+0xd4>)
 800ea34:	4299      	cmp	r1, r3
 800ea36:	dc0d      	bgt.n	800ea54 <__kernel_cos+0x94>
 800ea38:	2200      	movs	r2, #0
 800ea3a:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800ea3e:	ec43 2b15 	vmov	d5, r2, r3
 800ea42:	ee34 0b45 	vsub.f64	d0, d4, d5
 800ea46:	ee37 7b45 	vsub.f64	d7, d7, d5
 800ea4a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ea4e:	ee30 0b47 	vsub.f64	d0, d0, d7
 800ea52:	4770      	bx	lr
 800ea54:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 800ea58:	e7f3      	b.n	800ea42 <__kernel_cos+0x82>
 800ea5a:	eeb0 0b44 	vmov.f64	d0, d4
 800ea5e:	4770      	bx	lr
 800ea60:	be8838d4 	.word	0xbe8838d4
 800ea64:	bda8fae9 	.word	0xbda8fae9
 800ea68:	bdb4b1c4 	.word	0xbdb4b1c4
 800ea6c:	3e21ee9e 	.word	0x3e21ee9e
 800ea70:	809c52ad 	.word	0x809c52ad
 800ea74:	be927e4f 	.word	0xbe927e4f
 800ea78:	19cb1590 	.word	0x19cb1590
 800ea7c:	3efa01a0 	.word	0x3efa01a0
 800ea80:	16c15177 	.word	0x16c15177
 800ea84:	bf56c16c 	.word	0xbf56c16c
 800ea88:	5555554c 	.word	0x5555554c
 800ea8c:	3fa55555 	.word	0x3fa55555
 800ea90:	3fd33332 	.word	0x3fd33332
 800ea94:	3fe90000 	.word	0x3fe90000

0800ea98 <__kernel_rem_pio2>:
 800ea98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea9c:	ed2d 8b06 	vpush	{d8-d10}
 800eaa0:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 800eaa4:	469b      	mov	fp, r3
 800eaa6:	460f      	mov	r7, r1
 800eaa8:	4bcf      	ldr	r3, [pc, #828]	; (800ede8 <__kernel_rem_pio2+0x350>)
 800eaaa:	99a0      	ldr	r1, [sp, #640]	; 0x280
 800eaac:	f8dd c284 	ldr.w	ip, [sp, #644]	; 0x284
 800eab0:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800eab4:	9000      	str	r0, [sp, #0]
 800eab6:	f112 0f14 	cmn.w	r2, #20
 800eaba:	bfa8      	it	ge
 800eabc:	2318      	movge	r3, #24
 800eabe:	f10b 31ff 	add.w	r1, fp, #4294967295
 800eac2:	bfb8      	it	lt
 800eac4:	2300      	movlt	r3, #0
 800eac6:	f06f 0417 	mvn.w	r4, #23
 800eaca:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 800edd0 <__kernel_rem_pio2+0x338>
 800eace:	bfa4      	itt	ge
 800ead0:	f1a2 0a03 	subge.w	sl, r2, #3
 800ead4:	fb9a f3f3 	sdivge	r3, sl, r3
 800ead8:	fb03 4404 	mla	r4, r3, r4, r4
 800eadc:	1a5d      	subs	r5, r3, r1
 800eade:	4414      	add	r4, r2
 800eae0:	eb09 0601 	add.w	r6, r9, r1
 800eae4:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 800eae8:	eb0c 0e85 	add.w	lr, ip, r5, lsl #2
 800eaec:	2200      	movs	r2, #0
 800eaee:	42b2      	cmp	r2, r6
 800eaf0:	dd12      	ble.n	800eb18 <__kernel_rem_pio2+0x80>
 800eaf2:	aa18      	add	r2, sp, #96	; 0x60
 800eaf4:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 800eaf8:	460e      	mov	r6, r1
 800eafa:	f50d 78d0 	add.w	r8, sp, #416	; 0x1a0
 800eafe:	f1cb 0a01 	rsb	sl, fp, #1
 800eb02:	eb0a 0006 	add.w	r0, sl, r6
 800eb06:	4581      	cmp	r9, r0
 800eb08:	db25      	blt.n	800eb56 <__kernel_rem_pio2+0xbe>
 800eb0a:	ed9f 7bb1 	vldr	d7, [pc, #708]	; 800edd0 <__kernel_rem_pio2+0x338>
 800eb0e:	f8dd e000 	ldr.w	lr, [sp]
 800eb12:	4615      	mov	r5, r2
 800eb14:	2000      	movs	r0, #0
 800eb16:	e015      	b.n	800eb44 <__kernel_rem_pio2+0xac>
 800eb18:	42d5      	cmn	r5, r2
 800eb1a:	d409      	bmi.n	800eb30 <__kernel_rem_pio2+0x98>
 800eb1c:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 800eb20:	ee07 0a90 	vmov	s15, r0
 800eb24:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800eb28:	eca8 7b02 	vstmia	r8!, {d7}
 800eb2c:	3201      	adds	r2, #1
 800eb2e:	e7de      	b.n	800eaee <__kernel_rem_pio2+0x56>
 800eb30:	eeb0 7b46 	vmov.f64	d7, d6
 800eb34:	e7f8      	b.n	800eb28 <__kernel_rem_pio2+0x90>
 800eb36:	ecbe 5b02 	vldmia	lr!, {d5}
 800eb3a:	ed95 6b00 	vldr	d6, [r5]
 800eb3e:	3001      	adds	r0, #1
 800eb40:	eea5 7b06 	vfma.f64	d7, d5, d6
 800eb44:	4288      	cmp	r0, r1
 800eb46:	f1a5 0508 	sub.w	r5, r5, #8
 800eb4a:	ddf4      	ble.n	800eb36 <__kernel_rem_pio2+0x9e>
 800eb4c:	eca8 7b02 	vstmia	r8!, {d7}
 800eb50:	3208      	adds	r2, #8
 800eb52:	3601      	adds	r6, #1
 800eb54:	e7d5      	b.n	800eb02 <__kernel_rem_pio2+0x6a>
 800eb56:	aa04      	add	r2, sp, #16
 800eb58:	ed9f 9b9f 	vldr	d9, [pc, #636]	; 800edd8 <__kernel_rem_pio2+0x340>
 800eb5c:	ed9f aba0 	vldr	d10, [pc, #640]	; 800ede0 <__kernel_rem_pio2+0x348>
 800eb60:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 800eb64:	9201      	str	r2, [sp, #4]
 800eb66:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
 800eb6a:	464e      	mov	r6, r9
 800eb6c:	ab90      	add	r3, sp, #576	; 0x240
 800eb6e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800eb72:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 800eb76:	ab04      	add	r3, sp, #16
 800eb78:	4618      	mov	r0, r3
 800eb7a:	4632      	mov	r2, r6
 800eb7c:	2a00      	cmp	r2, #0
 800eb7e:	dc4e      	bgt.n	800ec1e <__kernel_rem_pio2+0x186>
 800eb80:	4620      	mov	r0, r4
 800eb82:	e9cd 1302 	strd	r1, r3, [sp, #8]
 800eb86:	f000 fb07 	bl	800f198 <scalbn>
 800eb8a:	eeb0 8b40 	vmov.f64	d8, d0
 800eb8e:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800eb92:	ee28 0b00 	vmul.f64	d0, d8, d0
 800eb96:	f000 fa8b 	bl	800f0b0 <floor>
 800eb9a:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800eb9e:	eea0 8b47 	vfms.f64	d8, d0, d7
 800eba2:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800eba6:	2c00      	cmp	r4, #0
 800eba8:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 800ebac:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 800ebb0:	ee38 8b40 	vsub.f64	d8, d8, d0
 800ebb4:	ee17 8a90 	vmov	r8, s15
 800ebb8:	dd46      	ble.n	800ec48 <__kernel_rem_pio2+0x1b0>
 800ebba:	1e70      	subs	r0, r6, #1
 800ebbc:	aa04      	add	r2, sp, #16
 800ebbe:	f1c4 0c18 	rsb	ip, r4, #24
 800ebc2:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 800ebc6:	fa45 f20c 	asr.w	r2, r5, ip
 800ebca:	4490      	add	r8, r2
 800ebcc:	fa02 f20c 	lsl.w	r2, r2, ip
 800ebd0:	1aad      	subs	r5, r5, r2
 800ebd2:	aa04      	add	r2, sp, #16
 800ebd4:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 800ebd8:	f1c4 0217 	rsb	r2, r4, #23
 800ebdc:	4115      	asrs	r5, r2
 800ebde:	2d00      	cmp	r5, #0
 800ebe0:	dd41      	ble.n	800ec66 <__kernel_rem_pio2+0x1ce>
 800ebe2:	f04f 0c00 	mov.w	ip, #0
 800ebe6:	f108 0801 	add.w	r8, r8, #1
 800ebea:	4660      	mov	r0, ip
 800ebec:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 800ebf0:	4566      	cmp	r6, ip
 800ebf2:	dc69      	bgt.n	800ecc8 <__kernel_rem_pio2+0x230>
 800ebf4:	2c00      	cmp	r4, #0
 800ebf6:	dd03      	ble.n	800ec00 <__kernel_rem_pio2+0x168>
 800ebf8:	2c01      	cmp	r4, #1
 800ebfa:	d076      	beq.n	800ecea <__kernel_rem_pio2+0x252>
 800ebfc:	2c02      	cmp	r4, #2
 800ebfe:	d07f      	beq.n	800ed00 <__kernel_rem_pio2+0x268>
 800ec00:	2d02      	cmp	r5, #2
 800ec02:	d130      	bne.n	800ec66 <__kernel_rem_pio2+0x1ce>
 800ec04:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800ec08:	ee30 8b48 	vsub.f64	d8, d0, d8
 800ec0c:	b358      	cbz	r0, 800ec66 <__kernel_rem_pio2+0x1ce>
 800ec0e:	4620      	mov	r0, r4
 800ec10:	9102      	str	r1, [sp, #8]
 800ec12:	f000 fac1 	bl	800f198 <scalbn>
 800ec16:	9902      	ldr	r1, [sp, #8]
 800ec18:	ee38 8b40 	vsub.f64	d8, d8, d0
 800ec1c:	e023      	b.n	800ec66 <__kernel_rem_pio2+0x1ce>
 800ec1e:	ee20 7b09 	vmul.f64	d7, d0, d9
 800ec22:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800ec26:	3a01      	subs	r2, #1
 800ec28:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800ec2c:	ad68      	add	r5, sp, #416	; 0x1a0
 800ec2e:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800ec32:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800ec36:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 800ec3a:	eca0 0a01 	vstmia	r0!, {s0}
 800ec3e:	ed95 0b00 	vldr	d0, [r5]
 800ec42:	ee37 0b00 	vadd.f64	d0, d7, d0
 800ec46:	e799      	b.n	800eb7c <__kernel_rem_pio2+0xe4>
 800ec48:	d105      	bne.n	800ec56 <__kernel_rem_pio2+0x1be>
 800ec4a:	1e72      	subs	r2, r6, #1
 800ec4c:	a804      	add	r0, sp, #16
 800ec4e:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 800ec52:	15ed      	asrs	r5, r5, #23
 800ec54:	e7c3      	b.n	800ebde <__kernel_rem_pio2+0x146>
 800ec56:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800ec5a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ec5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec62:	da2f      	bge.n	800ecc4 <__kernel_rem_pio2+0x22c>
 800ec64:	2500      	movs	r5, #0
 800ec66:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ec6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec6e:	f040 8087 	bne.w	800ed80 <__kernel_rem_pio2+0x2e8>
 800ec72:	1e73      	subs	r3, r6, #1
 800ec74:	4618      	mov	r0, r3
 800ec76:	f04f 0c00 	mov.w	ip, #0
 800ec7a:	4548      	cmp	r0, r9
 800ec7c:	da47      	bge.n	800ed0e <__kernel_rem_pio2+0x276>
 800ec7e:	f1bc 0f00 	cmp.w	ip, #0
 800ec82:	d070      	beq.n	800ed66 <__kernel_rem_pio2+0x2ce>
 800ec84:	aa04      	add	r2, sp, #16
 800ec86:	3c18      	subs	r4, #24
 800ec88:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ec8c:	2a00      	cmp	r2, #0
 800ec8e:	d075      	beq.n	800ed7c <__kernel_rem_pio2+0x2e4>
 800ec90:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800ec94:	4620      	mov	r0, r4
 800ec96:	9300      	str	r3, [sp, #0]
 800ec98:	f000 fa7e 	bl	800f198 <scalbn>
 800ec9c:	9b00      	ldr	r3, [sp, #0]
 800ec9e:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 800edd8 <__kernel_rem_pio2+0x340>
 800eca2:	461a      	mov	r2, r3
 800eca4:	2a00      	cmp	r2, #0
 800eca6:	f280 80ac 	bge.w	800ee02 <__kernel_rem_pio2+0x36a>
 800ecaa:	4619      	mov	r1, r3
 800ecac:	2000      	movs	r0, #0
 800ecae:	2900      	cmp	r1, #0
 800ecb0:	f2c0 80cd 	blt.w	800ee4e <__kernel_rem_pio2+0x3b6>
 800ecb4:	aa68      	add	r2, sp, #416	; 0x1a0
 800ecb6:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
 800ecba:	ed9f 7b45 	vldr	d7, [pc, #276]	; 800edd0 <__kernel_rem_pio2+0x338>
 800ecbe:	4e4b      	ldr	r6, [pc, #300]	; (800edec <__kernel_rem_pio2+0x354>)
 800ecc0:	2200      	movs	r2, #0
 800ecc2:	e0b8      	b.n	800ee36 <__kernel_rem_pio2+0x39e>
 800ecc4:	2502      	movs	r5, #2
 800ecc6:	e78c      	b.n	800ebe2 <__kernel_rem_pio2+0x14a>
 800ecc8:	681a      	ldr	r2, [r3, #0]
 800ecca:	b948      	cbnz	r0, 800ece0 <__kernel_rem_pio2+0x248>
 800eccc:	b11a      	cbz	r2, 800ecd6 <__kernel_rem_pio2+0x23e>
 800ecce:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 800ecd2:	601a      	str	r2, [r3, #0]
 800ecd4:	2201      	movs	r2, #1
 800ecd6:	f10c 0c01 	add.w	ip, ip, #1
 800ecda:	3304      	adds	r3, #4
 800ecdc:	4610      	mov	r0, r2
 800ecde:	e787      	b.n	800ebf0 <__kernel_rem_pio2+0x158>
 800ece0:	ebae 0202 	sub.w	r2, lr, r2
 800ece4:	601a      	str	r2, [r3, #0]
 800ece6:	4602      	mov	r2, r0
 800ece8:	e7f5      	b.n	800ecd6 <__kernel_rem_pio2+0x23e>
 800ecea:	1e72      	subs	r2, r6, #1
 800ecec:	ab04      	add	r3, sp, #16
 800ecee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ecf2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ecf6:	f10d 0c10 	add.w	ip, sp, #16
 800ecfa:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
 800ecfe:	e77f      	b.n	800ec00 <__kernel_rem_pio2+0x168>
 800ed00:	1e72      	subs	r2, r6, #1
 800ed02:	ab04      	add	r3, sp, #16
 800ed04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed08:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ed0c:	e7f3      	b.n	800ecf6 <__kernel_rem_pio2+0x25e>
 800ed0e:	aa04      	add	r2, sp, #16
 800ed10:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 800ed14:	3801      	subs	r0, #1
 800ed16:	ea4c 0c02 	orr.w	ip, ip, r2
 800ed1a:	e7ae      	b.n	800ec7a <__kernel_rem_pio2+0x1e2>
 800ed1c:	3001      	adds	r0, #1
 800ed1e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ed22:	2a00      	cmp	r2, #0
 800ed24:	d0fa      	beq.n	800ed1c <__kernel_rem_pio2+0x284>
 800ed26:	eb06 020b 	add.w	r2, r6, fp
 800ed2a:	ad18      	add	r5, sp, #96	; 0x60
 800ed2c:	1c73      	adds	r3, r6, #1
 800ed2e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800ed32:	4406      	add	r6, r0
 800ed34:	429e      	cmp	r6, r3
 800ed36:	f6ff af19 	blt.w	800eb6c <__kernel_rem_pio2+0xd4>
 800ed3a:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 800ed3e:	9d00      	ldr	r5, [sp, #0]
 800ed40:	ee07 0a90 	vmov	s15, r0
 800ed44:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ed48:	2000      	movs	r0, #0
 800ed4a:	eca2 7b02 	vstmia	r2!, {d7}
 800ed4e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800edd0 <__kernel_rem_pio2+0x338>
 800ed52:	4694      	mov	ip, r2
 800ed54:	4288      	cmp	r0, r1
 800ed56:	dd09      	ble.n	800ed6c <__kernel_rem_pio2+0x2d4>
 800ed58:	a868      	add	r0, sp, #416	; 0x1a0
 800ed5a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 800ed5e:	ed80 7b00 	vstr	d7, [r0]
 800ed62:	3301      	adds	r3, #1
 800ed64:	e7e6      	b.n	800ed34 <__kernel_rem_pio2+0x29c>
 800ed66:	9b01      	ldr	r3, [sp, #4]
 800ed68:	2001      	movs	r0, #1
 800ed6a:	e7d8      	b.n	800ed1e <__kernel_rem_pio2+0x286>
 800ed6c:	ecb5 5b02 	vldmia	r5!, {d5}
 800ed70:	ed3c 6b02 	vldmdb	ip!, {d6}
 800ed74:	3001      	adds	r0, #1
 800ed76:	eea5 7b06 	vfma.f64	d7, d5, d6
 800ed7a:	e7eb      	b.n	800ed54 <__kernel_rem_pio2+0x2bc>
 800ed7c:	3b01      	subs	r3, #1
 800ed7e:	e781      	b.n	800ec84 <__kernel_rem_pio2+0x1ec>
 800ed80:	4260      	negs	r0, r4
 800ed82:	eeb0 0b48 	vmov.f64	d0, d8
 800ed86:	f000 fa07 	bl	800f198 <scalbn>
 800ed8a:	ed9f 6b15 	vldr	d6, [pc, #84]	; 800ede0 <__kernel_rem_pio2+0x348>
 800ed8e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800ed92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed96:	db2b      	blt.n	800edf0 <__kernel_rem_pio2+0x358>
 800ed98:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 800edd8 <__kernel_rem_pio2+0x340>
 800ed9c:	ee20 7b07 	vmul.f64	d7, d0, d7
 800eda0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800eda4:	aa04      	add	r2, sp, #16
 800eda6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800edaa:	eea5 0b46 	vfms.f64	d0, d5, d6
 800edae:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800edb2:	a904      	add	r1, sp, #16
 800edb4:	ee10 3a10 	vmov	r3, s0
 800edb8:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800edbc:	ee17 2a10 	vmov	r2, s14
 800edc0:	1c73      	adds	r3, r6, #1
 800edc2:	3418      	adds	r4, #24
 800edc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800edc8:	e762      	b.n	800ec90 <__kernel_rem_pio2+0x1f8>
 800edca:	bf00      	nop
 800edcc:	f3af 8000 	nop.w
	...
 800eddc:	3e700000 	.word	0x3e700000
 800ede0:	00000000 	.word	0x00000000
 800ede4:	41700000 	.word	0x41700000
 800ede8:	0802aea8 	.word	0x0802aea8
 800edec:	0802ae68 	.word	0x0802ae68
 800edf0:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800edf4:	aa04      	add	r2, sp, #16
 800edf6:	ee10 3a10 	vmov	r3, s0
 800edfa:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800edfe:	4633      	mov	r3, r6
 800ee00:	e746      	b.n	800ec90 <__kernel_rem_pio2+0x1f8>
 800ee02:	a804      	add	r0, sp, #16
 800ee04:	a968      	add	r1, sp, #416	; 0x1a0
 800ee06:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800ee0a:	9000      	str	r0, [sp, #0]
 800ee0c:	ee07 0a90 	vmov	s15, r0
 800ee10:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800ee14:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ee18:	3a01      	subs	r2, #1
 800ee1a:	ee27 7b00 	vmul.f64	d7, d7, d0
 800ee1e:	ee20 0b06 	vmul.f64	d0, d0, d6
 800ee22:	ed81 7b00 	vstr	d7, [r1]
 800ee26:	e73d      	b.n	800eca4 <__kernel_rem_pio2+0x20c>
 800ee28:	ecb6 5b02 	vldmia	r6!, {d5}
 800ee2c:	ecb4 6b02 	vldmia	r4!, {d6}
 800ee30:	3201      	adds	r2, #1
 800ee32:	eea5 7b06 	vfma.f64	d7, d5, d6
 800ee36:	454a      	cmp	r2, r9
 800ee38:	dc01      	bgt.n	800ee3e <__kernel_rem_pio2+0x3a6>
 800ee3a:	4290      	cmp	r0, r2
 800ee3c:	daf4      	bge.n	800ee28 <__kernel_rem_pio2+0x390>
 800ee3e:	aa40      	add	r2, sp, #256	; 0x100
 800ee40:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800ee44:	ed82 7b00 	vstr	d7, [r2]
 800ee48:	3901      	subs	r1, #1
 800ee4a:	3001      	adds	r0, #1
 800ee4c:	e72f      	b.n	800ecae <__kernel_rem_pio2+0x216>
 800ee4e:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 800ee50:	2a02      	cmp	r2, #2
 800ee52:	dc0a      	bgt.n	800ee6a <__kernel_rem_pio2+0x3d2>
 800ee54:	2a00      	cmp	r2, #0
 800ee56:	dc5a      	bgt.n	800ef0e <__kernel_rem_pio2+0x476>
 800ee58:	d039      	beq.n	800eece <__kernel_rem_pio2+0x436>
 800ee5a:	f008 0007 	and.w	r0, r8, #7
 800ee5e:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 800ee62:	ecbd 8b06 	vpop	{d8-d10}
 800ee66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee6a:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 800ee6c:	2a03      	cmp	r2, #3
 800ee6e:	d1f4      	bne.n	800ee5a <__kernel_rem_pio2+0x3c2>
 800ee70:	aa40      	add	r2, sp, #256	; 0x100
 800ee72:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800ee76:	4611      	mov	r1, r2
 800ee78:	4618      	mov	r0, r3
 800ee7a:	2800      	cmp	r0, #0
 800ee7c:	f1a1 0108 	sub.w	r1, r1, #8
 800ee80:	dc52      	bgt.n	800ef28 <__kernel_rem_pio2+0x490>
 800ee82:	4619      	mov	r1, r3
 800ee84:	2901      	cmp	r1, #1
 800ee86:	f1a2 0208 	sub.w	r2, r2, #8
 800ee8a:	dc5d      	bgt.n	800ef48 <__kernel_rem_pio2+0x4b0>
 800ee8c:	ed9f 7b40 	vldr	d7, [pc, #256]	; 800ef90 <__kernel_rem_pio2+0x4f8>
 800ee90:	2b01      	cmp	r3, #1
 800ee92:	dc69      	bgt.n	800ef68 <__kernel_rem_pio2+0x4d0>
 800ee94:	ed9d 5b40 	vldr	d5, [sp, #256]	; 0x100
 800ee98:	ed9d 6b42 	vldr	d6, [sp, #264]	; 0x108
 800ee9c:	2d00      	cmp	r5, #0
 800ee9e:	d16c      	bne.n	800ef7a <__kernel_rem_pio2+0x4e2>
 800eea0:	ed87 5b00 	vstr	d5, [r7]
 800eea4:	ed87 6b02 	vstr	d6, [r7, #8]
 800eea8:	ed87 7b04 	vstr	d7, [r7, #16]
 800eeac:	e7d5      	b.n	800ee5a <__kernel_rem_pio2+0x3c2>
 800eeae:	aa40      	add	r2, sp, #256	; 0x100
 800eeb0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800eeb4:	ed92 6b00 	vldr	d6, [r2]
 800eeb8:	3b01      	subs	r3, #1
 800eeba:	ee37 7b06 	vadd.f64	d7, d7, d6
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	daf5      	bge.n	800eeae <__kernel_rem_pio2+0x416>
 800eec2:	b10d      	cbz	r5, 800eec8 <__kernel_rem_pio2+0x430>
 800eec4:	eeb1 7b47 	vneg.f64	d7, d7
 800eec8:	ed87 7b00 	vstr	d7, [r7]
 800eecc:	e7c5      	b.n	800ee5a <__kernel_rem_pio2+0x3c2>
 800eece:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800ef90 <__kernel_rem_pio2+0x4f8>
 800eed2:	e7f4      	b.n	800eebe <__kernel_rem_pio2+0x426>
 800eed4:	a940      	add	r1, sp, #256	; 0x100
 800eed6:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800eeda:	ed91 7b00 	vldr	d7, [r1]
 800eede:	3a01      	subs	r2, #1
 800eee0:	ee36 6b07 	vadd.f64	d6, d6, d7
 800eee4:	2a00      	cmp	r2, #0
 800eee6:	daf5      	bge.n	800eed4 <__kernel_rem_pio2+0x43c>
 800eee8:	b1ad      	cbz	r5, 800ef16 <__kernel_rem_pio2+0x47e>
 800eeea:	eeb1 7b46 	vneg.f64	d7, d6
 800eeee:	ed87 7b00 	vstr	d7, [r7]
 800eef2:	ed9d 7b40 	vldr	d7, [sp, #256]	; 0x100
 800eef6:	a942      	add	r1, sp, #264	; 0x108
 800eef8:	2201      	movs	r2, #1
 800eefa:	ee37 7b46 	vsub.f64	d7, d7, d6
 800eefe:	4293      	cmp	r3, r2
 800ef00:	da0c      	bge.n	800ef1c <__kernel_rem_pio2+0x484>
 800ef02:	b10d      	cbz	r5, 800ef08 <__kernel_rem_pio2+0x470>
 800ef04:	eeb1 7b47 	vneg.f64	d7, d7
 800ef08:	ed87 7b02 	vstr	d7, [r7, #8]
 800ef0c:	e7a5      	b.n	800ee5a <__kernel_rem_pio2+0x3c2>
 800ef0e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800ef90 <__kernel_rem_pio2+0x4f8>
 800ef12:	461a      	mov	r2, r3
 800ef14:	e7e6      	b.n	800eee4 <__kernel_rem_pio2+0x44c>
 800ef16:	eeb0 7b46 	vmov.f64	d7, d6
 800ef1a:	e7e8      	b.n	800eeee <__kernel_rem_pio2+0x456>
 800ef1c:	ecb1 6b02 	vldmia	r1!, {d6}
 800ef20:	3201      	adds	r2, #1
 800ef22:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ef26:	e7ea      	b.n	800eefe <__kernel_rem_pio2+0x466>
 800ef28:	ed91 7b00 	vldr	d7, [r1]
 800ef2c:	ed91 5b02 	vldr	d5, [r1, #8]
 800ef30:	3801      	subs	r0, #1
 800ef32:	ee37 6b05 	vadd.f64	d6, d7, d5
 800ef36:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ef3a:	ed81 6b00 	vstr	d6, [r1]
 800ef3e:	ee37 7b05 	vadd.f64	d7, d7, d5
 800ef42:	ed81 7b02 	vstr	d7, [r1, #8]
 800ef46:	e798      	b.n	800ee7a <__kernel_rem_pio2+0x3e2>
 800ef48:	ed92 7b00 	vldr	d7, [r2]
 800ef4c:	ed92 5b02 	vldr	d5, [r2, #8]
 800ef50:	3901      	subs	r1, #1
 800ef52:	ee37 6b05 	vadd.f64	d6, d7, d5
 800ef56:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ef5a:	ed82 6b00 	vstr	d6, [r2]
 800ef5e:	ee37 7b05 	vadd.f64	d7, d7, d5
 800ef62:	ed82 7b02 	vstr	d7, [r2, #8]
 800ef66:	e78d      	b.n	800ee84 <__kernel_rem_pio2+0x3ec>
 800ef68:	aa40      	add	r2, sp, #256	; 0x100
 800ef6a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800ef6e:	ed92 6b00 	vldr	d6, [r2]
 800ef72:	3b01      	subs	r3, #1
 800ef74:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ef78:	e78a      	b.n	800ee90 <__kernel_rem_pio2+0x3f8>
 800ef7a:	eeb1 5b45 	vneg.f64	d5, d5
 800ef7e:	eeb1 6b46 	vneg.f64	d6, d6
 800ef82:	ed87 5b00 	vstr	d5, [r7]
 800ef86:	eeb1 7b47 	vneg.f64	d7, d7
 800ef8a:	ed87 6b02 	vstr	d6, [r7, #8]
 800ef8e:	e78b      	b.n	800eea8 <__kernel_rem_pio2+0x410>
	...

0800ef98 <__kernel_sin>:
 800ef98:	ee10 3a90 	vmov	r3, s1
 800ef9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800efa0:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800efa4:	da04      	bge.n	800efb0 <__kernel_sin+0x18>
 800efa6:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800efaa:	ee17 3a90 	vmov	r3, s15
 800efae:	b35b      	cbz	r3, 800f008 <__kernel_sin+0x70>
 800efb0:	ee20 6b00 	vmul.f64	d6, d0, d0
 800efb4:	ee20 5b06 	vmul.f64	d5, d0, d6
 800efb8:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800f010 <__kernel_sin+0x78>
 800efbc:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800f018 <__kernel_sin+0x80>
 800efc0:	eea6 4b07 	vfma.f64	d4, d6, d7
 800efc4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800f020 <__kernel_sin+0x88>
 800efc8:	eea4 7b06 	vfma.f64	d7, d4, d6
 800efcc:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800f028 <__kernel_sin+0x90>
 800efd0:	eea7 4b06 	vfma.f64	d4, d7, d6
 800efd4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800f030 <__kernel_sin+0x98>
 800efd8:	eea4 7b06 	vfma.f64	d7, d4, d6
 800efdc:	b930      	cbnz	r0, 800efec <__kernel_sin+0x54>
 800efde:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800f038 <__kernel_sin+0xa0>
 800efe2:	eea6 4b07 	vfma.f64	d4, d6, d7
 800efe6:	eea4 0b05 	vfma.f64	d0, d4, d5
 800efea:	4770      	bx	lr
 800efec:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800eff0:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800eff4:	eea1 7b04 	vfma.f64	d7, d1, d4
 800eff8:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800effc:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800f040 <__kernel_sin+0xa8>
 800f000:	eea5 1b07 	vfma.f64	d1, d5, d7
 800f004:	ee30 0b41 	vsub.f64	d0, d0, d1
 800f008:	4770      	bx	lr
 800f00a:	bf00      	nop
 800f00c:	f3af 8000 	nop.w
 800f010:	5acfd57c 	.word	0x5acfd57c
 800f014:	3de5d93a 	.word	0x3de5d93a
 800f018:	8a2b9ceb 	.word	0x8a2b9ceb
 800f01c:	be5ae5e6 	.word	0xbe5ae5e6
 800f020:	57b1fe7d 	.word	0x57b1fe7d
 800f024:	3ec71de3 	.word	0x3ec71de3
 800f028:	19c161d5 	.word	0x19c161d5
 800f02c:	bf2a01a0 	.word	0xbf2a01a0
 800f030:	1110f8a6 	.word	0x1110f8a6
 800f034:	3f811111 	.word	0x3f811111
 800f038:	55555549 	.word	0x55555549
 800f03c:	bfc55555 	.word	0xbfc55555
 800f040:	55555549 	.word	0x55555549
 800f044:	3fc55555 	.word	0x3fc55555

0800f048 <with_errnof>:
 800f048:	b513      	push	{r0, r1, r4, lr}
 800f04a:	4604      	mov	r4, r0
 800f04c:	ed8d 0a01 	vstr	s0, [sp, #4]
 800f050:	f000 f944 	bl	800f2dc <__errno>
 800f054:	ed9d 0a01 	vldr	s0, [sp, #4]
 800f058:	6004      	str	r4, [r0, #0]
 800f05a:	b002      	add	sp, #8
 800f05c:	bd10      	pop	{r4, pc}
	...

0800f060 <__math_divzerof>:
 800f060:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800f064:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800f068:	2800      	cmp	r0, #0
 800f06a:	fe40 7a27 	vseleq.f32	s15, s0, s15
 800f06e:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800f07c <__math_divzerof+0x1c>
 800f072:	2022      	movs	r0, #34	; 0x22
 800f074:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800f078:	f7ff bfe6 	b.w	800f048 <with_errnof>
 800f07c:	00000000 	.word	0x00000000

0800f080 <__math_invalidf>:
 800f080:	eef0 7a40 	vmov.f32	s15, s0
 800f084:	ee30 7a40 	vsub.f32	s14, s0, s0
 800f088:	eef4 7a67 	vcmp.f32	s15, s15
 800f08c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f090:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800f094:	d602      	bvs.n	800f09c <__math_invalidf+0x1c>
 800f096:	2021      	movs	r0, #33	; 0x21
 800f098:	f7ff bfd6 	b.w	800f048 <with_errnof>
 800f09c:	4770      	bx	lr

0800f09e <fabs>:
 800f09e:	ec51 0b10 	vmov	r0, r1, d0
 800f0a2:	ee10 2a10 	vmov	r2, s0
 800f0a6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f0aa:	ec43 2b10 	vmov	d0, r2, r3
 800f0ae:	4770      	bx	lr

0800f0b0 <floor>:
 800f0b0:	ee10 1a90 	vmov	r1, s1
 800f0b4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f0b8:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800f0bc:	2b13      	cmp	r3, #19
 800f0be:	b530      	push	{r4, r5, lr}
 800f0c0:	ee10 0a10 	vmov	r0, s0
 800f0c4:	ee10 5a10 	vmov	r5, s0
 800f0c8:	dc31      	bgt.n	800f12e <floor+0x7e>
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	da15      	bge.n	800f0fa <floor+0x4a>
 800f0ce:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800f188 <floor+0xd8>
 800f0d2:	ee30 0b07 	vadd.f64	d0, d0, d7
 800f0d6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f0da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0de:	dd07      	ble.n	800f0f0 <floor+0x40>
 800f0e0:	2900      	cmp	r1, #0
 800f0e2:	da4e      	bge.n	800f182 <floor+0xd2>
 800f0e4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f0e8:	4318      	orrs	r0, r3
 800f0ea:	d001      	beq.n	800f0f0 <floor+0x40>
 800f0ec:	4928      	ldr	r1, [pc, #160]	; (800f190 <floor+0xe0>)
 800f0ee:	2000      	movs	r0, #0
 800f0f0:	460b      	mov	r3, r1
 800f0f2:	4602      	mov	r2, r0
 800f0f4:	ec43 2b10 	vmov	d0, r2, r3
 800f0f8:	e020      	b.n	800f13c <floor+0x8c>
 800f0fa:	4a26      	ldr	r2, [pc, #152]	; (800f194 <floor+0xe4>)
 800f0fc:	411a      	asrs	r2, r3
 800f0fe:	ea01 0402 	and.w	r4, r1, r2
 800f102:	4304      	orrs	r4, r0
 800f104:	d01a      	beq.n	800f13c <floor+0x8c>
 800f106:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800f188 <floor+0xd8>
 800f10a:	ee30 0b07 	vadd.f64	d0, d0, d7
 800f10e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f116:	ddeb      	ble.n	800f0f0 <floor+0x40>
 800f118:	2900      	cmp	r1, #0
 800f11a:	bfbe      	ittt	lt
 800f11c:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800f120:	fa40 f303 	asrlt.w	r3, r0, r3
 800f124:	18c9      	addlt	r1, r1, r3
 800f126:	ea21 0102 	bic.w	r1, r1, r2
 800f12a:	2000      	movs	r0, #0
 800f12c:	e7e0      	b.n	800f0f0 <floor+0x40>
 800f12e:	2b33      	cmp	r3, #51	; 0x33
 800f130:	dd05      	ble.n	800f13e <floor+0x8e>
 800f132:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f136:	d101      	bne.n	800f13c <floor+0x8c>
 800f138:	ee30 0b00 	vadd.f64	d0, d0, d0
 800f13c:	bd30      	pop	{r4, r5, pc}
 800f13e:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800f142:	f04f 32ff 	mov.w	r2, #4294967295
 800f146:	40e2      	lsrs	r2, r4
 800f148:	4202      	tst	r2, r0
 800f14a:	d0f7      	beq.n	800f13c <floor+0x8c>
 800f14c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800f188 <floor+0xd8>
 800f150:	ee30 0b07 	vadd.f64	d0, d0, d7
 800f154:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f15c:	ddc8      	ble.n	800f0f0 <floor+0x40>
 800f15e:	2900      	cmp	r1, #0
 800f160:	da02      	bge.n	800f168 <floor+0xb8>
 800f162:	2b14      	cmp	r3, #20
 800f164:	d103      	bne.n	800f16e <floor+0xbe>
 800f166:	3101      	adds	r1, #1
 800f168:	ea20 0002 	bic.w	r0, r0, r2
 800f16c:	e7c0      	b.n	800f0f0 <floor+0x40>
 800f16e:	2401      	movs	r4, #1
 800f170:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800f174:	fa04 f303 	lsl.w	r3, r4, r3
 800f178:	4418      	add	r0, r3
 800f17a:	42a8      	cmp	r0, r5
 800f17c:	bf38      	it	cc
 800f17e:	1909      	addcc	r1, r1, r4
 800f180:	e7f2      	b.n	800f168 <floor+0xb8>
 800f182:	2000      	movs	r0, #0
 800f184:	4601      	mov	r1, r0
 800f186:	e7b3      	b.n	800f0f0 <floor+0x40>
 800f188:	8800759c 	.word	0x8800759c
 800f18c:	7e37e43c 	.word	0x7e37e43c
 800f190:	bff00000 	.word	0xbff00000
 800f194:	000fffff 	.word	0x000fffff

0800f198 <scalbn>:
 800f198:	b082      	sub	sp, #8
 800f19a:	ed8d 0b00 	vstr	d0, [sp]
 800f19e:	9b01      	ldr	r3, [sp, #4]
 800f1a0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800f1a4:	b9a2      	cbnz	r2, 800f1d0 <scalbn+0x38>
 800f1a6:	9a00      	ldr	r2, [sp, #0]
 800f1a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f1ac:	4313      	orrs	r3, r2
 800f1ae:	d03a      	beq.n	800f226 <scalbn+0x8e>
 800f1b0:	ed9f 7b35 	vldr	d7, [pc, #212]	; 800f288 <scalbn+0xf0>
 800f1b4:	4b40      	ldr	r3, [pc, #256]	; (800f2b8 <scalbn+0x120>)
 800f1b6:	ee20 7b07 	vmul.f64	d7, d0, d7
 800f1ba:	4298      	cmp	r0, r3
 800f1bc:	ed8d 7b00 	vstr	d7, [sp]
 800f1c0:	da11      	bge.n	800f1e6 <scalbn+0x4e>
 800f1c2:	ed9f 7b33 	vldr	d7, [pc, #204]	; 800f290 <scalbn+0xf8>
 800f1c6:	ed9d 6b00 	vldr	d6, [sp]
 800f1ca:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f1ce:	e007      	b.n	800f1e0 <scalbn+0x48>
 800f1d0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800f1d4:	428a      	cmp	r2, r1
 800f1d6:	d10a      	bne.n	800f1ee <scalbn+0x56>
 800f1d8:	ed9d 7b00 	vldr	d7, [sp]
 800f1dc:	ee37 7b07 	vadd.f64	d7, d7, d7
 800f1e0:	ed8d 7b00 	vstr	d7, [sp]
 800f1e4:	e01f      	b.n	800f226 <scalbn+0x8e>
 800f1e6:	9b01      	ldr	r3, [sp, #4]
 800f1e8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800f1ec:	3a36      	subs	r2, #54	; 0x36
 800f1ee:	4402      	add	r2, r0
 800f1f0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f1f4:	428a      	cmp	r2, r1
 800f1f6:	dd0a      	ble.n	800f20e <scalbn+0x76>
 800f1f8:	ed9f 7b27 	vldr	d7, [pc, #156]	; 800f298 <scalbn+0x100>
 800f1fc:	ed9f 5b28 	vldr	d5, [pc, #160]	; 800f2a0 <scalbn+0x108>
 800f200:	eeb0 6b47 	vmov.f64	d6, d7
 800f204:	9b01      	ldr	r3, [sp, #4]
 800f206:	2b00      	cmp	r3, #0
 800f208:	fe27 7b05 	vselge.f64	d7, d7, d5
 800f20c:	e7dd      	b.n	800f1ca <scalbn+0x32>
 800f20e:	2a00      	cmp	r2, #0
 800f210:	dd0d      	ble.n	800f22e <scalbn+0x96>
 800f212:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f216:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f21a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f21e:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f222:	e9cd 0100 	strd	r0, r1, [sp]
 800f226:	ed9d 0b00 	vldr	d0, [sp]
 800f22a:	b002      	add	sp, #8
 800f22c:	4770      	bx	lr
 800f22e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f232:	da18      	bge.n	800f266 <scalbn+0xce>
 800f234:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f238:	4298      	cmp	r0, r3
 800f23a:	9b01      	ldr	r3, [sp, #4]
 800f23c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f240:	dd09      	ble.n	800f256 <scalbn+0xbe>
 800f242:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800f298 <scalbn+0x100>
 800f246:	ed9f 5b16 	vldr	d5, [pc, #88]	; 800f2a0 <scalbn+0x108>
 800f24a:	eeb0 6b47 	vmov.f64	d6, d7
 800f24e:	2b00      	cmp	r3, #0
 800f250:	fe07 7b05 	vseleq.f64	d7, d7, d5
 800f254:	e7b9      	b.n	800f1ca <scalbn+0x32>
 800f256:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800f290 <scalbn+0xf8>
 800f25a:	ed9f 5b13 	vldr	d5, [pc, #76]	; 800f2a8 <scalbn+0x110>
 800f25e:	eeb0 6b47 	vmov.f64	d6, d7
 800f262:	2b00      	cmp	r3, #0
 800f264:	e7f4      	b.n	800f250 <scalbn+0xb8>
 800f266:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f26a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f26e:	3236      	adds	r2, #54	; 0x36
 800f270:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f274:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f278:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 800f2b0 <scalbn+0x118>
 800f27c:	ec41 0b17 	vmov	d7, r0, r1
 800f280:	e7a3      	b.n	800f1ca <scalbn+0x32>
 800f282:	bf00      	nop
 800f284:	f3af 8000 	nop.w
 800f288:	00000000 	.word	0x00000000
 800f28c:	43500000 	.word	0x43500000
 800f290:	c2f8f359 	.word	0xc2f8f359
 800f294:	01a56e1f 	.word	0x01a56e1f
 800f298:	8800759c 	.word	0x8800759c
 800f29c:	7e37e43c 	.word	0x7e37e43c
 800f2a0:	8800759c 	.word	0x8800759c
 800f2a4:	fe37e43c 	.word	0xfe37e43c
 800f2a8:	c2f8f359 	.word	0xc2f8f359
 800f2ac:	81a56e1f 	.word	0x81a56e1f
 800f2b0:	00000000 	.word	0x00000000
 800f2b4:	3c900000 	.word	0x3c900000
 800f2b8:	ffff3cb0 	.word	0xffff3cb0

0800f2bc <abort>:
 800f2bc:	b508      	push	{r3, lr}
 800f2be:	2006      	movs	r0, #6
 800f2c0:	f000 f968 	bl	800f594 <raise>
 800f2c4:	2001      	movs	r0, #1
 800f2c6:	f7f4 fd99 	bl	8003dfc <_exit>
	...

0800f2cc <calloc>:
 800f2cc:	4b02      	ldr	r3, [pc, #8]	; (800f2d8 <calloc+0xc>)
 800f2ce:	460a      	mov	r2, r1
 800f2d0:	4601      	mov	r1, r0
 800f2d2:	6818      	ldr	r0, [r3, #0]
 800f2d4:	f000 b86c 	b.w	800f3b0 <_calloc_r>
 800f2d8:	2000001c 	.word	0x2000001c

0800f2dc <__errno>:
 800f2dc:	4b01      	ldr	r3, [pc, #4]	; (800f2e4 <__errno+0x8>)
 800f2de:	6818      	ldr	r0, [r3, #0]
 800f2e0:	4770      	bx	lr
 800f2e2:	bf00      	nop
 800f2e4:	2000001c 	.word	0x2000001c

0800f2e8 <__libc_init_array>:
 800f2e8:	b570      	push	{r4, r5, r6, lr}
 800f2ea:	4d0d      	ldr	r5, [pc, #52]	; (800f320 <__libc_init_array+0x38>)
 800f2ec:	4c0d      	ldr	r4, [pc, #52]	; (800f324 <__libc_init_array+0x3c>)
 800f2ee:	1b64      	subs	r4, r4, r5
 800f2f0:	10a4      	asrs	r4, r4, #2
 800f2f2:	2600      	movs	r6, #0
 800f2f4:	42a6      	cmp	r6, r4
 800f2f6:	d109      	bne.n	800f30c <__libc_init_array+0x24>
 800f2f8:	4d0b      	ldr	r5, [pc, #44]	; (800f328 <__libc_init_array+0x40>)
 800f2fa:	4c0c      	ldr	r4, [pc, #48]	; (800f32c <__libc_init_array+0x44>)
 800f2fc:	f000 fcba 	bl	800fc74 <_init>
 800f300:	1b64      	subs	r4, r4, r5
 800f302:	10a4      	asrs	r4, r4, #2
 800f304:	2600      	movs	r6, #0
 800f306:	42a6      	cmp	r6, r4
 800f308:	d105      	bne.n	800f316 <__libc_init_array+0x2e>
 800f30a:	bd70      	pop	{r4, r5, r6, pc}
 800f30c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f310:	4798      	blx	r3
 800f312:	3601      	adds	r6, #1
 800f314:	e7ee      	b.n	800f2f4 <__libc_init_array+0xc>
 800f316:	f855 3b04 	ldr.w	r3, [r5], #4
 800f31a:	4798      	blx	r3
 800f31c:	3601      	adds	r6, #1
 800f31e:	e7f2      	b.n	800f306 <__libc_init_array+0x1e>
 800f320:	0802aef4 	.word	0x0802aef4
 800f324:	0802aef4 	.word	0x0802aef4
 800f328:	0802aef4 	.word	0x0802aef4
 800f32c:	0802aef8 	.word	0x0802aef8

0800f330 <malloc>:
 800f330:	4b02      	ldr	r3, [pc, #8]	; (800f33c <malloc+0xc>)
 800f332:	4601      	mov	r1, r0
 800f334:	6818      	ldr	r0, [r3, #0]
 800f336:	f000 b89b 	b.w	800f470 <_malloc_r>
 800f33a:	bf00      	nop
 800f33c:	2000001c 	.word	0x2000001c

0800f340 <free>:
 800f340:	4b02      	ldr	r3, [pc, #8]	; (800f34c <free+0xc>)
 800f342:	4601      	mov	r1, r0
 800f344:	6818      	ldr	r0, [r3, #0]
 800f346:	f000 b843 	b.w	800f3d0 <_free_r>
 800f34a:	bf00      	nop
 800f34c:	2000001c 	.word	0x2000001c

0800f350 <memcpy>:
 800f350:	440a      	add	r2, r1
 800f352:	4291      	cmp	r1, r2
 800f354:	f100 33ff 	add.w	r3, r0, #4294967295
 800f358:	d100      	bne.n	800f35c <memcpy+0xc>
 800f35a:	4770      	bx	lr
 800f35c:	b510      	push	{r4, lr}
 800f35e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f362:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f366:	4291      	cmp	r1, r2
 800f368:	d1f9      	bne.n	800f35e <memcpy+0xe>
 800f36a:	bd10      	pop	{r4, pc}

0800f36c <memmove>:
 800f36c:	4288      	cmp	r0, r1
 800f36e:	b510      	push	{r4, lr}
 800f370:	eb01 0402 	add.w	r4, r1, r2
 800f374:	d902      	bls.n	800f37c <memmove+0x10>
 800f376:	4284      	cmp	r4, r0
 800f378:	4623      	mov	r3, r4
 800f37a:	d807      	bhi.n	800f38c <memmove+0x20>
 800f37c:	1e43      	subs	r3, r0, #1
 800f37e:	42a1      	cmp	r1, r4
 800f380:	d008      	beq.n	800f394 <memmove+0x28>
 800f382:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f386:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f38a:	e7f8      	b.n	800f37e <memmove+0x12>
 800f38c:	4402      	add	r2, r0
 800f38e:	4601      	mov	r1, r0
 800f390:	428a      	cmp	r2, r1
 800f392:	d100      	bne.n	800f396 <memmove+0x2a>
 800f394:	bd10      	pop	{r4, pc}
 800f396:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f39a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f39e:	e7f7      	b.n	800f390 <memmove+0x24>

0800f3a0 <memset>:
 800f3a0:	4402      	add	r2, r0
 800f3a2:	4603      	mov	r3, r0
 800f3a4:	4293      	cmp	r3, r2
 800f3a6:	d100      	bne.n	800f3aa <memset+0xa>
 800f3a8:	4770      	bx	lr
 800f3aa:	f803 1b01 	strb.w	r1, [r3], #1
 800f3ae:	e7f9      	b.n	800f3a4 <memset+0x4>

0800f3b0 <_calloc_r>:
 800f3b0:	b513      	push	{r0, r1, r4, lr}
 800f3b2:	434a      	muls	r2, r1
 800f3b4:	4611      	mov	r1, r2
 800f3b6:	9201      	str	r2, [sp, #4]
 800f3b8:	f000 f85a 	bl	800f470 <_malloc_r>
 800f3bc:	4604      	mov	r4, r0
 800f3be:	b118      	cbz	r0, 800f3c8 <_calloc_r+0x18>
 800f3c0:	9a01      	ldr	r2, [sp, #4]
 800f3c2:	2100      	movs	r1, #0
 800f3c4:	f7ff ffec 	bl	800f3a0 <memset>
 800f3c8:	4620      	mov	r0, r4
 800f3ca:	b002      	add	sp, #8
 800f3cc:	bd10      	pop	{r4, pc}
	...

0800f3d0 <_free_r>:
 800f3d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f3d2:	2900      	cmp	r1, #0
 800f3d4:	d048      	beq.n	800f468 <_free_r+0x98>
 800f3d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f3da:	9001      	str	r0, [sp, #4]
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	f1a1 0404 	sub.w	r4, r1, #4
 800f3e2:	bfb8      	it	lt
 800f3e4:	18e4      	addlt	r4, r4, r3
 800f3e6:	f000 f919 	bl	800f61c <__malloc_lock>
 800f3ea:	4a20      	ldr	r2, [pc, #128]	; (800f46c <_free_r+0x9c>)
 800f3ec:	9801      	ldr	r0, [sp, #4]
 800f3ee:	6813      	ldr	r3, [r2, #0]
 800f3f0:	4615      	mov	r5, r2
 800f3f2:	b933      	cbnz	r3, 800f402 <_free_r+0x32>
 800f3f4:	6063      	str	r3, [r4, #4]
 800f3f6:	6014      	str	r4, [r2, #0]
 800f3f8:	b003      	add	sp, #12
 800f3fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f3fe:	f000 b913 	b.w	800f628 <__malloc_unlock>
 800f402:	42a3      	cmp	r3, r4
 800f404:	d90b      	bls.n	800f41e <_free_r+0x4e>
 800f406:	6821      	ldr	r1, [r4, #0]
 800f408:	1862      	adds	r2, r4, r1
 800f40a:	4293      	cmp	r3, r2
 800f40c:	bf04      	itt	eq
 800f40e:	681a      	ldreq	r2, [r3, #0]
 800f410:	685b      	ldreq	r3, [r3, #4]
 800f412:	6063      	str	r3, [r4, #4]
 800f414:	bf04      	itt	eq
 800f416:	1852      	addeq	r2, r2, r1
 800f418:	6022      	streq	r2, [r4, #0]
 800f41a:	602c      	str	r4, [r5, #0]
 800f41c:	e7ec      	b.n	800f3f8 <_free_r+0x28>
 800f41e:	461a      	mov	r2, r3
 800f420:	685b      	ldr	r3, [r3, #4]
 800f422:	b10b      	cbz	r3, 800f428 <_free_r+0x58>
 800f424:	42a3      	cmp	r3, r4
 800f426:	d9fa      	bls.n	800f41e <_free_r+0x4e>
 800f428:	6811      	ldr	r1, [r2, #0]
 800f42a:	1855      	adds	r5, r2, r1
 800f42c:	42a5      	cmp	r5, r4
 800f42e:	d10b      	bne.n	800f448 <_free_r+0x78>
 800f430:	6824      	ldr	r4, [r4, #0]
 800f432:	4421      	add	r1, r4
 800f434:	1854      	adds	r4, r2, r1
 800f436:	42a3      	cmp	r3, r4
 800f438:	6011      	str	r1, [r2, #0]
 800f43a:	d1dd      	bne.n	800f3f8 <_free_r+0x28>
 800f43c:	681c      	ldr	r4, [r3, #0]
 800f43e:	685b      	ldr	r3, [r3, #4]
 800f440:	6053      	str	r3, [r2, #4]
 800f442:	4421      	add	r1, r4
 800f444:	6011      	str	r1, [r2, #0]
 800f446:	e7d7      	b.n	800f3f8 <_free_r+0x28>
 800f448:	d902      	bls.n	800f450 <_free_r+0x80>
 800f44a:	230c      	movs	r3, #12
 800f44c:	6003      	str	r3, [r0, #0]
 800f44e:	e7d3      	b.n	800f3f8 <_free_r+0x28>
 800f450:	6825      	ldr	r5, [r4, #0]
 800f452:	1961      	adds	r1, r4, r5
 800f454:	428b      	cmp	r3, r1
 800f456:	bf04      	itt	eq
 800f458:	6819      	ldreq	r1, [r3, #0]
 800f45a:	685b      	ldreq	r3, [r3, #4]
 800f45c:	6063      	str	r3, [r4, #4]
 800f45e:	bf04      	itt	eq
 800f460:	1949      	addeq	r1, r1, r5
 800f462:	6021      	streq	r1, [r4, #0]
 800f464:	6054      	str	r4, [r2, #4]
 800f466:	e7c7      	b.n	800f3f8 <_free_r+0x28>
 800f468:	b003      	add	sp, #12
 800f46a:	bd30      	pop	{r4, r5, pc}
 800f46c:	200003c4 	.word	0x200003c4

0800f470 <_malloc_r>:
 800f470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f472:	1ccd      	adds	r5, r1, #3
 800f474:	f025 0503 	bic.w	r5, r5, #3
 800f478:	3508      	adds	r5, #8
 800f47a:	2d0c      	cmp	r5, #12
 800f47c:	bf38      	it	cc
 800f47e:	250c      	movcc	r5, #12
 800f480:	2d00      	cmp	r5, #0
 800f482:	4606      	mov	r6, r0
 800f484:	db01      	blt.n	800f48a <_malloc_r+0x1a>
 800f486:	42a9      	cmp	r1, r5
 800f488:	d903      	bls.n	800f492 <_malloc_r+0x22>
 800f48a:	230c      	movs	r3, #12
 800f48c:	6033      	str	r3, [r6, #0]
 800f48e:	2000      	movs	r0, #0
 800f490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f492:	f000 f8c3 	bl	800f61c <__malloc_lock>
 800f496:	4921      	ldr	r1, [pc, #132]	; (800f51c <_malloc_r+0xac>)
 800f498:	680a      	ldr	r2, [r1, #0]
 800f49a:	4614      	mov	r4, r2
 800f49c:	b99c      	cbnz	r4, 800f4c6 <_malloc_r+0x56>
 800f49e:	4f20      	ldr	r7, [pc, #128]	; (800f520 <_malloc_r+0xb0>)
 800f4a0:	683b      	ldr	r3, [r7, #0]
 800f4a2:	b923      	cbnz	r3, 800f4ae <_malloc_r+0x3e>
 800f4a4:	4621      	mov	r1, r4
 800f4a6:	4630      	mov	r0, r6
 800f4a8:	f000 f83c 	bl	800f524 <_sbrk_r>
 800f4ac:	6038      	str	r0, [r7, #0]
 800f4ae:	4629      	mov	r1, r5
 800f4b0:	4630      	mov	r0, r6
 800f4b2:	f000 f837 	bl	800f524 <_sbrk_r>
 800f4b6:	1c43      	adds	r3, r0, #1
 800f4b8:	d123      	bne.n	800f502 <_malloc_r+0x92>
 800f4ba:	230c      	movs	r3, #12
 800f4bc:	6033      	str	r3, [r6, #0]
 800f4be:	4630      	mov	r0, r6
 800f4c0:	f000 f8b2 	bl	800f628 <__malloc_unlock>
 800f4c4:	e7e3      	b.n	800f48e <_malloc_r+0x1e>
 800f4c6:	6823      	ldr	r3, [r4, #0]
 800f4c8:	1b5b      	subs	r3, r3, r5
 800f4ca:	d417      	bmi.n	800f4fc <_malloc_r+0x8c>
 800f4cc:	2b0b      	cmp	r3, #11
 800f4ce:	d903      	bls.n	800f4d8 <_malloc_r+0x68>
 800f4d0:	6023      	str	r3, [r4, #0]
 800f4d2:	441c      	add	r4, r3
 800f4d4:	6025      	str	r5, [r4, #0]
 800f4d6:	e004      	b.n	800f4e2 <_malloc_r+0x72>
 800f4d8:	6863      	ldr	r3, [r4, #4]
 800f4da:	42a2      	cmp	r2, r4
 800f4dc:	bf0c      	ite	eq
 800f4de:	600b      	streq	r3, [r1, #0]
 800f4e0:	6053      	strne	r3, [r2, #4]
 800f4e2:	4630      	mov	r0, r6
 800f4e4:	f000 f8a0 	bl	800f628 <__malloc_unlock>
 800f4e8:	f104 000b 	add.w	r0, r4, #11
 800f4ec:	1d23      	adds	r3, r4, #4
 800f4ee:	f020 0007 	bic.w	r0, r0, #7
 800f4f2:	1ac2      	subs	r2, r0, r3
 800f4f4:	d0cc      	beq.n	800f490 <_malloc_r+0x20>
 800f4f6:	1a1b      	subs	r3, r3, r0
 800f4f8:	50a3      	str	r3, [r4, r2]
 800f4fa:	e7c9      	b.n	800f490 <_malloc_r+0x20>
 800f4fc:	4622      	mov	r2, r4
 800f4fe:	6864      	ldr	r4, [r4, #4]
 800f500:	e7cc      	b.n	800f49c <_malloc_r+0x2c>
 800f502:	1cc4      	adds	r4, r0, #3
 800f504:	f024 0403 	bic.w	r4, r4, #3
 800f508:	42a0      	cmp	r0, r4
 800f50a:	d0e3      	beq.n	800f4d4 <_malloc_r+0x64>
 800f50c:	1a21      	subs	r1, r4, r0
 800f50e:	4630      	mov	r0, r6
 800f510:	f000 f808 	bl	800f524 <_sbrk_r>
 800f514:	3001      	adds	r0, #1
 800f516:	d1dd      	bne.n	800f4d4 <_malloc_r+0x64>
 800f518:	e7cf      	b.n	800f4ba <_malloc_r+0x4a>
 800f51a:	bf00      	nop
 800f51c:	200003c4 	.word	0x200003c4
 800f520:	200003c8 	.word	0x200003c8

0800f524 <_sbrk_r>:
 800f524:	b538      	push	{r3, r4, r5, lr}
 800f526:	4d06      	ldr	r5, [pc, #24]	; (800f540 <_sbrk_r+0x1c>)
 800f528:	2300      	movs	r3, #0
 800f52a:	4604      	mov	r4, r0
 800f52c:	4608      	mov	r0, r1
 800f52e:	602b      	str	r3, [r5, #0]
 800f530:	f7f4 fc6e 	bl	8003e10 <_sbrk>
 800f534:	1c43      	adds	r3, r0, #1
 800f536:	d102      	bne.n	800f53e <_sbrk_r+0x1a>
 800f538:	682b      	ldr	r3, [r5, #0]
 800f53a:	b103      	cbz	r3, 800f53e <_sbrk_r+0x1a>
 800f53c:	6023      	str	r3, [r4, #0]
 800f53e:	bd38      	pop	{r3, r4, r5, pc}
 800f540:	20000468 	.word	0x20000468

0800f544 <_raise_r>:
 800f544:	291f      	cmp	r1, #31
 800f546:	b538      	push	{r3, r4, r5, lr}
 800f548:	4604      	mov	r4, r0
 800f54a:	460d      	mov	r5, r1
 800f54c:	d904      	bls.n	800f558 <_raise_r+0x14>
 800f54e:	2316      	movs	r3, #22
 800f550:	6003      	str	r3, [r0, #0]
 800f552:	f04f 30ff 	mov.w	r0, #4294967295
 800f556:	bd38      	pop	{r3, r4, r5, pc}
 800f558:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f55a:	b112      	cbz	r2, 800f562 <_raise_r+0x1e>
 800f55c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f560:	b94b      	cbnz	r3, 800f576 <_raise_r+0x32>
 800f562:	4620      	mov	r0, r4
 800f564:	f000 f830 	bl	800f5c8 <_getpid_r>
 800f568:	462a      	mov	r2, r5
 800f56a:	4601      	mov	r1, r0
 800f56c:	4620      	mov	r0, r4
 800f56e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f572:	f000 b817 	b.w	800f5a4 <_kill_r>
 800f576:	2b01      	cmp	r3, #1
 800f578:	d00a      	beq.n	800f590 <_raise_r+0x4c>
 800f57a:	1c59      	adds	r1, r3, #1
 800f57c:	d103      	bne.n	800f586 <_raise_r+0x42>
 800f57e:	2316      	movs	r3, #22
 800f580:	6003      	str	r3, [r0, #0]
 800f582:	2001      	movs	r0, #1
 800f584:	e7e7      	b.n	800f556 <_raise_r+0x12>
 800f586:	2400      	movs	r4, #0
 800f588:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f58c:	4628      	mov	r0, r5
 800f58e:	4798      	blx	r3
 800f590:	2000      	movs	r0, #0
 800f592:	e7e0      	b.n	800f556 <_raise_r+0x12>

0800f594 <raise>:
 800f594:	4b02      	ldr	r3, [pc, #8]	; (800f5a0 <raise+0xc>)
 800f596:	4601      	mov	r1, r0
 800f598:	6818      	ldr	r0, [r3, #0]
 800f59a:	f7ff bfd3 	b.w	800f544 <_raise_r>
 800f59e:	bf00      	nop
 800f5a0:	2000001c 	.word	0x2000001c

0800f5a4 <_kill_r>:
 800f5a4:	b538      	push	{r3, r4, r5, lr}
 800f5a6:	4d07      	ldr	r5, [pc, #28]	; (800f5c4 <_kill_r+0x20>)
 800f5a8:	2300      	movs	r3, #0
 800f5aa:	4604      	mov	r4, r0
 800f5ac:	4608      	mov	r0, r1
 800f5ae:	4611      	mov	r1, r2
 800f5b0:	602b      	str	r3, [r5, #0]
 800f5b2:	f7f4 fc13 	bl	8003ddc <_kill>
 800f5b6:	1c43      	adds	r3, r0, #1
 800f5b8:	d102      	bne.n	800f5c0 <_kill_r+0x1c>
 800f5ba:	682b      	ldr	r3, [r5, #0]
 800f5bc:	b103      	cbz	r3, 800f5c0 <_kill_r+0x1c>
 800f5be:	6023      	str	r3, [r4, #0]
 800f5c0:	bd38      	pop	{r3, r4, r5, pc}
 800f5c2:	bf00      	nop
 800f5c4:	20000468 	.word	0x20000468

0800f5c8 <_getpid_r>:
 800f5c8:	f7f4 bc00 	b.w	8003dcc <_getpid>

0800f5cc <siprintf>:
 800f5cc:	b40e      	push	{r1, r2, r3}
 800f5ce:	b500      	push	{lr}
 800f5d0:	b09c      	sub	sp, #112	; 0x70
 800f5d2:	ab1d      	add	r3, sp, #116	; 0x74
 800f5d4:	9002      	str	r0, [sp, #8]
 800f5d6:	9006      	str	r0, [sp, #24]
 800f5d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f5dc:	4809      	ldr	r0, [pc, #36]	; (800f604 <siprintf+0x38>)
 800f5de:	9107      	str	r1, [sp, #28]
 800f5e0:	9104      	str	r1, [sp, #16]
 800f5e2:	4909      	ldr	r1, [pc, #36]	; (800f608 <siprintf+0x3c>)
 800f5e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800f5e8:	9105      	str	r1, [sp, #20]
 800f5ea:	6800      	ldr	r0, [r0, #0]
 800f5ec:	9301      	str	r3, [sp, #4]
 800f5ee:	a902      	add	r1, sp, #8
 800f5f0:	f000 f87c 	bl	800f6ec <_svfiprintf_r>
 800f5f4:	9b02      	ldr	r3, [sp, #8]
 800f5f6:	2200      	movs	r2, #0
 800f5f8:	701a      	strb	r2, [r3, #0]
 800f5fa:	b01c      	add	sp, #112	; 0x70
 800f5fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800f600:	b003      	add	sp, #12
 800f602:	4770      	bx	lr
 800f604:	2000001c 	.word	0x2000001c
 800f608:	ffff0208 	.word	0xffff0208

0800f60c <strcpy>:
 800f60c:	4603      	mov	r3, r0
 800f60e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f612:	f803 2b01 	strb.w	r2, [r3], #1
 800f616:	2a00      	cmp	r2, #0
 800f618:	d1f9      	bne.n	800f60e <strcpy+0x2>
 800f61a:	4770      	bx	lr

0800f61c <__malloc_lock>:
 800f61c:	4801      	ldr	r0, [pc, #4]	; (800f624 <__malloc_lock+0x8>)
 800f61e:	f000 baf9 	b.w	800fc14 <__retarget_lock_acquire_recursive>
 800f622:	bf00      	nop
 800f624:	20000470 	.word	0x20000470

0800f628 <__malloc_unlock>:
 800f628:	4801      	ldr	r0, [pc, #4]	; (800f630 <__malloc_unlock+0x8>)
 800f62a:	f000 baf4 	b.w	800fc16 <__retarget_lock_release_recursive>
 800f62e:	bf00      	nop
 800f630:	20000470 	.word	0x20000470

0800f634 <__ssputs_r>:
 800f634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f638:	688e      	ldr	r6, [r1, #8]
 800f63a:	429e      	cmp	r6, r3
 800f63c:	4682      	mov	sl, r0
 800f63e:	460c      	mov	r4, r1
 800f640:	4690      	mov	r8, r2
 800f642:	461f      	mov	r7, r3
 800f644:	d838      	bhi.n	800f6b8 <__ssputs_r+0x84>
 800f646:	898a      	ldrh	r2, [r1, #12]
 800f648:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f64c:	d032      	beq.n	800f6b4 <__ssputs_r+0x80>
 800f64e:	6825      	ldr	r5, [r4, #0]
 800f650:	6909      	ldr	r1, [r1, #16]
 800f652:	eba5 0901 	sub.w	r9, r5, r1
 800f656:	6965      	ldr	r5, [r4, #20]
 800f658:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f65c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f660:	3301      	adds	r3, #1
 800f662:	444b      	add	r3, r9
 800f664:	106d      	asrs	r5, r5, #1
 800f666:	429d      	cmp	r5, r3
 800f668:	bf38      	it	cc
 800f66a:	461d      	movcc	r5, r3
 800f66c:	0553      	lsls	r3, r2, #21
 800f66e:	d531      	bpl.n	800f6d4 <__ssputs_r+0xa0>
 800f670:	4629      	mov	r1, r5
 800f672:	f7ff fefd 	bl	800f470 <_malloc_r>
 800f676:	4606      	mov	r6, r0
 800f678:	b950      	cbnz	r0, 800f690 <__ssputs_r+0x5c>
 800f67a:	230c      	movs	r3, #12
 800f67c:	f8ca 3000 	str.w	r3, [sl]
 800f680:	89a3      	ldrh	r3, [r4, #12]
 800f682:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f686:	81a3      	strh	r3, [r4, #12]
 800f688:	f04f 30ff 	mov.w	r0, #4294967295
 800f68c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f690:	6921      	ldr	r1, [r4, #16]
 800f692:	464a      	mov	r2, r9
 800f694:	f7ff fe5c 	bl	800f350 <memcpy>
 800f698:	89a3      	ldrh	r3, [r4, #12]
 800f69a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f69e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f6a2:	81a3      	strh	r3, [r4, #12]
 800f6a4:	6126      	str	r6, [r4, #16]
 800f6a6:	6165      	str	r5, [r4, #20]
 800f6a8:	444e      	add	r6, r9
 800f6aa:	eba5 0509 	sub.w	r5, r5, r9
 800f6ae:	6026      	str	r6, [r4, #0]
 800f6b0:	60a5      	str	r5, [r4, #8]
 800f6b2:	463e      	mov	r6, r7
 800f6b4:	42be      	cmp	r6, r7
 800f6b6:	d900      	bls.n	800f6ba <__ssputs_r+0x86>
 800f6b8:	463e      	mov	r6, r7
 800f6ba:	4632      	mov	r2, r6
 800f6bc:	6820      	ldr	r0, [r4, #0]
 800f6be:	4641      	mov	r1, r8
 800f6c0:	f7ff fe54 	bl	800f36c <memmove>
 800f6c4:	68a3      	ldr	r3, [r4, #8]
 800f6c6:	6822      	ldr	r2, [r4, #0]
 800f6c8:	1b9b      	subs	r3, r3, r6
 800f6ca:	4432      	add	r2, r6
 800f6cc:	60a3      	str	r3, [r4, #8]
 800f6ce:	6022      	str	r2, [r4, #0]
 800f6d0:	2000      	movs	r0, #0
 800f6d2:	e7db      	b.n	800f68c <__ssputs_r+0x58>
 800f6d4:	462a      	mov	r2, r5
 800f6d6:	f000 fa9f 	bl	800fc18 <_realloc_r>
 800f6da:	4606      	mov	r6, r0
 800f6dc:	2800      	cmp	r0, #0
 800f6de:	d1e1      	bne.n	800f6a4 <__ssputs_r+0x70>
 800f6e0:	6921      	ldr	r1, [r4, #16]
 800f6e2:	4650      	mov	r0, sl
 800f6e4:	f7ff fe74 	bl	800f3d0 <_free_r>
 800f6e8:	e7c7      	b.n	800f67a <__ssputs_r+0x46>
	...

0800f6ec <_svfiprintf_r>:
 800f6ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6f0:	4698      	mov	r8, r3
 800f6f2:	898b      	ldrh	r3, [r1, #12]
 800f6f4:	061b      	lsls	r3, r3, #24
 800f6f6:	b09d      	sub	sp, #116	; 0x74
 800f6f8:	4607      	mov	r7, r0
 800f6fa:	460d      	mov	r5, r1
 800f6fc:	4614      	mov	r4, r2
 800f6fe:	d50e      	bpl.n	800f71e <_svfiprintf_r+0x32>
 800f700:	690b      	ldr	r3, [r1, #16]
 800f702:	b963      	cbnz	r3, 800f71e <_svfiprintf_r+0x32>
 800f704:	2140      	movs	r1, #64	; 0x40
 800f706:	f7ff feb3 	bl	800f470 <_malloc_r>
 800f70a:	6028      	str	r0, [r5, #0]
 800f70c:	6128      	str	r0, [r5, #16]
 800f70e:	b920      	cbnz	r0, 800f71a <_svfiprintf_r+0x2e>
 800f710:	230c      	movs	r3, #12
 800f712:	603b      	str	r3, [r7, #0]
 800f714:	f04f 30ff 	mov.w	r0, #4294967295
 800f718:	e0d1      	b.n	800f8be <_svfiprintf_r+0x1d2>
 800f71a:	2340      	movs	r3, #64	; 0x40
 800f71c:	616b      	str	r3, [r5, #20]
 800f71e:	2300      	movs	r3, #0
 800f720:	9309      	str	r3, [sp, #36]	; 0x24
 800f722:	2320      	movs	r3, #32
 800f724:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f728:	f8cd 800c 	str.w	r8, [sp, #12]
 800f72c:	2330      	movs	r3, #48	; 0x30
 800f72e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f8d8 <_svfiprintf_r+0x1ec>
 800f732:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f736:	f04f 0901 	mov.w	r9, #1
 800f73a:	4623      	mov	r3, r4
 800f73c:	469a      	mov	sl, r3
 800f73e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f742:	b10a      	cbz	r2, 800f748 <_svfiprintf_r+0x5c>
 800f744:	2a25      	cmp	r2, #37	; 0x25
 800f746:	d1f9      	bne.n	800f73c <_svfiprintf_r+0x50>
 800f748:	ebba 0b04 	subs.w	fp, sl, r4
 800f74c:	d00b      	beq.n	800f766 <_svfiprintf_r+0x7a>
 800f74e:	465b      	mov	r3, fp
 800f750:	4622      	mov	r2, r4
 800f752:	4629      	mov	r1, r5
 800f754:	4638      	mov	r0, r7
 800f756:	f7ff ff6d 	bl	800f634 <__ssputs_r>
 800f75a:	3001      	adds	r0, #1
 800f75c:	f000 80aa 	beq.w	800f8b4 <_svfiprintf_r+0x1c8>
 800f760:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f762:	445a      	add	r2, fp
 800f764:	9209      	str	r2, [sp, #36]	; 0x24
 800f766:	f89a 3000 	ldrb.w	r3, [sl]
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	f000 80a2 	beq.w	800f8b4 <_svfiprintf_r+0x1c8>
 800f770:	2300      	movs	r3, #0
 800f772:	f04f 32ff 	mov.w	r2, #4294967295
 800f776:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f77a:	f10a 0a01 	add.w	sl, sl, #1
 800f77e:	9304      	str	r3, [sp, #16]
 800f780:	9307      	str	r3, [sp, #28]
 800f782:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f786:	931a      	str	r3, [sp, #104]	; 0x68
 800f788:	4654      	mov	r4, sl
 800f78a:	2205      	movs	r2, #5
 800f78c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f790:	4851      	ldr	r0, [pc, #324]	; (800f8d8 <_svfiprintf_r+0x1ec>)
 800f792:	f7f0 fdbd 	bl	8000310 <memchr>
 800f796:	9a04      	ldr	r2, [sp, #16]
 800f798:	b9d8      	cbnz	r0, 800f7d2 <_svfiprintf_r+0xe6>
 800f79a:	06d0      	lsls	r0, r2, #27
 800f79c:	bf44      	itt	mi
 800f79e:	2320      	movmi	r3, #32
 800f7a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f7a4:	0711      	lsls	r1, r2, #28
 800f7a6:	bf44      	itt	mi
 800f7a8:	232b      	movmi	r3, #43	; 0x2b
 800f7aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f7ae:	f89a 3000 	ldrb.w	r3, [sl]
 800f7b2:	2b2a      	cmp	r3, #42	; 0x2a
 800f7b4:	d015      	beq.n	800f7e2 <_svfiprintf_r+0xf6>
 800f7b6:	9a07      	ldr	r2, [sp, #28]
 800f7b8:	4654      	mov	r4, sl
 800f7ba:	2000      	movs	r0, #0
 800f7bc:	f04f 0c0a 	mov.w	ip, #10
 800f7c0:	4621      	mov	r1, r4
 800f7c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f7c6:	3b30      	subs	r3, #48	; 0x30
 800f7c8:	2b09      	cmp	r3, #9
 800f7ca:	d94e      	bls.n	800f86a <_svfiprintf_r+0x17e>
 800f7cc:	b1b0      	cbz	r0, 800f7fc <_svfiprintf_r+0x110>
 800f7ce:	9207      	str	r2, [sp, #28]
 800f7d0:	e014      	b.n	800f7fc <_svfiprintf_r+0x110>
 800f7d2:	eba0 0308 	sub.w	r3, r0, r8
 800f7d6:	fa09 f303 	lsl.w	r3, r9, r3
 800f7da:	4313      	orrs	r3, r2
 800f7dc:	9304      	str	r3, [sp, #16]
 800f7de:	46a2      	mov	sl, r4
 800f7e0:	e7d2      	b.n	800f788 <_svfiprintf_r+0x9c>
 800f7e2:	9b03      	ldr	r3, [sp, #12]
 800f7e4:	1d19      	adds	r1, r3, #4
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	9103      	str	r1, [sp, #12]
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	bfbb      	ittet	lt
 800f7ee:	425b      	neglt	r3, r3
 800f7f0:	f042 0202 	orrlt.w	r2, r2, #2
 800f7f4:	9307      	strge	r3, [sp, #28]
 800f7f6:	9307      	strlt	r3, [sp, #28]
 800f7f8:	bfb8      	it	lt
 800f7fa:	9204      	strlt	r2, [sp, #16]
 800f7fc:	7823      	ldrb	r3, [r4, #0]
 800f7fe:	2b2e      	cmp	r3, #46	; 0x2e
 800f800:	d10c      	bne.n	800f81c <_svfiprintf_r+0x130>
 800f802:	7863      	ldrb	r3, [r4, #1]
 800f804:	2b2a      	cmp	r3, #42	; 0x2a
 800f806:	d135      	bne.n	800f874 <_svfiprintf_r+0x188>
 800f808:	9b03      	ldr	r3, [sp, #12]
 800f80a:	1d1a      	adds	r2, r3, #4
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	9203      	str	r2, [sp, #12]
 800f810:	2b00      	cmp	r3, #0
 800f812:	bfb8      	it	lt
 800f814:	f04f 33ff 	movlt.w	r3, #4294967295
 800f818:	3402      	adds	r4, #2
 800f81a:	9305      	str	r3, [sp, #20]
 800f81c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f8e8 <_svfiprintf_r+0x1fc>
 800f820:	7821      	ldrb	r1, [r4, #0]
 800f822:	2203      	movs	r2, #3
 800f824:	4650      	mov	r0, sl
 800f826:	f7f0 fd73 	bl	8000310 <memchr>
 800f82a:	b140      	cbz	r0, 800f83e <_svfiprintf_r+0x152>
 800f82c:	2340      	movs	r3, #64	; 0x40
 800f82e:	eba0 000a 	sub.w	r0, r0, sl
 800f832:	fa03 f000 	lsl.w	r0, r3, r0
 800f836:	9b04      	ldr	r3, [sp, #16]
 800f838:	4303      	orrs	r3, r0
 800f83a:	3401      	adds	r4, #1
 800f83c:	9304      	str	r3, [sp, #16]
 800f83e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f842:	4826      	ldr	r0, [pc, #152]	; (800f8dc <_svfiprintf_r+0x1f0>)
 800f844:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f848:	2206      	movs	r2, #6
 800f84a:	f7f0 fd61 	bl	8000310 <memchr>
 800f84e:	2800      	cmp	r0, #0
 800f850:	d038      	beq.n	800f8c4 <_svfiprintf_r+0x1d8>
 800f852:	4b23      	ldr	r3, [pc, #140]	; (800f8e0 <_svfiprintf_r+0x1f4>)
 800f854:	bb1b      	cbnz	r3, 800f89e <_svfiprintf_r+0x1b2>
 800f856:	9b03      	ldr	r3, [sp, #12]
 800f858:	3307      	adds	r3, #7
 800f85a:	f023 0307 	bic.w	r3, r3, #7
 800f85e:	3308      	adds	r3, #8
 800f860:	9303      	str	r3, [sp, #12]
 800f862:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f864:	4433      	add	r3, r6
 800f866:	9309      	str	r3, [sp, #36]	; 0x24
 800f868:	e767      	b.n	800f73a <_svfiprintf_r+0x4e>
 800f86a:	fb0c 3202 	mla	r2, ip, r2, r3
 800f86e:	460c      	mov	r4, r1
 800f870:	2001      	movs	r0, #1
 800f872:	e7a5      	b.n	800f7c0 <_svfiprintf_r+0xd4>
 800f874:	2300      	movs	r3, #0
 800f876:	3401      	adds	r4, #1
 800f878:	9305      	str	r3, [sp, #20]
 800f87a:	4619      	mov	r1, r3
 800f87c:	f04f 0c0a 	mov.w	ip, #10
 800f880:	4620      	mov	r0, r4
 800f882:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f886:	3a30      	subs	r2, #48	; 0x30
 800f888:	2a09      	cmp	r2, #9
 800f88a:	d903      	bls.n	800f894 <_svfiprintf_r+0x1a8>
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d0c5      	beq.n	800f81c <_svfiprintf_r+0x130>
 800f890:	9105      	str	r1, [sp, #20]
 800f892:	e7c3      	b.n	800f81c <_svfiprintf_r+0x130>
 800f894:	fb0c 2101 	mla	r1, ip, r1, r2
 800f898:	4604      	mov	r4, r0
 800f89a:	2301      	movs	r3, #1
 800f89c:	e7f0      	b.n	800f880 <_svfiprintf_r+0x194>
 800f89e:	ab03      	add	r3, sp, #12
 800f8a0:	9300      	str	r3, [sp, #0]
 800f8a2:	462a      	mov	r2, r5
 800f8a4:	4b0f      	ldr	r3, [pc, #60]	; (800f8e4 <_svfiprintf_r+0x1f8>)
 800f8a6:	a904      	add	r1, sp, #16
 800f8a8:	4638      	mov	r0, r7
 800f8aa:	f3af 8000 	nop.w
 800f8ae:	1c42      	adds	r2, r0, #1
 800f8b0:	4606      	mov	r6, r0
 800f8b2:	d1d6      	bne.n	800f862 <_svfiprintf_r+0x176>
 800f8b4:	89ab      	ldrh	r3, [r5, #12]
 800f8b6:	065b      	lsls	r3, r3, #25
 800f8b8:	f53f af2c 	bmi.w	800f714 <_svfiprintf_r+0x28>
 800f8bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f8be:	b01d      	add	sp, #116	; 0x74
 800f8c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8c4:	ab03      	add	r3, sp, #12
 800f8c6:	9300      	str	r3, [sp, #0]
 800f8c8:	462a      	mov	r2, r5
 800f8ca:	4b06      	ldr	r3, [pc, #24]	; (800f8e4 <_svfiprintf_r+0x1f8>)
 800f8cc:	a904      	add	r1, sp, #16
 800f8ce:	4638      	mov	r0, r7
 800f8d0:	f000 f87a 	bl	800f9c8 <_printf_i>
 800f8d4:	e7eb      	b.n	800f8ae <_svfiprintf_r+0x1c2>
 800f8d6:	bf00      	nop
 800f8d8:	0802aeb8 	.word	0x0802aeb8
 800f8dc:	0802aec2 	.word	0x0802aec2
 800f8e0:	00000000 	.word	0x00000000
 800f8e4:	0800f635 	.word	0x0800f635
 800f8e8:	0802aebe 	.word	0x0802aebe

0800f8ec <_printf_common>:
 800f8ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f8f0:	4616      	mov	r6, r2
 800f8f2:	4699      	mov	r9, r3
 800f8f4:	688a      	ldr	r2, [r1, #8]
 800f8f6:	690b      	ldr	r3, [r1, #16]
 800f8f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f8fc:	4293      	cmp	r3, r2
 800f8fe:	bfb8      	it	lt
 800f900:	4613      	movlt	r3, r2
 800f902:	6033      	str	r3, [r6, #0]
 800f904:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f908:	4607      	mov	r7, r0
 800f90a:	460c      	mov	r4, r1
 800f90c:	b10a      	cbz	r2, 800f912 <_printf_common+0x26>
 800f90e:	3301      	adds	r3, #1
 800f910:	6033      	str	r3, [r6, #0]
 800f912:	6823      	ldr	r3, [r4, #0]
 800f914:	0699      	lsls	r1, r3, #26
 800f916:	bf42      	ittt	mi
 800f918:	6833      	ldrmi	r3, [r6, #0]
 800f91a:	3302      	addmi	r3, #2
 800f91c:	6033      	strmi	r3, [r6, #0]
 800f91e:	6825      	ldr	r5, [r4, #0]
 800f920:	f015 0506 	ands.w	r5, r5, #6
 800f924:	d106      	bne.n	800f934 <_printf_common+0x48>
 800f926:	f104 0a19 	add.w	sl, r4, #25
 800f92a:	68e3      	ldr	r3, [r4, #12]
 800f92c:	6832      	ldr	r2, [r6, #0]
 800f92e:	1a9b      	subs	r3, r3, r2
 800f930:	42ab      	cmp	r3, r5
 800f932:	dc26      	bgt.n	800f982 <_printf_common+0x96>
 800f934:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f938:	1e13      	subs	r3, r2, #0
 800f93a:	6822      	ldr	r2, [r4, #0]
 800f93c:	bf18      	it	ne
 800f93e:	2301      	movne	r3, #1
 800f940:	0692      	lsls	r2, r2, #26
 800f942:	d42b      	bmi.n	800f99c <_printf_common+0xb0>
 800f944:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f948:	4649      	mov	r1, r9
 800f94a:	4638      	mov	r0, r7
 800f94c:	47c0      	blx	r8
 800f94e:	3001      	adds	r0, #1
 800f950:	d01e      	beq.n	800f990 <_printf_common+0xa4>
 800f952:	6823      	ldr	r3, [r4, #0]
 800f954:	68e5      	ldr	r5, [r4, #12]
 800f956:	6832      	ldr	r2, [r6, #0]
 800f958:	f003 0306 	and.w	r3, r3, #6
 800f95c:	2b04      	cmp	r3, #4
 800f95e:	bf08      	it	eq
 800f960:	1aad      	subeq	r5, r5, r2
 800f962:	68a3      	ldr	r3, [r4, #8]
 800f964:	6922      	ldr	r2, [r4, #16]
 800f966:	bf0c      	ite	eq
 800f968:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f96c:	2500      	movne	r5, #0
 800f96e:	4293      	cmp	r3, r2
 800f970:	bfc4      	itt	gt
 800f972:	1a9b      	subgt	r3, r3, r2
 800f974:	18ed      	addgt	r5, r5, r3
 800f976:	2600      	movs	r6, #0
 800f978:	341a      	adds	r4, #26
 800f97a:	42b5      	cmp	r5, r6
 800f97c:	d11a      	bne.n	800f9b4 <_printf_common+0xc8>
 800f97e:	2000      	movs	r0, #0
 800f980:	e008      	b.n	800f994 <_printf_common+0xa8>
 800f982:	2301      	movs	r3, #1
 800f984:	4652      	mov	r2, sl
 800f986:	4649      	mov	r1, r9
 800f988:	4638      	mov	r0, r7
 800f98a:	47c0      	blx	r8
 800f98c:	3001      	adds	r0, #1
 800f98e:	d103      	bne.n	800f998 <_printf_common+0xac>
 800f990:	f04f 30ff 	mov.w	r0, #4294967295
 800f994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f998:	3501      	adds	r5, #1
 800f99a:	e7c6      	b.n	800f92a <_printf_common+0x3e>
 800f99c:	18e1      	adds	r1, r4, r3
 800f99e:	1c5a      	adds	r2, r3, #1
 800f9a0:	2030      	movs	r0, #48	; 0x30
 800f9a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f9a6:	4422      	add	r2, r4
 800f9a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f9ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f9b0:	3302      	adds	r3, #2
 800f9b2:	e7c7      	b.n	800f944 <_printf_common+0x58>
 800f9b4:	2301      	movs	r3, #1
 800f9b6:	4622      	mov	r2, r4
 800f9b8:	4649      	mov	r1, r9
 800f9ba:	4638      	mov	r0, r7
 800f9bc:	47c0      	blx	r8
 800f9be:	3001      	adds	r0, #1
 800f9c0:	d0e6      	beq.n	800f990 <_printf_common+0xa4>
 800f9c2:	3601      	adds	r6, #1
 800f9c4:	e7d9      	b.n	800f97a <_printf_common+0x8e>
	...

0800f9c8 <_printf_i>:
 800f9c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f9cc:	460c      	mov	r4, r1
 800f9ce:	4691      	mov	r9, r2
 800f9d0:	7e27      	ldrb	r7, [r4, #24]
 800f9d2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f9d4:	2f78      	cmp	r7, #120	; 0x78
 800f9d6:	4680      	mov	r8, r0
 800f9d8:	469a      	mov	sl, r3
 800f9da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f9de:	d807      	bhi.n	800f9f0 <_printf_i+0x28>
 800f9e0:	2f62      	cmp	r7, #98	; 0x62
 800f9e2:	d80a      	bhi.n	800f9fa <_printf_i+0x32>
 800f9e4:	2f00      	cmp	r7, #0
 800f9e6:	f000 80d8 	beq.w	800fb9a <_printf_i+0x1d2>
 800f9ea:	2f58      	cmp	r7, #88	; 0x58
 800f9ec:	f000 80a3 	beq.w	800fb36 <_printf_i+0x16e>
 800f9f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f9f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f9f8:	e03a      	b.n	800fa70 <_printf_i+0xa8>
 800f9fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f9fe:	2b15      	cmp	r3, #21
 800fa00:	d8f6      	bhi.n	800f9f0 <_printf_i+0x28>
 800fa02:	a001      	add	r0, pc, #4	; (adr r0, 800fa08 <_printf_i+0x40>)
 800fa04:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800fa08:	0800fa61 	.word	0x0800fa61
 800fa0c:	0800fa75 	.word	0x0800fa75
 800fa10:	0800f9f1 	.word	0x0800f9f1
 800fa14:	0800f9f1 	.word	0x0800f9f1
 800fa18:	0800f9f1 	.word	0x0800f9f1
 800fa1c:	0800f9f1 	.word	0x0800f9f1
 800fa20:	0800fa75 	.word	0x0800fa75
 800fa24:	0800f9f1 	.word	0x0800f9f1
 800fa28:	0800f9f1 	.word	0x0800f9f1
 800fa2c:	0800f9f1 	.word	0x0800f9f1
 800fa30:	0800f9f1 	.word	0x0800f9f1
 800fa34:	0800fb81 	.word	0x0800fb81
 800fa38:	0800faa5 	.word	0x0800faa5
 800fa3c:	0800fb63 	.word	0x0800fb63
 800fa40:	0800f9f1 	.word	0x0800f9f1
 800fa44:	0800f9f1 	.word	0x0800f9f1
 800fa48:	0800fba3 	.word	0x0800fba3
 800fa4c:	0800f9f1 	.word	0x0800f9f1
 800fa50:	0800faa5 	.word	0x0800faa5
 800fa54:	0800f9f1 	.word	0x0800f9f1
 800fa58:	0800f9f1 	.word	0x0800f9f1
 800fa5c:	0800fb6b 	.word	0x0800fb6b
 800fa60:	680b      	ldr	r3, [r1, #0]
 800fa62:	1d1a      	adds	r2, r3, #4
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	600a      	str	r2, [r1, #0]
 800fa68:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800fa6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fa70:	2301      	movs	r3, #1
 800fa72:	e0a3      	b.n	800fbbc <_printf_i+0x1f4>
 800fa74:	6825      	ldr	r5, [r4, #0]
 800fa76:	6808      	ldr	r0, [r1, #0]
 800fa78:	062e      	lsls	r6, r5, #24
 800fa7a:	f100 0304 	add.w	r3, r0, #4
 800fa7e:	d50a      	bpl.n	800fa96 <_printf_i+0xce>
 800fa80:	6805      	ldr	r5, [r0, #0]
 800fa82:	600b      	str	r3, [r1, #0]
 800fa84:	2d00      	cmp	r5, #0
 800fa86:	da03      	bge.n	800fa90 <_printf_i+0xc8>
 800fa88:	232d      	movs	r3, #45	; 0x2d
 800fa8a:	426d      	negs	r5, r5
 800fa8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fa90:	485e      	ldr	r0, [pc, #376]	; (800fc0c <_printf_i+0x244>)
 800fa92:	230a      	movs	r3, #10
 800fa94:	e019      	b.n	800faca <_printf_i+0x102>
 800fa96:	f015 0f40 	tst.w	r5, #64	; 0x40
 800fa9a:	6805      	ldr	r5, [r0, #0]
 800fa9c:	600b      	str	r3, [r1, #0]
 800fa9e:	bf18      	it	ne
 800faa0:	b22d      	sxthne	r5, r5
 800faa2:	e7ef      	b.n	800fa84 <_printf_i+0xbc>
 800faa4:	680b      	ldr	r3, [r1, #0]
 800faa6:	6825      	ldr	r5, [r4, #0]
 800faa8:	1d18      	adds	r0, r3, #4
 800faaa:	6008      	str	r0, [r1, #0]
 800faac:	0628      	lsls	r0, r5, #24
 800faae:	d501      	bpl.n	800fab4 <_printf_i+0xec>
 800fab0:	681d      	ldr	r5, [r3, #0]
 800fab2:	e002      	b.n	800faba <_printf_i+0xf2>
 800fab4:	0669      	lsls	r1, r5, #25
 800fab6:	d5fb      	bpl.n	800fab0 <_printf_i+0xe8>
 800fab8:	881d      	ldrh	r5, [r3, #0]
 800faba:	4854      	ldr	r0, [pc, #336]	; (800fc0c <_printf_i+0x244>)
 800fabc:	2f6f      	cmp	r7, #111	; 0x6f
 800fabe:	bf0c      	ite	eq
 800fac0:	2308      	moveq	r3, #8
 800fac2:	230a      	movne	r3, #10
 800fac4:	2100      	movs	r1, #0
 800fac6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800faca:	6866      	ldr	r6, [r4, #4]
 800facc:	60a6      	str	r6, [r4, #8]
 800face:	2e00      	cmp	r6, #0
 800fad0:	bfa2      	ittt	ge
 800fad2:	6821      	ldrge	r1, [r4, #0]
 800fad4:	f021 0104 	bicge.w	r1, r1, #4
 800fad8:	6021      	strge	r1, [r4, #0]
 800fada:	b90d      	cbnz	r5, 800fae0 <_printf_i+0x118>
 800fadc:	2e00      	cmp	r6, #0
 800fade:	d04d      	beq.n	800fb7c <_printf_i+0x1b4>
 800fae0:	4616      	mov	r6, r2
 800fae2:	fbb5 f1f3 	udiv	r1, r5, r3
 800fae6:	fb03 5711 	mls	r7, r3, r1, r5
 800faea:	5dc7      	ldrb	r7, [r0, r7]
 800faec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800faf0:	462f      	mov	r7, r5
 800faf2:	42bb      	cmp	r3, r7
 800faf4:	460d      	mov	r5, r1
 800faf6:	d9f4      	bls.n	800fae2 <_printf_i+0x11a>
 800faf8:	2b08      	cmp	r3, #8
 800fafa:	d10b      	bne.n	800fb14 <_printf_i+0x14c>
 800fafc:	6823      	ldr	r3, [r4, #0]
 800fafe:	07df      	lsls	r7, r3, #31
 800fb00:	d508      	bpl.n	800fb14 <_printf_i+0x14c>
 800fb02:	6923      	ldr	r3, [r4, #16]
 800fb04:	6861      	ldr	r1, [r4, #4]
 800fb06:	4299      	cmp	r1, r3
 800fb08:	bfde      	ittt	le
 800fb0a:	2330      	movle	r3, #48	; 0x30
 800fb0c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800fb10:	f106 36ff 	addle.w	r6, r6, #4294967295
 800fb14:	1b92      	subs	r2, r2, r6
 800fb16:	6122      	str	r2, [r4, #16]
 800fb18:	f8cd a000 	str.w	sl, [sp]
 800fb1c:	464b      	mov	r3, r9
 800fb1e:	aa03      	add	r2, sp, #12
 800fb20:	4621      	mov	r1, r4
 800fb22:	4640      	mov	r0, r8
 800fb24:	f7ff fee2 	bl	800f8ec <_printf_common>
 800fb28:	3001      	adds	r0, #1
 800fb2a:	d14c      	bne.n	800fbc6 <_printf_i+0x1fe>
 800fb2c:	f04f 30ff 	mov.w	r0, #4294967295
 800fb30:	b004      	add	sp, #16
 800fb32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb36:	4835      	ldr	r0, [pc, #212]	; (800fc0c <_printf_i+0x244>)
 800fb38:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800fb3c:	6823      	ldr	r3, [r4, #0]
 800fb3e:	680e      	ldr	r6, [r1, #0]
 800fb40:	061f      	lsls	r7, r3, #24
 800fb42:	f856 5b04 	ldr.w	r5, [r6], #4
 800fb46:	600e      	str	r6, [r1, #0]
 800fb48:	d514      	bpl.n	800fb74 <_printf_i+0x1ac>
 800fb4a:	07d9      	lsls	r1, r3, #31
 800fb4c:	bf44      	itt	mi
 800fb4e:	f043 0320 	orrmi.w	r3, r3, #32
 800fb52:	6023      	strmi	r3, [r4, #0]
 800fb54:	b91d      	cbnz	r5, 800fb5e <_printf_i+0x196>
 800fb56:	6823      	ldr	r3, [r4, #0]
 800fb58:	f023 0320 	bic.w	r3, r3, #32
 800fb5c:	6023      	str	r3, [r4, #0]
 800fb5e:	2310      	movs	r3, #16
 800fb60:	e7b0      	b.n	800fac4 <_printf_i+0xfc>
 800fb62:	6823      	ldr	r3, [r4, #0]
 800fb64:	f043 0320 	orr.w	r3, r3, #32
 800fb68:	6023      	str	r3, [r4, #0]
 800fb6a:	2378      	movs	r3, #120	; 0x78
 800fb6c:	4828      	ldr	r0, [pc, #160]	; (800fc10 <_printf_i+0x248>)
 800fb6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fb72:	e7e3      	b.n	800fb3c <_printf_i+0x174>
 800fb74:	065e      	lsls	r6, r3, #25
 800fb76:	bf48      	it	mi
 800fb78:	b2ad      	uxthmi	r5, r5
 800fb7a:	e7e6      	b.n	800fb4a <_printf_i+0x182>
 800fb7c:	4616      	mov	r6, r2
 800fb7e:	e7bb      	b.n	800faf8 <_printf_i+0x130>
 800fb80:	680b      	ldr	r3, [r1, #0]
 800fb82:	6826      	ldr	r6, [r4, #0]
 800fb84:	6960      	ldr	r0, [r4, #20]
 800fb86:	1d1d      	adds	r5, r3, #4
 800fb88:	600d      	str	r5, [r1, #0]
 800fb8a:	0635      	lsls	r5, r6, #24
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	d501      	bpl.n	800fb94 <_printf_i+0x1cc>
 800fb90:	6018      	str	r0, [r3, #0]
 800fb92:	e002      	b.n	800fb9a <_printf_i+0x1d2>
 800fb94:	0671      	lsls	r1, r6, #25
 800fb96:	d5fb      	bpl.n	800fb90 <_printf_i+0x1c8>
 800fb98:	8018      	strh	r0, [r3, #0]
 800fb9a:	2300      	movs	r3, #0
 800fb9c:	6123      	str	r3, [r4, #16]
 800fb9e:	4616      	mov	r6, r2
 800fba0:	e7ba      	b.n	800fb18 <_printf_i+0x150>
 800fba2:	680b      	ldr	r3, [r1, #0]
 800fba4:	1d1a      	adds	r2, r3, #4
 800fba6:	600a      	str	r2, [r1, #0]
 800fba8:	681e      	ldr	r6, [r3, #0]
 800fbaa:	6862      	ldr	r2, [r4, #4]
 800fbac:	2100      	movs	r1, #0
 800fbae:	4630      	mov	r0, r6
 800fbb0:	f7f0 fbae 	bl	8000310 <memchr>
 800fbb4:	b108      	cbz	r0, 800fbba <_printf_i+0x1f2>
 800fbb6:	1b80      	subs	r0, r0, r6
 800fbb8:	6060      	str	r0, [r4, #4]
 800fbba:	6863      	ldr	r3, [r4, #4]
 800fbbc:	6123      	str	r3, [r4, #16]
 800fbbe:	2300      	movs	r3, #0
 800fbc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fbc4:	e7a8      	b.n	800fb18 <_printf_i+0x150>
 800fbc6:	6923      	ldr	r3, [r4, #16]
 800fbc8:	4632      	mov	r2, r6
 800fbca:	4649      	mov	r1, r9
 800fbcc:	4640      	mov	r0, r8
 800fbce:	47d0      	blx	sl
 800fbd0:	3001      	adds	r0, #1
 800fbd2:	d0ab      	beq.n	800fb2c <_printf_i+0x164>
 800fbd4:	6823      	ldr	r3, [r4, #0]
 800fbd6:	079b      	lsls	r3, r3, #30
 800fbd8:	d413      	bmi.n	800fc02 <_printf_i+0x23a>
 800fbda:	68e0      	ldr	r0, [r4, #12]
 800fbdc:	9b03      	ldr	r3, [sp, #12]
 800fbde:	4298      	cmp	r0, r3
 800fbe0:	bfb8      	it	lt
 800fbe2:	4618      	movlt	r0, r3
 800fbe4:	e7a4      	b.n	800fb30 <_printf_i+0x168>
 800fbe6:	2301      	movs	r3, #1
 800fbe8:	4632      	mov	r2, r6
 800fbea:	4649      	mov	r1, r9
 800fbec:	4640      	mov	r0, r8
 800fbee:	47d0      	blx	sl
 800fbf0:	3001      	adds	r0, #1
 800fbf2:	d09b      	beq.n	800fb2c <_printf_i+0x164>
 800fbf4:	3501      	adds	r5, #1
 800fbf6:	68e3      	ldr	r3, [r4, #12]
 800fbf8:	9903      	ldr	r1, [sp, #12]
 800fbfa:	1a5b      	subs	r3, r3, r1
 800fbfc:	42ab      	cmp	r3, r5
 800fbfe:	dcf2      	bgt.n	800fbe6 <_printf_i+0x21e>
 800fc00:	e7eb      	b.n	800fbda <_printf_i+0x212>
 800fc02:	2500      	movs	r5, #0
 800fc04:	f104 0619 	add.w	r6, r4, #25
 800fc08:	e7f5      	b.n	800fbf6 <_printf_i+0x22e>
 800fc0a:	bf00      	nop
 800fc0c:	0802aec9 	.word	0x0802aec9
 800fc10:	0802aeda 	.word	0x0802aeda

0800fc14 <__retarget_lock_acquire_recursive>:
 800fc14:	4770      	bx	lr

0800fc16 <__retarget_lock_release_recursive>:
 800fc16:	4770      	bx	lr

0800fc18 <_realloc_r>:
 800fc18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc1a:	4607      	mov	r7, r0
 800fc1c:	4614      	mov	r4, r2
 800fc1e:	460e      	mov	r6, r1
 800fc20:	b921      	cbnz	r1, 800fc2c <_realloc_r+0x14>
 800fc22:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800fc26:	4611      	mov	r1, r2
 800fc28:	f7ff bc22 	b.w	800f470 <_malloc_r>
 800fc2c:	b922      	cbnz	r2, 800fc38 <_realloc_r+0x20>
 800fc2e:	f7ff fbcf 	bl	800f3d0 <_free_r>
 800fc32:	4625      	mov	r5, r4
 800fc34:	4628      	mov	r0, r5
 800fc36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc38:	f000 f814 	bl	800fc64 <_malloc_usable_size_r>
 800fc3c:	42a0      	cmp	r0, r4
 800fc3e:	d20f      	bcs.n	800fc60 <_realloc_r+0x48>
 800fc40:	4621      	mov	r1, r4
 800fc42:	4638      	mov	r0, r7
 800fc44:	f7ff fc14 	bl	800f470 <_malloc_r>
 800fc48:	4605      	mov	r5, r0
 800fc4a:	2800      	cmp	r0, #0
 800fc4c:	d0f2      	beq.n	800fc34 <_realloc_r+0x1c>
 800fc4e:	4631      	mov	r1, r6
 800fc50:	4622      	mov	r2, r4
 800fc52:	f7ff fb7d 	bl	800f350 <memcpy>
 800fc56:	4631      	mov	r1, r6
 800fc58:	4638      	mov	r0, r7
 800fc5a:	f7ff fbb9 	bl	800f3d0 <_free_r>
 800fc5e:	e7e9      	b.n	800fc34 <_realloc_r+0x1c>
 800fc60:	4635      	mov	r5, r6
 800fc62:	e7e7      	b.n	800fc34 <_realloc_r+0x1c>

0800fc64 <_malloc_usable_size_r>:
 800fc64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fc68:	1f18      	subs	r0, r3, #4
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	bfbc      	itt	lt
 800fc6e:	580b      	ldrlt	r3, [r1, r0]
 800fc70:	18c0      	addlt	r0, r0, r3
 800fc72:	4770      	bx	lr

0800fc74 <_init>:
 800fc74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc76:	bf00      	nop
 800fc78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc7a:	bc08      	pop	{r3}
 800fc7c:	469e      	mov	lr, r3
 800fc7e:	4770      	bx	lr

0800fc80 <_fini>:
 800fc80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc82:	bf00      	nop
 800fc84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc86:	bc08      	pop	{r3}
 800fc88:	469e      	mov	lr, r3
 800fc8a:	4770      	bx	lr
